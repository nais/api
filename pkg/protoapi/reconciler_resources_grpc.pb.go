// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: reconciler_resources.proto

package protoapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReconcilerResources_Create_FullMethodName = "/ReconcilerResources/Create"
	ReconcilerResources_List_FullMethodName   = "/ReconcilerResources/List"
)

// ReconcilerResourcesClient is the client API for ReconcilerResources service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReconcilerResourcesClient interface {
	Create(ctx context.Context, in *CreateReconcilerResourceRequest, opts ...grpc.CallOption) (*GetReconcilerResourceResponse, error)
	List(ctx context.Context, in *ListReconcilerResourceRequest, opts ...grpc.CallOption) (*ListReconcilerResourceResponse, error)
}

type reconcilerResourcesClient struct {
	cc grpc.ClientConnInterface
}

func NewReconcilerResourcesClient(cc grpc.ClientConnInterface) ReconcilerResourcesClient {
	return &reconcilerResourcesClient{cc}
}

func (c *reconcilerResourcesClient) Create(ctx context.Context, in *CreateReconcilerResourceRequest, opts ...grpc.CallOption) (*GetReconcilerResourceResponse, error) {
	out := new(GetReconcilerResourceResponse)
	err := c.cc.Invoke(ctx, ReconcilerResources_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reconcilerResourcesClient) List(ctx context.Context, in *ListReconcilerResourceRequest, opts ...grpc.CallOption) (*ListReconcilerResourceResponse, error) {
	out := new(ListReconcilerResourceResponse)
	err := c.cc.Invoke(ctx, ReconcilerResources_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReconcilerResourcesServer is the server API for ReconcilerResources service.
// All implementations must embed UnimplementedReconcilerResourcesServer
// for forward compatibility
type ReconcilerResourcesServer interface {
	Create(context.Context, *CreateReconcilerResourceRequest) (*GetReconcilerResourceResponse, error)
	List(context.Context, *ListReconcilerResourceRequest) (*ListReconcilerResourceResponse, error)
	mustEmbedUnimplementedReconcilerResourcesServer()
}

// UnimplementedReconcilerResourcesServer must be embedded to have forward compatible implementations.
type UnimplementedReconcilerResourcesServer struct {
}

func (UnimplementedReconcilerResourcesServer) Create(context.Context, *CreateReconcilerResourceRequest) (*GetReconcilerResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedReconcilerResourcesServer) List(context.Context, *ListReconcilerResourceRequest) (*ListReconcilerResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedReconcilerResourcesServer) mustEmbedUnimplementedReconcilerResourcesServer() {}

// UnsafeReconcilerResourcesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReconcilerResourcesServer will
// result in compilation errors.
type UnsafeReconcilerResourcesServer interface {
	mustEmbedUnimplementedReconcilerResourcesServer()
}

func RegisterReconcilerResourcesServer(s grpc.ServiceRegistrar, srv ReconcilerResourcesServer) {
	s.RegisterService(&ReconcilerResources_ServiceDesc, srv)
}

func _ReconcilerResources_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReconcilerResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReconcilerResourcesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReconcilerResources_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReconcilerResourcesServer).Create(ctx, req.(*CreateReconcilerResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReconcilerResources_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReconcilerResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReconcilerResourcesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReconcilerResources_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReconcilerResourcesServer).List(ctx, req.(*ListReconcilerResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReconcilerResources_ServiceDesc is the grpc.ServiceDesc for ReconcilerResources service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReconcilerResources_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ReconcilerResources",
	HandlerType: (*ReconcilerResourcesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ReconcilerResources_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ReconcilerResources_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reconciler_resources.proto",
}
