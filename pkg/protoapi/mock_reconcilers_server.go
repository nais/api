// Code generated by mockery. DO NOT EDIT.

package protoapi

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockReconcilersServer is an autogenerated mock type for the ReconcilersServer type
type MockReconcilersServer struct {
	mock.Mock
}

type MockReconcilersServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReconcilersServer) EXPECT() *MockReconcilersServer_Expecter {
	return &MockReconcilersServer_Expecter{mock: &_m.Mock}
}

// Config provides a mock function with given fields: _a0, _a1
func (_m *MockReconcilersServer) Config(_a0 context.Context, _a1 *ConfigReconcilerRequest) (*ConfigReconcilerResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Config")
	}

	var r0 *ConfigReconcilerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ConfigReconcilerRequest) (*ConfigReconcilerResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ConfigReconcilerRequest) *ConfigReconcilerResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ConfigReconcilerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ConfigReconcilerRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReconcilersServer_Config_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Config'
type MockReconcilersServer_Config_Call struct {
	*mock.Call
}

// Config is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *ConfigReconcilerRequest
func (_e *MockReconcilersServer_Expecter) Config(_a0 interface{}, _a1 interface{}) *MockReconcilersServer_Config_Call {
	return &MockReconcilersServer_Config_Call{Call: _e.mock.On("Config", _a0, _a1)}
}

func (_c *MockReconcilersServer_Config_Call) Run(run func(_a0 context.Context, _a1 *ConfigReconcilerRequest)) *MockReconcilersServer_Config_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ConfigReconcilerRequest))
	})
	return _c
}

func (_c *MockReconcilersServer_Config_Call) Return(_a0 *ConfigReconcilerResponse, _a1 error) *MockReconcilersServer_Config_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReconcilersServer_Config_Call) RunAndReturn(run func(context.Context, *ConfigReconcilerRequest) (*ConfigReconcilerResponse, error)) *MockReconcilersServer_Config_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *MockReconcilersServer) Get(_a0 context.Context, _a1 *GetReconcilerRequest) (*GetReconcilerResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *GetReconcilerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetReconcilerRequest) (*GetReconcilerResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetReconcilerRequest) *GetReconcilerResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetReconcilerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetReconcilerRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReconcilersServer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockReconcilersServer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *GetReconcilerRequest
func (_e *MockReconcilersServer_Expecter) Get(_a0 interface{}, _a1 interface{}) *MockReconcilersServer_Get_Call {
	return &MockReconcilersServer_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *MockReconcilersServer_Get_Call) Run(run func(_a0 context.Context, _a1 *GetReconcilerRequest)) *MockReconcilersServer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetReconcilerRequest))
	})
	return _c
}

func (_c *MockReconcilersServer_Get_Call) Return(_a0 *GetReconcilerResponse, _a1 error) *MockReconcilersServer_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReconcilersServer_Get_Call) RunAndReturn(run func(context.Context, *GetReconcilerRequest) (*GetReconcilerResponse, error)) *MockReconcilersServer_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: _a0, _a1
func (_m *MockReconcilersServer) List(_a0 context.Context, _a1 *ListReconcilersRequest) (*ListReconcilersResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *ListReconcilersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ListReconcilersRequest) (*ListReconcilersResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ListReconcilersRequest) *ListReconcilersResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListReconcilersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ListReconcilersRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReconcilersServer_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockReconcilersServer_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *ListReconcilersRequest
func (_e *MockReconcilersServer_Expecter) List(_a0 interface{}, _a1 interface{}) *MockReconcilersServer_List_Call {
	return &MockReconcilersServer_List_Call{Call: _e.mock.On("List", _a0, _a1)}
}

func (_c *MockReconcilersServer_List_Call) Run(run func(_a0 context.Context, _a1 *ListReconcilersRequest)) *MockReconcilersServer_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ListReconcilersRequest))
	})
	return _c
}

func (_c *MockReconcilersServer_List_Call) Return(_a0 *ListReconcilersResponse, _a1 error) *MockReconcilersServer_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReconcilersServer_List_Call) RunAndReturn(run func(context.Context, *ListReconcilersRequest) (*ListReconcilersResponse, error)) *MockReconcilersServer_List_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: _a0, _a1
func (_m *MockReconcilersServer) Register(_a0 context.Context, _a1 *RegisterReconcilerRequest) (*RegisterReconcilerResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *RegisterReconcilerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *RegisterReconcilerRequest) (*RegisterReconcilerResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *RegisterReconcilerRequest) *RegisterReconcilerResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RegisterReconcilerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *RegisterReconcilerRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReconcilersServer_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockReconcilersServer_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *RegisterReconcilerRequest
func (_e *MockReconcilersServer_Expecter) Register(_a0 interface{}, _a1 interface{}) *MockReconcilersServer_Register_Call {
	return &MockReconcilersServer_Register_Call{Call: _e.mock.On("Register", _a0, _a1)}
}

func (_c *MockReconcilersServer_Register_Call) Run(run func(_a0 context.Context, _a1 *RegisterReconcilerRequest)) *MockReconcilersServer_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*RegisterReconcilerRequest))
	})
	return _c
}

func (_c *MockReconcilersServer_Register_Call) Return(_a0 *RegisterReconcilerResponse, _a1 error) *MockReconcilersServer_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReconcilersServer_Register_Call) RunAndReturn(run func(context.Context, *RegisterReconcilerRequest) (*RegisterReconcilerResponse, error)) *MockReconcilersServer_Register_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveReconcilerErrorForTeam provides a mock function with given fields: _a0, _a1
func (_m *MockReconcilersServer) RemoveReconcilerErrorForTeam(_a0 context.Context, _a1 *RemoveReconcilerErrorForTeamRequest) (*RemoveReconcilerErrorForTeamResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RemoveReconcilerErrorForTeam")
	}

	var r0 *RemoveReconcilerErrorForTeamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *RemoveReconcilerErrorForTeamRequest) (*RemoveReconcilerErrorForTeamResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *RemoveReconcilerErrorForTeamRequest) *RemoveReconcilerErrorForTeamResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RemoveReconcilerErrorForTeamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *RemoveReconcilerErrorForTeamRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReconcilersServer_RemoveReconcilerErrorForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveReconcilerErrorForTeam'
type MockReconcilersServer_RemoveReconcilerErrorForTeam_Call struct {
	*mock.Call
}

// RemoveReconcilerErrorForTeam is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *RemoveReconcilerErrorForTeamRequest
func (_e *MockReconcilersServer_Expecter) RemoveReconcilerErrorForTeam(_a0 interface{}, _a1 interface{}) *MockReconcilersServer_RemoveReconcilerErrorForTeam_Call {
	return &MockReconcilersServer_RemoveReconcilerErrorForTeam_Call{Call: _e.mock.On("RemoveReconcilerErrorForTeam", _a0, _a1)}
}

func (_c *MockReconcilersServer_RemoveReconcilerErrorForTeam_Call) Run(run func(_a0 context.Context, _a1 *RemoveReconcilerErrorForTeamRequest)) *MockReconcilersServer_RemoveReconcilerErrorForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*RemoveReconcilerErrorForTeamRequest))
	})
	return _c
}

func (_c *MockReconcilersServer_RemoveReconcilerErrorForTeam_Call) Return(_a0 *RemoveReconcilerErrorForTeamResponse, _a1 error) *MockReconcilersServer_RemoveReconcilerErrorForTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReconcilersServer_RemoveReconcilerErrorForTeam_Call) RunAndReturn(run func(context.Context, *RemoveReconcilerErrorForTeamRequest) (*RemoveReconcilerErrorForTeamResponse, error)) *MockReconcilersServer_RemoveReconcilerErrorForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// SetReconcilerErrorForTeam provides a mock function with given fields: _a0, _a1
func (_m *MockReconcilersServer) SetReconcilerErrorForTeam(_a0 context.Context, _a1 *SetReconcilerErrorForTeamRequest) (*SetReconcilerErrorForTeamResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SetReconcilerErrorForTeam")
	}

	var r0 *SetReconcilerErrorForTeamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *SetReconcilerErrorForTeamRequest) (*SetReconcilerErrorForTeamResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *SetReconcilerErrorForTeamRequest) *SetReconcilerErrorForTeamResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SetReconcilerErrorForTeamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *SetReconcilerErrorForTeamRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReconcilersServer_SetReconcilerErrorForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetReconcilerErrorForTeam'
type MockReconcilersServer_SetReconcilerErrorForTeam_Call struct {
	*mock.Call
}

// SetReconcilerErrorForTeam is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *SetReconcilerErrorForTeamRequest
func (_e *MockReconcilersServer_Expecter) SetReconcilerErrorForTeam(_a0 interface{}, _a1 interface{}) *MockReconcilersServer_SetReconcilerErrorForTeam_Call {
	return &MockReconcilersServer_SetReconcilerErrorForTeam_Call{Call: _e.mock.On("SetReconcilerErrorForTeam", _a0, _a1)}
}

func (_c *MockReconcilersServer_SetReconcilerErrorForTeam_Call) Run(run func(_a0 context.Context, _a1 *SetReconcilerErrorForTeamRequest)) *MockReconcilersServer_SetReconcilerErrorForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*SetReconcilerErrorForTeamRequest))
	})
	return _c
}

func (_c *MockReconcilersServer_SetReconcilerErrorForTeam_Call) Return(_a0 *SetReconcilerErrorForTeamResponse, _a1 error) *MockReconcilersServer_SetReconcilerErrorForTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReconcilersServer_SetReconcilerErrorForTeam_Call) RunAndReturn(run func(context.Context, *SetReconcilerErrorForTeamRequest) (*SetReconcilerErrorForTeamResponse, error)) *MockReconcilersServer_SetReconcilerErrorForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// SuccessfulTeamSync provides a mock function with given fields: _a0, _a1
func (_m *MockReconcilersServer) SuccessfulTeamSync(_a0 context.Context, _a1 *SuccessfulTeamSyncRequest) (*SuccessfulTeamSyncResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SuccessfulTeamSync")
	}

	var r0 *SuccessfulTeamSyncResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *SuccessfulTeamSyncRequest) (*SuccessfulTeamSyncResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *SuccessfulTeamSyncRequest) *SuccessfulTeamSyncResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SuccessfulTeamSyncResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *SuccessfulTeamSyncRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReconcilersServer_SuccessfulTeamSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuccessfulTeamSync'
type MockReconcilersServer_SuccessfulTeamSync_Call struct {
	*mock.Call
}

// SuccessfulTeamSync is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *SuccessfulTeamSyncRequest
func (_e *MockReconcilersServer_Expecter) SuccessfulTeamSync(_a0 interface{}, _a1 interface{}) *MockReconcilersServer_SuccessfulTeamSync_Call {
	return &MockReconcilersServer_SuccessfulTeamSync_Call{Call: _e.mock.On("SuccessfulTeamSync", _a0, _a1)}
}

func (_c *MockReconcilersServer_SuccessfulTeamSync_Call) Run(run func(_a0 context.Context, _a1 *SuccessfulTeamSyncRequest)) *MockReconcilersServer_SuccessfulTeamSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*SuccessfulTeamSyncRequest))
	})
	return _c
}

func (_c *MockReconcilersServer_SuccessfulTeamSync_Call) Return(_a0 *SuccessfulTeamSyncResponse, _a1 error) *MockReconcilersServer_SuccessfulTeamSync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReconcilersServer_SuccessfulTeamSync_Call) RunAndReturn(run func(context.Context, *SuccessfulTeamSyncRequest) (*SuccessfulTeamSyncResponse, error)) *MockReconcilersServer_SuccessfulTeamSync_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedReconcilersServer provides a mock function with given fields:
func (_m *MockReconcilersServer) mustEmbedUnimplementedReconcilersServer() {
	_m.Called()
}

// MockReconcilersServer_mustEmbedUnimplementedReconcilersServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedReconcilersServer'
type MockReconcilersServer_mustEmbedUnimplementedReconcilersServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedReconcilersServer is a helper method to define mock.On call
func (_e *MockReconcilersServer_Expecter) mustEmbedUnimplementedReconcilersServer() *MockReconcilersServer_mustEmbedUnimplementedReconcilersServer_Call {
	return &MockReconcilersServer_mustEmbedUnimplementedReconcilersServer_Call{Call: _e.mock.On("mustEmbedUnimplementedReconcilersServer")}
}

func (_c *MockReconcilersServer_mustEmbedUnimplementedReconcilersServer_Call) Run(run func()) *MockReconcilersServer_mustEmbedUnimplementedReconcilersServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReconcilersServer_mustEmbedUnimplementedReconcilersServer_Call) Return() *MockReconcilersServer_mustEmbedUnimplementedReconcilersServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockReconcilersServer_mustEmbedUnimplementedReconcilersServer_Call) RunAndReturn(run func()) *MockReconcilersServer_mustEmbedUnimplementedReconcilersServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReconcilersServer creates a new instance of MockReconcilersServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReconcilersServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReconcilersServer {
	mock := &MockReconcilersServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
