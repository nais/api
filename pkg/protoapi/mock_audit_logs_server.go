// Code generated by mockery. DO NOT EDIT.

package protoapi

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockAuditLogsServer is an autogenerated mock type for the AuditLogsServer type
type MockAuditLogsServer struct {
	mock.Mock
}

type MockAuditLogsServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuditLogsServer) EXPECT() *MockAuditLogsServer_Expecter {
	return &MockAuditLogsServer_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *MockAuditLogsServer) Create(_a0 context.Context, _a1 *CreateAuditLogsRequest) (*CreateAuditLogsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *CreateAuditLogsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateAuditLogsRequest) (*CreateAuditLogsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateAuditLogsRequest) *CreateAuditLogsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateAuditLogsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateAuditLogsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuditLogsServer_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAuditLogsServer_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *CreateAuditLogsRequest
func (_e *MockAuditLogsServer_Expecter) Create(_a0 interface{}, _a1 interface{}) *MockAuditLogsServer_Create_Call {
	return &MockAuditLogsServer_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *MockAuditLogsServer_Create_Call) Run(run func(_a0 context.Context, _a1 *CreateAuditLogsRequest)) *MockAuditLogsServer_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*CreateAuditLogsRequest))
	})
	return _c
}

func (_c *MockAuditLogsServer_Create_Call) Return(_a0 *CreateAuditLogsResponse, _a1 error) *MockAuditLogsServer_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuditLogsServer_Create_Call) RunAndReturn(run func(context.Context, *CreateAuditLogsRequest) (*CreateAuditLogsResponse, error)) *MockAuditLogsServer_Create_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedAuditLogsServer provides a mock function with given fields:
func (_m *MockAuditLogsServer) mustEmbedUnimplementedAuditLogsServer() {
	_m.Called()
}

// MockAuditLogsServer_mustEmbedUnimplementedAuditLogsServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedAuditLogsServer'
type MockAuditLogsServer_mustEmbedUnimplementedAuditLogsServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedAuditLogsServer is a helper method to define mock.On call
func (_e *MockAuditLogsServer_Expecter) mustEmbedUnimplementedAuditLogsServer() *MockAuditLogsServer_mustEmbedUnimplementedAuditLogsServer_Call {
	return &MockAuditLogsServer_mustEmbedUnimplementedAuditLogsServer_Call{Call: _e.mock.On("mustEmbedUnimplementedAuditLogsServer")}
}

func (_c *MockAuditLogsServer_mustEmbedUnimplementedAuditLogsServer_Call) Run(run func()) *MockAuditLogsServer_mustEmbedUnimplementedAuditLogsServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAuditLogsServer_mustEmbedUnimplementedAuditLogsServer_Call) Return() *MockAuditLogsServer_mustEmbedUnimplementedAuditLogsServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAuditLogsServer_mustEmbedUnimplementedAuditLogsServer_Call) RunAndReturn(run func()) *MockAuditLogsServer_mustEmbedUnimplementedAuditLogsServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuditLogsServer creates a new instance of MockAuditLogsServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuditLogsServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuditLogsServer {
	mock := &MockAuditLogsServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
