// Code generated by mockery. DO NOT EDIT.

package protoapi

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockReconcilerResourcesServer is an autogenerated mock type for the ReconcilerResourcesServer type
type MockReconcilerResourcesServer struct {
	mock.Mock
}

type MockReconcilerResourcesServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReconcilerResourcesServer) EXPECT() *MockReconcilerResourcesServer_Expecter {
	return &MockReconcilerResourcesServer_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *MockReconcilerResourcesServer) Delete(_a0 context.Context, _a1 *DeleteReconcilerResourcesRequest) (*DeleteReconcilerResourcesResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *DeleteReconcilerResourcesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteReconcilerResourcesRequest) (*DeleteReconcilerResourcesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteReconcilerResourcesRequest) *DeleteReconcilerResourcesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteReconcilerResourcesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *DeleteReconcilerResourcesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReconcilerResourcesServer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockReconcilerResourcesServer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *DeleteReconcilerResourcesRequest
func (_e *MockReconcilerResourcesServer_Expecter) Delete(_a0 interface{}, _a1 interface{}) *MockReconcilerResourcesServer_Delete_Call {
	return &MockReconcilerResourcesServer_Delete_Call{Call: _e.mock.On("Delete", _a0, _a1)}
}

func (_c *MockReconcilerResourcesServer_Delete_Call) Run(run func(_a0 context.Context, _a1 *DeleteReconcilerResourcesRequest)) *MockReconcilerResourcesServer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*DeleteReconcilerResourcesRequest))
	})
	return _c
}

func (_c *MockReconcilerResourcesServer_Delete_Call) Return(_a0 *DeleteReconcilerResourcesResponse, _a1 error) *MockReconcilerResourcesServer_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReconcilerResourcesServer_Delete_Call) RunAndReturn(run func(context.Context, *DeleteReconcilerResourcesRequest) (*DeleteReconcilerResourcesResponse, error)) *MockReconcilerResourcesServer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: _a0, _a1
func (_m *MockReconcilerResourcesServer) List(_a0 context.Context, _a1 *ListReconcilerResourcesRequest) (*ListReconcilerResourcesResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *ListReconcilerResourcesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ListReconcilerResourcesRequest) (*ListReconcilerResourcesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ListReconcilerResourcesRequest) *ListReconcilerResourcesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListReconcilerResourcesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ListReconcilerResourcesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReconcilerResourcesServer_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockReconcilerResourcesServer_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *ListReconcilerResourcesRequest
func (_e *MockReconcilerResourcesServer_Expecter) List(_a0 interface{}, _a1 interface{}) *MockReconcilerResourcesServer_List_Call {
	return &MockReconcilerResourcesServer_List_Call{Call: _e.mock.On("List", _a0, _a1)}
}

func (_c *MockReconcilerResourcesServer_List_Call) Run(run func(_a0 context.Context, _a1 *ListReconcilerResourcesRequest)) *MockReconcilerResourcesServer_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ListReconcilerResourcesRequest))
	})
	return _c
}

func (_c *MockReconcilerResourcesServer_List_Call) Return(_a0 *ListReconcilerResourcesResponse, _a1 error) *MockReconcilerResourcesServer_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReconcilerResourcesServer_List_Call) RunAndReturn(run func(context.Context, *ListReconcilerResourcesRequest) (*ListReconcilerResourcesResponse, error)) *MockReconcilerResourcesServer_List_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: _a0, _a1
func (_m *MockReconcilerResourcesServer) Save(_a0 context.Context, _a1 *SaveReconcilerResourceRequest) (*SaveReconcilerResourceResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *SaveReconcilerResourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *SaveReconcilerResourceRequest) (*SaveReconcilerResourceResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *SaveReconcilerResourceRequest) *SaveReconcilerResourceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SaveReconcilerResourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *SaveReconcilerResourceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReconcilerResourcesServer_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockReconcilerResourcesServer_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *SaveReconcilerResourceRequest
func (_e *MockReconcilerResourcesServer_Expecter) Save(_a0 interface{}, _a1 interface{}) *MockReconcilerResourcesServer_Save_Call {
	return &MockReconcilerResourcesServer_Save_Call{Call: _e.mock.On("Save", _a0, _a1)}
}

func (_c *MockReconcilerResourcesServer_Save_Call) Run(run func(_a0 context.Context, _a1 *SaveReconcilerResourceRequest)) *MockReconcilerResourcesServer_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*SaveReconcilerResourceRequest))
	})
	return _c
}

func (_c *MockReconcilerResourcesServer_Save_Call) Return(_a0 *SaveReconcilerResourceResponse, _a1 error) *MockReconcilerResourcesServer_Save_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReconcilerResourcesServer_Save_Call) RunAndReturn(run func(context.Context, *SaveReconcilerResourceRequest) (*SaveReconcilerResourceResponse, error)) *MockReconcilerResourcesServer_Save_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedReconcilerResourcesServer provides a mock function with given fields:
func (_m *MockReconcilerResourcesServer) mustEmbedUnimplementedReconcilerResourcesServer() {
	_m.Called()
}

// MockReconcilerResourcesServer_mustEmbedUnimplementedReconcilerResourcesServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedReconcilerResourcesServer'
type MockReconcilerResourcesServer_mustEmbedUnimplementedReconcilerResourcesServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedReconcilerResourcesServer is a helper method to define mock.On call
func (_e *MockReconcilerResourcesServer_Expecter) mustEmbedUnimplementedReconcilerResourcesServer() *MockReconcilerResourcesServer_mustEmbedUnimplementedReconcilerResourcesServer_Call {
	return &MockReconcilerResourcesServer_mustEmbedUnimplementedReconcilerResourcesServer_Call{Call: _e.mock.On("mustEmbedUnimplementedReconcilerResourcesServer")}
}

func (_c *MockReconcilerResourcesServer_mustEmbedUnimplementedReconcilerResourcesServer_Call) Run(run func()) *MockReconcilerResourcesServer_mustEmbedUnimplementedReconcilerResourcesServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReconcilerResourcesServer_mustEmbedUnimplementedReconcilerResourcesServer_Call) Return() *MockReconcilerResourcesServer_mustEmbedUnimplementedReconcilerResourcesServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockReconcilerResourcesServer_mustEmbedUnimplementedReconcilerResourcesServer_Call) RunAndReturn(run func()) *MockReconcilerResourcesServer_mustEmbedUnimplementedReconcilerResourcesServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReconcilerResourcesServer creates a new instance of MockReconcilerResourcesServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReconcilerResourcesServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReconcilerResourcesServer {
	mock := &MockReconcilerResourcesServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
