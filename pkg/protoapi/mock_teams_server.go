// Code generated by mockery. DO NOT EDIT.

package protoapi

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockTeamsServer is an autogenerated mock type for the TeamsServer type
type MockTeamsServer struct {
	mock.Mock
}

type MockTeamsServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTeamsServer) EXPECT() *MockTeamsServer_Expecter {
	return &MockTeamsServer_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *MockTeamsServer) Delete(_a0 context.Context, _a1 *DeleteTeamRequest) (*DeleteTeamResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *DeleteTeamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteTeamRequest) (*DeleteTeamResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteTeamRequest) *DeleteTeamResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteTeamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *DeleteTeamRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTeamsServer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTeamsServer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *DeleteTeamRequest
func (_e *MockTeamsServer_Expecter) Delete(_a0 interface{}, _a1 interface{}) *MockTeamsServer_Delete_Call {
	return &MockTeamsServer_Delete_Call{Call: _e.mock.On("Delete", _a0, _a1)}
}

func (_c *MockTeamsServer_Delete_Call) Run(run func(_a0 context.Context, _a1 *DeleteTeamRequest)) *MockTeamsServer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*DeleteTeamRequest))
	})
	return _c
}

func (_c *MockTeamsServer_Delete_Call) Return(_a0 *DeleteTeamResponse, _a1 error) *MockTeamsServer_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeamsServer_Delete_Call) RunAndReturn(run func(context.Context, *DeleteTeamRequest) (*DeleteTeamResponse, error)) *MockTeamsServer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Environments provides a mock function with given fields: _a0, _a1
func (_m *MockTeamsServer) Environments(_a0 context.Context, _a1 *ListTeamEnvironmentsRequest) (*ListTeamEnvironmentsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Environments")
	}

	var r0 *ListTeamEnvironmentsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ListTeamEnvironmentsRequest) (*ListTeamEnvironmentsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ListTeamEnvironmentsRequest) *ListTeamEnvironmentsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListTeamEnvironmentsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ListTeamEnvironmentsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTeamsServer_Environments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Environments'
type MockTeamsServer_Environments_Call struct {
	*mock.Call
}

// Environments is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *ListTeamEnvironmentsRequest
func (_e *MockTeamsServer_Expecter) Environments(_a0 interface{}, _a1 interface{}) *MockTeamsServer_Environments_Call {
	return &MockTeamsServer_Environments_Call{Call: _e.mock.On("Environments", _a0, _a1)}
}

func (_c *MockTeamsServer_Environments_Call) Run(run func(_a0 context.Context, _a1 *ListTeamEnvironmentsRequest)) *MockTeamsServer_Environments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ListTeamEnvironmentsRequest))
	})
	return _c
}

func (_c *MockTeamsServer_Environments_Call) Return(_a0 *ListTeamEnvironmentsResponse, _a1 error) *MockTeamsServer_Environments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeamsServer_Environments_Call) RunAndReturn(run func(context.Context, *ListTeamEnvironmentsRequest) (*ListTeamEnvironmentsResponse, error)) *MockTeamsServer_Environments_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *MockTeamsServer) Get(_a0 context.Context, _a1 *GetTeamRequest) (*GetTeamResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *GetTeamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetTeamRequest) (*GetTeamResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetTeamRequest) *GetTeamResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTeamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetTeamRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTeamsServer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockTeamsServer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *GetTeamRequest
func (_e *MockTeamsServer_Expecter) Get(_a0 interface{}, _a1 interface{}) *MockTeamsServer_Get_Call {
	return &MockTeamsServer_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *MockTeamsServer_Get_Call) Run(run func(_a0 context.Context, _a1 *GetTeamRequest)) *MockTeamsServer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetTeamRequest))
	})
	return _c
}

func (_c *MockTeamsServer_Get_Call) Return(_a0 *GetTeamResponse, _a1 error) *MockTeamsServer_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeamsServer_Get_Call) RunAndReturn(run func(context.Context, *GetTeamRequest) (*GetTeamResponse, error)) *MockTeamsServer_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: _a0, _a1
func (_m *MockTeamsServer) List(_a0 context.Context, _a1 *ListTeamsRequest) (*ListTeamsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *ListTeamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ListTeamsRequest) (*ListTeamsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ListTeamsRequest) *ListTeamsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListTeamsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ListTeamsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTeamsServer_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockTeamsServer_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *ListTeamsRequest
func (_e *MockTeamsServer_Expecter) List(_a0 interface{}, _a1 interface{}) *MockTeamsServer_List_Call {
	return &MockTeamsServer_List_Call{Call: _e.mock.On("List", _a0, _a1)}
}

func (_c *MockTeamsServer_List_Call) Run(run func(_a0 context.Context, _a1 *ListTeamsRequest)) *MockTeamsServer_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ListTeamsRequest))
	})
	return _c
}

func (_c *MockTeamsServer_List_Call) Return(_a0 *ListTeamsResponse, _a1 error) *MockTeamsServer_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeamsServer_List_Call) RunAndReturn(run func(context.Context, *ListTeamsRequest) (*ListTeamsResponse, error)) *MockTeamsServer_List_Call {
	_c.Call.Return(run)
	return _c
}

// Members provides a mock function with given fields: _a0, _a1
func (_m *MockTeamsServer) Members(_a0 context.Context, _a1 *ListTeamMembersRequest) (*ListTeamMembersResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Members")
	}

	var r0 *ListTeamMembersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ListTeamMembersRequest) (*ListTeamMembersResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ListTeamMembersRequest) *ListTeamMembersResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListTeamMembersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ListTeamMembersRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTeamsServer_Members_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Members'
type MockTeamsServer_Members_Call struct {
	*mock.Call
}

// Members is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *ListTeamMembersRequest
func (_e *MockTeamsServer_Expecter) Members(_a0 interface{}, _a1 interface{}) *MockTeamsServer_Members_Call {
	return &MockTeamsServer_Members_Call{Call: _e.mock.On("Members", _a0, _a1)}
}

func (_c *MockTeamsServer_Members_Call) Run(run func(_a0 context.Context, _a1 *ListTeamMembersRequest)) *MockTeamsServer_Members_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ListTeamMembersRequest))
	})
	return _c
}

func (_c *MockTeamsServer_Members_Call) Return(_a0 *ListTeamMembersResponse, _a1 error) *MockTeamsServer_Members_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeamsServer_Members_Call) RunAndReturn(run func(context.Context, *ListTeamMembersRequest) (*ListTeamMembersResponse, error)) *MockTeamsServer_Members_Call {
	_c.Call.Return(run)
	return _c
}

// SetTeamExternalReferences provides a mock function with given fields: _a0, _a1
func (_m *MockTeamsServer) SetTeamExternalReferences(_a0 context.Context, _a1 *SetTeamExternalReferencesRequest) (*SetTeamExternalReferencesResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SetTeamExternalReferences")
	}

	var r0 *SetTeamExternalReferencesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *SetTeamExternalReferencesRequest) (*SetTeamExternalReferencesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *SetTeamExternalReferencesRequest) *SetTeamExternalReferencesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SetTeamExternalReferencesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *SetTeamExternalReferencesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTeamsServer_SetTeamExternalReferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTeamExternalReferences'
type MockTeamsServer_SetTeamExternalReferences_Call struct {
	*mock.Call
}

// SetTeamExternalReferences is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *SetTeamExternalReferencesRequest
func (_e *MockTeamsServer_Expecter) SetTeamExternalReferences(_a0 interface{}, _a1 interface{}) *MockTeamsServer_SetTeamExternalReferences_Call {
	return &MockTeamsServer_SetTeamExternalReferences_Call{Call: _e.mock.On("SetTeamExternalReferences", _a0, _a1)}
}

func (_c *MockTeamsServer_SetTeamExternalReferences_Call) Run(run func(_a0 context.Context, _a1 *SetTeamExternalReferencesRequest)) *MockTeamsServer_SetTeamExternalReferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*SetTeamExternalReferencesRequest))
	})
	return _c
}

func (_c *MockTeamsServer_SetTeamExternalReferences_Call) Return(_a0 *SetTeamExternalReferencesResponse, _a1 error) *MockTeamsServer_SetTeamExternalReferences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeamsServer_SetTeamExternalReferences_Call) RunAndReturn(run func(context.Context, *SetTeamExternalReferencesRequest) (*SetTeamExternalReferencesResponse, error)) *MockTeamsServer_SetTeamExternalReferences_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedTeamsServer provides a mock function with given fields:
func (_m *MockTeamsServer) mustEmbedUnimplementedTeamsServer() {
	_m.Called()
}

// MockTeamsServer_mustEmbedUnimplementedTeamsServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedTeamsServer'
type MockTeamsServer_mustEmbedUnimplementedTeamsServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedTeamsServer is a helper method to define mock.On call
func (_e *MockTeamsServer_Expecter) mustEmbedUnimplementedTeamsServer() *MockTeamsServer_mustEmbedUnimplementedTeamsServer_Call {
	return &MockTeamsServer_mustEmbedUnimplementedTeamsServer_Call{Call: _e.mock.On("mustEmbedUnimplementedTeamsServer")}
}

func (_c *MockTeamsServer_mustEmbedUnimplementedTeamsServer_Call) Run(run func()) *MockTeamsServer_mustEmbedUnimplementedTeamsServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTeamsServer_mustEmbedUnimplementedTeamsServer_Call) Return() *MockTeamsServer_mustEmbedUnimplementedTeamsServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTeamsServer_mustEmbedUnimplementedTeamsServer_Call) RunAndReturn(run func()) *MockTeamsServer_mustEmbedUnimplementedTeamsServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTeamsServer creates a new instance of MockTeamsServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTeamsServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTeamsServer {
	mock := &MockTeamsServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
