// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: deployments.proto

package protoapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Deployments_CreateDeployment_FullMethodName            = "/nais.api.protobuf.Deployments/CreateDeployment"
	Deployments_CreateDeploymentK8SResource_FullMethodName = "/nais.api.protobuf.Deployments/CreateDeploymentK8sResource"
	Deployments_CreateDeploymentStatus_FullMethodName      = "/nais.api.protobuf.Deployments/CreateDeploymentStatus"
)

// DeploymentsClient is the client API for Deployments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeploymentsClient interface {
	CreateDeployment(ctx context.Context, in *CreateDeploymentRequest, opts ...grpc.CallOption) (*CreateDeploymentResponse, error)
	CreateDeploymentK8SResource(ctx context.Context, in *CreateDeploymentK8SResourceRequest, opts ...grpc.CallOption) (*CreateDeploymentK8SResourceResponse, error)
	CreateDeploymentStatus(ctx context.Context, in *CreateDeploymentStatusRequest, opts ...grpc.CallOption) (*CreateDeploymentStatusResponse, error)
}

type deploymentsClient struct {
	cc grpc.ClientConnInterface
}

func NewDeploymentsClient(cc grpc.ClientConnInterface) DeploymentsClient {
	return &deploymentsClient{cc}
}

func (c *deploymentsClient) CreateDeployment(ctx context.Context, in *CreateDeploymentRequest, opts ...grpc.CallOption) (*CreateDeploymentResponse, error) {
	out := new(CreateDeploymentResponse)
	err := c.cc.Invoke(ctx, Deployments_CreateDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentsClient) CreateDeploymentK8SResource(ctx context.Context, in *CreateDeploymentK8SResourceRequest, opts ...grpc.CallOption) (*CreateDeploymentK8SResourceResponse, error) {
	out := new(CreateDeploymentK8SResourceResponse)
	err := c.cc.Invoke(ctx, Deployments_CreateDeploymentK8SResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentsClient) CreateDeploymentStatus(ctx context.Context, in *CreateDeploymentStatusRequest, opts ...grpc.CallOption) (*CreateDeploymentStatusResponse, error) {
	out := new(CreateDeploymentStatusResponse)
	err := c.cc.Invoke(ctx, Deployments_CreateDeploymentStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeploymentsServer is the server API for Deployments service.
// All implementations must embed UnimplementedDeploymentsServer
// for forward compatibility
type DeploymentsServer interface {
	CreateDeployment(context.Context, *CreateDeploymentRequest) (*CreateDeploymentResponse, error)
	CreateDeploymentK8SResource(context.Context, *CreateDeploymentK8SResourceRequest) (*CreateDeploymentK8SResourceResponse, error)
	CreateDeploymentStatus(context.Context, *CreateDeploymentStatusRequest) (*CreateDeploymentStatusResponse, error)
	mustEmbedUnimplementedDeploymentsServer()
}

// UnimplementedDeploymentsServer must be embedded to have forward compatible implementations.
type UnimplementedDeploymentsServer struct {
}

func (UnimplementedDeploymentsServer) CreateDeployment(context.Context, *CreateDeploymentRequest) (*CreateDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeployment not implemented")
}
func (UnimplementedDeploymentsServer) CreateDeploymentK8SResource(context.Context, *CreateDeploymentK8SResourceRequest) (*CreateDeploymentK8SResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeploymentK8SResource not implemented")
}
func (UnimplementedDeploymentsServer) CreateDeploymentStatus(context.Context, *CreateDeploymentStatusRequest) (*CreateDeploymentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeploymentStatus not implemented")
}
func (UnimplementedDeploymentsServer) mustEmbedUnimplementedDeploymentsServer() {}

// UnsafeDeploymentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeploymentsServer will
// result in compilation errors.
type UnsafeDeploymentsServer interface {
	mustEmbedUnimplementedDeploymentsServer()
}

func RegisterDeploymentsServer(s grpc.ServiceRegistrar, srv DeploymentsServer) {
	s.RegisterService(&Deployments_ServiceDesc, srv)
}

func _Deployments_CreateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentsServer).CreateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deployments_CreateDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentsServer).CreateDeployment(ctx, req.(*CreateDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployments_CreateDeploymentK8SResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeploymentK8SResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentsServer).CreateDeploymentK8SResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deployments_CreateDeploymentK8SResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentsServer).CreateDeploymentK8SResource(ctx, req.(*CreateDeploymentK8SResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployments_CreateDeploymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeploymentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentsServer).CreateDeploymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deployments_CreateDeploymentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentsServer).CreateDeploymentStatus(ctx, req.(*CreateDeploymentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Deployments_ServiceDesc is the grpc.ServiceDesc for Deployments service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Deployments_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nais.api.protobuf.Deployments",
	HandlerType: (*DeploymentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeployment",
			Handler:    _Deployments_CreateDeployment_Handler,
		},
		{
			MethodName: "CreateDeploymentK8sResource",
			Handler:    _Deployments_CreateDeploymentK8SResource_Handler,
		},
		{
			MethodName: "CreateDeploymentStatus",
			Handler:    _Deployments_CreateDeploymentStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deployments.proto",
}
