// Code generated by mockery. DO NOT EDIT.

package protoapi

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockUsersServer is an autogenerated mock type for the UsersServer type
type MockUsersServer struct {
	mock.Mock
}

type MockUsersServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsersServer) EXPECT() *MockUsersServer_Expecter {
	return &MockUsersServer_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *MockUsersServer) Get(_a0 context.Context, _a1 *GetUserRequest) (*GetUserResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *GetUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetUserRequest) (*GetUserResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetUserRequest) *GetUserResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetUserRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersServer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockUsersServer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *GetUserRequest
func (_e *MockUsersServer_Expecter) Get(_a0 interface{}, _a1 interface{}) *MockUsersServer_Get_Call {
	return &MockUsersServer_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *MockUsersServer_Get_Call) Run(run func(_a0 context.Context, _a1 *GetUserRequest)) *MockUsersServer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetUserRequest))
	})
	return _c
}

func (_c *MockUsersServer_Get_Call) Return(_a0 *GetUserResponse, _a1 error) *MockUsersServer_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersServer_Get_Call) RunAndReturn(run func(context.Context, *GetUserRequest) (*GetUserResponse, error)) *MockUsersServer_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: _a0, _a1
func (_m *MockUsersServer) List(_a0 context.Context, _a1 *ListUsersRequest) (*ListUsersResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *ListUsersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ListUsersRequest) (*ListUsersResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ListUsersRequest) *ListUsersResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListUsersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ListUsersRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersServer_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockUsersServer_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *ListUsersRequest
func (_e *MockUsersServer_Expecter) List(_a0 interface{}, _a1 interface{}) *MockUsersServer_List_Call {
	return &MockUsersServer_List_Call{Call: _e.mock.On("List", _a0, _a1)}
}

func (_c *MockUsersServer_List_Call) Run(run func(_a0 context.Context, _a1 *ListUsersRequest)) *MockUsersServer_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ListUsersRequest))
	})
	return _c
}

func (_c *MockUsersServer_List_Call) Return(_a0 *ListUsersResponse, _a1 error) *MockUsersServer_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersServer_List_Call) RunAndReturn(run func(context.Context, *ListUsersRequest) (*ListUsersResponse, error)) *MockUsersServer_List_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedUsersServer provides a mock function with no fields
func (_m *MockUsersServer) mustEmbedUnimplementedUsersServer() {
	_m.Called()
}

// MockUsersServer_mustEmbedUnimplementedUsersServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedUsersServer'
type MockUsersServer_mustEmbedUnimplementedUsersServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedUsersServer is a helper method to define mock.On call
func (_e *MockUsersServer_Expecter) mustEmbedUnimplementedUsersServer() *MockUsersServer_mustEmbedUnimplementedUsersServer_Call {
	return &MockUsersServer_mustEmbedUnimplementedUsersServer_Call{Call: _e.mock.On("mustEmbedUnimplementedUsersServer")}
}

func (_c *MockUsersServer_mustEmbedUnimplementedUsersServer_Call) Run(run func()) *MockUsersServer_mustEmbedUnimplementedUsersServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUsersServer_mustEmbedUnimplementedUsersServer_Call) Return() *MockUsersServer_mustEmbedUnimplementedUsersServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUsersServer_mustEmbedUnimplementedUsersServer_Call) RunAndReturn(run func()) *MockUsersServer_mustEmbedUnimplementedUsersServer_Call {
	_c.Run(run)
	return _c
}

// NewMockUsersServer creates a new instance of MockUsersServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsersServer(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockUsersServer {
	mock := &MockUsersServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
