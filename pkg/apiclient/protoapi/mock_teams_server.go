// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package protoapi

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockTeamsServer creates a new instance of MockTeamsServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTeamsServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTeamsServer {
	mock := &MockTeamsServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTeamsServer is an autogenerated mock type for the TeamsServer type
type MockTeamsServer struct {
	mock.Mock
}

type MockTeamsServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTeamsServer) EXPECT() *MockTeamsServer_Expecter {
	return &MockTeamsServer_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockTeamsServer
func (_mock *MockTeamsServer) Delete(context1 context.Context, deleteTeamRequest *DeleteTeamRequest) (*DeleteTeamResponse, error) {
	ret := _mock.Called(context1, deleteTeamRequest)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *DeleteTeamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *DeleteTeamRequest) (*DeleteTeamResponse, error)); ok {
		return returnFunc(context1, deleteTeamRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *DeleteTeamRequest) *DeleteTeamResponse); ok {
		r0 = returnFunc(context1, deleteTeamRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteTeamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *DeleteTeamRequest) error); ok {
		r1 = returnFunc(context1, deleteTeamRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTeamsServer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTeamsServer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - context1 context.Context
//   - deleteTeamRequest *DeleteTeamRequest
func (_e *MockTeamsServer_Expecter) Delete(context1 interface{}, deleteTeamRequest interface{}) *MockTeamsServer_Delete_Call {
	return &MockTeamsServer_Delete_Call{Call: _e.mock.On("Delete", context1, deleteTeamRequest)}
}

func (_c *MockTeamsServer_Delete_Call) Run(run func(context1 context.Context, deleteTeamRequest *DeleteTeamRequest)) *MockTeamsServer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *DeleteTeamRequest
		if args[1] != nil {
			arg1 = args[1].(*DeleteTeamRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTeamsServer_Delete_Call) Return(deleteTeamResponse *DeleteTeamResponse, err error) *MockTeamsServer_Delete_Call {
	_c.Call.Return(deleteTeamResponse, err)
	return _c
}

func (_c *MockTeamsServer_Delete_Call) RunAndReturn(run func(context1 context.Context, deleteTeamRequest *DeleteTeamRequest) (*DeleteTeamResponse, error)) *MockTeamsServer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Environments provides a mock function for the type MockTeamsServer
func (_mock *MockTeamsServer) Environments(context1 context.Context, listTeamEnvironmentsRequest *ListTeamEnvironmentsRequest) (*ListTeamEnvironmentsResponse, error) {
	ret := _mock.Called(context1, listTeamEnvironmentsRequest)

	if len(ret) == 0 {
		panic("no return value specified for Environments")
	}

	var r0 *ListTeamEnvironmentsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ListTeamEnvironmentsRequest) (*ListTeamEnvironmentsResponse, error)); ok {
		return returnFunc(context1, listTeamEnvironmentsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ListTeamEnvironmentsRequest) *ListTeamEnvironmentsResponse); ok {
		r0 = returnFunc(context1, listTeamEnvironmentsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListTeamEnvironmentsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ListTeamEnvironmentsRequest) error); ok {
		r1 = returnFunc(context1, listTeamEnvironmentsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTeamsServer_Environments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Environments'
type MockTeamsServer_Environments_Call struct {
	*mock.Call
}

// Environments is a helper method to define mock.On call
//   - context1 context.Context
//   - listTeamEnvironmentsRequest *ListTeamEnvironmentsRequest
func (_e *MockTeamsServer_Expecter) Environments(context1 interface{}, listTeamEnvironmentsRequest interface{}) *MockTeamsServer_Environments_Call {
	return &MockTeamsServer_Environments_Call{Call: _e.mock.On("Environments", context1, listTeamEnvironmentsRequest)}
}

func (_c *MockTeamsServer_Environments_Call) Run(run func(context1 context.Context, listTeamEnvironmentsRequest *ListTeamEnvironmentsRequest)) *MockTeamsServer_Environments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ListTeamEnvironmentsRequest
		if args[1] != nil {
			arg1 = args[1].(*ListTeamEnvironmentsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTeamsServer_Environments_Call) Return(listTeamEnvironmentsResponse *ListTeamEnvironmentsResponse, err error) *MockTeamsServer_Environments_Call {
	_c.Call.Return(listTeamEnvironmentsResponse, err)
	return _c
}

func (_c *MockTeamsServer_Environments_Call) RunAndReturn(run func(context1 context.Context, listTeamEnvironmentsRequest *ListTeamEnvironmentsRequest) (*ListTeamEnvironmentsResponse, error)) *MockTeamsServer_Environments_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockTeamsServer
func (_mock *MockTeamsServer) Get(context1 context.Context, getTeamRequest *GetTeamRequest) (*GetTeamResponse, error) {
	ret := _mock.Called(context1, getTeamRequest)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *GetTeamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetTeamRequest) (*GetTeamResponse, error)); ok {
		return returnFunc(context1, getTeamRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetTeamRequest) *GetTeamResponse); ok {
		r0 = returnFunc(context1, getTeamRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTeamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *GetTeamRequest) error); ok {
		r1 = returnFunc(context1, getTeamRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTeamsServer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockTeamsServer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - context1 context.Context
//   - getTeamRequest *GetTeamRequest
func (_e *MockTeamsServer_Expecter) Get(context1 interface{}, getTeamRequest interface{}) *MockTeamsServer_Get_Call {
	return &MockTeamsServer_Get_Call{Call: _e.mock.On("Get", context1, getTeamRequest)}
}

func (_c *MockTeamsServer_Get_Call) Run(run func(context1 context.Context, getTeamRequest *GetTeamRequest)) *MockTeamsServer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *GetTeamRequest
		if args[1] != nil {
			arg1 = args[1].(*GetTeamRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTeamsServer_Get_Call) Return(getTeamResponse *GetTeamResponse, err error) *MockTeamsServer_Get_Call {
	_c.Call.Return(getTeamResponse, err)
	return _c
}

func (_c *MockTeamsServer_Get_Call) RunAndReturn(run func(context1 context.Context, getTeamRequest *GetTeamRequest) (*GetTeamResponse, error)) *MockTeamsServer_Get_Call {
	_c.Call.Return(run)
	return _c
}

// IsRepositoryAuthorized provides a mock function for the type MockTeamsServer
func (_mock *MockTeamsServer) IsRepositoryAuthorized(context1 context.Context, isRepositoryAuthorizedRequest *IsRepositoryAuthorizedRequest) (*IsRepositoryAuthorizedResponse, error) {
	ret := _mock.Called(context1, isRepositoryAuthorizedRequest)

	if len(ret) == 0 {
		panic("no return value specified for IsRepositoryAuthorized")
	}

	var r0 *IsRepositoryAuthorizedResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *IsRepositoryAuthorizedRequest) (*IsRepositoryAuthorizedResponse, error)); ok {
		return returnFunc(context1, isRepositoryAuthorizedRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *IsRepositoryAuthorizedRequest) *IsRepositoryAuthorizedResponse); ok {
		r0 = returnFunc(context1, isRepositoryAuthorizedRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IsRepositoryAuthorizedResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *IsRepositoryAuthorizedRequest) error); ok {
		r1 = returnFunc(context1, isRepositoryAuthorizedRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTeamsServer_IsRepositoryAuthorized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRepositoryAuthorized'
type MockTeamsServer_IsRepositoryAuthorized_Call struct {
	*mock.Call
}

// IsRepositoryAuthorized is a helper method to define mock.On call
//   - context1 context.Context
//   - isRepositoryAuthorizedRequest *IsRepositoryAuthorizedRequest
func (_e *MockTeamsServer_Expecter) IsRepositoryAuthorized(context1 interface{}, isRepositoryAuthorizedRequest interface{}) *MockTeamsServer_IsRepositoryAuthorized_Call {
	return &MockTeamsServer_IsRepositoryAuthorized_Call{Call: _e.mock.On("IsRepositoryAuthorized", context1, isRepositoryAuthorizedRequest)}
}

func (_c *MockTeamsServer_IsRepositoryAuthorized_Call) Run(run func(context1 context.Context, isRepositoryAuthorizedRequest *IsRepositoryAuthorizedRequest)) *MockTeamsServer_IsRepositoryAuthorized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *IsRepositoryAuthorizedRequest
		if args[1] != nil {
			arg1 = args[1].(*IsRepositoryAuthorizedRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTeamsServer_IsRepositoryAuthorized_Call) Return(isRepositoryAuthorizedResponse *IsRepositoryAuthorizedResponse, err error) *MockTeamsServer_IsRepositoryAuthorized_Call {
	_c.Call.Return(isRepositoryAuthorizedResponse, err)
	return _c
}

func (_c *MockTeamsServer_IsRepositoryAuthorized_Call) RunAndReturn(run func(context1 context.Context, isRepositoryAuthorizedRequest *IsRepositoryAuthorizedRequest) (*IsRepositoryAuthorizedResponse, error)) *MockTeamsServer_IsRepositoryAuthorized_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockTeamsServer
func (_mock *MockTeamsServer) List(context1 context.Context, listTeamsRequest *ListTeamsRequest) (*ListTeamsResponse, error) {
	ret := _mock.Called(context1, listTeamsRequest)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *ListTeamsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ListTeamsRequest) (*ListTeamsResponse, error)); ok {
		return returnFunc(context1, listTeamsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ListTeamsRequest) *ListTeamsResponse); ok {
		r0 = returnFunc(context1, listTeamsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListTeamsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ListTeamsRequest) error); ok {
		r1 = returnFunc(context1, listTeamsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTeamsServer_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockTeamsServer_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - context1 context.Context
//   - listTeamsRequest *ListTeamsRequest
func (_e *MockTeamsServer_Expecter) List(context1 interface{}, listTeamsRequest interface{}) *MockTeamsServer_List_Call {
	return &MockTeamsServer_List_Call{Call: _e.mock.On("List", context1, listTeamsRequest)}
}

func (_c *MockTeamsServer_List_Call) Run(run func(context1 context.Context, listTeamsRequest *ListTeamsRequest)) *MockTeamsServer_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ListTeamsRequest
		if args[1] != nil {
			arg1 = args[1].(*ListTeamsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTeamsServer_List_Call) Return(listTeamsResponse *ListTeamsResponse, err error) *MockTeamsServer_List_Call {
	_c.Call.Return(listTeamsResponse, err)
	return _c
}

func (_c *MockTeamsServer_List_Call) RunAndReturn(run func(context1 context.Context, listTeamsRequest *ListTeamsRequest) (*ListTeamsResponse, error)) *MockTeamsServer_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAuthorizedRepositories provides a mock function for the type MockTeamsServer
func (_mock *MockTeamsServer) ListAuthorizedRepositories(context1 context.Context, listAuthorizedRepositoriesRequest *ListAuthorizedRepositoriesRequest) (*ListAuthorizedRepositoriesResponse, error) {
	ret := _mock.Called(context1, listAuthorizedRepositoriesRequest)

	if len(ret) == 0 {
		panic("no return value specified for ListAuthorizedRepositories")
	}

	var r0 *ListAuthorizedRepositoriesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ListAuthorizedRepositoriesRequest) (*ListAuthorizedRepositoriesResponse, error)); ok {
		return returnFunc(context1, listAuthorizedRepositoriesRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ListAuthorizedRepositoriesRequest) *ListAuthorizedRepositoriesResponse); ok {
		r0 = returnFunc(context1, listAuthorizedRepositoriesRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListAuthorizedRepositoriesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ListAuthorizedRepositoriesRequest) error); ok {
		r1 = returnFunc(context1, listAuthorizedRepositoriesRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTeamsServer_ListAuthorizedRepositories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAuthorizedRepositories'
type MockTeamsServer_ListAuthorizedRepositories_Call struct {
	*mock.Call
}

// ListAuthorizedRepositories is a helper method to define mock.On call
//   - context1 context.Context
//   - listAuthorizedRepositoriesRequest *ListAuthorizedRepositoriesRequest
func (_e *MockTeamsServer_Expecter) ListAuthorizedRepositories(context1 interface{}, listAuthorizedRepositoriesRequest interface{}) *MockTeamsServer_ListAuthorizedRepositories_Call {
	return &MockTeamsServer_ListAuthorizedRepositories_Call{Call: _e.mock.On("ListAuthorizedRepositories", context1, listAuthorizedRepositoriesRequest)}
}

func (_c *MockTeamsServer_ListAuthorizedRepositories_Call) Run(run func(context1 context.Context, listAuthorizedRepositoriesRequest *ListAuthorizedRepositoriesRequest)) *MockTeamsServer_ListAuthorizedRepositories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ListAuthorizedRepositoriesRequest
		if args[1] != nil {
			arg1 = args[1].(*ListAuthorizedRepositoriesRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTeamsServer_ListAuthorizedRepositories_Call) Return(listAuthorizedRepositoriesResponse *ListAuthorizedRepositoriesResponse, err error) *MockTeamsServer_ListAuthorizedRepositories_Call {
	_c.Call.Return(listAuthorizedRepositoriesResponse, err)
	return _c
}

func (_c *MockTeamsServer_ListAuthorizedRepositories_Call) RunAndReturn(run func(context1 context.Context, listAuthorizedRepositoriesRequest *ListAuthorizedRepositoriesRequest) (*ListAuthorizedRepositoriesResponse, error)) *MockTeamsServer_ListAuthorizedRepositories_Call {
	_c.Call.Return(run)
	return _c
}

// Members provides a mock function for the type MockTeamsServer
func (_mock *MockTeamsServer) Members(context1 context.Context, listTeamMembersRequest *ListTeamMembersRequest) (*ListTeamMembersResponse, error) {
	ret := _mock.Called(context1, listTeamMembersRequest)

	if len(ret) == 0 {
		panic("no return value specified for Members")
	}

	var r0 *ListTeamMembersResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ListTeamMembersRequest) (*ListTeamMembersResponse, error)); ok {
		return returnFunc(context1, listTeamMembersRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ListTeamMembersRequest) *ListTeamMembersResponse); ok {
		r0 = returnFunc(context1, listTeamMembersRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListTeamMembersResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ListTeamMembersRequest) error); ok {
		r1 = returnFunc(context1, listTeamMembersRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTeamsServer_Members_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Members'
type MockTeamsServer_Members_Call struct {
	*mock.Call
}

// Members is a helper method to define mock.On call
//   - context1 context.Context
//   - listTeamMembersRequest *ListTeamMembersRequest
func (_e *MockTeamsServer_Expecter) Members(context1 interface{}, listTeamMembersRequest interface{}) *MockTeamsServer_Members_Call {
	return &MockTeamsServer_Members_Call{Call: _e.mock.On("Members", context1, listTeamMembersRequest)}
}

func (_c *MockTeamsServer_Members_Call) Run(run func(context1 context.Context, listTeamMembersRequest *ListTeamMembersRequest)) *MockTeamsServer_Members_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ListTeamMembersRequest
		if args[1] != nil {
			arg1 = args[1].(*ListTeamMembersRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTeamsServer_Members_Call) Return(listTeamMembersResponse *ListTeamMembersResponse, err error) *MockTeamsServer_Members_Call {
	_c.Call.Return(listTeamMembersResponse, err)
	return _c
}

func (_c *MockTeamsServer_Members_Call) RunAndReturn(run func(context1 context.Context, listTeamMembersRequest *ListTeamMembersRequest) (*ListTeamMembersResponse, error)) *MockTeamsServer_Members_Call {
	_c.Call.Return(run)
	return _c
}

// SetTeamEnvironmentExternalReferences provides a mock function for the type MockTeamsServer
func (_mock *MockTeamsServer) SetTeamEnvironmentExternalReferences(context1 context.Context, setTeamEnvironmentExternalReferencesRequest *SetTeamEnvironmentExternalReferencesRequest) (*SetTeamEnvironmentExternalReferencesResponse, error) {
	ret := _mock.Called(context1, setTeamEnvironmentExternalReferencesRequest)

	if len(ret) == 0 {
		panic("no return value specified for SetTeamEnvironmentExternalReferences")
	}

	var r0 *SetTeamEnvironmentExternalReferencesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *SetTeamEnvironmentExternalReferencesRequest) (*SetTeamEnvironmentExternalReferencesResponse, error)); ok {
		return returnFunc(context1, setTeamEnvironmentExternalReferencesRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *SetTeamEnvironmentExternalReferencesRequest) *SetTeamEnvironmentExternalReferencesResponse); ok {
		r0 = returnFunc(context1, setTeamEnvironmentExternalReferencesRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SetTeamEnvironmentExternalReferencesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *SetTeamEnvironmentExternalReferencesRequest) error); ok {
		r1 = returnFunc(context1, setTeamEnvironmentExternalReferencesRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTeamsServer_SetTeamEnvironmentExternalReferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTeamEnvironmentExternalReferences'
type MockTeamsServer_SetTeamEnvironmentExternalReferences_Call struct {
	*mock.Call
}

// SetTeamEnvironmentExternalReferences is a helper method to define mock.On call
//   - context1 context.Context
//   - setTeamEnvironmentExternalReferencesRequest *SetTeamEnvironmentExternalReferencesRequest
func (_e *MockTeamsServer_Expecter) SetTeamEnvironmentExternalReferences(context1 interface{}, setTeamEnvironmentExternalReferencesRequest interface{}) *MockTeamsServer_SetTeamEnvironmentExternalReferences_Call {
	return &MockTeamsServer_SetTeamEnvironmentExternalReferences_Call{Call: _e.mock.On("SetTeamEnvironmentExternalReferences", context1, setTeamEnvironmentExternalReferencesRequest)}
}

func (_c *MockTeamsServer_SetTeamEnvironmentExternalReferences_Call) Run(run func(context1 context.Context, setTeamEnvironmentExternalReferencesRequest *SetTeamEnvironmentExternalReferencesRequest)) *MockTeamsServer_SetTeamEnvironmentExternalReferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *SetTeamEnvironmentExternalReferencesRequest
		if args[1] != nil {
			arg1 = args[1].(*SetTeamEnvironmentExternalReferencesRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTeamsServer_SetTeamEnvironmentExternalReferences_Call) Return(setTeamEnvironmentExternalReferencesResponse *SetTeamEnvironmentExternalReferencesResponse, err error) *MockTeamsServer_SetTeamEnvironmentExternalReferences_Call {
	_c.Call.Return(setTeamEnvironmentExternalReferencesResponse, err)
	return _c
}

func (_c *MockTeamsServer_SetTeamEnvironmentExternalReferences_Call) RunAndReturn(run func(context1 context.Context, setTeamEnvironmentExternalReferencesRequest *SetTeamEnvironmentExternalReferencesRequest) (*SetTeamEnvironmentExternalReferencesResponse, error)) *MockTeamsServer_SetTeamEnvironmentExternalReferences_Call {
	_c.Call.Return(run)
	return _c
}

// SetTeamExternalReferences provides a mock function for the type MockTeamsServer
func (_mock *MockTeamsServer) SetTeamExternalReferences(context1 context.Context, setTeamExternalReferencesRequest *SetTeamExternalReferencesRequest) (*SetTeamExternalReferencesResponse, error) {
	ret := _mock.Called(context1, setTeamExternalReferencesRequest)

	if len(ret) == 0 {
		panic("no return value specified for SetTeamExternalReferences")
	}

	var r0 *SetTeamExternalReferencesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *SetTeamExternalReferencesRequest) (*SetTeamExternalReferencesResponse, error)); ok {
		return returnFunc(context1, setTeamExternalReferencesRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *SetTeamExternalReferencesRequest) *SetTeamExternalReferencesResponse); ok {
		r0 = returnFunc(context1, setTeamExternalReferencesRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SetTeamExternalReferencesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *SetTeamExternalReferencesRequest) error); ok {
		r1 = returnFunc(context1, setTeamExternalReferencesRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTeamsServer_SetTeamExternalReferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTeamExternalReferences'
type MockTeamsServer_SetTeamExternalReferences_Call struct {
	*mock.Call
}

// SetTeamExternalReferences is a helper method to define mock.On call
//   - context1 context.Context
//   - setTeamExternalReferencesRequest *SetTeamExternalReferencesRequest
func (_e *MockTeamsServer_Expecter) SetTeamExternalReferences(context1 interface{}, setTeamExternalReferencesRequest interface{}) *MockTeamsServer_SetTeamExternalReferences_Call {
	return &MockTeamsServer_SetTeamExternalReferences_Call{Call: _e.mock.On("SetTeamExternalReferences", context1, setTeamExternalReferencesRequest)}
}

func (_c *MockTeamsServer_SetTeamExternalReferences_Call) Run(run func(context1 context.Context, setTeamExternalReferencesRequest *SetTeamExternalReferencesRequest)) *MockTeamsServer_SetTeamExternalReferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *SetTeamExternalReferencesRequest
		if args[1] != nil {
			arg1 = args[1].(*SetTeamExternalReferencesRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTeamsServer_SetTeamExternalReferences_Call) Return(setTeamExternalReferencesResponse *SetTeamExternalReferencesResponse, err error) *MockTeamsServer_SetTeamExternalReferences_Call {
	_c.Call.Return(setTeamExternalReferencesResponse, err)
	return _c
}

func (_c *MockTeamsServer_SetTeamExternalReferences_Call) RunAndReturn(run func(context1 context.Context, setTeamExternalReferencesRequest *SetTeamExternalReferencesRequest) (*SetTeamExternalReferencesResponse, error)) *MockTeamsServer_SetTeamExternalReferences_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedTeamsServer provides a mock function for the type MockTeamsServer
func (_mock *MockTeamsServer) mustEmbedUnimplementedTeamsServer() {
	_mock.Called()
	return
}

// MockTeamsServer_mustEmbedUnimplementedTeamsServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedTeamsServer'
type MockTeamsServer_mustEmbedUnimplementedTeamsServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedTeamsServer is a helper method to define mock.On call
func (_e *MockTeamsServer_Expecter) mustEmbedUnimplementedTeamsServer() *MockTeamsServer_mustEmbedUnimplementedTeamsServer_Call {
	return &MockTeamsServer_mustEmbedUnimplementedTeamsServer_Call{Call: _e.mock.On("mustEmbedUnimplementedTeamsServer")}
}

func (_c *MockTeamsServer_mustEmbedUnimplementedTeamsServer_Call) Run(run func()) *MockTeamsServer_mustEmbedUnimplementedTeamsServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTeamsServer_mustEmbedUnimplementedTeamsServer_Call) Return() *MockTeamsServer_mustEmbedUnimplementedTeamsServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTeamsServer_mustEmbedUnimplementedTeamsServer_Call) RunAndReturn(run func()) *MockTeamsServer_mustEmbedUnimplementedTeamsServer_Call {
	_c.Run(run)
	return _c
}
