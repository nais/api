// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package protoapi

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockReconcilersServer creates a new instance of MockReconcilersServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReconcilersServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReconcilersServer {
	mock := &MockReconcilersServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockReconcilersServer is an autogenerated mock type for the ReconcilersServer type
type MockReconcilersServer struct {
	mock.Mock
}

type MockReconcilersServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReconcilersServer) EXPECT() *MockReconcilersServer_Expecter {
	return &MockReconcilersServer_Expecter{mock: &_m.Mock}
}

// Config provides a mock function for the type MockReconcilersServer
func (_mock *MockReconcilersServer) Config(context1 context.Context, configReconcilerRequest *ConfigReconcilerRequest) (*ConfigReconcilerResponse, error) {
	ret := _mock.Called(context1, configReconcilerRequest)

	if len(ret) == 0 {
		panic("no return value specified for Config")
	}

	var r0 *ConfigReconcilerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ConfigReconcilerRequest) (*ConfigReconcilerResponse, error)); ok {
		return returnFunc(context1, configReconcilerRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ConfigReconcilerRequest) *ConfigReconcilerResponse); ok {
		r0 = returnFunc(context1, configReconcilerRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ConfigReconcilerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ConfigReconcilerRequest) error); ok {
		r1 = returnFunc(context1, configReconcilerRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReconcilersServer_Config_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Config'
type MockReconcilersServer_Config_Call struct {
	*mock.Call
}

// Config is a helper method to define mock.On call
//   - context1 context.Context
//   - configReconcilerRequest *ConfigReconcilerRequest
func (_e *MockReconcilersServer_Expecter) Config(context1 interface{}, configReconcilerRequest interface{}) *MockReconcilersServer_Config_Call {
	return &MockReconcilersServer_Config_Call{Call: _e.mock.On("Config", context1, configReconcilerRequest)}
}

func (_c *MockReconcilersServer_Config_Call) Run(run func(context1 context.Context, configReconcilerRequest *ConfigReconcilerRequest)) *MockReconcilersServer_Config_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ConfigReconcilerRequest
		if args[1] != nil {
			arg1 = args[1].(*ConfigReconcilerRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockReconcilersServer_Config_Call) Return(configReconcilerResponse *ConfigReconcilerResponse, err error) *MockReconcilersServer_Config_Call {
	_c.Call.Return(configReconcilerResponse, err)
	return _c
}

func (_c *MockReconcilersServer_Config_Call) RunAndReturn(run func(context1 context.Context, configReconcilerRequest *ConfigReconcilerRequest) (*ConfigReconcilerResponse, error)) *MockReconcilersServer_Config_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteState provides a mock function for the type MockReconcilersServer
func (_mock *MockReconcilersServer) DeleteState(context1 context.Context, deleteReconcilerStateRequest *DeleteReconcilerStateRequest) (*DeleteReconcilerStateResponse, error) {
	ret := _mock.Called(context1, deleteReconcilerStateRequest)

	if len(ret) == 0 {
		panic("no return value specified for DeleteState")
	}

	var r0 *DeleteReconcilerStateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *DeleteReconcilerStateRequest) (*DeleteReconcilerStateResponse, error)); ok {
		return returnFunc(context1, deleteReconcilerStateRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *DeleteReconcilerStateRequest) *DeleteReconcilerStateResponse); ok {
		r0 = returnFunc(context1, deleteReconcilerStateRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteReconcilerStateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *DeleteReconcilerStateRequest) error); ok {
		r1 = returnFunc(context1, deleteReconcilerStateRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReconcilersServer_DeleteState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteState'
type MockReconcilersServer_DeleteState_Call struct {
	*mock.Call
}

// DeleteState is a helper method to define mock.On call
//   - context1 context.Context
//   - deleteReconcilerStateRequest *DeleteReconcilerStateRequest
func (_e *MockReconcilersServer_Expecter) DeleteState(context1 interface{}, deleteReconcilerStateRequest interface{}) *MockReconcilersServer_DeleteState_Call {
	return &MockReconcilersServer_DeleteState_Call{Call: _e.mock.On("DeleteState", context1, deleteReconcilerStateRequest)}
}

func (_c *MockReconcilersServer_DeleteState_Call) Run(run func(context1 context.Context, deleteReconcilerStateRequest *DeleteReconcilerStateRequest)) *MockReconcilersServer_DeleteState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *DeleteReconcilerStateRequest
		if args[1] != nil {
			arg1 = args[1].(*DeleteReconcilerStateRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockReconcilersServer_DeleteState_Call) Return(deleteReconcilerStateResponse *DeleteReconcilerStateResponse, err error) *MockReconcilersServer_DeleteState_Call {
	_c.Call.Return(deleteReconcilerStateResponse, err)
	return _c
}

func (_c *MockReconcilersServer_DeleteState_Call) RunAndReturn(run func(context1 context.Context, deleteReconcilerStateRequest *DeleteReconcilerStateRequest) (*DeleteReconcilerStateResponse, error)) *MockReconcilersServer_DeleteState_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockReconcilersServer
func (_mock *MockReconcilersServer) Get(context1 context.Context, getReconcilerRequest *GetReconcilerRequest) (*GetReconcilerResponse, error) {
	ret := _mock.Called(context1, getReconcilerRequest)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *GetReconcilerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetReconcilerRequest) (*GetReconcilerResponse, error)); ok {
		return returnFunc(context1, getReconcilerRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetReconcilerRequest) *GetReconcilerResponse); ok {
		r0 = returnFunc(context1, getReconcilerRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetReconcilerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *GetReconcilerRequest) error); ok {
		r1 = returnFunc(context1, getReconcilerRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReconcilersServer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockReconcilersServer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - context1 context.Context
//   - getReconcilerRequest *GetReconcilerRequest
func (_e *MockReconcilersServer_Expecter) Get(context1 interface{}, getReconcilerRequest interface{}) *MockReconcilersServer_Get_Call {
	return &MockReconcilersServer_Get_Call{Call: _e.mock.On("Get", context1, getReconcilerRequest)}
}

func (_c *MockReconcilersServer_Get_Call) Run(run func(context1 context.Context, getReconcilerRequest *GetReconcilerRequest)) *MockReconcilersServer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *GetReconcilerRequest
		if args[1] != nil {
			arg1 = args[1].(*GetReconcilerRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockReconcilersServer_Get_Call) Return(getReconcilerResponse *GetReconcilerResponse, err error) *MockReconcilersServer_Get_Call {
	_c.Call.Return(getReconcilerResponse, err)
	return _c
}

func (_c *MockReconcilersServer_Get_Call) RunAndReturn(run func(context1 context.Context, getReconcilerRequest *GetReconcilerRequest) (*GetReconcilerResponse, error)) *MockReconcilersServer_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockReconcilersServer
func (_mock *MockReconcilersServer) List(context1 context.Context, listReconcilersRequest *ListReconcilersRequest) (*ListReconcilersResponse, error) {
	ret := _mock.Called(context1, listReconcilersRequest)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *ListReconcilersResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ListReconcilersRequest) (*ListReconcilersResponse, error)); ok {
		return returnFunc(context1, listReconcilersRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ListReconcilersRequest) *ListReconcilersResponse); ok {
		r0 = returnFunc(context1, listReconcilersRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListReconcilersResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ListReconcilersRequest) error); ok {
		r1 = returnFunc(context1, listReconcilersRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReconcilersServer_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockReconcilersServer_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - context1 context.Context
//   - listReconcilersRequest *ListReconcilersRequest
func (_e *MockReconcilersServer_Expecter) List(context1 interface{}, listReconcilersRequest interface{}) *MockReconcilersServer_List_Call {
	return &MockReconcilersServer_List_Call{Call: _e.mock.On("List", context1, listReconcilersRequest)}
}

func (_c *MockReconcilersServer_List_Call) Run(run func(context1 context.Context, listReconcilersRequest *ListReconcilersRequest)) *MockReconcilersServer_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ListReconcilersRequest
		if args[1] != nil {
			arg1 = args[1].(*ListReconcilersRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockReconcilersServer_List_Call) Return(listReconcilersResponse *ListReconcilersResponse, err error) *MockReconcilersServer_List_Call {
	_c.Call.Return(listReconcilersResponse, err)
	return _c
}

func (_c *MockReconcilersServer_List_Call) RunAndReturn(run func(context1 context.Context, listReconcilersRequest *ListReconcilersRequest) (*ListReconcilersResponse, error)) *MockReconcilersServer_List_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function for the type MockReconcilersServer
func (_mock *MockReconcilersServer) Register(context1 context.Context, registerReconcilerRequest *RegisterReconcilerRequest) (*RegisterReconcilerResponse, error) {
	ret := _mock.Called(context1, registerReconcilerRequest)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *RegisterReconcilerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *RegisterReconcilerRequest) (*RegisterReconcilerResponse, error)); ok {
		return returnFunc(context1, registerReconcilerRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *RegisterReconcilerRequest) *RegisterReconcilerResponse); ok {
		r0 = returnFunc(context1, registerReconcilerRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RegisterReconcilerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *RegisterReconcilerRequest) error); ok {
		r1 = returnFunc(context1, registerReconcilerRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReconcilersServer_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockReconcilersServer_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - context1 context.Context
//   - registerReconcilerRequest *RegisterReconcilerRequest
func (_e *MockReconcilersServer_Expecter) Register(context1 interface{}, registerReconcilerRequest interface{}) *MockReconcilersServer_Register_Call {
	return &MockReconcilersServer_Register_Call{Call: _e.mock.On("Register", context1, registerReconcilerRequest)}
}

func (_c *MockReconcilersServer_Register_Call) Run(run func(context1 context.Context, registerReconcilerRequest *RegisterReconcilerRequest)) *MockReconcilersServer_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *RegisterReconcilerRequest
		if args[1] != nil {
			arg1 = args[1].(*RegisterReconcilerRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockReconcilersServer_Register_Call) Return(registerReconcilerResponse *RegisterReconcilerResponse, err error) *MockReconcilersServer_Register_Call {
	_c.Call.Return(registerReconcilerResponse, err)
	return _c
}

func (_c *MockReconcilersServer_Register_Call) RunAndReturn(run func(context1 context.Context, registerReconcilerRequest *RegisterReconcilerRequest) (*RegisterReconcilerResponse, error)) *MockReconcilersServer_Register_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveReconcilerErrorForTeam provides a mock function for the type MockReconcilersServer
func (_mock *MockReconcilersServer) RemoveReconcilerErrorForTeam(context1 context.Context, removeReconcilerErrorForTeamRequest *RemoveReconcilerErrorForTeamRequest) (*RemoveReconcilerErrorForTeamResponse, error) {
	ret := _mock.Called(context1, removeReconcilerErrorForTeamRequest)

	if len(ret) == 0 {
		panic("no return value specified for RemoveReconcilerErrorForTeam")
	}

	var r0 *RemoveReconcilerErrorForTeamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *RemoveReconcilerErrorForTeamRequest) (*RemoveReconcilerErrorForTeamResponse, error)); ok {
		return returnFunc(context1, removeReconcilerErrorForTeamRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *RemoveReconcilerErrorForTeamRequest) *RemoveReconcilerErrorForTeamResponse); ok {
		r0 = returnFunc(context1, removeReconcilerErrorForTeamRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RemoveReconcilerErrorForTeamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *RemoveReconcilerErrorForTeamRequest) error); ok {
		r1 = returnFunc(context1, removeReconcilerErrorForTeamRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReconcilersServer_RemoveReconcilerErrorForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveReconcilerErrorForTeam'
type MockReconcilersServer_RemoveReconcilerErrorForTeam_Call struct {
	*mock.Call
}

// RemoveReconcilerErrorForTeam is a helper method to define mock.On call
//   - context1 context.Context
//   - removeReconcilerErrorForTeamRequest *RemoveReconcilerErrorForTeamRequest
func (_e *MockReconcilersServer_Expecter) RemoveReconcilerErrorForTeam(context1 interface{}, removeReconcilerErrorForTeamRequest interface{}) *MockReconcilersServer_RemoveReconcilerErrorForTeam_Call {
	return &MockReconcilersServer_RemoveReconcilerErrorForTeam_Call{Call: _e.mock.On("RemoveReconcilerErrorForTeam", context1, removeReconcilerErrorForTeamRequest)}
}

func (_c *MockReconcilersServer_RemoveReconcilerErrorForTeam_Call) Run(run func(context1 context.Context, removeReconcilerErrorForTeamRequest *RemoveReconcilerErrorForTeamRequest)) *MockReconcilersServer_RemoveReconcilerErrorForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *RemoveReconcilerErrorForTeamRequest
		if args[1] != nil {
			arg1 = args[1].(*RemoveReconcilerErrorForTeamRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockReconcilersServer_RemoveReconcilerErrorForTeam_Call) Return(removeReconcilerErrorForTeamResponse *RemoveReconcilerErrorForTeamResponse, err error) *MockReconcilersServer_RemoveReconcilerErrorForTeam_Call {
	_c.Call.Return(removeReconcilerErrorForTeamResponse, err)
	return _c
}

func (_c *MockReconcilersServer_RemoveReconcilerErrorForTeam_Call) RunAndReturn(run func(context1 context.Context, removeReconcilerErrorForTeamRequest *RemoveReconcilerErrorForTeamRequest) (*RemoveReconcilerErrorForTeamResponse, error)) *MockReconcilersServer_RemoveReconcilerErrorForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// SaveState provides a mock function for the type MockReconcilersServer
func (_mock *MockReconcilersServer) SaveState(context1 context.Context, saveReconcilerStateRequest *SaveReconcilerStateRequest) (*SaveReconcilerStateResponse, error) {
	ret := _mock.Called(context1, saveReconcilerStateRequest)

	if len(ret) == 0 {
		panic("no return value specified for SaveState")
	}

	var r0 *SaveReconcilerStateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *SaveReconcilerStateRequest) (*SaveReconcilerStateResponse, error)); ok {
		return returnFunc(context1, saveReconcilerStateRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *SaveReconcilerStateRequest) *SaveReconcilerStateResponse); ok {
		r0 = returnFunc(context1, saveReconcilerStateRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SaveReconcilerStateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *SaveReconcilerStateRequest) error); ok {
		r1 = returnFunc(context1, saveReconcilerStateRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReconcilersServer_SaveState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveState'
type MockReconcilersServer_SaveState_Call struct {
	*mock.Call
}

// SaveState is a helper method to define mock.On call
//   - context1 context.Context
//   - saveReconcilerStateRequest *SaveReconcilerStateRequest
func (_e *MockReconcilersServer_Expecter) SaveState(context1 interface{}, saveReconcilerStateRequest interface{}) *MockReconcilersServer_SaveState_Call {
	return &MockReconcilersServer_SaveState_Call{Call: _e.mock.On("SaveState", context1, saveReconcilerStateRequest)}
}

func (_c *MockReconcilersServer_SaveState_Call) Run(run func(context1 context.Context, saveReconcilerStateRequest *SaveReconcilerStateRequest)) *MockReconcilersServer_SaveState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *SaveReconcilerStateRequest
		if args[1] != nil {
			arg1 = args[1].(*SaveReconcilerStateRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockReconcilersServer_SaveState_Call) Return(saveReconcilerStateResponse *SaveReconcilerStateResponse, err error) *MockReconcilersServer_SaveState_Call {
	_c.Call.Return(saveReconcilerStateResponse, err)
	return _c
}

func (_c *MockReconcilersServer_SaveState_Call) RunAndReturn(run func(context1 context.Context, saveReconcilerStateRequest *SaveReconcilerStateRequest) (*SaveReconcilerStateResponse, error)) *MockReconcilersServer_SaveState_Call {
	_c.Call.Return(run)
	return _c
}

// SetReconcilerErrorForTeam provides a mock function for the type MockReconcilersServer
func (_mock *MockReconcilersServer) SetReconcilerErrorForTeam(context1 context.Context, setReconcilerErrorForTeamRequest *SetReconcilerErrorForTeamRequest) (*SetReconcilerErrorForTeamResponse, error) {
	ret := _mock.Called(context1, setReconcilerErrorForTeamRequest)

	if len(ret) == 0 {
		panic("no return value specified for SetReconcilerErrorForTeam")
	}

	var r0 *SetReconcilerErrorForTeamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *SetReconcilerErrorForTeamRequest) (*SetReconcilerErrorForTeamResponse, error)); ok {
		return returnFunc(context1, setReconcilerErrorForTeamRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *SetReconcilerErrorForTeamRequest) *SetReconcilerErrorForTeamResponse); ok {
		r0 = returnFunc(context1, setReconcilerErrorForTeamRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SetReconcilerErrorForTeamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *SetReconcilerErrorForTeamRequest) error); ok {
		r1 = returnFunc(context1, setReconcilerErrorForTeamRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReconcilersServer_SetReconcilerErrorForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetReconcilerErrorForTeam'
type MockReconcilersServer_SetReconcilerErrorForTeam_Call struct {
	*mock.Call
}

// SetReconcilerErrorForTeam is a helper method to define mock.On call
//   - context1 context.Context
//   - setReconcilerErrorForTeamRequest *SetReconcilerErrorForTeamRequest
func (_e *MockReconcilersServer_Expecter) SetReconcilerErrorForTeam(context1 interface{}, setReconcilerErrorForTeamRequest interface{}) *MockReconcilersServer_SetReconcilerErrorForTeam_Call {
	return &MockReconcilersServer_SetReconcilerErrorForTeam_Call{Call: _e.mock.On("SetReconcilerErrorForTeam", context1, setReconcilerErrorForTeamRequest)}
}

func (_c *MockReconcilersServer_SetReconcilerErrorForTeam_Call) Run(run func(context1 context.Context, setReconcilerErrorForTeamRequest *SetReconcilerErrorForTeamRequest)) *MockReconcilersServer_SetReconcilerErrorForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *SetReconcilerErrorForTeamRequest
		if args[1] != nil {
			arg1 = args[1].(*SetReconcilerErrorForTeamRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockReconcilersServer_SetReconcilerErrorForTeam_Call) Return(setReconcilerErrorForTeamResponse *SetReconcilerErrorForTeamResponse, err error) *MockReconcilersServer_SetReconcilerErrorForTeam_Call {
	_c.Call.Return(setReconcilerErrorForTeamResponse, err)
	return _c
}

func (_c *MockReconcilersServer_SetReconcilerErrorForTeam_Call) RunAndReturn(run func(context1 context.Context, setReconcilerErrorForTeamRequest *SetReconcilerErrorForTeamRequest) (*SetReconcilerErrorForTeamResponse, error)) *MockReconcilersServer_SetReconcilerErrorForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// State provides a mock function for the type MockReconcilersServer
func (_mock *MockReconcilersServer) State(context1 context.Context, getReconcilerStateRequest *GetReconcilerStateRequest) (*GetReconcilerStateResponse, error) {
	ret := _mock.Called(context1, getReconcilerStateRequest)

	if len(ret) == 0 {
		panic("no return value specified for State")
	}

	var r0 *GetReconcilerStateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetReconcilerStateRequest) (*GetReconcilerStateResponse, error)); ok {
		return returnFunc(context1, getReconcilerStateRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetReconcilerStateRequest) *GetReconcilerStateResponse); ok {
		r0 = returnFunc(context1, getReconcilerStateRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetReconcilerStateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *GetReconcilerStateRequest) error); ok {
		r1 = returnFunc(context1, getReconcilerStateRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReconcilersServer_State_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'State'
type MockReconcilersServer_State_Call struct {
	*mock.Call
}

// State is a helper method to define mock.On call
//   - context1 context.Context
//   - getReconcilerStateRequest *GetReconcilerStateRequest
func (_e *MockReconcilersServer_Expecter) State(context1 interface{}, getReconcilerStateRequest interface{}) *MockReconcilersServer_State_Call {
	return &MockReconcilersServer_State_Call{Call: _e.mock.On("State", context1, getReconcilerStateRequest)}
}

func (_c *MockReconcilersServer_State_Call) Run(run func(context1 context.Context, getReconcilerStateRequest *GetReconcilerStateRequest)) *MockReconcilersServer_State_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *GetReconcilerStateRequest
		if args[1] != nil {
			arg1 = args[1].(*GetReconcilerStateRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockReconcilersServer_State_Call) Return(getReconcilerStateResponse *GetReconcilerStateResponse, err error) *MockReconcilersServer_State_Call {
	_c.Call.Return(getReconcilerStateResponse, err)
	return _c
}

func (_c *MockReconcilersServer_State_Call) RunAndReturn(run func(context1 context.Context, getReconcilerStateRequest *GetReconcilerStateRequest) (*GetReconcilerStateResponse, error)) *MockReconcilersServer_State_Call {
	_c.Call.Return(run)
	return _c
}

// SuccessfulTeamSync provides a mock function for the type MockReconcilersServer
func (_mock *MockReconcilersServer) SuccessfulTeamSync(context1 context.Context, successfulTeamSyncRequest *SuccessfulTeamSyncRequest) (*SuccessfulTeamSyncResponse, error) {
	ret := _mock.Called(context1, successfulTeamSyncRequest)

	if len(ret) == 0 {
		panic("no return value specified for SuccessfulTeamSync")
	}

	var r0 *SuccessfulTeamSyncResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *SuccessfulTeamSyncRequest) (*SuccessfulTeamSyncResponse, error)); ok {
		return returnFunc(context1, successfulTeamSyncRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *SuccessfulTeamSyncRequest) *SuccessfulTeamSyncResponse); ok {
		r0 = returnFunc(context1, successfulTeamSyncRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SuccessfulTeamSyncResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *SuccessfulTeamSyncRequest) error); ok {
		r1 = returnFunc(context1, successfulTeamSyncRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReconcilersServer_SuccessfulTeamSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuccessfulTeamSync'
type MockReconcilersServer_SuccessfulTeamSync_Call struct {
	*mock.Call
}

// SuccessfulTeamSync is a helper method to define mock.On call
//   - context1 context.Context
//   - successfulTeamSyncRequest *SuccessfulTeamSyncRequest
func (_e *MockReconcilersServer_Expecter) SuccessfulTeamSync(context1 interface{}, successfulTeamSyncRequest interface{}) *MockReconcilersServer_SuccessfulTeamSync_Call {
	return &MockReconcilersServer_SuccessfulTeamSync_Call{Call: _e.mock.On("SuccessfulTeamSync", context1, successfulTeamSyncRequest)}
}

func (_c *MockReconcilersServer_SuccessfulTeamSync_Call) Run(run func(context1 context.Context, successfulTeamSyncRequest *SuccessfulTeamSyncRequest)) *MockReconcilersServer_SuccessfulTeamSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *SuccessfulTeamSyncRequest
		if args[1] != nil {
			arg1 = args[1].(*SuccessfulTeamSyncRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockReconcilersServer_SuccessfulTeamSync_Call) Return(successfulTeamSyncResponse *SuccessfulTeamSyncResponse, err error) *MockReconcilersServer_SuccessfulTeamSync_Call {
	_c.Call.Return(successfulTeamSyncResponse, err)
	return _c
}

func (_c *MockReconcilersServer_SuccessfulTeamSync_Call) RunAndReturn(run func(context1 context.Context, successfulTeamSyncRequest *SuccessfulTeamSyncRequest) (*SuccessfulTeamSyncResponse, error)) *MockReconcilersServer_SuccessfulTeamSync_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedReconcilersServer provides a mock function for the type MockReconcilersServer
func (_mock *MockReconcilersServer) mustEmbedUnimplementedReconcilersServer() {
	_mock.Called()
	return
}

// MockReconcilersServer_mustEmbedUnimplementedReconcilersServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedReconcilersServer'
type MockReconcilersServer_mustEmbedUnimplementedReconcilersServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedReconcilersServer is a helper method to define mock.On call
func (_e *MockReconcilersServer_Expecter) mustEmbedUnimplementedReconcilersServer() *MockReconcilersServer_mustEmbedUnimplementedReconcilersServer_Call {
	return &MockReconcilersServer_mustEmbedUnimplementedReconcilersServer_Call{Call: _e.mock.On("mustEmbedUnimplementedReconcilersServer")}
}

func (_c *MockReconcilersServer_mustEmbedUnimplementedReconcilersServer_Call) Run(run func()) *MockReconcilersServer_mustEmbedUnimplementedReconcilersServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReconcilersServer_mustEmbedUnimplementedReconcilersServer_Call) Return() *MockReconcilersServer_mustEmbedUnimplementedReconcilersServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockReconcilersServer_mustEmbedUnimplementedReconcilersServer_Call) RunAndReturn(run func()) *MockReconcilersServer_mustEmbedUnimplementedReconcilersServer_Call {
	_c.Run(run)
	return _c
}
