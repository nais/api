// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: teams.proto

//go:build !protoopaque

package protoapi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Team struct {
	state                protoimpl.MessageState `protogen:"hybrid.v1"`
	Slug                 string                 `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Purpose              string                 `protobuf:"bytes,2,opt,name=purpose,proto3" json:"purpose,omitempty"`
	SlackChannel         string                 `protobuf:"bytes,3,opt,name=slack_channel,json=slackChannel,proto3" json:"slack_channel,omitempty"`
	EntraIdGroupId       *string                `protobuf:"bytes,4,opt,name=entra_id_group_id,json=entraIdGroupId,proto3,oneof" json:"entra_id_group_id,omitempty"`
	GithubTeamSlug       *string                `protobuf:"bytes,5,opt,name=github_team_slug,json=githubTeamSlug,proto3,oneof" json:"github_team_slug,omitempty"`
	GoogleGroupEmail     *string                `protobuf:"bytes,6,opt,name=google_group_email,json=googleGroupEmail,proto3,oneof" json:"google_group_email,omitempty"`
	GarRepository        *string                `protobuf:"bytes,7,opt,name=gar_repository,json=garRepository,proto3,oneof" json:"gar_repository,omitempty"`
	CdnBucket            *string                `protobuf:"bytes,8,opt,name=cdn_bucket,json=cdnBucket,proto3,oneof" json:"cdn_bucket,omitempty"`
	DeleteKeyConfirmedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=delete_key_confirmed_at,json=deleteKeyConfirmedAt,proto3,oneof" json:"delete_key_confirmed_at,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Team) Reset() {
	*x = Team{}
	mi := &file_teams_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_teams_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Team) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Team) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

func (x *Team) GetSlackChannel() string {
	if x != nil {
		return x.SlackChannel
	}
	return ""
}

func (x *Team) GetEntraIdGroupId() string {
	if x != nil && x.EntraIdGroupId != nil {
		return *x.EntraIdGroupId
	}
	return ""
}

func (x *Team) GetGithubTeamSlug() string {
	if x != nil && x.GithubTeamSlug != nil {
		return *x.GithubTeamSlug
	}
	return ""
}

func (x *Team) GetGoogleGroupEmail() string {
	if x != nil && x.GoogleGroupEmail != nil {
		return *x.GoogleGroupEmail
	}
	return ""
}

func (x *Team) GetGarRepository() string {
	if x != nil && x.GarRepository != nil {
		return *x.GarRepository
	}
	return ""
}

func (x *Team) GetCdnBucket() string {
	if x != nil && x.CdnBucket != nil {
		return *x.CdnBucket
	}
	return ""
}

func (x *Team) GetDeleteKeyConfirmedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteKeyConfirmedAt
	}
	return nil
}

func (x *Team) SetSlug(v string) {
	x.Slug = v
}

func (x *Team) SetPurpose(v string) {
	x.Purpose = v
}

func (x *Team) SetSlackChannel(v string) {
	x.SlackChannel = v
}

func (x *Team) SetEntraIdGroupId(v string) {
	x.EntraIdGroupId = &v
}

func (x *Team) SetGithubTeamSlug(v string) {
	x.GithubTeamSlug = &v
}

func (x *Team) SetGoogleGroupEmail(v string) {
	x.GoogleGroupEmail = &v
}

func (x *Team) SetGarRepository(v string) {
	x.GarRepository = &v
}

func (x *Team) SetCdnBucket(v string) {
	x.CdnBucket = &v
}

func (x *Team) SetDeleteKeyConfirmedAt(v *timestamppb.Timestamp) {
	x.DeleteKeyConfirmedAt = v
}

func (x *Team) HasEntraIdGroupId() bool {
	if x == nil {
		return false
	}
	return x.EntraIdGroupId != nil
}

func (x *Team) HasGithubTeamSlug() bool {
	if x == nil {
		return false
	}
	return x.GithubTeamSlug != nil
}

func (x *Team) HasGoogleGroupEmail() bool {
	if x == nil {
		return false
	}
	return x.GoogleGroupEmail != nil
}

func (x *Team) HasGarRepository() bool {
	if x == nil {
		return false
	}
	return x.GarRepository != nil
}

func (x *Team) HasCdnBucket() bool {
	if x == nil {
		return false
	}
	return x.CdnBucket != nil
}

func (x *Team) HasDeleteKeyConfirmedAt() bool {
	if x == nil {
		return false
	}
	return x.DeleteKeyConfirmedAt != nil
}

func (x *Team) ClearEntraIdGroupId() {
	x.EntraIdGroupId = nil
}

func (x *Team) ClearGithubTeamSlug() {
	x.GithubTeamSlug = nil
}

func (x *Team) ClearGoogleGroupEmail() {
	x.GoogleGroupEmail = nil
}

func (x *Team) ClearGarRepository() {
	x.GarRepository = nil
}

func (x *Team) ClearCdnBucket() {
	x.CdnBucket = nil
}

func (x *Team) ClearDeleteKeyConfirmedAt() {
	x.DeleteKeyConfirmedAt = nil
}

type Team_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Slug                 string
	Purpose              string
	SlackChannel         string
	EntraIdGroupId       *string
	GithubTeamSlug       *string
	GoogleGroupEmail     *string
	GarRepository        *string
	CdnBucket            *string
	DeleteKeyConfirmedAt *timestamppb.Timestamp
}

func (b0 Team_builder) Build() *Team {
	m0 := &Team{}
	b, x := &b0, m0
	_, _ = b, x
	x.Slug = b.Slug
	x.Purpose = b.Purpose
	x.SlackChannel = b.SlackChannel
	x.EntraIdGroupId = b.EntraIdGroupId
	x.GithubTeamSlug = b.GithubTeamSlug
	x.GoogleGroupEmail = b.GoogleGroupEmail
	x.GarRepository = b.GarRepository
	x.CdnBucket = b.CdnBucket
	x.DeleteKeyConfirmedAt = b.DeleteKeyConfirmedAt
	return m0
}

type ListAuthorizedRepositoriesRequest struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	TeamSlug      string                 `protobuf:"bytes,1,opt,name=teamSlug,proto3" json:"teamSlug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAuthorizedRepositoriesRequest) Reset() {
	*x = ListAuthorizedRepositoriesRequest{}
	mi := &file_teams_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAuthorizedRepositoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuthorizedRepositoriesRequest) ProtoMessage() {}

func (x *ListAuthorizedRepositoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListAuthorizedRepositoriesRequest) GetTeamSlug() string {
	if x != nil {
		return x.TeamSlug
	}
	return ""
}

func (x *ListAuthorizedRepositoriesRequest) SetTeamSlug(v string) {
	x.TeamSlug = v
}

type ListAuthorizedRepositoriesRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	TeamSlug string
}

func (b0 ListAuthorizedRepositoriesRequest_builder) Build() *ListAuthorizedRepositoriesRequest {
	m0 := &ListAuthorizedRepositoriesRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.TeamSlug = b.TeamSlug
	return m0
}

type ListAuthorizedRepositoriesResponse struct {
	state              protoimpl.MessageState `protogen:"hybrid.v1"`
	GithubRepositories []string               `protobuf:"bytes,1,rep,name=github_repositories,json=githubRepositories,proto3" json:"github_repositories,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ListAuthorizedRepositoriesResponse) Reset() {
	*x = ListAuthorizedRepositoriesResponse{}
	mi := &file_teams_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAuthorizedRepositoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuthorizedRepositoriesResponse) ProtoMessage() {}

func (x *ListAuthorizedRepositoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListAuthorizedRepositoriesResponse) GetGithubRepositories() []string {
	if x != nil {
		return x.GithubRepositories
	}
	return nil
}

func (x *ListAuthorizedRepositoriesResponse) SetGithubRepositories(v []string) {
	x.GithubRepositories = v
}

type ListAuthorizedRepositoriesResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	GithubRepositories []string
}

func (b0 ListAuthorizedRepositoriesResponse_builder) Build() *ListAuthorizedRepositoriesResponse {
	m0 := &ListAuthorizedRepositoriesResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.GithubRepositories = b.GithubRepositories
	return m0
}

type DeleteTeamRequest struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Slug          string                 `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTeamRequest) Reset() {
	*x = DeleteTeamRequest{}
	mi := &file_teams_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTeamRequest) ProtoMessage() {}

func (x *DeleteTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DeleteTeamRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *DeleteTeamRequest) SetSlug(v string) {
	x.Slug = v
}

type DeleteTeamRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Slug string
}

func (b0 DeleteTeamRequest_builder) Build() *DeleteTeamRequest {
	m0 := &DeleteTeamRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Slug = b.Slug
	return m0
}

type DeleteTeamResponse struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTeamResponse) Reset() {
	*x = DeleteTeamResponse{}
	mi := &file_teams_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTeamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTeamResponse) ProtoMessage() {}

func (x *DeleteTeamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type DeleteTeamResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 DeleteTeamResponse_builder) Build() *DeleteTeamResponse {
	m0 := &DeleteTeamResponse{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type SetTeamExternalReferencesRequest struct {
	state            protoimpl.MessageState `protogen:"hybrid.v1"`
	Slug             string                 `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	EntraIdGroupId   *string                `protobuf:"bytes,2,opt,name=entra_id_group_id,json=entraIdGroupId,proto3,oneof" json:"entra_id_group_id,omitempty"`
	GithubTeamSlug   *string                `protobuf:"bytes,3,opt,name=github_team_slug,json=githubTeamSlug,proto3,oneof" json:"github_team_slug,omitempty"`
	GoogleGroupEmail *string                `protobuf:"bytes,4,opt,name=google_group_email,json=googleGroupEmail,proto3,oneof" json:"google_group_email,omitempty"`
	GarRepository    *string                `protobuf:"bytes,5,opt,name=gar_repository,json=garRepository,proto3,oneof" json:"gar_repository,omitempty"`
	CdnBucket        *string                `protobuf:"bytes,6,opt,name=cdn_bucket,json=cdnBucket,proto3,oneof" json:"cdn_bucket,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SetTeamExternalReferencesRequest) Reset() {
	*x = SetTeamExternalReferencesRequest{}
	mi := &file_teams_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTeamExternalReferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTeamExternalReferencesRequest) ProtoMessage() {}

func (x *SetTeamExternalReferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SetTeamExternalReferencesRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *SetTeamExternalReferencesRequest) GetEntraIdGroupId() string {
	if x != nil && x.EntraIdGroupId != nil {
		return *x.EntraIdGroupId
	}
	return ""
}

func (x *SetTeamExternalReferencesRequest) GetGithubTeamSlug() string {
	if x != nil && x.GithubTeamSlug != nil {
		return *x.GithubTeamSlug
	}
	return ""
}

func (x *SetTeamExternalReferencesRequest) GetGoogleGroupEmail() string {
	if x != nil && x.GoogleGroupEmail != nil {
		return *x.GoogleGroupEmail
	}
	return ""
}

func (x *SetTeamExternalReferencesRequest) GetGarRepository() string {
	if x != nil && x.GarRepository != nil {
		return *x.GarRepository
	}
	return ""
}

func (x *SetTeamExternalReferencesRequest) GetCdnBucket() string {
	if x != nil && x.CdnBucket != nil {
		return *x.CdnBucket
	}
	return ""
}

func (x *SetTeamExternalReferencesRequest) SetSlug(v string) {
	x.Slug = v
}

func (x *SetTeamExternalReferencesRequest) SetEntraIdGroupId(v string) {
	x.EntraIdGroupId = &v
}

func (x *SetTeamExternalReferencesRequest) SetGithubTeamSlug(v string) {
	x.GithubTeamSlug = &v
}

func (x *SetTeamExternalReferencesRequest) SetGoogleGroupEmail(v string) {
	x.GoogleGroupEmail = &v
}

func (x *SetTeamExternalReferencesRequest) SetGarRepository(v string) {
	x.GarRepository = &v
}

func (x *SetTeamExternalReferencesRequest) SetCdnBucket(v string) {
	x.CdnBucket = &v
}

func (x *SetTeamExternalReferencesRequest) HasEntraIdGroupId() bool {
	if x == nil {
		return false
	}
	return x.EntraIdGroupId != nil
}

func (x *SetTeamExternalReferencesRequest) HasGithubTeamSlug() bool {
	if x == nil {
		return false
	}
	return x.GithubTeamSlug != nil
}

func (x *SetTeamExternalReferencesRequest) HasGoogleGroupEmail() bool {
	if x == nil {
		return false
	}
	return x.GoogleGroupEmail != nil
}

func (x *SetTeamExternalReferencesRequest) HasGarRepository() bool {
	if x == nil {
		return false
	}
	return x.GarRepository != nil
}

func (x *SetTeamExternalReferencesRequest) HasCdnBucket() bool {
	if x == nil {
		return false
	}
	return x.CdnBucket != nil
}

func (x *SetTeamExternalReferencesRequest) ClearEntraIdGroupId() {
	x.EntraIdGroupId = nil
}

func (x *SetTeamExternalReferencesRequest) ClearGithubTeamSlug() {
	x.GithubTeamSlug = nil
}

func (x *SetTeamExternalReferencesRequest) ClearGoogleGroupEmail() {
	x.GoogleGroupEmail = nil
}

func (x *SetTeamExternalReferencesRequest) ClearGarRepository() {
	x.GarRepository = nil
}

func (x *SetTeamExternalReferencesRequest) ClearCdnBucket() {
	x.CdnBucket = nil
}

type SetTeamExternalReferencesRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Slug             string
	EntraIdGroupId   *string
	GithubTeamSlug   *string
	GoogleGroupEmail *string
	GarRepository    *string
	CdnBucket        *string
}

func (b0 SetTeamExternalReferencesRequest_builder) Build() *SetTeamExternalReferencesRequest {
	m0 := &SetTeamExternalReferencesRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Slug = b.Slug
	x.EntraIdGroupId = b.EntraIdGroupId
	x.GithubTeamSlug = b.GithubTeamSlug
	x.GoogleGroupEmail = b.GoogleGroupEmail
	x.GarRepository = b.GarRepository
	x.CdnBucket = b.CdnBucket
	return m0
}

type SetTeamExternalReferencesResponse struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetTeamExternalReferencesResponse) Reset() {
	*x = SetTeamExternalReferencesResponse{}
	mi := &file_teams_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTeamExternalReferencesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTeamExternalReferencesResponse) ProtoMessage() {}

func (x *SetTeamExternalReferencesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type SetTeamExternalReferencesResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 SetTeamExternalReferencesResponse_builder) Build() *SetTeamExternalReferencesResponse {
	m0 := &SetTeamExternalReferencesResponse{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type SetTeamEnvironmentExternalReferencesRequest struct {
	state           protoimpl.MessageState `protogen:"hybrid.v1"`
	Slug            string                 `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	EnvironmentName string                 `protobuf:"bytes,2,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
	// GCP project ID. If not set, no changes will be made. Set to empty string to remove the project ID.
	GcpProjectId  *string `protobuf:"bytes,3,opt,name=gcp_project_id,json=gcpProjectId,proto3,oneof" json:"gcp_project_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetTeamEnvironmentExternalReferencesRequest) Reset() {
	*x = SetTeamEnvironmentExternalReferencesRequest{}
	mi := &file_teams_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTeamEnvironmentExternalReferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTeamEnvironmentExternalReferencesRequest) ProtoMessage() {}

func (x *SetTeamEnvironmentExternalReferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SetTeamEnvironmentExternalReferencesRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *SetTeamEnvironmentExternalReferencesRequest) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

func (x *SetTeamEnvironmentExternalReferencesRequest) GetGcpProjectId() string {
	if x != nil && x.GcpProjectId != nil {
		return *x.GcpProjectId
	}
	return ""
}

func (x *SetTeamEnvironmentExternalReferencesRequest) SetSlug(v string) {
	x.Slug = v
}

func (x *SetTeamEnvironmentExternalReferencesRequest) SetEnvironmentName(v string) {
	x.EnvironmentName = v
}

func (x *SetTeamEnvironmentExternalReferencesRequest) SetGcpProjectId(v string) {
	x.GcpProjectId = &v
}

func (x *SetTeamEnvironmentExternalReferencesRequest) HasGcpProjectId() bool {
	if x == nil {
		return false
	}
	return x.GcpProjectId != nil
}

func (x *SetTeamEnvironmentExternalReferencesRequest) ClearGcpProjectId() {
	x.GcpProjectId = nil
}

type SetTeamEnvironmentExternalReferencesRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Slug            string
	EnvironmentName string
	// GCP project ID. If not set, no changes will be made. Set to empty string to remove the project ID.
	GcpProjectId *string
}

func (b0 SetTeamEnvironmentExternalReferencesRequest_builder) Build() *SetTeamEnvironmentExternalReferencesRequest {
	m0 := &SetTeamEnvironmentExternalReferencesRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Slug = b.Slug
	x.EnvironmentName = b.EnvironmentName
	x.GcpProjectId = b.GcpProjectId
	return m0
}

type SetTeamEnvironmentExternalReferencesResponse struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetTeamEnvironmentExternalReferencesResponse) Reset() {
	*x = SetTeamEnvironmentExternalReferencesResponse{}
	mi := &file_teams_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTeamEnvironmentExternalReferencesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTeamEnvironmentExternalReferencesResponse) ProtoMessage() {}

func (x *SetTeamEnvironmentExternalReferencesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type SetTeamEnvironmentExternalReferencesResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 SetTeamEnvironmentExternalReferencesResponse_builder) Build() *SetTeamEnvironmentExternalReferencesResponse {
	m0 := &SetTeamEnvironmentExternalReferencesResponse{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

type ListTeamEnvironmentsRequest struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Limit         int64                  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int64                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Slug          string                 `protobuf:"bytes,3,opt,name=slug,proto3" json:"slug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTeamEnvironmentsRequest) Reset() {
	*x = ListTeamEnvironmentsRequest{}
	mi := &file_teams_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTeamEnvironmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTeamEnvironmentsRequest) ProtoMessage() {}

func (x *ListTeamEnvironmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListTeamEnvironmentsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListTeamEnvironmentsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListTeamEnvironmentsRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ListTeamEnvironmentsRequest) SetLimit(v int64) {
	x.Limit = v
}

func (x *ListTeamEnvironmentsRequest) SetOffset(v int64) {
	x.Offset = v
}

func (x *ListTeamEnvironmentsRequest) SetSlug(v string) {
	x.Slug = v
}

type ListTeamEnvironmentsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Limit  int64
	Offset int64
	Slug   string
}

func (b0 ListTeamEnvironmentsRequest_builder) Build() *ListTeamEnvironmentsRequest {
	m0 := &ListTeamEnvironmentsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Limit = b.Limit
	x.Offset = b.Offset
	x.Slug = b.Slug
	return m0
}

type ListTeamEnvironmentsResponse struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Nodes         []*TeamEnvironment     `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	PageInfo      *PageInfo              `protobuf:"bytes,2,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTeamEnvironmentsResponse) Reset() {
	*x = ListTeamEnvironmentsResponse{}
	mi := &file_teams_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTeamEnvironmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTeamEnvironmentsResponse) ProtoMessage() {}

func (x *ListTeamEnvironmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListTeamEnvironmentsResponse) GetNodes() []*TeamEnvironment {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ListTeamEnvironmentsResponse) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

func (x *ListTeamEnvironmentsResponse) SetNodes(v []*TeamEnvironment) {
	x.Nodes = v
}

func (x *ListTeamEnvironmentsResponse) SetPageInfo(v *PageInfo) {
	x.PageInfo = v
}

func (x *ListTeamEnvironmentsResponse) HasPageInfo() bool {
	if x == nil {
		return false
	}
	return x.PageInfo != nil
}

func (x *ListTeamEnvironmentsResponse) ClearPageInfo() {
	x.PageInfo = nil
}

type ListTeamEnvironmentsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Nodes    []*TeamEnvironment
	PageInfo *PageInfo
}

func (b0 ListTeamEnvironmentsResponse_builder) Build() *ListTeamEnvironmentsResponse {
	m0 := &ListTeamEnvironmentsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.Nodes = b.Nodes
	x.PageInfo = b.PageInfo
	return m0
}

type TeamEnvironment struct {
	state              protoimpl.MessageState `protogen:"hybrid.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Slug               string                 `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	Gcp                bool                   `protobuf:"varint,3,opt,name=gcp,proto3" json:"gcp,omitempty"`
	EnvironmentName    string                 `protobuf:"bytes,4,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
	GcpProjectId       *string                `protobuf:"bytes,5,opt,name=gcp_project_id,json=gcpProjectId,proto3,oneof" json:"gcp_project_id,omitempty"`
	SlackAlertsChannel string                 `protobuf:"bytes,6,opt,name=slack_alerts_channel,json=slackAlertsChannel,proto3" json:"slack_alerts_channel,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TeamEnvironment) Reset() {
	*x = TeamEnvironment{}
	mi := &file_teams_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TeamEnvironment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamEnvironment) ProtoMessage() {}

func (x *TeamEnvironment) ProtoReflect() protoreflect.Message {
	mi := &file_teams_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TeamEnvironment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TeamEnvironment) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *TeamEnvironment) GetGcp() bool {
	if x != nil {
		return x.Gcp
	}
	return false
}

func (x *TeamEnvironment) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

func (x *TeamEnvironment) GetGcpProjectId() string {
	if x != nil && x.GcpProjectId != nil {
		return *x.GcpProjectId
	}
	return ""
}

func (x *TeamEnvironment) GetSlackAlertsChannel() string {
	if x != nil {
		return x.SlackAlertsChannel
	}
	return ""
}

func (x *TeamEnvironment) SetId(v string) {
	x.Id = v
}

func (x *TeamEnvironment) SetSlug(v string) {
	x.Slug = v
}

func (x *TeamEnvironment) SetGcp(v bool) {
	x.Gcp = v
}

func (x *TeamEnvironment) SetEnvironmentName(v string) {
	x.EnvironmentName = v
}

func (x *TeamEnvironment) SetGcpProjectId(v string) {
	x.GcpProjectId = &v
}

func (x *TeamEnvironment) SetSlackAlertsChannel(v string) {
	x.SlackAlertsChannel = v
}

func (x *TeamEnvironment) HasGcpProjectId() bool {
	if x == nil {
		return false
	}
	return x.GcpProjectId != nil
}

func (x *TeamEnvironment) ClearGcpProjectId() {
	x.GcpProjectId = nil
}

type TeamEnvironment_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id                 string
	Slug               string
	Gcp                bool
	EnvironmentName    string
	GcpProjectId       *string
	SlackAlertsChannel string
}

func (b0 TeamEnvironment_builder) Build() *TeamEnvironment {
	m0 := &TeamEnvironment{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	x.Slug = b.Slug
	x.Gcp = b.Gcp
	x.EnvironmentName = b.EnvironmentName
	x.GcpProjectId = b.GcpProjectId
	x.SlackAlertsChannel = b.SlackAlertsChannel
	return m0
}

type GetTeamResponse struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Team          *Team                  `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTeamResponse) Reset() {
	*x = GetTeamResponse{}
	mi := &file_teams_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamResponse) ProtoMessage() {}

func (x *GetTeamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetTeamResponse) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *GetTeamResponse) SetTeam(v *Team) {
	x.Team = v
}

func (x *GetTeamResponse) HasTeam() bool {
	if x == nil {
		return false
	}
	return x.Team != nil
}

func (x *GetTeamResponse) ClearTeam() {
	x.Team = nil
}

type GetTeamResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Team *Team
}

func (b0 GetTeamResponse_builder) Build() *GetTeamResponse {
	m0 := &GetTeamResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.Team = b.Team
	return m0
}

type GetTeamRequest struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Slug          string                 `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTeamRequest) Reset() {
	*x = GetTeamRequest{}
	mi := &file_teams_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamRequest) ProtoMessage() {}

func (x *GetTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetTeamRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *GetTeamRequest) SetSlug(v string) {
	x.Slug = v
}

type GetTeamRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Slug string
}

func (b0 GetTeamRequest_builder) Build() *GetTeamRequest {
	m0 := &GetTeamRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Slug = b.Slug
	return m0
}

type ListTeamsRequest struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Limit         int64                  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int64                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTeamsRequest) Reset() {
	*x = ListTeamsRequest{}
	mi := &file_teams_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTeamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTeamsRequest) ProtoMessage() {}

func (x *ListTeamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListTeamsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListTeamsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListTeamsRequest) SetLimit(v int64) {
	x.Limit = v
}

func (x *ListTeamsRequest) SetOffset(v int64) {
	x.Offset = v
}

type ListTeamsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Limit  int64
	Offset int64
}

func (b0 ListTeamsRequest_builder) Build() *ListTeamsRequest {
	m0 := &ListTeamsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Limit = b.Limit
	x.Offset = b.Offset
	return m0
}

type ListTeamsResponse struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Nodes         []*Team                `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	PageInfo      *PageInfo              `protobuf:"bytes,2,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTeamsResponse) Reset() {
	*x = ListTeamsResponse{}
	mi := &file_teams_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTeamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTeamsResponse) ProtoMessage() {}

func (x *ListTeamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListTeamsResponse) GetNodes() []*Team {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ListTeamsResponse) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

func (x *ListTeamsResponse) SetNodes(v []*Team) {
	x.Nodes = v
}

func (x *ListTeamsResponse) SetPageInfo(v *PageInfo) {
	x.PageInfo = v
}

func (x *ListTeamsResponse) HasPageInfo() bool {
	if x == nil {
		return false
	}
	return x.PageInfo != nil
}

func (x *ListTeamsResponse) ClearPageInfo() {
	x.PageInfo = nil
}

type ListTeamsResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Nodes    []*Team
	PageInfo *PageInfo
}

func (b0 ListTeamsResponse_builder) Build() *ListTeamsResponse {
	m0 := &ListTeamsResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.Nodes = b.Nodes
	x.PageInfo = b.PageInfo
	return m0
}

type ListTeamMembersRequest struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Limit         int64                  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int64                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Slug          string                 `protobuf:"bytes,3,opt,name=slug,proto3" json:"slug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTeamMembersRequest) Reset() {
	*x = ListTeamMembersRequest{}
	mi := &file_teams_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTeamMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTeamMembersRequest) ProtoMessage() {}

func (x *ListTeamMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListTeamMembersRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListTeamMembersRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListTeamMembersRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ListTeamMembersRequest) SetLimit(v int64) {
	x.Limit = v
}

func (x *ListTeamMembersRequest) SetOffset(v int64) {
	x.Offset = v
}

func (x *ListTeamMembersRequest) SetSlug(v string) {
	x.Slug = v
}

type ListTeamMembersRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Limit  int64
	Offset int64
	Slug   string
}

func (b0 ListTeamMembersRequest_builder) Build() *ListTeamMembersRequest {
	m0 := &ListTeamMembersRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Limit = b.Limit
	x.Offset = b.Offset
	x.Slug = b.Slug
	return m0
}

type ListTeamMembersResponse struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Nodes         []*TeamMember          `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	PageInfo      *PageInfo              `protobuf:"bytes,2,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTeamMembersResponse) Reset() {
	*x = ListTeamMembersResponse{}
	mi := &file_teams_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTeamMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTeamMembersResponse) ProtoMessage() {}

func (x *ListTeamMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListTeamMembersResponse) GetNodes() []*TeamMember {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ListTeamMembersResponse) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

func (x *ListTeamMembersResponse) SetNodes(v []*TeamMember) {
	x.Nodes = v
}

func (x *ListTeamMembersResponse) SetPageInfo(v *PageInfo) {
	x.PageInfo = v
}

func (x *ListTeamMembersResponse) HasPageInfo() bool {
	if x == nil {
		return false
	}
	return x.PageInfo != nil
}

func (x *ListTeamMembersResponse) ClearPageInfo() {
	x.PageInfo = nil
}

type ListTeamMembersResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Nodes    []*TeamMember
	PageInfo *PageInfo
}

func (b0 ListTeamMembersResponse_builder) Build() *ListTeamMembersResponse {
	m0 := &ListTeamMembersResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.Nodes = b.Nodes
	x.PageInfo = b.PageInfo
	return m0
}

type TeamMember struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	User          *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TeamMember) Reset() {
	*x = TeamMember{}
	mi := &file_teams_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TeamMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamMember) ProtoMessage() {}

func (x *TeamMember) ProtoReflect() protoreflect.Message {
	mi := &file_teams_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TeamMember) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *TeamMember) SetUser(v *User) {
	x.User = v
}

func (x *TeamMember) HasUser() bool {
	if x == nil {
		return false
	}
	return x.User != nil
}

func (x *TeamMember) ClearUser() {
	x.User = nil
}

type TeamMember_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	User *User
}

func (b0 TeamMember_builder) Build() *TeamMember {
	m0 := &TeamMember{}
	b, x := &b0, m0
	_, _ = b, x
	x.User = b.User
	return m0
}

type IsRepositoryAuthorizedRequest struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	TeamSlug      string                 `protobuf:"bytes,1,opt,name=team_slug,json=teamSlug,proto3" json:"team_slug,omitempty"`
	Repository    string                 `protobuf:"bytes,2,opt,name=repository,proto3" json:"repository,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsRepositoryAuthorizedRequest) Reset() {
	*x = IsRepositoryAuthorizedRequest{}
	mi := &file_teams_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsRepositoryAuthorizedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsRepositoryAuthorizedRequest) ProtoMessage() {}

func (x *IsRepositoryAuthorizedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *IsRepositoryAuthorizedRequest) GetTeamSlug() string {
	if x != nil {
		return x.TeamSlug
	}
	return ""
}

func (x *IsRepositoryAuthorizedRequest) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *IsRepositoryAuthorizedRequest) SetTeamSlug(v string) {
	x.TeamSlug = v
}

func (x *IsRepositoryAuthorizedRequest) SetRepository(v string) {
	x.Repository = v
}

type IsRepositoryAuthorizedRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	TeamSlug   string
	Repository string
}

func (b0 IsRepositoryAuthorizedRequest_builder) Build() *IsRepositoryAuthorizedRequest {
	m0 := &IsRepositoryAuthorizedRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.TeamSlug = b.TeamSlug
	x.Repository = b.Repository
	return m0
}

type IsRepositoryAuthorizedResponse struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	IsAuthorized  bool                   `protobuf:"varint,1,opt,name=is_authorized,json=isAuthorized,proto3" json:"is_authorized,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsRepositoryAuthorizedResponse) Reset() {
	*x = IsRepositoryAuthorizedResponse{}
	mi := &file_teams_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsRepositoryAuthorizedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsRepositoryAuthorizedResponse) ProtoMessage() {}

func (x *IsRepositoryAuthorizedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *IsRepositoryAuthorizedResponse) GetIsAuthorized() bool {
	if x != nil {
		return x.IsAuthorized
	}
	return false
}

func (x *IsRepositoryAuthorizedResponse) SetIsAuthorized(v bool) {
	x.IsAuthorized = v
}

type IsRepositoryAuthorizedResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	IsAuthorized bool
}

func (b0 IsRepositoryAuthorizedResponse_builder) Build() *IsRepositoryAuthorizedResponse {
	m0 := &IsRepositoryAuthorizedResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.IsAuthorized = b.IsAuthorized
	return m0
}

var File_teams_proto protoreflect.FileDescriptor

var file_teams_proto_rawDesc = string([]byte{
	0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6e,
	0x61, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x93, 0x04, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6c, 0x61, 0x63, 0x6b,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x11,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x49, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x6c, 0x75, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x54, 0x65, 0x61, 0x6d, 0x53, 0x6c, 0x75, 0x67, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x10, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x67, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x67, 0x61, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x64,
	0x6e, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x09, 0x63, 0x64, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x56,
	0x0a, 0x17, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x05, 0x52, 0x14, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x5f, 0x69, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x6c, 0x75,
	0x67, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x67, 0x61, 0x72,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x63, 0x64, 0x6e, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x3f, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x65, 0x61, 0x6d, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x61, 0x6d, 0x53, 0x6c, 0x75, 0x67, 0x22, 0x55, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x13, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x27,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfc, 0x02,
	0x0a, 0x20, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x2e, 0x0a, 0x11, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x5f,
	0x69, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x49, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x6c,
	0x75, 0x67, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x10, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x67, 0x61, 0x72, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x0d, 0x67, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x64, 0x6e, 0x5f, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x63, 0x64, 0x6e, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x5f, 0x69, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73,
	0x6c, 0x75, 0x67, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x67,
	0x61, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x63, 0x64, 0x6e, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x23, 0x0a, 0x21,
	0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xaa, 0x01, 0x0a, 0x2b, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x0e, 0x67, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x63, 0x70, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x67, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x2e,
	0x0a, 0x2c, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f,
	0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6c, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x22,
	0x92, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x38, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6e, 0x61, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6e, 0x61, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe2, 0x01, 0x0a, 0x0f, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x10, 0x0a, 0x03,
	0x67, 0x63, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x67, 0x63, 0x70, 0x12, 0x29,
	0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0e, 0x67, 0x63, 0x70,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x67, 0x63, 0x70, 0x5f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x3e, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04,
	0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x61, 0x69,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x22, 0x24, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x22,
	0x40, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x22, 0x7c, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x61, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x61, 0x69, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x5a, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x22, 0x88, 0x01, 0x0a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x61, 0x69, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6e, 0x61, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x39, 0x0a, 0x0a, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x61, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x22, 0x71, 0x0a, 0x1d, 0x49, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x6c, 0x75, 0x67, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4a,
	0x04, 0x08, 0x03, 0x10, 0x04, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x1e, 0x49, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x32, 0xa2, 0x08, 0x0a, 0x05,
	0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x34, 0x2e, 0x6e, 0x61, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6e, 0x61, 0x69,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x6e, 0x61, 0x69,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x6e, 0x61, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x6e, 0x61,
	0x69, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x6e, 0x61, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x07, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x29, 0x2e, 0x6e, 0x61, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x6e, 0x61, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x0c,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x2e, 0x6e,
	0x61, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6e,
	0x61, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x88, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x33, 0x2e,
	0x6e, 0x61, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6e, 0x61, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa9, 0x01, 0x0a, 0x24, 0x53,
	0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x3e, 0x2e, 0x6e, 0x61, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6e, 0x61, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x24, 0x2e, 0x6e, 0x61, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6e, 0x61, 0x69, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x7f, 0x0a, 0x16, 0x49, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x30, 0x2e, 0x6e, 0x61, 0x69, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x73,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6e, 0x61,
	0x69, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x1a, 0x5a, 0x18, 0x2e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var file_teams_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_teams_proto_goTypes = []any{
	(*Team)(nil), // 0: nais.api.protobuf.Team
	(*ListAuthorizedRepositoriesRequest)(nil),            // 1: nais.api.protobuf.ListAuthorizedRepositoriesRequest
	(*ListAuthorizedRepositoriesResponse)(nil),           // 2: nais.api.protobuf.ListAuthorizedRepositoriesResponse
	(*DeleteTeamRequest)(nil),                            // 3: nais.api.protobuf.DeleteTeamRequest
	(*DeleteTeamResponse)(nil),                           // 4: nais.api.protobuf.DeleteTeamResponse
	(*SetTeamExternalReferencesRequest)(nil),             // 5: nais.api.protobuf.SetTeamExternalReferencesRequest
	(*SetTeamExternalReferencesResponse)(nil),            // 6: nais.api.protobuf.SetTeamExternalReferencesResponse
	(*SetTeamEnvironmentExternalReferencesRequest)(nil),  // 7: nais.api.protobuf.SetTeamEnvironmentExternalReferencesRequest
	(*SetTeamEnvironmentExternalReferencesResponse)(nil), // 8: nais.api.protobuf.SetTeamEnvironmentExternalReferencesResponse
	(*ListTeamEnvironmentsRequest)(nil),                  // 9: nais.api.protobuf.ListTeamEnvironmentsRequest
	(*ListTeamEnvironmentsResponse)(nil),                 // 10: nais.api.protobuf.ListTeamEnvironmentsResponse
	(*TeamEnvironment)(nil),                              // 11: nais.api.protobuf.TeamEnvironment
	(*GetTeamResponse)(nil),                              // 12: nais.api.protobuf.GetTeamResponse
	(*GetTeamRequest)(nil),                               // 13: nais.api.protobuf.GetTeamRequest
	(*ListTeamsRequest)(nil),                             // 14: nais.api.protobuf.ListTeamsRequest
	(*ListTeamsResponse)(nil),                            // 15: nais.api.protobuf.ListTeamsResponse
	(*ListTeamMembersRequest)(nil),                       // 16: nais.api.protobuf.ListTeamMembersRequest
	(*ListTeamMembersResponse)(nil),                      // 17: nais.api.protobuf.ListTeamMembersResponse
	(*TeamMember)(nil),                                   // 18: nais.api.protobuf.TeamMember
	(*IsRepositoryAuthorizedRequest)(nil),                // 19: nais.api.protobuf.IsRepositoryAuthorizedRequest
	(*IsRepositoryAuthorizedResponse)(nil),               // 20: nais.api.protobuf.IsRepositoryAuthorizedResponse
	(*timestamppb.Timestamp)(nil),                        // 21: google.protobuf.Timestamp
	(*PageInfo)(nil),                                     // 22: nais.api.protobuf.PageInfo
	(*User)(nil),                                         // 23: nais.api.protobuf.User
}
var file_teams_proto_depIdxs = []int32{
	21, // 0: nais.api.protobuf.Team.delete_key_confirmed_at:type_name -> google.protobuf.Timestamp
	11, // 1: nais.api.protobuf.ListTeamEnvironmentsResponse.nodes:type_name -> nais.api.protobuf.TeamEnvironment
	22, // 2: nais.api.protobuf.ListTeamEnvironmentsResponse.page_info:type_name -> nais.api.protobuf.PageInfo
	0,  // 3: nais.api.protobuf.GetTeamResponse.team:type_name -> nais.api.protobuf.Team
	0,  // 4: nais.api.protobuf.ListTeamsResponse.nodes:type_name -> nais.api.protobuf.Team
	22, // 5: nais.api.protobuf.ListTeamsResponse.page_info:type_name -> nais.api.protobuf.PageInfo
	18, // 6: nais.api.protobuf.ListTeamMembersResponse.nodes:type_name -> nais.api.protobuf.TeamMember
	22, // 7: nais.api.protobuf.ListTeamMembersResponse.page_info:type_name -> nais.api.protobuf.PageInfo
	23, // 8: nais.api.protobuf.TeamMember.user:type_name -> nais.api.protobuf.User
	1,  // 9: nais.api.protobuf.Teams.ListAuthorizedRepositories:input_type -> nais.api.protobuf.ListAuthorizedRepositoriesRequest
	13, // 10: nais.api.protobuf.Teams.Get:input_type -> nais.api.protobuf.GetTeamRequest
	14, // 11: nais.api.protobuf.Teams.List:input_type -> nais.api.protobuf.ListTeamsRequest
	16, // 12: nais.api.protobuf.Teams.Members:input_type -> nais.api.protobuf.ListTeamMembersRequest
	9,  // 13: nais.api.protobuf.Teams.Environments:input_type -> nais.api.protobuf.ListTeamEnvironmentsRequest
	5,  // 14: nais.api.protobuf.Teams.SetTeamExternalReferences:input_type -> nais.api.protobuf.SetTeamExternalReferencesRequest
	7,  // 15: nais.api.protobuf.Teams.SetTeamEnvironmentExternalReferences:input_type -> nais.api.protobuf.SetTeamEnvironmentExternalReferencesRequest
	3,  // 16: nais.api.protobuf.Teams.Delete:input_type -> nais.api.protobuf.DeleteTeamRequest
	19, // 17: nais.api.protobuf.Teams.IsRepositoryAuthorized:input_type -> nais.api.protobuf.IsRepositoryAuthorizedRequest
	2,  // 18: nais.api.protobuf.Teams.ListAuthorizedRepositories:output_type -> nais.api.protobuf.ListAuthorizedRepositoriesResponse
	12, // 19: nais.api.protobuf.Teams.Get:output_type -> nais.api.protobuf.GetTeamResponse
	15, // 20: nais.api.protobuf.Teams.List:output_type -> nais.api.protobuf.ListTeamsResponse
	17, // 21: nais.api.protobuf.Teams.Members:output_type -> nais.api.protobuf.ListTeamMembersResponse
	10, // 22: nais.api.protobuf.Teams.Environments:output_type -> nais.api.protobuf.ListTeamEnvironmentsResponse
	6,  // 23: nais.api.protobuf.Teams.SetTeamExternalReferences:output_type -> nais.api.protobuf.SetTeamExternalReferencesResponse
	8,  // 24: nais.api.protobuf.Teams.SetTeamEnvironmentExternalReferences:output_type -> nais.api.protobuf.SetTeamEnvironmentExternalReferencesResponse
	4,  // 25: nais.api.protobuf.Teams.Delete:output_type -> nais.api.protobuf.DeleteTeamResponse
	20, // 26: nais.api.protobuf.Teams.IsRepositoryAuthorized:output_type -> nais.api.protobuf.IsRepositoryAuthorizedResponse
	18, // [18:27] is the sub-list for method output_type
	9,  // [9:18] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_teams_proto_init() }
func file_teams_proto_init() {
	if File_teams_proto != nil {
		return
	}
	file_pagination_proto_init()
	file_users_proto_init()
	file_teams_proto_msgTypes[0].OneofWrappers = []any{}
	file_teams_proto_msgTypes[5].OneofWrappers = []any{}
	file_teams_proto_msgTypes[7].OneofWrappers = []any{}
	file_teams_proto_msgTypes[11].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_teams_proto_rawDesc), len(file_teams_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_teams_proto_goTypes,
		DependencyIndexes: file_teams_proto_depIdxs,
		MessageInfos:      file_teams_proto_msgTypes,
	}.Build()
	File_teams_proto = out.File
	file_teams_proto_goTypes = nil
	file_teams_proto_depIdxs = nil
}
