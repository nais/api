// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package protoapi

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockDeploymentsServer creates a new instance of MockDeploymentsServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDeploymentsServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDeploymentsServer {
	mock := &MockDeploymentsServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDeploymentsServer is an autogenerated mock type for the DeploymentsServer type
type MockDeploymentsServer struct {
	mock.Mock
}

type MockDeploymentsServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDeploymentsServer) EXPECT() *MockDeploymentsServer_Expecter {
	return &MockDeploymentsServer_Expecter{mock: &_m.Mock}
}

// CreateDeployment provides a mock function for the type MockDeploymentsServer
func (_mock *MockDeploymentsServer) CreateDeployment(context1 context.Context, createDeploymentRequest *CreateDeploymentRequest) (*CreateDeploymentResponse, error) {
	ret := _mock.Called(context1, createDeploymentRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeployment")
	}

	var r0 *CreateDeploymentResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *CreateDeploymentRequest) (*CreateDeploymentResponse, error)); ok {
		return returnFunc(context1, createDeploymentRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *CreateDeploymentRequest) *CreateDeploymentResponse); ok {
		r0 = returnFunc(context1, createDeploymentRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateDeploymentResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *CreateDeploymentRequest) error); ok {
		r1 = returnFunc(context1, createDeploymentRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDeploymentsServer_CreateDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDeployment'
type MockDeploymentsServer_CreateDeployment_Call struct {
	*mock.Call
}

// CreateDeployment is a helper method to define mock.On call
//   - context1 context.Context
//   - createDeploymentRequest *CreateDeploymentRequest
func (_e *MockDeploymentsServer_Expecter) CreateDeployment(context1 interface{}, createDeploymentRequest interface{}) *MockDeploymentsServer_CreateDeployment_Call {
	return &MockDeploymentsServer_CreateDeployment_Call{Call: _e.mock.On("CreateDeployment", context1, createDeploymentRequest)}
}

func (_c *MockDeploymentsServer_CreateDeployment_Call) Run(run func(context1 context.Context, createDeploymentRequest *CreateDeploymentRequest)) *MockDeploymentsServer_CreateDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *CreateDeploymentRequest
		if args[1] != nil {
			arg1 = args[1].(*CreateDeploymentRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDeploymentsServer_CreateDeployment_Call) Return(createDeploymentResponse *CreateDeploymentResponse, err error) *MockDeploymentsServer_CreateDeployment_Call {
	_c.Call.Return(createDeploymentResponse, err)
	return _c
}

func (_c *MockDeploymentsServer_CreateDeployment_Call) RunAndReturn(run func(context1 context.Context, createDeploymentRequest *CreateDeploymentRequest) (*CreateDeploymentResponse, error)) *MockDeploymentsServer_CreateDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDeploymentK8SResource provides a mock function for the type MockDeploymentsServer
func (_mock *MockDeploymentsServer) CreateDeploymentK8SResource(context1 context.Context, createDeploymentK8SResourceRequest *CreateDeploymentK8SResourceRequest) (*CreateDeploymentK8SResourceResponse, error) {
	ret := _mock.Called(context1, createDeploymentK8SResourceRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeploymentK8SResource")
	}

	var r0 *CreateDeploymentK8SResourceResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *CreateDeploymentK8SResourceRequest) (*CreateDeploymentK8SResourceResponse, error)); ok {
		return returnFunc(context1, createDeploymentK8SResourceRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *CreateDeploymentK8SResourceRequest) *CreateDeploymentK8SResourceResponse); ok {
		r0 = returnFunc(context1, createDeploymentK8SResourceRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateDeploymentK8SResourceResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *CreateDeploymentK8SResourceRequest) error); ok {
		r1 = returnFunc(context1, createDeploymentK8SResourceRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDeploymentsServer_CreateDeploymentK8SResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDeploymentK8SResource'
type MockDeploymentsServer_CreateDeploymentK8SResource_Call struct {
	*mock.Call
}

// CreateDeploymentK8SResource is a helper method to define mock.On call
//   - context1 context.Context
//   - createDeploymentK8SResourceRequest *CreateDeploymentK8SResourceRequest
func (_e *MockDeploymentsServer_Expecter) CreateDeploymentK8SResource(context1 interface{}, createDeploymentK8SResourceRequest interface{}) *MockDeploymentsServer_CreateDeploymentK8SResource_Call {
	return &MockDeploymentsServer_CreateDeploymentK8SResource_Call{Call: _e.mock.On("CreateDeploymentK8SResource", context1, createDeploymentK8SResourceRequest)}
}

func (_c *MockDeploymentsServer_CreateDeploymentK8SResource_Call) Run(run func(context1 context.Context, createDeploymentK8SResourceRequest *CreateDeploymentK8SResourceRequest)) *MockDeploymentsServer_CreateDeploymentK8SResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *CreateDeploymentK8SResourceRequest
		if args[1] != nil {
			arg1 = args[1].(*CreateDeploymentK8SResourceRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDeploymentsServer_CreateDeploymentK8SResource_Call) Return(createDeploymentK8SResourceResponse *CreateDeploymentK8SResourceResponse, err error) *MockDeploymentsServer_CreateDeploymentK8SResource_Call {
	_c.Call.Return(createDeploymentK8SResourceResponse, err)
	return _c
}

func (_c *MockDeploymentsServer_CreateDeploymentK8SResource_Call) RunAndReturn(run func(context1 context.Context, createDeploymentK8SResourceRequest *CreateDeploymentK8SResourceRequest) (*CreateDeploymentK8SResourceResponse, error)) *MockDeploymentsServer_CreateDeploymentK8SResource_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDeploymentStatus provides a mock function for the type MockDeploymentsServer
func (_mock *MockDeploymentsServer) CreateDeploymentStatus(context1 context.Context, createDeploymentStatusRequest *CreateDeploymentStatusRequest) (*CreateDeploymentStatusResponse, error) {
	ret := _mock.Called(context1, createDeploymentStatusRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeploymentStatus")
	}

	var r0 *CreateDeploymentStatusResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *CreateDeploymentStatusRequest) (*CreateDeploymentStatusResponse, error)); ok {
		return returnFunc(context1, createDeploymentStatusRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *CreateDeploymentStatusRequest) *CreateDeploymentStatusResponse); ok {
		r0 = returnFunc(context1, createDeploymentStatusRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateDeploymentStatusResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *CreateDeploymentStatusRequest) error); ok {
		r1 = returnFunc(context1, createDeploymentStatusRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDeploymentsServer_CreateDeploymentStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDeploymentStatus'
type MockDeploymentsServer_CreateDeploymentStatus_Call struct {
	*mock.Call
}

// CreateDeploymentStatus is a helper method to define mock.On call
//   - context1 context.Context
//   - createDeploymentStatusRequest *CreateDeploymentStatusRequest
func (_e *MockDeploymentsServer_Expecter) CreateDeploymentStatus(context1 interface{}, createDeploymentStatusRequest interface{}) *MockDeploymentsServer_CreateDeploymentStatus_Call {
	return &MockDeploymentsServer_CreateDeploymentStatus_Call{Call: _e.mock.On("CreateDeploymentStatus", context1, createDeploymentStatusRequest)}
}

func (_c *MockDeploymentsServer_CreateDeploymentStatus_Call) Run(run func(context1 context.Context, createDeploymentStatusRequest *CreateDeploymentStatusRequest)) *MockDeploymentsServer_CreateDeploymentStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *CreateDeploymentStatusRequest
		if args[1] != nil {
			arg1 = args[1].(*CreateDeploymentStatusRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDeploymentsServer_CreateDeploymentStatus_Call) Return(createDeploymentStatusResponse *CreateDeploymentStatusResponse, err error) *MockDeploymentsServer_CreateDeploymentStatus_Call {
	_c.Call.Return(createDeploymentStatusResponse, err)
	return _c
}

func (_c *MockDeploymentsServer_CreateDeploymentStatus_Call) RunAndReturn(run func(context1 context.Context, createDeploymentStatusRequest *CreateDeploymentStatusRequest) (*CreateDeploymentStatusResponse, error)) *MockDeploymentsServer_CreateDeploymentStatus_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedDeploymentsServer provides a mock function for the type MockDeploymentsServer
func (_mock *MockDeploymentsServer) mustEmbedUnimplementedDeploymentsServer() {
	_mock.Called()
	return
}

// MockDeploymentsServer_mustEmbedUnimplementedDeploymentsServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedDeploymentsServer'
type MockDeploymentsServer_mustEmbedUnimplementedDeploymentsServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedDeploymentsServer is a helper method to define mock.On call
func (_e *MockDeploymentsServer_Expecter) mustEmbedUnimplementedDeploymentsServer() *MockDeploymentsServer_mustEmbedUnimplementedDeploymentsServer_Call {
	return &MockDeploymentsServer_mustEmbedUnimplementedDeploymentsServer_Call{Call: _e.mock.On("mustEmbedUnimplementedDeploymentsServer")}
}

func (_c *MockDeploymentsServer_mustEmbedUnimplementedDeploymentsServer_Call) Run(run func()) *MockDeploymentsServer_mustEmbedUnimplementedDeploymentsServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDeploymentsServer_mustEmbedUnimplementedDeploymentsServer_Call) Return() *MockDeploymentsServer_mustEmbedUnimplementedDeploymentsServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDeploymentsServer_mustEmbedUnimplementedDeploymentsServer_Call) RunAndReturn(run func()) *MockDeploymentsServer_mustEmbedUnimplementedDeploymentsServer_Call {
	_c.Run(run)
	return _c
}
