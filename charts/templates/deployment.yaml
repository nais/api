apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}"
  labels:
    app: "{{ .Release.Name }}"
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: "{{ .Release.Name }}"
  template:
    metadata:
      annotations:
        prometheus.io/path: "/metrics"
        kubectl.kubernetes.io/default-container: "{{ .Chart.Name }}"
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
      labels:
        app: "{{ .Release.Name }}"
    spec:
      serviceAccountName: "{{ .Release.Name }}"
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: "{{ .Chart.Name }}"
          env:
            - name: KUBERNETES_CLUSTERS
              value: "{{ .Values.kubernetes.clusters }}"
            {{- if .Values.kubernetes.static }}
            - name: KUBERNETES_CLUSTERS_STATIC
              value: "{{ .Values.kubernetes.static }}"
            {{- end }}
            - name: TENANT
              value: "{{ .Values.fasit.tenant.name }}"
            - name: TENANT_DOMAIN
              value: "{{ .Values.tenant.domain }}"
            - name: GOOGLE_MANAGEMENT_PROJECT_ID
              value: "{{ .Values.google.managementProjectID }}"
            - name: COST_DATA_IMPORT_ENABLED
              value: "true"

            - name: VULNERABILITIES_ENDPOINT
              value: "{{ .Values.v13s.endpoint }}"
            - name: VULNERABILITIES_SERVICE_ACCOUNT
              value: "{{ .Values.serviceaccount.email }}"
            - name: USERSYNC_ENABLED
              value: "true"
            - name: OAUTH_ISSUER
              value: "{{ .Values.oauth.issuer }}"
            - name: OAUTH_CLIENT_ID
              value: "{{ .Values.oauth.clientID }}"
            - name: OAUTH_REDIRECT_URL
              value: "https://{{ .Values.host }}/oauth2/callback"
            - name: OAUTH_FRONTEND_URL
              value: "https://{{ .Values.host }}"
            - name: OAUTH_ADDITIONAL_SCOPES
              value: "urn:zitadel:iam:org:id:{{ .Values.zitadel.organizationID }}"
            - name: LISTEN_ADDRESS
              value: ":3000"
            - name: INTERNAL_LISTEN_ADDRESS
              value: ":3005"
            - name: GRPC_LISTEN_ADDRESS
              value: ":3001"
            - name: USERSYNC_SERVICE_ACCOUNT
              value: {{ .Values.usersync.serviceAccount | quote }}
            - name: USERSYNC_SUBJECT_EMAIL
              value: {{ .Values.usersync.subjectEmail | quote }}
            - name: UNLEASH_ENABLED
              value: "{{ .Values.unleash.enabled }}"
            - name: UNLEASH_NAMESPACE
              value: "{{ .Values.unleash.namespace }}"
            - name: UNLEASH_BIFROST_API_URL
              value: "{{ .Values.unleash.bifrostApiUrl }}"
            {{- if .Values.usersync.adminGroupPrefix }}
            - name: USERSYNC_ADMIN_GROUP_PREFIX
              value: "{{ .Values.usersync.adminGroupPrefix }}"
            {{- end }}
            {{- if .Values.replaceEnvironmentNames }}
            - name: REPLACE_ENVIRONMENT_NAMES
              value: {{ .Values.replaceEnvironmentNames | quote }}
            {{- end }}
            {{- if .Values.logging.loki }}
            - name: LOGGING_LOKI_CLUSTER_DEFAULT
              value: "true"
            {{- end }}
            {{- if .Values.logging.secure_logs }}
            - name: LOGGING_LOKI_CLUSTER_DEFAULT
              value: "true"
            {{- end }}
            - name: ZITADEL_IDP_ID
              value: {{ .Values.zitadel.idpID | quote }}
            - name: ZITADEL_DOMAIN
              value: {{ .Values.zitadel.domain | quote }}
            - name: ZITADEL_ORGANIZATION_ID
              value: {{ .Values.zitadel.organizationID | quote }}
            - name: CLOUD_SQL_INSTANCE
              value: {{ .Values.database.instance | quote }}
          envFrom:
            - secretRef:
                name: "{{ .Release.Name }}"
          securityContext:
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1069
            allowPrivilegeEscalation: false
          image: "{{ .Values.image.repository }}/{{ .Values.image.name }}:{{ .Chart.Version }}"
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
            - name: metrics
              containerPort: 3005
              protocol: TCP
            - name: grpc
              containerPort: 3001
              protocol: TCP
          startupProbe:
            httpGet:
              path: /healthz
              port: metrics
            initialDelaySeconds: 5
            periodSeconds: 10
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /healthz
              port: metrics
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /healthz
              port: metrics
            failureThreshold: 3
          resources:
            limits:
              memory: "{{ .Values.resources.memory }}"
            requests:
              cpu: "{{ .Values.resources.cpu }}"
              memory: "{{ .Values.resources.memory }}"
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
