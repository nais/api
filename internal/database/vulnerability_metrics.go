package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/nais/api/internal/database/gensql"
	"github.com/nais/api/internal/slug"
)

// VulnerabilityMetricsRepo is an interface for interacting with the database.
type VulnerabilityMetricsRepo interface {
	// CreateDependencytrackProject creates a new project in dependencytrack.
	CreateDependencytrackProject(ctx context.Context, arg gensql.CreateDependencytrackProjectParams) error
	// DailyVulnerabilityForTeam updates the vulnerability metrics for all applications.
	DailyVulnerabilityForTeam(ctx context.Context, fromDate pgtype.Date, toDate pgtype.Date, teamSlug slug.Slug) ([]*gensql.DailyVulnerabilityForTeamRow, error)
	// VulnerabilityMetricsUpsert returns the vulnerability metrics
	VulnerabilityMetricsUpsert(ctx context.Context, arg []gensql.VulnerabilityMetricsUpsertParams) (*gensql.VulnerabilityMetricsUpsertBatchResults, error)
}

// CreateDependencytrackProject creates a new project in dependencytrack.
func (d *database) CreateDependencytrackProject(ctx context.Context, arg gensql.CreateDependencytrackProjectParams) error {
	return d.querier.CreateDependencytrackProject(ctx, arg)
}

func (d *database) DailyVulnerabilityForTeam(ctx context.Context, fromDate pgtype.Date, toDate pgtype.Date, teamSlug slug.Slug) ([]*gensql.DailyVulnerabilityForTeamRow, error) {
	return d.DailyVulnerabilityForTeam(ctx, fromDate, toDate, teamSlug)
}

func (d *database) VulnerabilityMetricsUpsert(ctx context.Context, arg []gensql.VulnerabilityMetricsUpsertParams) (*gensql.VulnerabilityMetricsUpsertBatchResults, error) {
	return d.querier.VulnerabilityMetricsUpsert(ctx, arg), nil
}
