package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/nais/api/internal/database/gensql"
	"github.com/nais/api/internal/slug"
)

// VulnerabilityMetricsRepo is an interface for interacting with the database.
type VulnerabilityMetricsRepo interface {
	// CreateDependencytrackProject creates a new project in dependencytrack.
	CreateDependencytrackProject(ctx context.Context, arg gensql.CreateDependencytrackProjectParams) error
	// DailyVulnerabilityForTeam updates the vulnerability metrics for all applications.
	DailyVulnerabilityForTeam(ctx context.Context, fromDate pgtype.Date, toDate pgtype.Date, teamSlug slug.Slug) ([]*gensql.DailyVulnerabilityForTeamRow, error)
	// VulnerabilityMetricsUpsert returns the vulnerability metrics
	VulnerabilityMetricsUpsert(ctx context.Context, arg []gensql.VulnerabilityMetricsUpsertParams) *gensql.VulnerabilityMetricsUpsertBatchResults
	// FirstAndLastVulnerabilityMetricsDate returns the first and last date for vulnerability metrics
	VulnerabilityMetricsDateRangeForTeam(ctx context.Context, teamSlug slug.Slug) (*gensql.VulnerabilityMetricsDateRangeForTeamRow, error)
	// VulnerabilityMetricsMaxDate returns the max date for vulnerability metrics for a given project id
	VulnerabilityMetricsMaxDate(ctx context.Context, environment, app string, teamSlug slug.Slug) (pgtype.Date, error)
	// DailyVulnerabilityForTeamAndEnvironment will return the metrics for the given team and environment from first to last date.
	VulnerabilityMetricsDateRangeForTeamAndEnvironment(ctx context.Context, fromDate pgtype.Date, toDate pgtype.Date, teamSlug slug.Slug, environment string) ([]*gensql.DailyVulnerabilityForTeamAndEnvironmentRow, error)
}

func (d *database) VulnerabilityMetricsDateRangeForTeamAndEnvironment(ctx context.Context, fromDate pgtype.Date, toDate pgtype.Date, teamSlug slug.Slug, environment string) ([]*gensql.DailyVulnerabilityForTeamAndEnvironmentRow, error) {
	return d.querier.DailyVulnerabilityForTeamAndEnvironment(ctx, gensql.DailyVulnerabilityForTeamAndEnvironmentParams{
		FromDate:    fromDate,
		ToDate:      toDate,
		TeamSlug:    teamSlug,
		Environment: environment,
	})
}

func (d *database) VulnerabilityMetricsMaxDate(ctx context.Context, environment, app string, teamSlug slug.Slug) (pgtype.Date, error) {
	return d.querier.VulnerabilityMetricsMaxDate(ctx, gensql.VulnerabilityMetricsMaxDateParams{
		Environment: environment,
		App:         app,
		TeamSlug:    teamSlug,
	})
}

func (d *database) VulnerabilityMetricsDateRangeForTeam(ctx context.Context, teamSlug slug.Slug) (*gensql.VulnerabilityMetricsDateRangeForTeamRow, error) {
	return d.querier.VulnerabilityMetricsDateRangeForTeam(ctx, teamSlug)
}

// CreateDependencytrackProject creates a new project in dependencytrack.
func (d *database) CreateDependencytrackProject(ctx context.Context, arg gensql.CreateDependencytrackProjectParams) error {
	return d.querier.CreateDependencytrackProject(ctx, arg)
}

func (d *database) DailyVulnerabilityForTeam(ctx context.Context, fromDate pgtype.Date, toDate pgtype.Date, teamSlug slug.Slug) ([]*gensql.DailyVulnerabilityForTeamRow, error) {
	arg := gensql.DailyVulnerabilityForTeamParams{
		FromDate: fromDate,
		ToDate:   toDate,
		TeamSlug: teamSlug,
	}
	return d.querier.DailyVulnerabilityForTeam(ctx, arg)
}

func (d *database) VulnerabilityMetricsUpsert(ctx context.Context, arg []gensql.VulnerabilityMetricsUpsertParams) *gensql.VulnerabilityMetricsUpsertBatchResults {
	return d.querier.VulnerabilityMetricsUpsert(ctx, arg)
}
