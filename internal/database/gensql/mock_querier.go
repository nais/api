// Code generated by mockery. DO NOT EDIT.

package gensql

import (
	context "context"

	pgtype "github.com/jackc/pgx/v5/pgtype"
	mock "github.com/stretchr/testify/mock"

	slug "github.com/nais/api/internal/slug"

	uuid "github.com/google/uuid"
)

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
}

type MockQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerier) EXPECT() *MockQuerier_Expecter {
	return &MockQuerier_Expecter{mock: &_m.Mock}
}

// AddReconcilerOptOut provides a mock function with given fields: ctx, teamSlug, userID, reconcilerName
func (_m *MockQuerier) AddReconcilerOptOut(ctx context.Context, teamSlug slug.Slug, userID uuid.UUID, reconcilerName string) error {
	ret := _m.Called(ctx, teamSlug, userID, reconcilerName)

	if len(ret) == 0 {
		panic("no return value specified for AddReconcilerOptOut")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, uuid.UUID, string) error); ok {
		r0 = rf(ctx, teamSlug, userID, reconcilerName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_AddReconcilerOptOut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddReconcilerOptOut'
type MockQuerier_AddReconcilerOptOut_Call struct {
	*mock.Call
}

// AddReconcilerOptOut is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
//   - userID uuid.UUID
//   - reconcilerName string
func (_e *MockQuerier_Expecter) AddReconcilerOptOut(ctx interface{}, teamSlug interface{}, userID interface{}, reconcilerName interface{}) *MockQuerier_AddReconcilerOptOut_Call {
	return &MockQuerier_AddReconcilerOptOut_Call{Call: _e.mock.On("AddReconcilerOptOut", ctx, teamSlug, userID, reconcilerName)}
}

func (_c *MockQuerier_AddReconcilerOptOut_Call) Run(run func(ctx context.Context, teamSlug slug.Slug, userID uuid.UUID, reconcilerName string)) *MockQuerier_AddReconcilerOptOut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug), args[2].(uuid.UUID), args[3].(string))
	})
	return _c
}

func (_c *MockQuerier_AddReconcilerOptOut_Call) Return(_a0 error) *MockQuerier_AddReconcilerOptOut_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_AddReconcilerOptOut_Call) RunAndReturn(run func(context.Context, slug.Slug, uuid.UUID, string) error) *MockQuerier_AddReconcilerOptOut_Call {
	_c.Call.Return(run)
	return _c
}

// AssignGlobalRoleToServiceAccount provides a mock function with given fields: ctx, serviceAccountID, roleName
func (_m *MockQuerier) AssignGlobalRoleToServiceAccount(ctx context.Context, serviceAccountID uuid.UUID, roleName RoleName) error {
	ret := _m.Called(ctx, serviceAccountID, roleName)

	if len(ret) == 0 {
		panic("no return value specified for AssignGlobalRoleToServiceAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, RoleName) error); ok {
		r0 = rf(ctx, serviceAccountID, roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_AssignGlobalRoleToServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignGlobalRoleToServiceAccount'
type MockQuerier_AssignGlobalRoleToServiceAccount_Call struct {
	*mock.Call
}

// AssignGlobalRoleToServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceAccountID uuid.UUID
//   - roleName RoleName
func (_e *MockQuerier_Expecter) AssignGlobalRoleToServiceAccount(ctx interface{}, serviceAccountID interface{}, roleName interface{}) *MockQuerier_AssignGlobalRoleToServiceAccount_Call {
	return &MockQuerier_AssignGlobalRoleToServiceAccount_Call{Call: _e.mock.On("AssignGlobalRoleToServiceAccount", ctx, serviceAccountID, roleName)}
}

func (_c *MockQuerier_AssignGlobalRoleToServiceAccount_Call) Run(run func(ctx context.Context, serviceAccountID uuid.UUID, roleName RoleName)) *MockQuerier_AssignGlobalRoleToServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(RoleName))
	})
	return _c
}

func (_c *MockQuerier_AssignGlobalRoleToServiceAccount_Call) Return(_a0 error) *MockQuerier_AssignGlobalRoleToServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_AssignGlobalRoleToServiceAccount_Call) RunAndReturn(run func(context.Context, uuid.UUID, RoleName) error) *MockQuerier_AssignGlobalRoleToServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// AssignGlobalRoleToUser provides a mock function with given fields: ctx, userID, roleName
func (_m *MockQuerier) AssignGlobalRoleToUser(ctx context.Context, userID uuid.UUID, roleName RoleName) error {
	ret := _m.Called(ctx, userID, roleName)

	if len(ret) == 0 {
		panic("no return value specified for AssignGlobalRoleToUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, RoleName) error); ok {
		r0 = rf(ctx, userID, roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_AssignGlobalRoleToUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignGlobalRoleToUser'
type MockQuerier_AssignGlobalRoleToUser_Call struct {
	*mock.Call
}

// AssignGlobalRoleToUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - roleName RoleName
func (_e *MockQuerier_Expecter) AssignGlobalRoleToUser(ctx interface{}, userID interface{}, roleName interface{}) *MockQuerier_AssignGlobalRoleToUser_Call {
	return &MockQuerier_AssignGlobalRoleToUser_Call{Call: _e.mock.On("AssignGlobalRoleToUser", ctx, userID, roleName)}
}

func (_c *MockQuerier_AssignGlobalRoleToUser_Call) Run(run func(ctx context.Context, userID uuid.UUID, roleName RoleName)) *MockQuerier_AssignGlobalRoleToUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(RoleName))
	})
	return _c
}

func (_c *MockQuerier_AssignGlobalRoleToUser_Call) Return(_a0 error) *MockQuerier_AssignGlobalRoleToUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_AssignGlobalRoleToUser_Call) RunAndReturn(run func(context.Context, uuid.UUID, RoleName) error) *MockQuerier_AssignGlobalRoleToUser_Call {
	_c.Call.Return(run)
	return _c
}

// AssignTeamRoleToServiceAccount provides a mock function with given fields: ctx, serviceAccountID, roleName, targetTeamSlug
func (_m *MockQuerier) AssignTeamRoleToServiceAccount(ctx context.Context, serviceAccountID uuid.UUID, roleName RoleName, targetTeamSlug slug.Slug) error {
	ret := _m.Called(ctx, serviceAccountID, roleName, targetTeamSlug)

	if len(ret) == 0 {
		panic("no return value specified for AssignTeamRoleToServiceAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, RoleName, slug.Slug) error); ok {
		r0 = rf(ctx, serviceAccountID, roleName, targetTeamSlug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_AssignTeamRoleToServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignTeamRoleToServiceAccount'
type MockQuerier_AssignTeamRoleToServiceAccount_Call struct {
	*mock.Call
}

// AssignTeamRoleToServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceAccountID uuid.UUID
//   - roleName RoleName
//   - targetTeamSlug slug.Slug
func (_e *MockQuerier_Expecter) AssignTeamRoleToServiceAccount(ctx interface{}, serviceAccountID interface{}, roleName interface{}, targetTeamSlug interface{}) *MockQuerier_AssignTeamRoleToServiceAccount_Call {
	return &MockQuerier_AssignTeamRoleToServiceAccount_Call{Call: _e.mock.On("AssignTeamRoleToServiceAccount", ctx, serviceAccountID, roleName, targetTeamSlug)}
}

func (_c *MockQuerier_AssignTeamRoleToServiceAccount_Call) Run(run func(ctx context.Context, serviceAccountID uuid.UUID, roleName RoleName, targetTeamSlug slug.Slug)) *MockQuerier_AssignTeamRoleToServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(RoleName), args[3].(slug.Slug))
	})
	return _c
}

func (_c *MockQuerier_AssignTeamRoleToServiceAccount_Call) Return(_a0 error) *MockQuerier_AssignTeamRoleToServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_AssignTeamRoleToServiceAccount_Call) RunAndReturn(run func(context.Context, uuid.UUID, RoleName, slug.Slug) error) *MockQuerier_AssignTeamRoleToServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// AssignTeamRoleToUser provides a mock function with given fields: ctx, userID, roleName, targetTeamSlug
func (_m *MockQuerier) AssignTeamRoleToUser(ctx context.Context, userID uuid.UUID, roleName RoleName, targetTeamSlug slug.Slug) error {
	ret := _m.Called(ctx, userID, roleName, targetTeamSlug)

	if len(ret) == 0 {
		panic("no return value specified for AssignTeamRoleToUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, RoleName, slug.Slug) error); ok {
		r0 = rf(ctx, userID, roleName, targetTeamSlug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_AssignTeamRoleToUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignTeamRoleToUser'
type MockQuerier_AssignTeamRoleToUser_Call struct {
	*mock.Call
}

// AssignTeamRoleToUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - roleName RoleName
//   - targetTeamSlug slug.Slug
func (_e *MockQuerier_Expecter) AssignTeamRoleToUser(ctx interface{}, userID interface{}, roleName interface{}, targetTeamSlug interface{}) *MockQuerier_AssignTeamRoleToUser_Call {
	return &MockQuerier_AssignTeamRoleToUser_Call{Call: _e.mock.On("AssignTeamRoleToUser", ctx, userID, roleName, targetTeamSlug)}
}

func (_c *MockQuerier_AssignTeamRoleToUser_Call) Run(run func(ctx context.Context, userID uuid.UUID, roleName RoleName, targetTeamSlug slug.Slug)) *MockQuerier_AssignTeamRoleToUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(RoleName), args[3].(slug.Slug))
	})
	return _c
}

func (_c *MockQuerier_AssignTeamRoleToUser_Call) Return(_a0 error) *MockQuerier_AssignTeamRoleToUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_AssignTeamRoleToUser_Call) RunAndReturn(run func(context.Context, uuid.UUID, RoleName, slug.Slug) error) *MockQuerier_AssignTeamRoleToUser_Call {
	_c.Call.Return(run)
	return _c
}

// AverageResourceUtilizationForTeam provides a mock function with given fields: ctx, teamSlug, resourceType, timestamp
func (_m *MockQuerier) AverageResourceUtilizationForTeam(ctx context.Context, teamSlug slug.Slug, resourceType ResourceType, timestamp pgtype.Timestamptz) (*AverageResourceUtilizationForTeamRow, error) {
	ret := _m.Called(ctx, teamSlug, resourceType, timestamp)

	if len(ret) == 0 {
		panic("no return value specified for AverageResourceUtilizationForTeam")
	}

	var r0 *AverageResourceUtilizationForTeamRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, ResourceType, pgtype.Timestamptz) (*AverageResourceUtilizationForTeamRow, error)); ok {
		return rf(ctx, teamSlug, resourceType, timestamp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, ResourceType, pgtype.Timestamptz) *AverageResourceUtilizationForTeamRow); ok {
		r0 = rf(ctx, teamSlug, resourceType, timestamp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AverageResourceUtilizationForTeamRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug, ResourceType, pgtype.Timestamptz) error); ok {
		r1 = rf(ctx, teamSlug, resourceType, timestamp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_AverageResourceUtilizationForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AverageResourceUtilizationForTeam'
type MockQuerier_AverageResourceUtilizationForTeam_Call struct {
	*mock.Call
}

// AverageResourceUtilizationForTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
//   - resourceType ResourceType
//   - timestamp pgtype.Timestamptz
func (_e *MockQuerier_Expecter) AverageResourceUtilizationForTeam(ctx interface{}, teamSlug interface{}, resourceType interface{}, timestamp interface{}) *MockQuerier_AverageResourceUtilizationForTeam_Call {
	return &MockQuerier_AverageResourceUtilizationForTeam_Call{Call: _e.mock.On("AverageResourceUtilizationForTeam", ctx, teamSlug, resourceType, timestamp)}
}

func (_c *MockQuerier_AverageResourceUtilizationForTeam_Call) Run(run func(ctx context.Context, teamSlug slug.Slug, resourceType ResourceType, timestamp pgtype.Timestamptz)) *MockQuerier_AverageResourceUtilizationForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug), args[2].(ResourceType), args[3].(pgtype.Timestamptz))
	})
	return _c
}

func (_c *MockQuerier_AverageResourceUtilizationForTeam_Call) Return(_a0 *AverageResourceUtilizationForTeamRow, _a1 error) *MockQuerier_AverageResourceUtilizationForTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_AverageResourceUtilizationForTeam_Call) RunAndReturn(run func(context.Context, slug.Slug, ResourceType, pgtype.Timestamptz) (*AverageResourceUtilizationForTeamRow, error)) *MockQuerier_AverageResourceUtilizationForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// ClearReconcilerErrorsForTeam provides a mock function with given fields: ctx, teamSlug, reconciler
func (_m *MockQuerier) ClearReconcilerErrorsForTeam(ctx context.Context, teamSlug slug.Slug, reconciler string) error {
	ret := _m.Called(ctx, teamSlug, reconciler)

	if len(ret) == 0 {
		panic("no return value specified for ClearReconcilerErrorsForTeam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, string) error); ok {
		r0 = rf(ctx, teamSlug, reconciler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_ClearReconcilerErrorsForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearReconcilerErrorsForTeam'
type MockQuerier_ClearReconcilerErrorsForTeam_Call struct {
	*mock.Call
}

// ClearReconcilerErrorsForTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
//   - reconciler string
func (_e *MockQuerier_Expecter) ClearReconcilerErrorsForTeam(ctx interface{}, teamSlug interface{}, reconciler interface{}) *MockQuerier_ClearReconcilerErrorsForTeam_Call {
	return &MockQuerier_ClearReconcilerErrorsForTeam_Call{Call: _e.mock.On("ClearReconcilerErrorsForTeam", ctx, teamSlug, reconciler)}
}

func (_c *MockQuerier_ClearReconcilerErrorsForTeam_Call) Run(run func(ctx context.Context, teamSlug slug.Slug, reconciler string)) *MockQuerier_ClearReconcilerErrorsForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug), args[2].(string))
	})
	return _c
}

func (_c *MockQuerier_ClearReconcilerErrorsForTeam_Call) Return(_a0 error) *MockQuerier_ClearReconcilerErrorsForTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_ClearReconcilerErrorsForTeam_Call) RunAndReturn(run func(context.Context, slug.Slug, string) error) *MockQuerier_ClearReconcilerErrorsForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigureReconciler provides a mock function with given fields: ctx, value, reconcilerName, key
func (_m *MockQuerier) ConfigureReconciler(ctx context.Context, value string, reconcilerName string, key string) error {
	ret := _m.Called(ctx, value, reconcilerName, key)

	if len(ret) == 0 {
		panic("no return value specified for ConfigureReconciler")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, value, reconcilerName, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_ConfigureReconciler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigureReconciler'
type MockQuerier_ConfigureReconciler_Call struct {
	*mock.Call
}

// ConfigureReconciler is a helper method to define mock.On call
//   - ctx context.Context
//   - value string
//   - reconcilerName string
//   - key string
func (_e *MockQuerier_Expecter) ConfigureReconciler(ctx interface{}, value interface{}, reconcilerName interface{}, key interface{}) *MockQuerier_ConfigureReconciler_Call {
	return &MockQuerier_ConfigureReconciler_Call{Call: _e.mock.On("ConfigureReconciler", ctx, value, reconcilerName, key)}
}

func (_c *MockQuerier_ConfigureReconciler_Call) Run(run func(ctx context.Context, value string, reconcilerName string, key string)) *MockQuerier_ConfigureReconciler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockQuerier_ConfigureReconciler_Call) Return(_a0 error) *MockQuerier_ConfigureReconciler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_ConfigureReconciler_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockQuerier_ConfigureReconciler_Call {
	_c.Call.Return(run)
	return _c
}

// ConfirmTeamDeleteKey provides a mock function with given fields: ctx, key
func (_m *MockQuerier) ConfirmTeamDeleteKey(ctx context.Context, key uuid.UUID) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for ConfirmTeamDeleteKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_ConfirmTeamDeleteKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfirmTeamDeleteKey'
type MockQuerier_ConfirmTeamDeleteKey_Call struct {
	*mock.Call
}

// ConfirmTeamDeleteKey is a helper method to define mock.On call
//   - ctx context.Context
//   - key uuid.UUID
func (_e *MockQuerier_Expecter) ConfirmTeamDeleteKey(ctx interface{}, key interface{}) *MockQuerier_ConfirmTeamDeleteKey_Call {
	return &MockQuerier_ConfirmTeamDeleteKey_Call{Call: _e.mock.On("ConfirmTeamDeleteKey", ctx, key)}
}

func (_c *MockQuerier_ConfirmTeamDeleteKey_Call) Run(run func(ctx context.Context, key uuid.UUID)) *MockQuerier_ConfirmTeamDeleteKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockQuerier_ConfirmTeamDeleteKey_Call) Return(_a0 error) *MockQuerier_ConfirmTeamDeleteKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_ConfirmTeamDeleteKey_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockQuerier_ConfirmTeamDeleteKey_Call {
	_c.Call.Return(run)
	return _c
}

// CostUpsert provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) CostUpsert(ctx context.Context, arg []CostUpsertParams) *CostUpsertBatchResults {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CostUpsert")
	}

	var r0 *CostUpsertBatchResults
	if rf, ok := ret.Get(0).(func(context.Context, []CostUpsertParams) *CostUpsertBatchResults); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CostUpsertBatchResults)
		}
	}

	return r0
}

// MockQuerier_CostUpsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CostUpsert'
type MockQuerier_CostUpsert_Call struct {
	*mock.Call
}

// CostUpsert is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []CostUpsertParams
func (_e *MockQuerier_Expecter) CostUpsert(ctx interface{}, arg interface{}) *MockQuerier_CostUpsert_Call {
	return &MockQuerier_CostUpsert_Call{Call: _e.mock.On("CostUpsert", ctx, arg)}
}

func (_c *MockQuerier_CostUpsert_Call) Run(run func(ctx context.Context, arg []CostUpsertParams)) *MockQuerier_CostUpsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]CostUpsertParams))
	})
	return _c
}

func (_c *MockQuerier_CostUpsert_Call) Return(_a0 *CostUpsertBatchResults) *MockQuerier_CostUpsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_CostUpsert_Call) RunAndReturn(run func(context.Context, []CostUpsertParams) *CostUpsertBatchResults) *MockQuerier_CostUpsert_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAPIKey provides a mock function with given fields: ctx, apiKey, serviceAccountID
func (_m *MockQuerier) CreateAPIKey(ctx context.Context, apiKey string, serviceAccountID uuid.UUID) error {
	ret := _m.Called(ctx, apiKey, serviceAccountID)

	if len(ret) == 0 {
		panic("no return value specified for CreateAPIKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID) error); ok {
		r0 = rf(ctx, apiKey, serviceAccountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_CreateAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAPIKey'
type MockQuerier_CreateAPIKey_Call struct {
	*mock.Call
}

// CreateAPIKey is a helper method to define mock.On call
//   - ctx context.Context
//   - apiKey string
//   - serviceAccountID uuid.UUID
func (_e *MockQuerier_Expecter) CreateAPIKey(ctx interface{}, apiKey interface{}, serviceAccountID interface{}) *MockQuerier_CreateAPIKey_Call {
	return &MockQuerier_CreateAPIKey_Call{Call: _e.mock.On("CreateAPIKey", ctx, apiKey, serviceAccountID)}
}

func (_c *MockQuerier_CreateAPIKey_Call) Run(run func(ctx context.Context, apiKey string, serviceAccountID uuid.UUID)) *MockQuerier_CreateAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockQuerier_CreateAPIKey_Call) Return(_a0 error) *MockQuerier_CreateAPIKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_CreateAPIKey_Call) RunAndReturn(run func(context.Context, string, uuid.UUID) error) *MockQuerier_CreateAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAuditLog provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) CreateAuditLog(ctx context.Context, arg CreateAuditLogParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuditLog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, CreateAuditLogParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_CreateAuditLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuditLog'
type MockQuerier_CreateAuditLog_Call struct {
	*mock.Call
}

// CreateAuditLog is a helper method to define mock.On call
//   - ctx context.Context
//   - arg CreateAuditLogParams
func (_e *MockQuerier_Expecter) CreateAuditLog(ctx interface{}, arg interface{}) *MockQuerier_CreateAuditLog_Call {
	return &MockQuerier_CreateAuditLog_Call{Call: _e.mock.On("CreateAuditLog", ctx, arg)}
}

func (_c *MockQuerier_CreateAuditLog_Call) Run(run func(ctx context.Context, arg CreateAuditLogParams)) *MockQuerier_CreateAuditLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateAuditLogParams))
	})
	return _c
}

func (_c *MockQuerier_CreateAuditLog_Call) Return(_a0 error) *MockQuerier_CreateAuditLog_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_CreateAuditLog_Call) RunAndReturn(run func(context.Context, CreateAuditLogParams) error) *MockQuerier_CreateAuditLog_Call {
	_c.Call.Return(run)
	return _c
}

// CreateReconcilerResource provides a mock function with given fields: ctx, reconcilerName, teamSlug, name, value, metadata
func (_m *MockQuerier) CreateReconcilerResource(ctx context.Context, reconcilerName string, teamSlug slug.Slug, name string, value string, metadata interface{}) (*ReconcilerResource, error) {
	ret := _m.Called(ctx, reconcilerName, teamSlug, name, value, metadata)

	if len(ret) == 0 {
		panic("no return value specified for CreateReconcilerResource")
	}

	var r0 *ReconcilerResource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, slug.Slug, string, string, interface{}) (*ReconcilerResource, error)); ok {
		return rf(ctx, reconcilerName, teamSlug, name, value, metadata)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, slug.Slug, string, string, interface{}) *ReconcilerResource); ok {
		r0 = rf(ctx, reconcilerName, teamSlug, name, value, metadata)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ReconcilerResource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, slug.Slug, string, string, interface{}) error); ok {
		r1 = rf(ctx, reconcilerName, teamSlug, name, value, metadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateReconcilerResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateReconcilerResource'
type MockQuerier_CreateReconcilerResource_Call struct {
	*mock.Call
}

// CreateReconcilerResource is a helper method to define mock.On call
//   - ctx context.Context
//   - reconcilerName string
//   - teamSlug slug.Slug
//   - name string
//   - value string
//   - metadata interface{}
func (_e *MockQuerier_Expecter) CreateReconcilerResource(ctx interface{}, reconcilerName interface{}, teamSlug interface{}, name interface{}, value interface{}, metadata interface{}) *MockQuerier_CreateReconcilerResource_Call {
	return &MockQuerier_CreateReconcilerResource_Call{Call: _e.mock.On("CreateReconcilerResource", ctx, reconcilerName, teamSlug, name, value, metadata)}
}

func (_c *MockQuerier_CreateReconcilerResource_Call) Run(run func(ctx context.Context, reconcilerName string, teamSlug slug.Slug, name string, value string, metadata interface{})) *MockQuerier_CreateReconcilerResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(slug.Slug), args[3].(string), args[4].(string), args[5].(interface{}))
	})
	return _c
}

func (_c *MockQuerier_CreateReconcilerResource_Call) Return(_a0 *ReconcilerResource, _a1 error) *MockQuerier_CreateReconcilerResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateReconcilerResource_Call) RunAndReturn(run func(context.Context, string, slug.Slug, string, string, interface{}) (*ReconcilerResource, error)) *MockQuerier_CreateReconcilerResource_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRepositoryAuthorization provides a mock function with given fields: ctx, teamSlug, githubRepository, repositoryAuthorization
func (_m *MockQuerier) CreateRepositoryAuthorization(ctx context.Context, teamSlug slug.Slug, githubRepository string, repositoryAuthorization RepositoryAuthorizationEnum) error {
	ret := _m.Called(ctx, teamSlug, githubRepository, repositoryAuthorization)

	if len(ret) == 0 {
		panic("no return value specified for CreateRepositoryAuthorization")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, string, RepositoryAuthorizationEnum) error); ok {
		r0 = rf(ctx, teamSlug, githubRepository, repositoryAuthorization)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_CreateRepositoryAuthorization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRepositoryAuthorization'
type MockQuerier_CreateRepositoryAuthorization_Call struct {
	*mock.Call
}

// CreateRepositoryAuthorization is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
//   - githubRepository string
//   - repositoryAuthorization RepositoryAuthorizationEnum
func (_e *MockQuerier_Expecter) CreateRepositoryAuthorization(ctx interface{}, teamSlug interface{}, githubRepository interface{}, repositoryAuthorization interface{}) *MockQuerier_CreateRepositoryAuthorization_Call {
	return &MockQuerier_CreateRepositoryAuthorization_Call{Call: _e.mock.On("CreateRepositoryAuthorization", ctx, teamSlug, githubRepository, repositoryAuthorization)}
}

func (_c *MockQuerier_CreateRepositoryAuthorization_Call) Run(run func(ctx context.Context, teamSlug slug.Slug, githubRepository string, repositoryAuthorization RepositoryAuthorizationEnum)) *MockQuerier_CreateRepositoryAuthorization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug), args[2].(string), args[3].(RepositoryAuthorizationEnum))
	})
	return _c
}

func (_c *MockQuerier_CreateRepositoryAuthorization_Call) Return(_a0 error) *MockQuerier_CreateRepositoryAuthorization_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_CreateRepositoryAuthorization_Call) RunAndReturn(run func(context.Context, slug.Slug, string, RepositoryAuthorizationEnum) error) *MockQuerier_CreateRepositoryAuthorization_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceAccount provides a mock function with given fields: ctx, name
func (_m *MockQuerier) CreateServiceAccount(ctx context.Context, name string) (*ServiceAccount, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceAccount")
	}

	var r0 *ServiceAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ServiceAccount, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ServiceAccount); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceAccount'
type MockQuerier_CreateServiceAccount_Call struct {
	*mock.Call
}

// CreateServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockQuerier_Expecter) CreateServiceAccount(ctx interface{}, name interface{}) *MockQuerier_CreateServiceAccount_Call {
	return &MockQuerier_CreateServiceAccount_Call{Call: _e.mock.On("CreateServiceAccount", ctx, name)}
}

func (_c *MockQuerier_CreateServiceAccount_Call) Run(run func(ctx context.Context, name string)) *MockQuerier_CreateServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_CreateServiceAccount_Call) Return(_a0 *ServiceAccount, _a1 error) *MockQuerier_CreateServiceAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateServiceAccount_Call) RunAndReturn(run func(context.Context, string) (*ServiceAccount, error)) *MockQuerier_CreateServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSession provides a mock function with given fields: ctx, userID, expires
func (_m *MockQuerier) CreateSession(ctx context.Context, userID uuid.UUID, expires pgtype.Timestamptz) (*Session, error) {
	ret := _m.Called(ctx, userID, expires)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 *Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, pgtype.Timestamptz) (*Session, error)); ok {
		return rf(ctx, userID, expires)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, pgtype.Timestamptz) *Session); ok {
		r0 = rf(ctx, userID, expires)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, pgtype.Timestamptz) error); ok {
		r1 = rf(ctx, userID, expires)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type MockQuerier_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - expires pgtype.Timestamptz
func (_e *MockQuerier_Expecter) CreateSession(ctx interface{}, userID interface{}, expires interface{}) *MockQuerier_CreateSession_Call {
	return &MockQuerier_CreateSession_Call{Call: _e.mock.On("CreateSession", ctx, userID, expires)}
}

func (_c *MockQuerier_CreateSession_Call) Run(run func(ctx context.Context, userID uuid.UUID, expires pgtype.Timestamptz)) *MockQuerier_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(pgtype.Timestamptz))
	})
	return _c
}

func (_c *MockQuerier_CreateSession_Call) Return(_a0 *Session, _a1 error) *MockQuerier_CreateSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateSession_Call) RunAndReturn(run func(context.Context, uuid.UUID, pgtype.Timestamptz) (*Session, error)) *MockQuerier_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTeam provides a mock function with given fields: ctx, _a1, purpose, slackChannel
func (_m *MockQuerier) CreateTeam(ctx context.Context, _a1 slug.Slug, purpose string, slackChannel string) (*Team, error) {
	ret := _m.Called(ctx, _a1, purpose, slackChannel)

	if len(ret) == 0 {
		panic("no return value specified for CreateTeam")
	}

	var r0 *Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, string, string) (*Team, error)); ok {
		return rf(ctx, _a1, purpose, slackChannel)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, string, string) *Team); ok {
		r0 = rf(ctx, _a1, purpose, slackChannel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug, string, string) error); ok {
		r1 = rf(ctx, _a1, purpose, slackChannel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTeam'
type MockQuerier_CreateTeam_Call struct {
	*mock.Call
}

// CreateTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 slug.Slug
//   - purpose string
//   - slackChannel string
func (_e *MockQuerier_Expecter) CreateTeam(ctx interface{}, _a1 interface{}, purpose interface{}, slackChannel interface{}) *MockQuerier_CreateTeam_Call {
	return &MockQuerier_CreateTeam_Call{Call: _e.mock.On("CreateTeam", ctx, _a1, purpose, slackChannel)}
}

func (_c *MockQuerier_CreateTeam_Call) Run(run func(ctx context.Context, _a1 slug.Slug, purpose string, slackChannel string)) *MockQuerier_CreateTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockQuerier_CreateTeam_Call) Return(_a0 *Team, _a1 error) *MockQuerier_CreateTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateTeam_Call) RunAndReturn(run func(context.Context, slug.Slug, string, string) (*Team, error)) *MockQuerier_CreateTeam_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTeamDeleteKey provides a mock function with given fields: ctx, teamSlug, createdBy
func (_m *MockQuerier) CreateTeamDeleteKey(ctx context.Context, teamSlug slug.Slug, createdBy uuid.UUID) (*TeamDeleteKey, error) {
	ret := _m.Called(ctx, teamSlug, createdBy)

	if len(ret) == 0 {
		panic("no return value specified for CreateTeamDeleteKey")
	}

	var r0 *TeamDeleteKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, uuid.UUID) (*TeamDeleteKey, error)); ok {
		return rf(ctx, teamSlug, createdBy)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, uuid.UUID) *TeamDeleteKey); ok {
		r0 = rf(ctx, teamSlug, createdBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TeamDeleteKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug, uuid.UUID) error); ok {
		r1 = rf(ctx, teamSlug, createdBy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateTeamDeleteKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTeamDeleteKey'
type MockQuerier_CreateTeamDeleteKey_Call struct {
	*mock.Call
}

// CreateTeamDeleteKey is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
//   - createdBy uuid.UUID
func (_e *MockQuerier_Expecter) CreateTeamDeleteKey(ctx interface{}, teamSlug interface{}, createdBy interface{}) *MockQuerier_CreateTeamDeleteKey_Call {
	return &MockQuerier_CreateTeamDeleteKey_Call{Call: _e.mock.On("CreateTeamDeleteKey", ctx, teamSlug, createdBy)}
}

func (_c *MockQuerier_CreateTeamDeleteKey_Call) Run(run func(ctx context.Context, teamSlug slug.Slug, createdBy uuid.UUID)) *MockQuerier_CreateTeamDeleteKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockQuerier_CreateTeamDeleteKey_Call) Return(_a0 *TeamDeleteKey, _a1 error) *MockQuerier_CreateTeamDeleteKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateTeamDeleteKey_Call) RunAndReturn(run func(context.Context, slug.Slug, uuid.UUID) (*TeamDeleteKey, error)) *MockQuerier_CreateTeamDeleteKey_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, name, email, externalID
func (_m *MockQuerier) CreateUser(ctx context.Context, name string, email string, externalID string) (*User, error) {
	ret := _m.Called(ctx, name, email, externalID)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*User, error)); ok {
		return rf(ctx, name, email, externalID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *User); ok {
		r0 = rf(ctx, name, email, externalID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, name, email, externalID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockQuerier_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - email string
//   - externalID string
func (_e *MockQuerier_Expecter) CreateUser(ctx interface{}, name interface{}, email interface{}, externalID interface{}) *MockQuerier_CreateUser_Call {
	return &MockQuerier_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, name, email, externalID)}
}

func (_c *MockQuerier_CreateUser_Call) Run(run func(ctx context.Context, name string, email string, externalID string)) *MockQuerier_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockQuerier_CreateUser_Call) Return(_a0 *User, _a1 error) *MockQuerier_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateUser_Call) RunAndReturn(run func(context.Context, string, string, string) (*User, error)) *MockQuerier_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DailyCostForApp provides a mock function with given fields: ctx, fromDate, toDate, environment, teamSlug, app
func (_m *MockQuerier) DailyCostForApp(ctx context.Context, fromDate pgtype.Date, toDate pgtype.Date, environment string, teamSlug slug.Slug, app string) ([]*Cost, error) {
	ret := _m.Called(ctx, fromDate, toDate, environment, teamSlug, app)

	if len(ret) == 0 {
		panic("no return value specified for DailyCostForApp")
	}

	var r0 []*Cost
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Date, pgtype.Date, string, slug.Slug, string) ([]*Cost, error)); ok {
		return rf(ctx, fromDate, toDate, environment, teamSlug, app)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Date, pgtype.Date, string, slug.Slug, string) []*Cost); ok {
		r0 = rf(ctx, fromDate, toDate, environment, teamSlug, app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Cost)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgtype.Date, pgtype.Date, string, slug.Slug, string) error); ok {
		r1 = rf(ctx, fromDate, toDate, environment, teamSlug, app)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_DailyCostForApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DailyCostForApp'
type MockQuerier_DailyCostForApp_Call struct {
	*mock.Call
}

// DailyCostForApp is a helper method to define mock.On call
//   - ctx context.Context
//   - fromDate pgtype.Date
//   - toDate pgtype.Date
//   - environment string
//   - teamSlug slug.Slug
//   - app string
func (_e *MockQuerier_Expecter) DailyCostForApp(ctx interface{}, fromDate interface{}, toDate interface{}, environment interface{}, teamSlug interface{}, app interface{}) *MockQuerier_DailyCostForApp_Call {
	return &MockQuerier_DailyCostForApp_Call{Call: _e.mock.On("DailyCostForApp", ctx, fromDate, toDate, environment, teamSlug, app)}
}

func (_c *MockQuerier_DailyCostForApp_Call) Run(run func(ctx context.Context, fromDate pgtype.Date, toDate pgtype.Date, environment string, teamSlug slug.Slug, app string)) *MockQuerier_DailyCostForApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgtype.Date), args[2].(pgtype.Date), args[3].(string), args[4].(slug.Slug), args[5].(string))
	})
	return _c
}

func (_c *MockQuerier_DailyCostForApp_Call) Return(_a0 []*Cost, _a1 error) *MockQuerier_DailyCostForApp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_DailyCostForApp_Call) RunAndReturn(run func(context.Context, pgtype.Date, pgtype.Date, string, slug.Slug, string) ([]*Cost, error)) *MockQuerier_DailyCostForApp_Call {
	_c.Call.Return(run)
	return _c
}

// DailyCostForTeam provides a mock function with given fields: ctx, fromDate, toDate, teamSlug
func (_m *MockQuerier) DailyCostForTeam(ctx context.Context, fromDate pgtype.Date, toDate pgtype.Date, teamSlug slug.Slug) ([]*Cost, error) {
	ret := _m.Called(ctx, fromDate, toDate, teamSlug)

	if len(ret) == 0 {
		panic("no return value specified for DailyCostForTeam")
	}

	var r0 []*Cost
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Date, pgtype.Date, slug.Slug) ([]*Cost, error)); ok {
		return rf(ctx, fromDate, toDate, teamSlug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Date, pgtype.Date, slug.Slug) []*Cost); ok {
		r0 = rf(ctx, fromDate, toDate, teamSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Cost)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgtype.Date, pgtype.Date, slug.Slug) error); ok {
		r1 = rf(ctx, fromDate, toDate, teamSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_DailyCostForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DailyCostForTeam'
type MockQuerier_DailyCostForTeam_Call struct {
	*mock.Call
}

// DailyCostForTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - fromDate pgtype.Date
//   - toDate pgtype.Date
//   - teamSlug slug.Slug
func (_e *MockQuerier_Expecter) DailyCostForTeam(ctx interface{}, fromDate interface{}, toDate interface{}, teamSlug interface{}) *MockQuerier_DailyCostForTeam_Call {
	return &MockQuerier_DailyCostForTeam_Call{Call: _e.mock.On("DailyCostForTeam", ctx, fromDate, toDate, teamSlug)}
}

func (_c *MockQuerier_DailyCostForTeam_Call) Run(run func(ctx context.Context, fromDate pgtype.Date, toDate pgtype.Date, teamSlug slug.Slug)) *MockQuerier_DailyCostForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgtype.Date), args[2].(pgtype.Date), args[3].(slug.Slug))
	})
	return _c
}

func (_c *MockQuerier_DailyCostForTeam_Call) Return(_a0 []*Cost, _a1 error) *MockQuerier_DailyCostForTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_DailyCostForTeam_Call) RunAndReturn(run func(context.Context, pgtype.Date, pgtype.Date, slug.Slug) ([]*Cost, error)) *MockQuerier_DailyCostForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// DailyEnvCostForTeam provides a mock function with given fields: ctx, fromDate, toDate, environment, teamSlug
func (_m *MockQuerier) DailyEnvCostForTeam(ctx context.Context, fromDate pgtype.Date, toDate pgtype.Date, environment *string, teamSlug slug.Slug) ([]*DailyEnvCostForTeamRow, error) {
	ret := _m.Called(ctx, fromDate, toDate, environment, teamSlug)

	if len(ret) == 0 {
		panic("no return value specified for DailyEnvCostForTeam")
	}

	var r0 []*DailyEnvCostForTeamRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Date, pgtype.Date, *string, slug.Slug) ([]*DailyEnvCostForTeamRow, error)); ok {
		return rf(ctx, fromDate, toDate, environment, teamSlug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Date, pgtype.Date, *string, slug.Slug) []*DailyEnvCostForTeamRow); ok {
		r0 = rf(ctx, fromDate, toDate, environment, teamSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*DailyEnvCostForTeamRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgtype.Date, pgtype.Date, *string, slug.Slug) error); ok {
		r1 = rf(ctx, fromDate, toDate, environment, teamSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_DailyEnvCostForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DailyEnvCostForTeam'
type MockQuerier_DailyEnvCostForTeam_Call struct {
	*mock.Call
}

// DailyEnvCostForTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - fromDate pgtype.Date
//   - toDate pgtype.Date
//   - environment *string
//   - teamSlug slug.Slug
func (_e *MockQuerier_Expecter) DailyEnvCostForTeam(ctx interface{}, fromDate interface{}, toDate interface{}, environment interface{}, teamSlug interface{}) *MockQuerier_DailyEnvCostForTeam_Call {
	return &MockQuerier_DailyEnvCostForTeam_Call{Call: _e.mock.On("DailyEnvCostForTeam", ctx, fromDate, toDate, environment, teamSlug)}
}

func (_c *MockQuerier_DailyEnvCostForTeam_Call) Run(run func(ctx context.Context, fromDate pgtype.Date, toDate pgtype.Date, environment *string, teamSlug slug.Slug)) *MockQuerier_DailyEnvCostForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgtype.Date), args[2].(pgtype.Date), args[3].(*string), args[4].(slug.Slug))
	})
	return _c
}

func (_c *MockQuerier_DailyEnvCostForTeam_Call) Return(_a0 []*DailyEnvCostForTeamRow, _a1 error) *MockQuerier_DailyEnvCostForTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_DailyEnvCostForTeam_Call) RunAndReturn(run func(context.Context, pgtype.Date, pgtype.Date, *string, slug.Slug) ([]*DailyEnvCostForTeamRow, error)) *MockQuerier_DailyEnvCostForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// DangerousGetReconcilerConfigValues provides a mock function with given fields: ctx, reconcilerName
func (_m *MockQuerier) DangerousGetReconcilerConfigValues(ctx context.Context, reconcilerName string) ([]*DangerousGetReconcilerConfigValuesRow, error) {
	ret := _m.Called(ctx, reconcilerName)

	if len(ret) == 0 {
		panic("no return value specified for DangerousGetReconcilerConfigValues")
	}

	var r0 []*DangerousGetReconcilerConfigValuesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*DangerousGetReconcilerConfigValuesRow, error)); ok {
		return rf(ctx, reconcilerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*DangerousGetReconcilerConfigValuesRow); ok {
		r0 = rf(ctx, reconcilerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*DangerousGetReconcilerConfigValuesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, reconcilerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_DangerousGetReconcilerConfigValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DangerousGetReconcilerConfigValues'
type MockQuerier_DangerousGetReconcilerConfigValues_Call struct {
	*mock.Call
}

// DangerousGetReconcilerConfigValues is a helper method to define mock.On call
//   - ctx context.Context
//   - reconcilerName string
func (_e *MockQuerier_Expecter) DangerousGetReconcilerConfigValues(ctx interface{}, reconcilerName interface{}) *MockQuerier_DangerousGetReconcilerConfigValues_Call {
	return &MockQuerier_DangerousGetReconcilerConfigValues_Call{Call: _e.mock.On("DangerousGetReconcilerConfigValues", ctx, reconcilerName)}
}

func (_c *MockQuerier_DangerousGetReconcilerConfigValues_Call) Run(run func(ctx context.Context, reconcilerName string)) *MockQuerier_DangerousGetReconcilerConfigValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_DangerousGetReconcilerConfigValues_Call) Return(_a0 []*DangerousGetReconcilerConfigValuesRow, _a1 error) *MockQuerier_DangerousGetReconcilerConfigValues_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_DangerousGetReconcilerConfigValues_Call) RunAndReturn(run func(context.Context, string) ([]*DangerousGetReconcilerConfigValuesRow, error)) *MockQuerier_DangerousGetReconcilerConfigValues_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteReconcilerConfig provides a mock function with given fields: ctx, reconciler, keys
func (_m *MockQuerier) DeleteReconcilerConfig(ctx context.Context, reconciler string, keys []string) error {
	ret := _m.Called(ctx, reconciler, keys)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReconcilerConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, reconciler, keys)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_DeleteReconcilerConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteReconcilerConfig'
type MockQuerier_DeleteReconcilerConfig_Call struct {
	*mock.Call
}

// DeleteReconcilerConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - reconciler string
//   - keys []string
func (_e *MockQuerier_Expecter) DeleteReconcilerConfig(ctx interface{}, reconciler interface{}, keys interface{}) *MockQuerier_DeleteReconcilerConfig_Call {
	return &MockQuerier_DeleteReconcilerConfig_Call{Call: _e.mock.On("DeleteReconcilerConfig", ctx, reconciler, keys)}
}

func (_c *MockQuerier_DeleteReconcilerConfig_Call) Run(run func(ctx context.Context, reconciler string, keys []string)) *MockQuerier_DeleteReconcilerConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockQuerier_DeleteReconcilerConfig_Call) Return(_a0 error) *MockQuerier_DeleteReconcilerConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_DeleteReconcilerConfig_Call) RunAndReturn(run func(context.Context, string, []string) error) *MockQuerier_DeleteReconcilerConfig_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceAccount provides a mock function with given fields: ctx, id
func (_m *MockQuerier) DeleteServiceAccount(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_DeleteServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceAccount'
type MockQuerier_DeleteServiceAccount_Call struct {
	*mock.Call
}

// DeleteServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockQuerier_Expecter) DeleteServiceAccount(ctx interface{}, id interface{}) *MockQuerier_DeleteServiceAccount_Call {
	return &MockQuerier_DeleteServiceAccount_Call{Call: _e.mock.On("DeleteServiceAccount", ctx, id)}
}

func (_c *MockQuerier_DeleteServiceAccount_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockQuerier_DeleteServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockQuerier_DeleteServiceAccount_Call) Return(_a0 error) *MockQuerier_DeleteServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_DeleteServiceAccount_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockQuerier_DeleteServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSession provides a mock function with given fields: ctx, id
func (_m *MockQuerier) DeleteSession(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_DeleteSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSession'
type MockQuerier_DeleteSession_Call struct {
	*mock.Call
}

// DeleteSession is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockQuerier_Expecter) DeleteSession(ctx interface{}, id interface{}) *MockQuerier_DeleteSession_Call {
	return &MockQuerier_DeleteSession_Call{Call: _e.mock.On("DeleteSession", ctx, id)}
}

func (_c *MockQuerier_DeleteSession_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockQuerier_DeleteSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockQuerier_DeleteSession_Call) Return(_a0 error) *MockQuerier_DeleteSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_DeleteSession_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockQuerier_DeleteSession_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTeam provides a mock function with given fields: ctx, argSlug
func (_m *MockQuerier) DeleteTeam(ctx context.Context, argSlug slug.Slug) error {
	ret := _m.Called(ctx, argSlug)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTeam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) error); ok {
		r0 = rf(ctx, argSlug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_DeleteTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTeam'
type MockQuerier_DeleteTeam_Call struct {
	*mock.Call
}

// DeleteTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - argSlug slug.Slug
func (_e *MockQuerier_Expecter) DeleteTeam(ctx interface{}, argSlug interface{}) *MockQuerier_DeleteTeam_Call {
	return &MockQuerier_DeleteTeam_Call{Call: _e.mock.On("DeleteTeam", ctx, argSlug)}
}

func (_c *MockQuerier_DeleteTeam_Call) Run(run func(ctx context.Context, argSlug slug.Slug)) *MockQuerier_DeleteTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug))
	})
	return _c
}

func (_c *MockQuerier_DeleteTeam_Call) Return(_a0 error) *MockQuerier_DeleteTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_DeleteTeam_Call) RunAndReturn(run func(context.Context, slug.Slug) error) *MockQuerier_DeleteTeam_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *MockQuerier) DeleteUser(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockQuerier_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockQuerier_Expecter) DeleteUser(ctx interface{}, id interface{}) *MockQuerier_DeleteUser_Call {
	return &MockQuerier_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *MockQuerier_DeleteUser_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockQuerier_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockQuerier_DeleteUser_Call) Return(_a0 error) *MockQuerier_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_DeleteUser_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockQuerier_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// DisableReconciler provides a mock function with given fields: ctx, name
func (_m *MockQuerier) DisableReconciler(ctx context.Context, name string) (*Reconciler, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DisableReconciler")
	}

	var r0 *Reconciler
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*Reconciler, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *Reconciler); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Reconciler)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_DisableReconciler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableReconciler'
type MockQuerier_DisableReconciler_Call struct {
	*mock.Call
}

// DisableReconciler is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockQuerier_Expecter) DisableReconciler(ctx interface{}, name interface{}) *MockQuerier_DisableReconciler_Call {
	return &MockQuerier_DisableReconciler_Call{Call: _e.mock.On("DisableReconciler", ctx, name)}
}

func (_c *MockQuerier_DisableReconciler_Call) Run(run func(ctx context.Context, name string)) *MockQuerier_DisableReconciler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_DisableReconciler_Call) Return(_a0 *Reconciler, _a1 error) *MockQuerier_DisableReconciler_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_DisableReconciler_Call) RunAndReturn(run func(context.Context, string) (*Reconciler, error)) *MockQuerier_DisableReconciler_Call {
	_c.Call.Return(run)
	return _c
}

// EnableReconciler provides a mock function with given fields: ctx, name
func (_m *MockQuerier) EnableReconciler(ctx context.Context, name string) (*Reconciler, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for EnableReconciler")
	}

	var r0 *Reconciler
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*Reconciler, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *Reconciler); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Reconciler)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_EnableReconciler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableReconciler'
type MockQuerier_EnableReconciler_Call struct {
	*mock.Call
}

// EnableReconciler is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockQuerier_Expecter) EnableReconciler(ctx interface{}, name interface{}) *MockQuerier_EnableReconciler_Call {
	return &MockQuerier_EnableReconciler_Call{Call: _e.mock.On("EnableReconciler", ctx, name)}
}

func (_c *MockQuerier_EnableReconciler_Call) Run(run func(ctx context.Context, name string)) *MockQuerier_EnableReconciler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_EnableReconciler_Call) Return(_a0 *Reconciler, _a1 error) *MockQuerier_EnableReconciler_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_EnableReconciler_Call) RunAndReturn(run func(context.Context, string) (*Reconciler, error)) *MockQuerier_EnableReconciler_Call {
	_c.Call.Return(run)
	return _c
}

// FirstRunComplete provides a mock function with given fields: ctx
func (_m *MockQuerier) FirstRunComplete(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FirstRunComplete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_FirstRunComplete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FirstRunComplete'
type MockQuerier_FirstRunComplete_Call struct {
	*mock.Call
}

// FirstRunComplete is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) FirstRunComplete(ctx interface{}) *MockQuerier_FirstRunComplete_Call {
	return &MockQuerier_FirstRunComplete_Call{Call: _e.mock.On("FirstRunComplete", ctx)}
}

func (_c *MockQuerier_FirstRunComplete_Call) Run(run func(ctx context.Context)) *MockQuerier_FirstRunComplete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_FirstRunComplete_Call) Return(_a0 error) *MockQuerier_FirstRunComplete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_FirstRunComplete_Call) RunAndReturn(run func(context.Context) error) *MockQuerier_FirstRunComplete_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveTeamBySlug provides a mock function with given fields: ctx, argSlug
func (_m *MockQuerier) GetActiveTeamBySlug(ctx context.Context, argSlug slug.Slug) (*Team, error) {
	ret := _m.Called(ctx, argSlug)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveTeamBySlug")
	}

	var r0 *Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) (*Team, error)); ok {
		return rf(ctx, argSlug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) *Team); ok {
		r0 = rf(ctx, argSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug) error); ok {
		r1 = rf(ctx, argSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetActiveTeamBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveTeamBySlug'
type MockQuerier_GetActiveTeamBySlug_Call struct {
	*mock.Call
}

// GetActiveTeamBySlug is a helper method to define mock.On call
//   - ctx context.Context
//   - argSlug slug.Slug
func (_e *MockQuerier_Expecter) GetActiveTeamBySlug(ctx interface{}, argSlug interface{}) *MockQuerier_GetActiveTeamBySlug_Call {
	return &MockQuerier_GetActiveTeamBySlug_Call{Call: _e.mock.On("GetActiveTeamBySlug", ctx, argSlug)}
}

func (_c *MockQuerier_GetActiveTeamBySlug_Call) Run(run func(ctx context.Context, argSlug slug.Slug)) *MockQuerier_GetActiveTeamBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug))
	})
	return _c
}

func (_c *MockQuerier_GetActiveTeamBySlug_Call) Return(_a0 *Team, _a1 error) *MockQuerier_GetActiveTeamBySlug_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetActiveTeamBySlug_Call) RunAndReturn(run func(context.Context, slug.Slug) (*Team, error)) *MockQuerier_GetActiveTeamBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveTeams provides a mock function with given fields: ctx
func (_m *MockQuerier) GetActiveTeams(ctx context.Context) ([]*Team, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveTeams")
	}

	var r0 []*Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*Team, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*Team); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetActiveTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveTeams'
type MockQuerier_GetActiveTeams_Call struct {
	*mock.Call
}

// GetActiveTeams is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) GetActiveTeams(ctx interface{}) *MockQuerier_GetActiveTeams_Call {
	return &MockQuerier_GetActiveTeams_Call{Call: _e.mock.On("GetActiveTeams", ctx)}
}

func (_c *MockQuerier_GetActiveTeams_Call) Run(run func(ctx context.Context)) *MockQuerier_GetActiveTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_GetActiveTeams_Call) Return(_a0 []*Team, _a1 error) *MockQuerier_GetActiveTeams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetActiveTeams_Call) RunAndReturn(run func(context.Context) ([]*Team, error)) *MockQuerier_GetActiveTeams_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTeamMembers provides a mock function with given fields: ctx, teamSlug
func (_m *MockQuerier) GetAllTeamMembers(ctx context.Context, teamSlug *slug.Slug) ([]*User, error) {
	ret := _m.Called(ctx, teamSlug)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTeamMembers")
	}

	var r0 []*User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *slug.Slug) ([]*User, error)); ok {
		return rf(ctx, teamSlug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *slug.Slug) []*User); ok {
		r0 = rf(ctx, teamSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *slug.Slug) error); ok {
		r1 = rf(ctx, teamSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetAllTeamMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTeamMembers'
type MockQuerier_GetAllTeamMembers_Call struct {
	*mock.Call
}

// GetAllTeamMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug *slug.Slug
func (_e *MockQuerier_Expecter) GetAllTeamMembers(ctx interface{}, teamSlug interface{}) *MockQuerier_GetAllTeamMembers_Call {
	return &MockQuerier_GetAllTeamMembers_Call{Call: _e.mock.On("GetAllTeamMembers", ctx, teamSlug)}
}

func (_c *MockQuerier_GetAllTeamMembers_Call) Run(run func(ctx context.Context, teamSlug *slug.Slug)) *MockQuerier_GetAllTeamMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*slug.Slug))
	})
	return _c
}

func (_c *MockQuerier_GetAllTeamMembers_Call) Return(_a0 []*User, _a1 error) *MockQuerier_GetAllTeamMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetAllTeamMembers_Call) RunAndReturn(run func(context.Context, *slug.Slug) ([]*User, error)) *MockQuerier_GetAllTeamMembers_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUserRoles provides a mock function with given fields: ctx
func (_m *MockQuerier) GetAllUserRoles(ctx context.Context) ([]*UserRole, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUserRoles")
	}

	var r0 []*UserRole
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*UserRole, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*UserRole); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*UserRole)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetAllUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUserRoles'
type MockQuerier_GetAllUserRoles_Call struct {
	*mock.Call
}

// GetAllUserRoles is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) GetAllUserRoles(ctx interface{}) *MockQuerier_GetAllUserRoles_Call {
	return &MockQuerier_GetAllUserRoles_Call{Call: _e.mock.On("GetAllUserRoles", ctx)}
}

func (_c *MockQuerier_GetAllUserRoles_Call) Run(run func(ctx context.Context)) *MockQuerier_GetAllUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_GetAllUserRoles_Call) Return(_a0 []*UserRole, _a1 error) *MockQuerier_GetAllUserRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetAllUserRoles_Call) RunAndReturn(run func(context.Context) ([]*UserRole, error)) *MockQuerier_GetAllUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function with given fields: ctx
func (_m *MockQuerier) GetAllUsers(ctx context.Context) ([]*User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []*User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type MockQuerier_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) GetAllUsers(ctx interface{}) *MockQuerier_GetAllUsers_Call {
	return &MockQuerier_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers", ctx)}
}

func (_c *MockQuerier_GetAllUsers_Call) Run(run func(ctx context.Context)) *MockQuerier_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_GetAllUsers_Call) Return(_a0 []*User, _a1 error) *MockQuerier_GetAllUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetAllUsers_Call) RunAndReturn(run func(context.Context) ([]*User, error)) *MockQuerier_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuditLogsForCorrelationID provides a mock function with given fields: ctx, correlationID, offset, limit
func (_m *MockQuerier) GetAuditLogsForCorrelationID(ctx context.Context, correlationID uuid.UUID, offset int32, limit int32) ([]*AuditLog, error) {
	ret := _m.Called(ctx, correlationID, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetAuditLogsForCorrelationID")
	}

	var r0 []*AuditLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int32, int32) ([]*AuditLog, error)); ok {
		return rf(ctx, correlationID, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int32, int32) []*AuditLog); ok {
		r0 = rf(ctx, correlationID, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*AuditLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int32, int32) error); ok {
		r1 = rf(ctx, correlationID, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetAuditLogsForCorrelationID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuditLogsForCorrelationID'
type MockQuerier_GetAuditLogsForCorrelationID_Call struct {
	*mock.Call
}

// GetAuditLogsForCorrelationID is a helper method to define mock.On call
//   - ctx context.Context
//   - correlationID uuid.UUID
//   - offset int32
//   - limit int32
func (_e *MockQuerier_Expecter) GetAuditLogsForCorrelationID(ctx interface{}, correlationID interface{}, offset interface{}, limit interface{}) *MockQuerier_GetAuditLogsForCorrelationID_Call {
	return &MockQuerier_GetAuditLogsForCorrelationID_Call{Call: _e.mock.On("GetAuditLogsForCorrelationID", ctx, correlationID, offset, limit)}
}

func (_c *MockQuerier_GetAuditLogsForCorrelationID_Call) Run(run func(ctx context.Context, correlationID uuid.UUID, offset int32, limit int32)) *MockQuerier_GetAuditLogsForCorrelationID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(int32), args[3].(int32))
	})
	return _c
}

func (_c *MockQuerier_GetAuditLogsForCorrelationID_Call) Return(_a0 []*AuditLog, _a1 error) *MockQuerier_GetAuditLogsForCorrelationID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetAuditLogsForCorrelationID_Call) RunAndReturn(run func(context.Context, uuid.UUID, int32, int32) ([]*AuditLog, error)) *MockQuerier_GetAuditLogsForCorrelationID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuditLogsForCorrelationIDCount provides a mock function with given fields: ctx, correlationID
func (_m *MockQuerier) GetAuditLogsForCorrelationIDCount(ctx context.Context, correlationID uuid.UUID) (int64, error) {
	ret := _m.Called(ctx, correlationID)

	if len(ret) == 0 {
		panic("no return value specified for GetAuditLogsForCorrelationIDCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int64, error)); ok {
		return rf(ctx, correlationID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int64); ok {
		r0 = rf(ctx, correlationID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, correlationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetAuditLogsForCorrelationIDCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuditLogsForCorrelationIDCount'
type MockQuerier_GetAuditLogsForCorrelationIDCount_Call struct {
	*mock.Call
}

// GetAuditLogsForCorrelationIDCount is a helper method to define mock.On call
//   - ctx context.Context
//   - correlationID uuid.UUID
func (_e *MockQuerier_Expecter) GetAuditLogsForCorrelationIDCount(ctx interface{}, correlationID interface{}) *MockQuerier_GetAuditLogsForCorrelationIDCount_Call {
	return &MockQuerier_GetAuditLogsForCorrelationIDCount_Call{Call: _e.mock.On("GetAuditLogsForCorrelationIDCount", ctx, correlationID)}
}

func (_c *MockQuerier_GetAuditLogsForCorrelationIDCount_Call) Run(run func(ctx context.Context, correlationID uuid.UUID)) *MockQuerier_GetAuditLogsForCorrelationIDCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockQuerier_GetAuditLogsForCorrelationIDCount_Call) Return(_a0 int64, _a1 error) *MockQuerier_GetAuditLogsForCorrelationIDCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetAuditLogsForCorrelationIDCount_Call) RunAndReturn(run func(context.Context, uuid.UUID) (int64, error)) *MockQuerier_GetAuditLogsForCorrelationIDCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuditLogsForReconciler provides a mock function with given fields: ctx, targetIdentifier, offset, limit
func (_m *MockQuerier) GetAuditLogsForReconciler(ctx context.Context, targetIdentifier string, offset int32, limit int32) ([]*AuditLog, error) {
	ret := _m.Called(ctx, targetIdentifier, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetAuditLogsForReconciler")
	}

	var r0 []*AuditLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int32, int32) ([]*AuditLog, error)); ok {
		return rf(ctx, targetIdentifier, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int32, int32) []*AuditLog); ok {
		r0 = rf(ctx, targetIdentifier, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*AuditLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int32, int32) error); ok {
		r1 = rf(ctx, targetIdentifier, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetAuditLogsForReconciler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuditLogsForReconciler'
type MockQuerier_GetAuditLogsForReconciler_Call struct {
	*mock.Call
}

// GetAuditLogsForReconciler is a helper method to define mock.On call
//   - ctx context.Context
//   - targetIdentifier string
//   - offset int32
//   - limit int32
func (_e *MockQuerier_Expecter) GetAuditLogsForReconciler(ctx interface{}, targetIdentifier interface{}, offset interface{}, limit interface{}) *MockQuerier_GetAuditLogsForReconciler_Call {
	return &MockQuerier_GetAuditLogsForReconciler_Call{Call: _e.mock.On("GetAuditLogsForReconciler", ctx, targetIdentifier, offset, limit)}
}

func (_c *MockQuerier_GetAuditLogsForReconciler_Call) Run(run func(ctx context.Context, targetIdentifier string, offset int32, limit int32)) *MockQuerier_GetAuditLogsForReconciler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int32), args[3].(int32))
	})
	return _c
}

func (_c *MockQuerier_GetAuditLogsForReconciler_Call) Return(_a0 []*AuditLog, _a1 error) *MockQuerier_GetAuditLogsForReconciler_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetAuditLogsForReconciler_Call) RunAndReturn(run func(context.Context, string, int32, int32) ([]*AuditLog, error)) *MockQuerier_GetAuditLogsForReconciler_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuditLogsForReconcilerCount provides a mock function with given fields: ctx, targetIdentifier
func (_m *MockQuerier) GetAuditLogsForReconcilerCount(ctx context.Context, targetIdentifier string) (int64, error) {
	ret := _m.Called(ctx, targetIdentifier)

	if len(ret) == 0 {
		panic("no return value specified for GetAuditLogsForReconcilerCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, targetIdentifier)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, targetIdentifier)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, targetIdentifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetAuditLogsForReconcilerCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuditLogsForReconcilerCount'
type MockQuerier_GetAuditLogsForReconcilerCount_Call struct {
	*mock.Call
}

// GetAuditLogsForReconcilerCount is a helper method to define mock.On call
//   - ctx context.Context
//   - targetIdentifier string
func (_e *MockQuerier_Expecter) GetAuditLogsForReconcilerCount(ctx interface{}, targetIdentifier interface{}) *MockQuerier_GetAuditLogsForReconcilerCount_Call {
	return &MockQuerier_GetAuditLogsForReconcilerCount_Call{Call: _e.mock.On("GetAuditLogsForReconcilerCount", ctx, targetIdentifier)}
}

func (_c *MockQuerier_GetAuditLogsForReconcilerCount_Call) Run(run func(ctx context.Context, targetIdentifier string)) *MockQuerier_GetAuditLogsForReconcilerCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_GetAuditLogsForReconcilerCount_Call) Return(_a0 int64, _a1 error) *MockQuerier_GetAuditLogsForReconcilerCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetAuditLogsForReconcilerCount_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *MockQuerier_GetAuditLogsForReconcilerCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuditLogsForTeam provides a mock function with given fields: ctx, targetIdentifier, offset, limit
func (_m *MockQuerier) GetAuditLogsForTeam(ctx context.Context, targetIdentifier string, offset int32, limit int32) ([]*AuditLog, error) {
	ret := _m.Called(ctx, targetIdentifier, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetAuditLogsForTeam")
	}

	var r0 []*AuditLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int32, int32) ([]*AuditLog, error)); ok {
		return rf(ctx, targetIdentifier, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int32, int32) []*AuditLog); ok {
		r0 = rf(ctx, targetIdentifier, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*AuditLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int32, int32) error); ok {
		r1 = rf(ctx, targetIdentifier, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetAuditLogsForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuditLogsForTeam'
type MockQuerier_GetAuditLogsForTeam_Call struct {
	*mock.Call
}

// GetAuditLogsForTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - targetIdentifier string
//   - offset int32
//   - limit int32
func (_e *MockQuerier_Expecter) GetAuditLogsForTeam(ctx interface{}, targetIdentifier interface{}, offset interface{}, limit interface{}) *MockQuerier_GetAuditLogsForTeam_Call {
	return &MockQuerier_GetAuditLogsForTeam_Call{Call: _e.mock.On("GetAuditLogsForTeam", ctx, targetIdentifier, offset, limit)}
}

func (_c *MockQuerier_GetAuditLogsForTeam_Call) Run(run func(ctx context.Context, targetIdentifier string, offset int32, limit int32)) *MockQuerier_GetAuditLogsForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int32), args[3].(int32))
	})
	return _c
}

func (_c *MockQuerier_GetAuditLogsForTeam_Call) Return(_a0 []*AuditLog, _a1 error) *MockQuerier_GetAuditLogsForTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetAuditLogsForTeam_Call) RunAndReturn(run func(context.Context, string, int32, int32) ([]*AuditLog, error)) *MockQuerier_GetAuditLogsForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuditLogsForTeamCount provides a mock function with given fields: ctx, targetIdentifier
func (_m *MockQuerier) GetAuditLogsForTeamCount(ctx context.Context, targetIdentifier string) (int64, error) {
	ret := _m.Called(ctx, targetIdentifier)

	if len(ret) == 0 {
		panic("no return value specified for GetAuditLogsForTeamCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, targetIdentifier)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, targetIdentifier)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, targetIdentifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetAuditLogsForTeamCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuditLogsForTeamCount'
type MockQuerier_GetAuditLogsForTeamCount_Call struct {
	*mock.Call
}

// GetAuditLogsForTeamCount is a helper method to define mock.On call
//   - ctx context.Context
//   - targetIdentifier string
func (_e *MockQuerier_Expecter) GetAuditLogsForTeamCount(ctx interface{}, targetIdentifier interface{}) *MockQuerier_GetAuditLogsForTeamCount_Call {
	return &MockQuerier_GetAuditLogsForTeamCount_Call{Call: _e.mock.On("GetAuditLogsForTeamCount", ctx, targetIdentifier)}
}

func (_c *MockQuerier_GetAuditLogsForTeamCount_Call) Run(run func(ctx context.Context, targetIdentifier string)) *MockQuerier_GetAuditLogsForTeamCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_GetAuditLogsForTeamCount_Call) Return(_a0 int64, _a1 error) *MockQuerier_GetAuditLogsForTeamCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetAuditLogsForTeamCount_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *MockQuerier_GetAuditLogsForTeamCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetEnabledReconcilers provides a mock function with given fields: ctx
func (_m *MockQuerier) GetEnabledReconcilers(ctx context.Context) ([]*Reconciler, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetEnabledReconcilers")
	}

	var r0 []*Reconciler
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*Reconciler, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*Reconciler); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Reconciler)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetEnabledReconcilers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEnabledReconcilers'
type MockQuerier_GetEnabledReconcilers_Call struct {
	*mock.Call
}

// GetEnabledReconcilers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) GetEnabledReconcilers(ctx interface{}) *MockQuerier_GetEnabledReconcilers_Call {
	return &MockQuerier_GetEnabledReconcilers_Call{Call: _e.mock.On("GetEnabledReconcilers", ctx)}
}

func (_c *MockQuerier_GetEnabledReconcilers_Call) Run(run func(ctx context.Context)) *MockQuerier_GetEnabledReconcilers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_GetEnabledReconcilers_Call) Return(_a0 []*Reconciler, _a1 error) *MockQuerier_GetEnabledReconcilers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetEnabledReconcilers_Call) RunAndReturn(run func(context.Context) ([]*Reconciler, error)) *MockQuerier_GetEnabledReconcilers_Call {
	_c.Call.Return(run)
	return _c
}

// GetReconciler provides a mock function with given fields: ctx, name
func (_m *MockQuerier) GetReconciler(ctx context.Context, name string) (*Reconciler, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetReconciler")
	}

	var r0 *Reconciler
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*Reconciler, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *Reconciler); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Reconciler)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetReconciler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReconciler'
type MockQuerier_GetReconciler_Call struct {
	*mock.Call
}

// GetReconciler is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockQuerier_Expecter) GetReconciler(ctx interface{}, name interface{}) *MockQuerier_GetReconciler_Call {
	return &MockQuerier_GetReconciler_Call{Call: _e.mock.On("GetReconciler", ctx, name)}
}

func (_c *MockQuerier_GetReconciler_Call) Run(run func(ctx context.Context, name string)) *MockQuerier_GetReconciler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_GetReconciler_Call) Return(_a0 *Reconciler, _a1 error) *MockQuerier_GetReconciler_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetReconciler_Call) RunAndReturn(run func(context.Context, string) (*Reconciler, error)) *MockQuerier_GetReconciler_Call {
	_c.Call.Return(run)
	return _c
}

// GetReconcilerConfig provides a mock function with given fields: ctx, reconcilerName
func (_m *MockQuerier) GetReconcilerConfig(ctx context.Context, reconcilerName string) ([]*GetReconcilerConfigRow, error) {
	ret := _m.Called(ctx, reconcilerName)

	if len(ret) == 0 {
		panic("no return value specified for GetReconcilerConfig")
	}

	var r0 []*GetReconcilerConfigRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*GetReconcilerConfigRow, error)); ok {
		return rf(ctx, reconcilerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*GetReconcilerConfigRow); ok {
		r0 = rf(ctx, reconcilerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*GetReconcilerConfigRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, reconcilerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetReconcilerConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReconcilerConfig'
type MockQuerier_GetReconcilerConfig_Call struct {
	*mock.Call
}

// GetReconcilerConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - reconcilerName string
func (_e *MockQuerier_Expecter) GetReconcilerConfig(ctx interface{}, reconcilerName interface{}) *MockQuerier_GetReconcilerConfig_Call {
	return &MockQuerier_GetReconcilerConfig_Call{Call: _e.mock.On("GetReconcilerConfig", ctx, reconcilerName)}
}

func (_c *MockQuerier_GetReconcilerConfig_Call) Run(run func(ctx context.Context, reconcilerName string)) *MockQuerier_GetReconcilerConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_GetReconcilerConfig_Call) Return(_a0 []*GetReconcilerConfigRow, _a1 error) *MockQuerier_GetReconcilerConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetReconcilerConfig_Call) RunAndReturn(run func(context.Context, string) ([]*GetReconcilerConfigRow, error)) *MockQuerier_GetReconcilerConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetReconcilerResourcesForReconciler provides a mock function with given fields: ctx, reconcilerName, offset, limit
func (_m *MockQuerier) GetReconcilerResourcesForReconciler(ctx context.Context, reconcilerName string, offset int32, limit int32) ([]*ReconcilerResource, error) {
	ret := _m.Called(ctx, reconcilerName, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetReconcilerResourcesForReconciler")
	}

	var r0 []*ReconcilerResource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int32, int32) ([]*ReconcilerResource, error)); ok {
		return rf(ctx, reconcilerName, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int32, int32) []*ReconcilerResource); ok {
		r0 = rf(ctx, reconcilerName, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ReconcilerResource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int32, int32) error); ok {
		r1 = rf(ctx, reconcilerName, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetReconcilerResourcesForReconciler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReconcilerResourcesForReconciler'
type MockQuerier_GetReconcilerResourcesForReconciler_Call struct {
	*mock.Call
}

// GetReconcilerResourcesForReconciler is a helper method to define mock.On call
//   - ctx context.Context
//   - reconcilerName string
//   - offset int32
//   - limit int32
func (_e *MockQuerier_Expecter) GetReconcilerResourcesForReconciler(ctx interface{}, reconcilerName interface{}, offset interface{}, limit interface{}) *MockQuerier_GetReconcilerResourcesForReconciler_Call {
	return &MockQuerier_GetReconcilerResourcesForReconciler_Call{Call: _e.mock.On("GetReconcilerResourcesForReconciler", ctx, reconcilerName, offset, limit)}
}

func (_c *MockQuerier_GetReconcilerResourcesForReconciler_Call) Run(run func(ctx context.Context, reconcilerName string, offset int32, limit int32)) *MockQuerier_GetReconcilerResourcesForReconciler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int32), args[3].(int32))
	})
	return _c
}

func (_c *MockQuerier_GetReconcilerResourcesForReconciler_Call) Return(_a0 []*ReconcilerResource, _a1 error) *MockQuerier_GetReconcilerResourcesForReconciler_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetReconcilerResourcesForReconciler_Call) RunAndReturn(run func(context.Context, string, int32, int32) ([]*ReconcilerResource, error)) *MockQuerier_GetReconcilerResourcesForReconciler_Call {
	_c.Call.Return(run)
	return _c
}

// GetReconcilerResourcesForReconcilerAndTeam provides a mock function with given fields: ctx, reconcilerName, teamSlug, offset, limit
func (_m *MockQuerier) GetReconcilerResourcesForReconcilerAndTeam(ctx context.Context, reconcilerName string, teamSlug slug.Slug, offset int32, limit int32) ([]*ReconcilerResource, error) {
	ret := _m.Called(ctx, reconcilerName, teamSlug, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetReconcilerResourcesForReconcilerAndTeam")
	}

	var r0 []*ReconcilerResource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, slug.Slug, int32, int32) ([]*ReconcilerResource, error)); ok {
		return rf(ctx, reconcilerName, teamSlug, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, slug.Slug, int32, int32) []*ReconcilerResource); ok {
		r0 = rf(ctx, reconcilerName, teamSlug, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ReconcilerResource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, slug.Slug, int32, int32) error); ok {
		r1 = rf(ctx, reconcilerName, teamSlug, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetReconcilerResourcesForReconcilerAndTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReconcilerResourcesForReconcilerAndTeam'
type MockQuerier_GetReconcilerResourcesForReconcilerAndTeam_Call struct {
	*mock.Call
}

// GetReconcilerResourcesForReconcilerAndTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - reconcilerName string
//   - teamSlug slug.Slug
//   - offset int32
//   - limit int32
func (_e *MockQuerier_Expecter) GetReconcilerResourcesForReconcilerAndTeam(ctx interface{}, reconcilerName interface{}, teamSlug interface{}, offset interface{}, limit interface{}) *MockQuerier_GetReconcilerResourcesForReconcilerAndTeam_Call {
	return &MockQuerier_GetReconcilerResourcesForReconcilerAndTeam_Call{Call: _e.mock.On("GetReconcilerResourcesForReconcilerAndTeam", ctx, reconcilerName, teamSlug, offset, limit)}
}

func (_c *MockQuerier_GetReconcilerResourcesForReconcilerAndTeam_Call) Run(run func(ctx context.Context, reconcilerName string, teamSlug slug.Slug, offset int32, limit int32)) *MockQuerier_GetReconcilerResourcesForReconcilerAndTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(slug.Slug), args[3].(int32), args[4].(int32))
	})
	return _c
}

func (_c *MockQuerier_GetReconcilerResourcesForReconcilerAndTeam_Call) Return(_a0 []*ReconcilerResource, _a1 error) *MockQuerier_GetReconcilerResourcesForReconcilerAndTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetReconcilerResourcesForReconcilerAndTeam_Call) RunAndReturn(run func(context.Context, string, slug.Slug, int32, int32) ([]*ReconcilerResource, error)) *MockQuerier_GetReconcilerResourcesForReconcilerAndTeam_Call {
	_c.Call.Return(run)
	return _c
}

// GetReconcilers provides a mock function with given fields: ctx
func (_m *MockQuerier) GetReconcilers(ctx context.Context) ([]*Reconciler, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetReconcilers")
	}

	var r0 []*Reconciler
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*Reconciler, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*Reconciler); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Reconciler)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetReconcilers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReconcilers'
type MockQuerier_GetReconcilers_Call struct {
	*mock.Call
}

// GetReconcilers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) GetReconcilers(ctx interface{}) *MockQuerier_GetReconcilers_Call {
	return &MockQuerier_GetReconcilers_Call{Call: _e.mock.On("GetReconcilers", ctx)}
}

func (_c *MockQuerier_GetReconcilers_Call) Run(run func(ctx context.Context)) *MockQuerier_GetReconcilers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_GetReconcilers_Call) Return(_a0 []*Reconciler, _a1 error) *MockQuerier_GetReconcilers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetReconcilers_Call) RunAndReturn(run func(context.Context) ([]*Reconciler, error)) *MockQuerier_GetReconcilers_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepositoryAuthorizations provides a mock function with given fields: ctx, teamSlug, githubRepository
func (_m *MockQuerier) GetRepositoryAuthorizations(ctx context.Context, teamSlug slug.Slug, githubRepository string) ([]RepositoryAuthorizationEnum, error) {
	ret := _m.Called(ctx, teamSlug, githubRepository)

	if len(ret) == 0 {
		panic("no return value specified for GetRepositoryAuthorizations")
	}

	var r0 []RepositoryAuthorizationEnum
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, string) ([]RepositoryAuthorizationEnum, error)); ok {
		return rf(ctx, teamSlug, githubRepository)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, string) []RepositoryAuthorizationEnum); ok {
		r0 = rf(ctx, teamSlug, githubRepository)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]RepositoryAuthorizationEnum)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug, string) error); ok {
		r1 = rf(ctx, teamSlug, githubRepository)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetRepositoryAuthorizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepositoryAuthorizations'
type MockQuerier_GetRepositoryAuthorizations_Call struct {
	*mock.Call
}

// GetRepositoryAuthorizations is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
//   - githubRepository string
func (_e *MockQuerier_Expecter) GetRepositoryAuthorizations(ctx interface{}, teamSlug interface{}, githubRepository interface{}) *MockQuerier_GetRepositoryAuthorizations_Call {
	return &MockQuerier_GetRepositoryAuthorizations_Call{Call: _e.mock.On("GetRepositoryAuthorizations", ctx, teamSlug, githubRepository)}
}

func (_c *MockQuerier_GetRepositoryAuthorizations_Call) Run(run func(ctx context.Context, teamSlug slug.Slug, githubRepository string)) *MockQuerier_GetRepositoryAuthorizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug), args[2].(string))
	})
	return _c
}

func (_c *MockQuerier_GetRepositoryAuthorizations_Call) Return(_a0 []RepositoryAuthorizationEnum, _a1 error) *MockQuerier_GetRepositoryAuthorizations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetRepositoryAuthorizations_Call) RunAndReturn(run func(context.Context, slug.Slug, string) ([]RepositoryAuthorizationEnum, error)) *MockQuerier_GetRepositoryAuthorizations_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceAccountByApiKey provides a mock function with given fields: ctx, apiKey
func (_m *MockQuerier) GetServiceAccountByApiKey(ctx context.Context, apiKey string) (*ServiceAccount, error) {
	ret := _m.Called(ctx, apiKey)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceAccountByApiKey")
	}

	var r0 *ServiceAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ServiceAccount, error)); ok {
		return rf(ctx, apiKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ServiceAccount); ok {
		r0 = rf(ctx, apiKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, apiKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetServiceAccountByApiKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceAccountByApiKey'
type MockQuerier_GetServiceAccountByApiKey_Call struct {
	*mock.Call
}

// GetServiceAccountByApiKey is a helper method to define mock.On call
//   - ctx context.Context
//   - apiKey string
func (_e *MockQuerier_Expecter) GetServiceAccountByApiKey(ctx interface{}, apiKey interface{}) *MockQuerier_GetServiceAccountByApiKey_Call {
	return &MockQuerier_GetServiceAccountByApiKey_Call{Call: _e.mock.On("GetServiceAccountByApiKey", ctx, apiKey)}
}

func (_c *MockQuerier_GetServiceAccountByApiKey_Call) Run(run func(ctx context.Context, apiKey string)) *MockQuerier_GetServiceAccountByApiKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_GetServiceAccountByApiKey_Call) Return(_a0 *ServiceAccount, _a1 error) *MockQuerier_GetServiceAccountByApiKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetServiceAccountByApiKey_Call) RunAndReturn(run func(context.Context, string) (*ServiceAccount, error)) *MockQuerier_GetServiceAccountByApiKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceAccountByName provides a mock function with given fields: ctx, name
func (_m *MockQuerier) GetServiceAccountByName(ctx context.Context, name string) (*ServiceAccount, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceAccountByName")
	}

	var r0 *ServiceAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ServiceAccount, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ServiceAccount); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetServiceAccountByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceAccountByName'
type MockQuerier_GetServiceAccountByName_Call struct {
	*mock.Call
}

// GetServiceAccountByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockQuerier_Expecter) GetServiceAccountByName(ctx interface{}, name interface{}) *MockQuerier_GetServiceAccountByName_Call {
	return &MockQuerier_GetServiceAccountByName_Call{Call: _e.mock.On("GetServiceAccountByName", ctx, name)}
}

func (_c *MockQuerier_GetServiceAccountByName_Call) Run(run func(ctx context.Context, name string)) *MockQuerier_GetServiceAccountByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_GetServiceAccountByName_Call) Return(_a0 *ServiceAccount, _a1 error) *MockQuerier_GetServiceAccountByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetServiceAccountByName_Call) RunAndReturn(run func(context.Context, string) (*ServiceAccount, error)) *MockQuerier_GetServiceAccountByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceAccountRoles provides a mock function with given fields: ctx, serviceAccountID
func (_m *MockQuerier) GetServiceAccountRoles(ctx context.Context, serviceAccountID uuid.UUID) ([]*ServiceAccountRole, error) {
	ret := _m.Called(ctx, serviceAccountID)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceAccountRoles")
	}

	var r0 []*ServiceAccountRole
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*ServiceAccountRole, error)); ok {
		return rf(ctx, serviceAccountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*ServiceAccountRole); ok {
		r0 = rf(ctx, serviceAccountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ServiceAccountRole)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, serviceAccountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetServiceAccountRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceAccountRoles'
type MockQuerier_GetServiceAccountRoles_Call struct {
	*mock.Call
}

// GetServiceAccountRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceAccountID uuid.UUID
func (_e *MockQuerier_Expecter) GetServiceAccountRoles(ctx interface{}, serviceAccountID interface{}) *MockQuerier_GetServiceAccountRoles_Call {
	return &MockQuerier_GetServiceAccountRoles_Call{Call: _e.mock.On("GetServiceAccountRoles", ctx, serviceAccountID)}
}

func (_c *MockQuerier_GetServiceAccountRoles_Call) Run(run func(ctx context.Context, serviceAccountID uuid.UUID)) *MockQuerier_GetServiceAccountRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockQuerier_GetServiceAccountRoles_Call) Return(_a0 []*ServiceAccountRole, _a1 error) *MockQuerier_GetServiceAccountRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetServiceAccountRoles_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*ServiceAccountRole, error)) *MockQuerier_GetServiceAccountRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceAccounts provides a mock function with given fields: ctx
func (_m *MockQuerier) GetServiceAccounts(ctx context.Context) ([]*ServiceAccount, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceAccounts")
	}

	var r0 []*ServiceAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*ServiceAccount, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*ServiceAccount); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetServiceAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceAccounts'
type MockQuerier_GetServiceAccounts_Call struct {
	*mock.Call
}

// GetServiceAccounts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) GetServiceAccounts(ctx interface{}) *MockQuerier_GetServiceAccounts_Call {
	return &MockQuerier_GetServiceAccounts_Call{Call: _e.mock.On("GetServiceAccounts", ctx)}
}

func (_c *MockQuerier_GetServiceAccounts_Call) Run(run func(ctx context.Context)) *MockQuerier_GetServiceAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_GetServiceAccounts_Call) Return(_a0 []*ServiceAccount, _a1 error) *MockQuerier_GetServiceAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetServiceAccounts_Call) RunAndReturn(run func(context.Context) ([]*ServiceAccount, error)) *MockQuerier_GetServiceAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// GetSessionByID provides a mock function with given fields: ctx, id
func (_m *MockQuerier) GetSessionByID(ctx context.Context, id uuid.UUID) (*Session, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionByID")
	}

	var r0 *Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Session, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Session); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetSessionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessionByID'
type MockQuerier_GetSessionByID_Call struct {
	*mock.Call
}

// GetSessionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockQuerier_Expecter) GetSessionByID(ctx interface{}, id interface{}) *MockQuerier_GetSessionByID_Call {
	return &MockQuerier_GetSessionByID_Call{Call: _e.mock.On("GetSessionByID", ctx, id)}
}

func (_c *MockQuerier_GetSessionByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockQuerier_GetSessionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockQuerier_GetSessionByID_Call) Return(_a0 *Session, _a1 error) *MockQuerier_GetSessionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetSessionByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*Session, error)) *MockQuerier_GetSessionByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetSlackAlertsChannels provides a mock function with given fields: ctx, teamSlug
func (_m *MockQuerier) GetSlackAlertsChannels(ctx context.Context, teamSlug slug.Slug) ([]*SlackAlertsChannel, error) {
	ret := _m.Called(ctx, teamSlug)

	if len(ret) == 0 {
		panic("no return value specified for GetSlackAlertsChannels")
	}

	var r0 []*SlackAlertsChannel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) ([]*SlackAlertsChannel, error)); ok {
		return rf(ctx, teamSlug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) []*SlackAlertsChannel); ok {
		r0 = rf(ctx, teamSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*SlackAlertsChannel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug) error); ok {
		r1 = rf(ctx, teamSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetSlackAlertsChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlackAlertsChannels'
type MockQuerier_GetSlackAlertsChannels_Call struct {
	*mock.Call
}

// GetSlackAlertsChannels is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
func (_e *MockQuerier_Expecter) GetSlackAlertsChannels(ctx interface{}, teamSlug interface{}) *MockQuerier_GetSlackAlertsChannels_Call {
	return &MockQuerier_GetSlackAlertsChannels_Call{Call: _e.mock.On("GetSlackAlertsChannels", ctx, teamSlug)}
}

func (_c *MockQuerier_GetSlackAlertsChannels_Call) Run(run func(ctx context.Context, teamSlug slug.Slug)) *MockQuerier_GetSlackAlertsChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug))
	})
	return _c
}

func (_c *MockQuerier_GetSlackAlertsChannels_Call) Return(_a0 []*SlackAlertsChannel, _a1 error) *MockQuerier_GetSlackAlertsChannels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetSlackAlertsChannels_Call) RunAndReturn(run func(context.Context, slug.Slug) ([]*SlackAlertsChannel, error)) *MockQuerier_GetSlackAlertsChannels_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamBySlug provides a mock function with given fields: ctx, argSlug
func (_m *MockQuerier) GetTeamBySlug(ctx context.Context, argSlug slug.Slug) (*Team, error) {
	ret := _m.Called(ctx, argSlug)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamBySlug")
	}

	var r0 *Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) (*Team, error)); ok {
		return rf(ctx, argSlug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) *Team); ok {
		r0 = rf(ctx, argSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug) error); ok {
		r1 = rf(ctx, argSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetTeamBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamBySlug'
type MockQuerier_GetTeamBySlug_Call struct {
	*mock.Call
}

// GetTeamBySlug is a helper method to define mock.On call
//   - ctx context.Context
//   - argSlug slug.Slug
func (_e *MockQuerier_Expecter) GetTeamBySlug(ctx interface{}, argSlug interface{}) *MockQuerier_GetTeamBySlug_Call {
	return &MockQuerier_GetTeamBySlug_Call{Call: _e.mock.On("GetTeamBySlug", ctx, argSlug)}
}

func (_c *MockQuerier_GetTeamBySlug_Call) Run(run func(ctx context.Context, argSlug slug.Slug)) *MockQuerier_GetTeamBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug))
	})
	return _c
}

func (_c *MockQuerier_GetTeamBySlug_Call) Return(_a0 *Team, _a1 error) *MockQuerier_GetTeamBySlug_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetTeamBySlug_Call) RunAndReturn(run func(context.Context, slug.Slug) (*Team, error)) *MockQuerier_GetTeamBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamDeleteKey provides a mock function with given fields: ctx, key
func (_m *MockQuerier) GetTeamDeleteKey(ctx context.Context, key uuid.UUID) (*TeamDeleteKey, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamDeleteKey")
	}

	var r0 *TeamDeleteKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*TeamDeleteKey, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *TeamDeleteKey); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TeamDeleteKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetTeamDeleteKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamDeleteKey'
type MockQuerier_GetTeamDeleteKey_Call struct {
	*mock.Call
}

// GetTeamDeleteKey is a helper method to define mock.On call
//   - ctx context.Context
//   - key uuid.UUID
func (_e *MockQuerier_Expecter) GetTeamDeleteKey(ctx interface{}, key interface{}) *MockQuerier_GetTeamDeleteKey_Call {
	return &MockQuerier_GetTeamDeleteKey_Call{Call: _e.mock.On("GetTeamDeleteKey", ctx, key)}
}

func (_c *MockQuerier_GetTeamDeleteKey_Call) Run(run func(ctx context.Context, key uuid.UUID)) *MockQuerier_GetTeamDeleteKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockQuerier_GetTeamDeleteKey_Call) Return(_a0 *TeamDeleteKey, _a1 error) *MockQuerier_GetTeamDeleteKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetTeamDeleteKey_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*TeamDeleteKey, error)) *MockQuerier_GetTeamDeleteKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamMember provides a mock function with given fields: ctx, teamSlug, userID
func (_m *MockQuerier) GetTeamMember(ctx context.Context, teamSlug *slug.Slug, userID uuid.UUID) (*User, error) {
	ret := _m.Called(ctx, teamSlug, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamMember")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *slug.Slug, uuid.UUID) (*User, error)); ok {
		return rf(ctx, teamSlug, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *slug.Slug, uuid.UUID) *User); ok {
		r0 = rf(ctx, teamSlug, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *slug.Slug, uuid.UUID) error); ok {
		r1 = rf(ctx, teamSlug, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetTeamMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamMember'
type MockQuerier_GetTeamMember_Call struct {
	*mock.Call
}

// GetTeamMember is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug *slug.Slug
//   - userID uuid.UUID
func (_e *MockQuerier_Expecter) GetTeamMember(ctx interface{}, teamSlug interface{}, userID interface{}) *MockQuerier_GetTeamMember_Call {
	return &MockQuerier_GetTeamMember_Call{Call: _e.mock.On("GetTeamMember", ctx, teamSlug, userID)}
}

func (_c *MockQuerier_GetTeamMember_Call) Run(run func(ctx context.Context, teamSlug *slug.Slug, userID uuid.UUID)) *MockQuerier_GetTeamMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*slug.Slug), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockQuerier_GetTeamMember_Call) Return(_a0 *User, _a1 error) *MockQuerier_GetTeamMember_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetTeamMember_Call) RunAndReturn(run func(context.Context, *slug.Slug, uuid.UUID) (*User, error)) *MockQuerier_GetTeamMember_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamMemberOptOuts provides a mock function with given fields: ctx, userID, teamSlug
func (_m *MockQuerier) GetTeamMemberOptOuts(ctx context.Context, userID uuid.UUID, teamSlug slug.Slug) ([]*GetTeamMemberOptOutsRow, error) {
	ret := _m.Called(ctx, userID, teamSlug)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamMemberOptOuts")
	}

	var r0 []*GetTeamMemberOptOutsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, slug.Slug) ([]*GetTeamMemberOptOutsRow, error)); ok {
		return rf(ctx, userID, teamSlug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, slug.Slug) []*GetTeamMemberOptOutsRow); ok {
		r0 = rf(ctx, userID, teamSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*GetTeamMemberOptOutsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, slug.Slug) error); ok {
		r1 = rf(ctx, userID, teamSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetTeamMemberOptOuts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamMemberOptOuts'
type MockQuerier_GetTeamMemberOptOuts_Call struct {
	*mock.Call
}

// GetTeamMemberOptOuts is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - teamSlug slug.Slug
func (_e *MockQuerier_Expecter) GetTeamMemberOptOuts(ctx interface{}, userID interface{}, teamSlug interface{}) *MockQuerier_GetTeamMemberOptOuts_Call {
	return &MockQuerier_GetTeamMemberOptOuts_Call{Call: _e.mock.On("GetTeamMemberOptOuts", ctx, userID, teamSlug)}
}

func (_c *MockQuerier_GetTeamMemberOptOuts_Call) Run(run func(ctx context.Context, userID uuid.UUID, teamSlug slug.Slug)) *MockQuerier_GetTeamMemberOptOuts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(slug.Slug))
	})
	return _c
}

func (_c *MockQuerier_GetTeamMemberOptOuts_Call) Return(_a0 []*GetTeamMemberOptOutsRow, _a1 error) *MockQuerier_GetTeamMemberOptOuts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetTeamMemberOptOuts_Call) RunAndReturn(run func(context.Context, uuid.UUID, slug.Slug) ([]*GetTeamMemberOptOutsRow, error)) *MockQuerier_GetTeamMemberOptOuts_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamMembers provides a mock function with given fields: ctx, teamSlug, offset, limit
func (_m *MockQuerier) GetTeamMembers(ctx context.Context, teamSlug *slug.Slug, offset int32, limit int32) ([]*User, error) {
	ret := _m.Called(ctx, teamSlug, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamMembers")
	}

	var r0 []*User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *slug.Slug, int32, int32) ([]*User, error)); ok {
		return rf(ctx, teamSlug, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *slug.Slug, int32, int32) []*User); ok {
		r0 = rf(ctx, teamSlug, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *slug.Slug, int32, int32) error); ok {
		r1 = rf(ctx, teamSlug, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetTeamMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamMembers'
type MockQuerier_GetTeamMembers_Call struct {
	*mock.Call
}

// GetTeamMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug *slug.Slug
//   - offset int32
//   - limit int32
func (_e *MockQuerier_Expecter) GetTeamMembers(ctx interface{}, teamSlug interface{}, offset interface{}, limit interface{}) *MockQuerier_GetTeamMembers_Call {
	return &MockQuerier_GetTeamMembers_Call{Call: _e.mock.On("GetTeamMembers", ctx, teamSlug, offset, limit)}
}

func (_c *MockQuerier_GetTeamMembers_Call) Run(run func(ctx context.Context, teamSlug *slug.Slug, offset int32, limit int32)) *MockQuerier_GetTeamMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*slug.Slug), args[2].(int32), args[3].(int32))
	})
	return _c
}

func (_c *MockQuerier_GetTeamMembers_Call) Return(_a0 []*User, _a1 error) *MockQuerier_GetTeamMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetTeamMembers_Call) RunAndReturn(run func(context.Context, *slug.Slug, int32, int32) ([]*User, error)) *MockQuerier_GetTeamMembers_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamMembersCount provides a mock function with given fields: ctx, teamSlug
func (_m *MockQuerier) GetTeamMembersCount(ctx context.Context, teamSlug *slug.Slug) (int64, error) {
	ret := _m.Called(ctx, teamSlug)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamMembersCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *slug.Slug) (int64, error)); ok {
		return rf(ctx, teamSlug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *slug.Slug) int64); ok {
		r0 = rf(ctx, teamSlug)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *slug.Slug) error); ok {
		r1 = rf(ctx, teamSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetTeamMembersCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamMembersCount'
type MockQuerier_GetTeamMembersCount_Call struct {
	*mock.Call
}

// GetTeamMembersCount is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug *slug.Slug
func (_e *MockQuerier_Expecter) GetTeamMembersCount(ctx interface{}, teamSlug interface{}) *MockQuerier_GetTeamMembersCount_Call {
	return &MockQuerier_GetTeamMembersCount_Call{Call: _e.mock.On("GetTeamMembersCount", ctx, teamSlug)}
}

func (_c *MockQuerier_GetTeamMembersCount_Call) Run(run func(ctx context.Context, teamSlug *slug.Slug)) *MockQuerier_GetTeamMembersCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*slug.Slug))
	})
	return _c
}

func (_c *MockQuerier_GetTeamMembersCount_Call) Return(_a0 int64, _a1 error) *MockQuerier_GetTeamMembersCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetTeamMembersCount_Call) RunAndReturn(run func(context.Context, *slug.Slug) (int64, error)) *MockQuerier_GetTeamMembersCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamMembersForReconciler provides a mock function with given fields: ctx, teamSlug, reconcilerName
func (_m *MockQuerier) GetTeamMembersForReconciler(ctx context.Context, teamSlug *slug.Slug, reconcilerName string) ([]*User, error) {
	ret := _m.Called(ctx, teamSlug, reconcilerName)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamMembersForReconciler")
	}

	var r0 []*User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *slug.Slug, string) ([]*User, error)); ok {
		return rf(ctx, teamSlug, reconcilerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *slug.Slug, string) []*User); ok {
		r0 = rf(ctx, teamSlug, reconcilerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *slug.Slug, string) error); ok {
		r1 = rf(ctx, teamSlug, reconcilerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetTeamMembersForReconciler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamMembersForReconciler'
type MockQuerier_GetTeamMembersForReconciler_Call struct {
	*mock.Call
}

// GetTeamMembersForReconciler is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug *slug.Slug
//   - reconcilerName string
func (_e *MockQuerier_Expecter) GetTeamMembersForReconciler(ctx interface{}, teamSlug interface{}, reconcilerName interface{}) *MockQuerier_GetTeamMembersForReconciler_Call {
	return &MockQuerier_GetTeamMembersForReconciler_Call{Call: _e.mock.On("GetTeamMembersForReconciler", ctx, teamSlug, reconcilerName)}
}

func (_c *MockQuerier_GetTeamMembersForReconciler_Call) Run(run func(ctx context.Context, teamSlug *slug.Slug, reconcilerName string)) *MockQuerier_GetTeamMembersForReconciler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*slug.Slug), args[2].(string))
	})
	return _c
}

func (_c *MockQuerier_GetTeamMembersForReconciler_Call) Return(_a0 []*User, _a1 error) *MockQuerier_GetTeamMembersForReconciler_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetTeamMembersForReconciler_Call) RunAndReturn(run func(context.Context, *slug.Slug, string) ([]*User, error)) *MockQuerier_GetTeamMembersForReconciler_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamReconcilerErrors provides a mock function with given fields: ctx, teamSlug
func (_m *MockQuerier) GetTeamReconcilerErrors(ctx context.Context, teamSlug slug.Slug) ([]*ReconcilerError, error) {
	ret := _m.Called(ctx, teamSlug)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamReconcilerErrors")
	}

	var r0 []*ReconcilerError
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) ([]*ReconcilerError, error)); ok {
		return rf(ctx, teamSlug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) []*ReconcilerError); ok {
		r0 = rf(ctx, teamSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ReconcilerError)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug) error); ok {
		r1 = rf(ctx, teamSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetTeamReconcilerErrors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamReconcilerErrors'
type MockQuerier_GetTeamReconcilerErrors_Call struct {
	*mock.Call
}

// GetTeamReconcilerErrors is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
func (_e *MockQuerier_Expecter) GetTeamReconcilerErrors(ctx interface{}, teamSlug interface{}) *MockQuerier_GetTeamReconcilerErrors_Call {
	return &MockQuerier_GetTeamReconcilerErrors_Call{Call: _e.mock.On("GetTeamReconcilerErrors", ctx, teamSlug)}
}

func (_c *MockQuerier_GetTeamReconcilerErrors_Call) Run(run func(ctx context.Context, teamSlug slug.Slug)) *MockQuerier_GetTeamReconcilerErrors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug))
	})
	return _c
}

func (_c *MockQuerier_GetTeamReconcilerErrors_Call) Return(_a0 []*ReconcilerError, _a1 error) *MockQuerier_GetTeamReconcilerErrors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetTeamReconcilerErrors_Call) RunAndReturn(run func(context.Context, slug.Slug) ([]*ReconcilerError, error)) *MockQuerier_GetTeamReconcilerErrors_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeams provides a mock function with given fields: ctx
func (_m *MockQuerier) GetTeams(ctx context.Context) ([]*Team, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTeams")
	}

	var r0 []*Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*Team, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*Team); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeams'
type MockQuerier_GetTeams_Call struct {
	*mock.Call
}

// GetTeams is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) GetTeams(ctx interface{}) *MockQuerier_GetTeams_Call {
	return &MockQuerier_GetTeams_Call{Call: _e.mock.On("GetTeams", ctx)}
}

func (_c *MockQuerier_GetTeams_Call) Run(run func(ctx context.Context)) *MockQuerier_GetTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_GetTeams_Call) Return(_a0 []*Team, _a1 error) *MockQuerier_GetTeams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetTeams_Call) RunAndReturn(run func(context.Context) ([]*Team, error)) *MockQuerier_GetTeams_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamsCount provides a mock function with given fields: ctx
func (_m *MockQuerier) GetTeamsCount(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamsCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetTeamsCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamsCount'
type MockQuerier_GetTeamsCount_Call struct {
	*mock.Call
}

// GetTeamsCount is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) GetTeamsCount(ctx interface{}) *MockQuerier_GetTeamsCount_Call {
	return &MockQuerier_GetTeamsCount_Call{Call: _e.mock.On("GetTeamsCount", ctx)}
}

func (_c *MockQuerier_GetTeamsCount_Call) Run(run func(ctx context.Context)) *MockQuerier_GetTeamsCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_GetTeamsCount_Call) Return(_a0 int64, _a1 error) *MockQuerier_GetTeamsCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetTeamsCount_Call) RunAndReturn(run func(context.Context) (int64, error)) *MockQuerier_GetTeamsCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamsPaginated provides a mock function with given fields: ctx, offset, limit
func (_m *MockQuerier) GetTeamsPaginated(ctx context.Context, offset int32, limit int32) ([]*Team, error) {
	ret := _m.Called(ctx, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamsPaginated")
	}

	var r0 []*Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) ([]*Team, error)); ok {
		return rf(ctx, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) []*Team); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32) error); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetTeamsPaginated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamsPaginated'
type MockQuerier_GetTeamsPaginated_Call struct {
	*mock.Call
}

// GetTeamsPaginated is a helper method to define mock.On call
//   - ctx context.Context
//   - offset int32
//   - limit int32
func (_e *MockQuerier_Expecter) GetTeamsPaginated(ctx interface{}, offset interface{}, limit interface{}) *MockQuerier_GetTeamsPaginated_Call {
	return &MockQuerier_GetTeamsPaginated_Call{Call: _e.mock.On("GetTeamsPaginated", ctx, offset, limit)}
}

func (_c *MockQuerier_GetTeamsPaginated_Call) Run(run func(ctx context.Context, offset int32, limit int32)) *MockQuerier_GetTeamsPaginated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32), args[2].(int32))
	})
	return _c
}

func (_c *MockQuerier_GetTeamsPaginated_Call) Return(_a0 []*Team, _a1 error) *MockQuerier_GetTeamsPaginated_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetTeamsPaginated_Call) RunAndReturn(run func(context.Context, int32, int32) ([]*Team, error)) *MockQuerier_GetTeamsPaginated_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *MockQuerier) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockQuerier_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockQuerier_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockQuerier_GetUserByEmail_Call {
	return &MockQuerier_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockQuerier_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockQuerier_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_GetUserByEmail_Call) Return(_a0 *User, _a1 error) *MockQuerier_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (*User, error)) *MockQuerier_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByExternalID provides a mock function with given fields: ctx, externalID
func (_m *MockQuerier) GetUserByExternalID(ctx context.Context, externalID string) (*User, error) {
	ret := _m.Called(ctx, externalID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByExternalID")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*User, error)); ok {
		return rf(ctx, externalID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *User); ok {
		r0 = rf(ctx, externalID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, externalID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetUserByExternalID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByExternalID'
type MockQuerier_GetUserByExternalID_Call struct {
	*mock.Call
}

// GetUserByExternalID is a helper method to define mock.On call
//   - ctx context.Context
//   - externalID string
func (_e *MockQuerier_Expecter) GetUserByExternalID(ctx interface{}, externalID interface{}) *MockQuerier_GetUserByExternalID_Call {
	return &MockQuerier_GetUserByExternalID_Call{Call: _e.mock.On("GetUserByExternalID", ctx, externalID)}
}

func (_c *MockQuerier_GetUserByExternalID_Call) Run(run func(ctx context.Context, externalID string)) *MockQuerier_GetUserByExternalID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_GetUserByExternalID_Call) Return(_a0 *User, _a1 error) *MockQuerier_GetUserByExternalID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetUserByExternalID_Call) RunAndReturn(run func(context.Context, string) (*User, error)) *MockQuerier_GetUserByExternalID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *MockQuerier) GetUserByID(ctx context.Context, id uuid.UUID) (*User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockQuerier_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockQuerier_Expecter) GetUserByID(ctx interface{}, id interface{}) *MockQuerier_GetUserByID_Call {
	return &MockQuerier_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, id)}
}

func (_c *MockQuerier_GetUserByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockQuerier_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockQuerier_GetUserByID_Call) Return(_a0 *User, _a1 error) *MockQuerier_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetUserByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*User, error)) *MockQuerier_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserRoles provides a mock function with given fields: ctx, userID
func (_m *MockQuerier) GetUserRoles(ctx context.Context, userID uuid.UUID) ([]*UserRole, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRoles")
	}

	var r0 []*UserRole
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*UserRole, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*UserRole); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*UserRole)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRoles'
type MockQuerier_GetUserRoles_Call struct {
	*mock.Call
}

// GetUserRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockQuerier_Expecter) GetUserRoles(ctx interface{}, userID interface{}) *MockQuerier_GetUserRoles_Call {
	return &MockQuerier_GetUserRoles_Call{Call: _e.mock.On("GetUserRoles", ctx, userID)}
}

func (_c *MockQuerier_GetUserRoles_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockQuerier_GetUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockQuerier_GetUserRoles_Call) Return(_a0 []*UserRole, _a1 error) *MockQuerier_GetUserRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetUserRoles_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*UserRole, error)) *MockQuerier_GetUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserTeams provides a mock function with given fields: ctx, userID, limit, offset
func (_m *MockQuerier) GetUserTeams(ctx context.Context, userID uuid.UUID, limit int32, offset int32) ([]*GetUserTeamsRow, error) {
	ret := _m.Called(ctx, userID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetUserTeams")
	}

	var r0 []*GetUserTeamsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int32, int32) ([]*GetUserTeamsRow, error)); ok {
		return rf(ctx, userID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int32, int32) []*GetUserTeamsRow); ok {
		r0 = rf(ctx, userID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*GetUserTeamsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int32, int32) error); ok {
		r1 = rf(ctx, userID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetUserTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserTeams'
type MockQuerier_GetUserTeams_Call struct {
	*mock.Call
}

// GetUserTeams is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - limit int32
//   - offset int32
func (_e *MockQuerier_Expecter) GetUserTeams(ctx interface{}, userID interface{}, limit interface{}, offset interface{}) *MockQuerier_GetUserTeams_Call {
	return &MockQuerier_GetUserTeams_Call{Call: _e.mock.On("GetUserTeams", ctx, userID, limit, offset)}
}

func (_c *MockQuerier_GetUserTeams_Call) Run(run func(ctx context.Context, userID uuid.UUID, limit int32, offset int32)) *MockQuerier_GetUserTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(int32), args[3].(int32))
	})
	return _c
}

func (_c *MockQuerier_GetUserTeams_Call) Return(_a0 []*GetUserTeamsRow, _a1 error) *MockQuerier_GetUserTeams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetUserTeams_Call) RunAndReturn(run func(context.Context, uuid.UUID, int32, int32) ([]*GetUserTeamsRow, error)) *MockQuerier_GetUserTeams_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserTeamsCount provides a mock function with given fields: ctx, userID
func (_m *MockQuerier) GetUserTeamsCount(ctx context.Context, userID uuid.UUID) (int64, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserTeamsCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int64, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int64); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetUserTeamsCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserTeamsCount'
type MockQuerier_GetUserTeamsCount_Call struct {
	*mock.Call
}

// GetUserTeamsCount is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockQuerier_Expecter) GetUserTeamsCount(ctx interface{}, userID interface{}) *MockQuerier_GetUserTeamsCount_Call {
	return &MockQuerier_GetUserTeamsCount_Call{Call: _e.mock.On("GetUserTeamsCount", ctx, userID)}
}

func (_c *MockQuerier_GetUserTeamsCount_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockQuerier_GetUserTeamsCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockQuerier_GetUserTeamsCount_Call) Return(_a0 int64, _a1 error) *MockQuerier_GetUserTeamsCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetUserTeamsCount_Call) RunAndReturn(run func(context.Context, uuid.UUID) (int64, error)) *MockQuerier_GetUserTeamsCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields: ctx, limit, offset
func (_m *MockQuerier) GetUsers(ctx context.Context, limit int32, offset int32) ([]*User, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []*User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) ([]*User, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) []*User); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type MockQuerier_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int32
//   - offset int32
func (_e *MockQuerier_Expecter) GetUsers(ctx interface{}, limit interface{}, offset interface{}) *MockQuerier_GetUsers_Call {
	return &MockQuerier_GetUsers_Call{Call: _e.mock.On("GetUsers", ctx, limit, offset)}
}

func (_c *MockQuerier_GetUsers_Call) Run(run func(ctx context.Context, limit int32, offset int32)) *MockQuerier_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32), args[2].(int32))
	})
	return _c
}

func (_c *MockQuerier_GetUsers_Call) Return(_a0 []*User, _a1 error) *MockQuerier_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetUsers_Call) RunAndReturn(run func(context.Context, int32, int32) ([]*User, error)) *MockQuerier_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersCount provides a mock function with given fields: ctx
func (_m *MockQuerier) GetUsersCount(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetUsersCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersCount'
type MockQuerier_GetUsersCount_Call struct {
	*mock.Call
}

// GetUsersCount is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) GetUsersCount(ctx interface{}) *MockQuerier_GetUsersCount_Call {
	return &MockQuerier_GetUsersCount_Call{Call: _e.mock.On("GetUsersCount", ctx)}
}

func (_c *MockQuerier_GetUsersCount_Call) Run(run func(ctx context.Context)) *MockQuerier_GetUsersCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_GetUsersCount_Call) Return(_a0 int64, _a1 error) *MockQuerier_GetUsersCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetUsersCount_Call) RunAndReturn(run func(context.Context) (int64, error)) *MockQuerier_GetUsersCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersWithGloballyAssignedRole provides a mock function with given fields: ctx, roleName
func (_m *MockQuerier) GetUsersWithGloballyAssignedRole(ctx context.Context, roleName RoleName) ([]*User, error) {
	ret := _m.Called(ctx, roleName)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersWithGloballyAssignedRole")
	}

	var r0 []*User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, RoleName) ([]*User, error)); ok {
		return rf(ctx, roleName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, RoleName) []*User); ok {
		r0 = rf(ctx, roleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, RoleName) error); ok {
		r1 = rf(ctx, roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetUsersWithGloballyAssignedRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersWithGloballyAssignedRole'
type MockQuerier_GetUsersWithGloballyAssignedRole_Call struct {
	*mock.Call
}

// GetUsersWithGloballyAssignedRole is a helper method to define mock.On call
//   - ctx context.Context
//   - roleName RoleName
func (_e *MockQuerier_Expecter) GetUsersWithGloballyAssignedRole(ctx interface{}, roleName interface{}) *MockQuerier_GetUsersWithGloballyAssignedRole_Call {
	return &MockQuerier_GetUsersWithGloballyAssignedRole_Call{Call: _e.mock.On("GetUsersWithGloballyAssignedRole", ctx, roleName)}
}

func (_c *MockQuerier_GetUsersWithGloballyAssignedRole_Call) Run(run func(ctx context.Context, roleName RoleName)) *MockQuerier_GetUsersWithGloballyAssignedRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(RoleName))
	})
	return _c
}

func (_c *MockQuerier_GetUsersWithGloballyAssignedRole_Call) Return(_a0 []*User, _a1 error) *MockQuerier_GetUsersWithGloballyAssignedRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetUsersWithGloballyAssignedRole_Call) RunAndReturn(run func(context.Context, RoleName) ([]*User, error)) *MockQuerier_GetUsersWithGloballyAssignedRole_Call {
	_c.Call.Return(run)
	return _c
}

// IsFirstRun provides a mock function with given fields: ctx
func (_m *MockQuerier) IsFirstRun(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IsFirstRun")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_IsFirstRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFirstRun'
type MockQuerier_IsFirstRun_Call struct {
	*mock.Call
}

// IsFirstRun is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) IsFirstRun(ctx interface{}) *MockQuerier_IsFirstRun_Call {
	return &MockQuerier_IsFirstRun_Call{Call: _e.mock.On("IsFirstRun", ctx)}
}

func (_c *MockQuerier_IsFirstRun_Call) Run(run func(ctx context.Context)) *MockQuerier_IsFirstRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_IsFirstRun_Call) Return(_a0 bool, _a1 error) *MockQuerier_IsFirstRun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_IsFirstRun_Call) RunAndReturn(run func(context.Context) (bool, error)) *MockQuerier_IsFirstRun_Call {
	_c.Call.Return(run)
	return _c
}

// LastCostDate provides a mock function with given fields: ctx
func (_m *MockQuerier) LastCostDate(ctx context.Context) (pgtype.Date, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LastCostDate")
	}

	var r0 pgtype.Date
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (pgtype.Date, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) pgtype.Date); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(pgtype.Date)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_LastCostDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LastCostDate'
type MockQuerier_LastCostDate_Call struct {
	*mock.Call
}

// LastCostDate is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) LastCostDate(ctx interface{}) *MockQuerier_LastCostDate_Call {
	return &MockQuerier_LastCostDate_Call{Call: _e.mock.On("LastCostDate", ctx)}
}

func (_c *MockQuerier_LastCostDate_Call) Run(run func(ctx context.Context)) *MockQuerier_LastCostDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_LastCostDate_Call) Return(_a0 pgtype.Date, _a1 error) *MockQuerier_LastCostDate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_LastCostDate_Call) RunAndReturn(run func(context.Context) (pgtype.Date, error)) *MockQuerier_LastCostDate_Call {
	_c.Call.Return(run)
	return _c
}

// MaxResourceUtilizationDate provides a mock function with given fields: ctx
func (_m *MockQuerier) MaxResourceUtilizationDate(ctx context.Context) (pgtype.Timestamptz, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for MaxResourceUtilizationDate")
	}

	var r0 pgtype.Timestamptz
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (pgtype.Timestamptz, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) pgtype.Timestamptz); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(pgtype.Timestamptz)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_MaxResourceUtilizationDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MaxResourceUtilizationDate'
type MockQuerier_MaxResourceUtilizationDate_Call struct {
	*mock.Call
}

// MaxResourceUtilizationDate is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) MaxResourceUtilizationDate(ctx interface{}) *MockQuerier_MaxResourceUtilizationDate_Call {
	return &MockQuerier_MaxResourceUtilizationDate_Call{Call: _e.mock.On("MaxResourceUtilizationDate", ctx)}
}

func (_c *MockQuerier_MaxResourceUtilizationDate_Call) Run(run func(ctx context.Context)) *MockQuerier_MaxResourceUtilizationDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_MaxResourceUtilizationDate_Call) Return(_a0 pgtype.Timestamptz, _a1 error) *MockQuerier_MaxResourceUtilizationDate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_MaxResourceUtilizationDate_Call) RunAndReturn(run func(context.Context) (pgtype.Timestamptz, error)) *MockQuerier_MaxResourceUtilizationDate_Call {
	_c.Call.Return(run)
	return _c
}

// MonthlyCostForApp provides a mock function with given fields: ctx, teamSlug, app, environment
func (_m *MockQuerier) MonthlyCostForApp(ctx context.Context, teamSlug slug.Slug, app string, environment string) ([]*MonthlyCostForAppRow, error) {
	ret := _m.Called(ctx, teamSlug, app, environment)

	if len(ret) == 0 {
		panic("no return value specified for MonthlyCostForApp")
	}

	var r0 []*MonthlyCostForAppRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, string, string) ([]*MonthlyCostForAppRow, error)); ok {
		return rf(ctx, teamSlug, app, environment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, string, string) []*MonthlyCostForAppRow); ok {
		r0 = rf(ctx, teamSlug, app, environment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*MonthlyCostForAppRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug, string, string) error); ok {
		r1 = rf(ctx, teamSlug, app, environment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_MonthlyCostForApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MonthlyCostForApp'
type MockQuerier_MonthlyCostForApp_Call struct {
	*mock.Call
}

// MonthlyCostForApp is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
//   - app string
//   - environment string
func (_e *MockQuerier_Expecter) MonthlyCostForApp(ctx interface{}, teamSlug interface{}, app interface{}, environment interface{}) *MockQuerier_MonthlyCostForApp_Call {
	return &MockQuerier_MonthlyCostForApp_Call{Call: _e.mock.On("MonthlyCostForApp", ctx, teamSlug, app, environment)}
}

func (_c *MockQuerier_MonthlyCostForApp_Call) Run(run func(ctx context.Context, teamSlug slug.Slug, app string, environment string)) *MockQuerier_MonthlyCostForApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockQuerier_MonthlyCostForApp_Call) Return(_a0 []*MonthlyCostForAppRow, _a1 error) *MockQuerier_MonthlyCostForApp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_MonthlyCostForApp_Call) RunAndReturn(run func(context.Context, slug.Slug, string, string) ([]*MonthlyCostForAppRow, error)) *MockQuerier_MonthlyCostForApp_Call {
	_c.Call.Return(run)
	return _c
}

// MonthlyCostForTeam provides a mock function with given fields: ctx, teamSlug
func (_m *MockQuerier) MonthlyCostForTeam(ctx context.Context, teamSlug slug.Slug) ([]*MonthlyCostForTeamRow, error) {
	ret := _m.Called(ctx, teamSlug)

	if len(ret) == 0 {
		panic("no return value specified for MonthlyCostForTeam")
	}

	var r0 []*MonthlyCostForTeamRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) ([]*MonthlyCostForTeamRow, error)); ok {
		return rf(ctx, teamSlug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) []*MonthlyCostForTeamRow); ok {
		r0 = rf(ctx, teamSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*MonthlyCostForTeamRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug) error); ok {
		r1 = rf(ctx, teamSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_MonthlyCostForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MonthlyCostForTeam'
type MockQuerier_MonthlyCostForTeam_Call struct {
	*mock.Call
}

// MonthlyCostForTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
func (_e *MockQuerier_Expecter) MonthlyCostForTeam(ctx interface{}, teamSlug interface{}) *MockQuerier_MonthlyCostForTeam_Call {
	return &MockQuerier_MonthlyCostForTeam_Call{Call: _e.mock.On("MonthlyCostForTeam", ctx, teamSlug)}
}

func (_c *MockQuerier_MonthlyCostForTeam_Call) Run(run func(ctx context.Context, teamSlug slug.Slug)) *MockQuerier_MonthlyCostForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug))
	})
	return _c
}

func (_c *MockQuerier_MonthlyCostForTeam_Call) Return(_a0 []*MonthlyCostForTeamRow, _a1 error) *MockQuerier_MonthlyCostForTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_MonthlyCostForTeam_Call) RunAndReturn(run func(context.Context, slug.Slug) ([]*MonthlyCostForTeamRow, error)) *MockQuerier_MonthlyCostForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAllServiceAccountRoles provides a mock function with given fields: ctx, serviceAccountID
func (_m *MockQuerier) RemoveAllServiceAccountRoles(ctx context.Context, serviceAccountID uuid.UUID) error {
	ret := _m.Called(ctx, serviceAccountID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAllServiceAccountRoles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, serviceAccountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_RemoveAllServiceAccountRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAllServiceAccountRoles'
type MockQuerier_RemoveAllServiceAccountRoles_Call struct {
	*mock.Call
}

// RemoveAllServiceAccountRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceAccountID uuid.UUID
func (_e *MockQuerier_Expecter) RemoveAllServiceAccountRoles(ctx interface{}, serviceAccountID interface{}) *MockQuerier_RemoveAllServiceAccountRoles_Call {
	return &MockQuerier_RemoveAllServiceAccountRoles_Call{Call: _e.mock.On("RemoveAllServiceAccountRoles", ctx, serviceAccountID)}
}

func (_c *MockQuerier_RemoveAllServiceAccountRoles_Call) Run(run func(ctx context.Context, serviceAccountID uuid.UUID)) *MockQuerier_RemoveAllServiceAccountRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockQuerier_RemoveAllServiceAccountRoles_Call) Return(_a0 error) *MockQuerier_RemoveAllServiceAccountRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_RemoveAllServiceAccountRoles_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockQuerier_RemoveAllServiceAccountRoles_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveApiKeysFromServiceAccount provides a mock function with given fields: ctx, serviceAccountID
func (_m *MockQuerier) RemoveApiKeysFromServiceAccount(ctx context.Context, serviceAccountID uuid.UUID) error {
	ret := _m.Called(ctx, serviceAccountID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveApiKeysFromServiceAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, serviceAccountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_RemoveApiKeysFromServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveApiKeysFromServiceAccount'
type MockQuerier_RemoveApiKeysFromServiceAccount_Call struct {
	*mock.Call
}

// RemoveApiKeysFromServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceAccountID uuid.UUID
func (_e *MockQuerier_Expecter) RemoveApiKeysFromServiceAccount(ctx interface{}, serviceAccountID interface{}) *MockQuerier_RemoveApiKeysFromServiceAccount_Call {
	return &MockQuerier_RemoveApiKeysFromServiceAccount_Call{Call: _e.mock.On("RemoveApiKeysFromServiceAccount", ctx, serviceAccountID)}
}

func (_c *MockQuerier_RemoveApiKeysFromServiceAccount_Call) Run(run func(ctx context.Context, serviceAccountID uuid.UUID)) *MockQuerier_RemoveApiKeysFromServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockQuerier_RemoveApiKeysFromServiceAccount_Call) Return(_a0 error) *MockQuerier_RemoveApiKeysFromServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_RemoveApiKeysFromServiceAccount_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockQuerier_RemoveApiKeysFromServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveReconcilerOptOut provides a mock function with given fields: ctx, teamSlug, userID, reconcilerName
func (_m *MockQuerier) RemoveReconcilerOptOut(ctx context.Context, teamSlug slug.Slug, userID uuid.UUID, reconcilerName string) error {
	ret := _m.Called(ctx, teamSlug, userID, reconcilerName)

	if len(ret) == 0 {
		panic("no return value specified for RemoveReconcilerOptOut")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, uuid.UUID, string) error); ok {
		r0 = rf(ctx, teamSlug, userID, reconcilerName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_RemoveReconcilerOptOut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveReconcilerOptOut'
type MockQuerier_RemoveReconcilerOptOut_Call struct {
	*mock.Call
}

// RemoveReconcilerOptOut is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
//   - userID uuid.UUID
//   - reconcilerName string
func (_e *MockQuerier_Expecter) RemoveReconcilerOptOut(ctx interface{}, teamSlug interface{}, userID interface{}, reconcilerName interface{}) *MockQuerier_RemoveReconcilerOptOut_Call {
	return &MockQuerier_RemoveReconcilerOptOut_Call{Call: _e.mock.On("RemoveReconcilerOptOut", ctx, teamSlug, userID, reconcilerName)}
}

func (_c *MockQuerier_RemoveReconcilerOptOut_Call) Run(run func(ctx context.Context, teamSlug slug.Slug, userID uuid.UUID, reconcilerName string)) *MockQuerier_RemoveReconcilerOptOut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug), args[2].(uuid.UUID), args[3].(string))
	})
	return _c
}

func (_c *MockQuerier_RemoveReconcilerOptOut_Call) Return(_a0 error) *MockQuerier_RemoveReconcilerOptOut_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_RemoveReconcilerOptOut_Call) RunAndReturn(run func(context.Context, slug.Slug, uuid.UUID, string) error) *MockQuerier_RemoveReconcilerOptOut_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRepositoryAuthorization provides a mock function with given fields: ctx, teamSlug, githubRepository, repositoryAuthorization
func (_m *MockQuerier) RemoveRepositoryAuthorization(ctx context.Context, teamSlug slug.Slug, githubRepository string, repositoryAuthorization RepositoryAuthorizationEnum) error {
	ret := _m.Called(ctx, teamSlug, githubRepository, repositoryAuthorization)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRepositoryAuthorization")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, string, RepositoryAuthorizationEnum) error); ok {
		r0 = rf(ctx, teamSlug, githubRepository, repositoryAuthorization)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_RemoveRepositoryAuthorization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRepositoryAuthorization'
type MockQuerier_RemoveRepositoryAuthorization_Call struct {
	*mock.Call
}

// RemoveRepositoryAuthorization is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
//   - githubRepository string
//   - repositoryAuthorization RepositoryAuthorizationEnum
func (_e *MockQuerier_Expecter) RemoveRepositoryAuthorization(ctx interface{}, teamSlug interface{}, githubRepository interface{}, repositoryAuthorization interface{}) *MockQuerier_RemoveRepositoryAuthorization_Call {
	return &MockQuerier_RemoveRepositoryAuthorization_Call{Call: _e.mock.On("RemoveRepositoryAuthorization", ctx, teamSlug, githubRepository, repositoryAuthorization)}
}

func (_c *MockQuerier_RemoveRepositoryAuthorization_Call) Run(run func(ctx context.Context, teamSlug slug.Slug, githubRepository string, repositoryAuthorization RepositoryAuthorizationEnum)) *MockQuerier_RemoveRepositoryAuthorization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug), args[2].(string), args[3].(RepositoryAuthorizationEnum))
	})
	return _c
}

func (_c *MockQuerier_RemoveRepositoryAuthorization_Call) Return(_a0 error) *MockQuerier_RemoveRepositoryAuthorization_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_RemoveRepositoryAuthorization_Call) RunAndReturn(run func(context.Context, slug.Slug, string, RepositoryAuthorizationEnum) error) *MockQuerier_RemoveRepositoryAuthorization_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveSlackAlertsChannel provides a mock function with given fields: ctx, teamSlug, environment
func (_m *MockQuerier) RemoveSlackAlertsChannel(ctx context.Context, teamSlug slug.Slug, environment string) error {
	ret := _m.Called(ctx, teamSlug, environment)

	if len(ret) == 0 {
		panic("no return value specified for RemoveSlackAlertsChannel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, string) error); ok {
		r0 = rf(ctx, teamSlug, environment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_RemoveSlackAlertsChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveSlackAlertsChannel'
type MockQuerier_RemoveSlackAlertsChannel_Call struct {
	*mock.Call
}

// RemoveSlackAlertsChannel is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
//   - environment string
func (_e *MockQuerier_Expecter) RemoveSlackAlertsChannel(ctx interface{}, teamSlug interface{}, environment interface{}) *MockQuerier_RemoveSlackAlertsChannel_Call {
	return &MockQuerier_RemoveSlackAlertsChannel_Call{Call: _e.mock.On("RemoveSlackAlertsChannel", ctx, teamSlug, environment)}
}

func (_c *MockQuerier_RemoveSlackAlertsChannel_Call) Run(run func(ctx context.Context, teamSlug slug.Slug, environment string)) *MockQuerier_RemoveSlackAlertsChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug), args[2].(string))
	})
	return _c
}

func (_c *MockQuerier_RemoveSlackAlertsChannel_Call) Return(_a0 error) *MockQuerier_RemoveSlackAlertsChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_RemoveSlackAlertsChannel_Call) RunAndReturn(run func(context.Context, slug.Slug, string) error) *MockQuerier_RemoveSlackAlertsChannel_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUserFromTeam provides a mock function with given fields: ctx, userID, teamSlug
func (_m *MockQuerier) RemoveUserFromTeam(ctx context.Context, userID uuid.UUID, teamSlug *slug.Slug) error {
	ret := _m.Called(ctx, userID, teamSlug)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserFromTeam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *slug.Slug) error); ok {
		r0 = rf(ctx, userID, teamSlug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_RemoveUserFromTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUserFromTeam'
type MockQuerier_RemoveUserFromTeam_Call struct {
	*mock.Call
}

// RemoveUserFromTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - teamSlug *slug.Slug
func (_e *MockQuerier_Expecter) RemoveUserFromTeam(ctx interface{}, userID interface{}, teamSlug interface{}) *MockQuerier_RemoveUserFromTeam_Call {
	return &MockQuerier_RemoveUserFromTeam_Call{Call: _e.mock.On("RemoveUserFromTeam", ctx, userID, teamSlug)}
}

func (_c *MockQuerier_RemoveUserFromTeam_Call) Run(run func(ctx context.Context, userID uuid.UUID, teamSlug *slug.Slug)) *MockQuerier_RemoveUserFromTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*slug.Slug))
	})
	return _c
}

func (_c *MockQuerier_RemoveUserFromTeam_Call) Return(_a0 error) *MockQuerier_RemoveUserFromTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_RemoveUserFromTeam_Call) RunAndReturn(run func(context.Context, uuid.UUID, *slug.Slug) error) *MockQuerier_RemoveUserFromTeam_Call {
	_c.Call.Return(run)
	return _c
}

// ResetReconcilerConfig provides a mock function with given fields: ctx, reconcilerName
func (_m *MockQuerier) ResetReconcilerConfig(ctx context.Context, reconcilerName string) error {
	ret := _m.Called(ctx, reconcilerName)

	if len(ret) == 0 {
		panic("no return value specified for ResetReconcilerConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, reconcilerName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_ResetReconcilerConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetReconcilerConfig'
type MockQuerier_ResetReconcilerConfig_Call struct {
	*mock.Call
}

// ResetReconcilerConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - reconcilerName string
func (_e *MockQuerier_Expecter) ResetReconcilerConfig(ctx interface{}, reconcilerName interface{}) *MockQuerier_ResetReconcilerConfig_Call {
	return &MockQuerier_ResetReconcilerConfig_Call{Call: _e.mock.On("ResetReconcilerConfig", ctx, reconcilerName)}
}

func (_c *MockQuerier_ResetReconcilerConfig_Call) Run(run func(ctx context.Context, reconcilerName string)) *MockQuerier_ResetReconcilerConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_ResetReconcilerConfig_Call) Return(_a0 error) *MockQuerier_ResetReconcilerConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_ResetReconcilerConfig_Call) RunAndReturn(run func(context.Context, string) error) *MockQuerier_ResetReconcilerConfig_Call {
	_c.Call.Return(run)
	return _c
}

// ResourceUtilizationForApp provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) ResourceUtilizationForApp(ctx context.Context, arg ResourceUtilizationForAppParams) ([]*ResourceUtilizationMetric, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ResourceUtilizationForApp")
	}

	var r0 []*ResourceUtilizationMetric
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ResourceUtilizationForAppParams) ([]*ResourceUtilizationMetric, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ResourceUtilizationForAppParams) []*ResourceUtilizationMetric); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ResourceUtilizationMetric)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ResourceUtilizationForAppParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ResourceUtilizationForApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResourceUtilizationForApp'
type MockQuerier_ResourceUtilizationForApp_Call struct {
	*mock.Call
}

// ResourceUtilizationForApp is a helper method to define mock.On call
//   - ctx context.Context
//   - arg ResourceUtilizationForAppParams
func (_e *MockQuerier_Expecter) ResourceUtilizationForApp(ctx interface{}, arg interface{}) *MockQuerier_ResourceUtilizationForApp_Call {
	return &MockQuerier_ResourceUtilizationForApp_Call{Call: _e.mock.On("ResourceUtilizationForApp", ctx, arg)}
}

func (_c *MockQuerier_ResourceUtilizationForApp_Call) Run(run func(ctx context.Context, arg ResourceUtilizationForAppParams)) *MockQuerier_ResourceUtilizationForApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ResourceUtilizationForAppParams))
	})
	return _c
}

func (_c *MockQuerier_ResourceUtilizationForApp_Call) Return(_a0 []*ResourceUtilizationMetric, _a1 error) *MockQuerier_ResourceUtilizationForApp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ResourceUtilizationForApp_Call) RunAndReturn(run func(context.Context, ResourceUtilizationForAppParams) ([]*ResourceUtilizationMetric, error)) *MockQuerier_ResourceUtilizationForApp_Call {
	_c.Call.Return(run)
	return _c
}

// ResourceUtilizationForTeam provides a mock function with given fields: ctx, environment, teamSlug, resourceType, start, end
func (_m *MockQuerier) ResourceUtilizationForTeam(ctx context.Context, environment string, teamSlug slug.Slug, resourceType ResourceType, start pgtype.Timestamptz, end pgtype.Timestamptz) ([]*ResourceUtilizationForTeamRow, error) {
	ret := _m.Called(ctx, environment, teamSlug, resourceType, start, end)

	if len(ret) == 0 {
		panic("no return value specified for ResourceUtilizationForTeam")
	}

	var r0 []*ResourceUtilizationForTeamRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, slug.Slug, ResourceType, pgtype.Timestamptz, pgtype.Timestamptz) ([]*ResourceUtilizationForTeamRow, error)); ok {
		return rf(ctx, environment, teamSlug, resourceType, start, end)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, slug.Slug, ResourceType, pgtype.Timestamptz, pgtype.Timestamptz) []*ResourceUtilizationForTeamRow); ok {
		r0 = rf(ctx, environment, teamSlug, resourceType, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ResourceUtilizationForTeamRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, slug.Slug, ResourceType, pgtype.Timestamptz, pgtype.Timestamptz) error); ok {
		r1 = rf(ctx, environment, teamSlug, resourceType, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ResourceUtilizationForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResourceUtilizationForTeam'
type MockQuerier_ResourceUtilizationForTeam_Call struct {
	*mock.Call
}

// ResourceUtilizationForTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - environment string
//   - teamSlug slug.Slug
//   - resourceType ResourceType
//   - start pgtype.Timestamptz
//   - end pgtype.Timestamptz
func (_e *MockQuerier_Expecter) ResourceUtilizationForTeam(ctx interface{}, environment interface{}, teamSlug interface{}, resourceType interface{}, start interface{}, end interface{}) *MockQuerier_ResourceUtilizationForTeam_Call {
	return &MockQuerier_ResourceUtilizationForTeam_Call{Call: _e.mock.On("ResourceUtilizationForTeam", ctx, environment, teamSlug, resourceType, start, end)}
}

func (_c *MockQuerier_ResourceUtilizationForTeam_Call) Run(run func(ctx context.Context, environment string, teamSlug slug.Slug, resourceType ResourceType, start pgtype.Timestamptz, end pgtype.Timestamptz)) *MockQuerier_ResourceUtilizationForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(slug.Slug), args[3].(ResourceType), args[4].(pgtype.Timestamptz), args[5].(pgtype.Timestamptz))
	})
	return _c
}

func (_c *MockQuerier_ResourceUtilizationForTeam_Call) Return(_a0 []*ResourceUtilizationForTeamRow, _a1 error) *MockQuerier_ResourceUtilizationForTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ResourceUtilizationForTeam_Call) RunAndReturn(run func(context.Context, string, slug.Slug, ResourceType, pgtype.Timestamptz, pgtype.Timestamptz) ([]*ResourceUtilizationForTeamRow, error)) *MockQuerier_ResourceUtilizationForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// ResourceUtilizationOverageForTeam provides a mock function with given fields: ctx, teamSlug, timestamp, resourceType
func (_m *MockQuerier) ResourceUtilizationOverageForTeam(ctx context.Context, teamSlug slug.Slug, timestamp pgtype.Timestamptz, resourceType ResourceType) ([]*ResourceUtilizationOverageForTeamRow, error) {
	ret := _m.Called(ctx, teamSlug, timestamp, resourceType)

	if len(ret) == 0 {
		panic("no return value specified for ResourceUtilizationOverageForTeam")
	}

	var r0 []*ResourceUtilizationOverageForTeamRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, pgtype.Timestamptz, ResourceType) ([]*ResourceUtilizationOverageForTeamRow, error)); ok {
		return rf(ctx, teamSlug, timestamp, resourceType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, pgtype.Timestamptz, ResourceType) []*ResourceUtilizationOverageForTeamRow); ok {
		r0 = rf(ctx, teamSlug, timestamp, resourceType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ResourceUtilizationOverageForTeamRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug, pgtype.Timestamptz, ResourceType) error); ok {
		r1 = rf(ctx, teamSlug, timestamp, resourceType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ResourceUtilizationOverageForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResourceUtilizationOverageForTeam'
type MockQuerier_ResourceUtilizationOverageForTeam_Call struct {
	*mock.Call
}

// ResourceUtilizationOverageForTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
//   - timestamp pgtype.Timestamptz
//   - resourceType ResourceType
func (_e *MockQuerier_Expecter) ResourceUtilizationOverageForTeam(ctx interface{}, teamSlug interface{}, timestamp interface{}, resourceType interface{}) *MockQuerier_ResourceUtilizationOverageForTeam_Call {
	return &MockQuerier_ResourceUtilizationOverageForTeam_Call{Call: _e.mock.On("ResourceUtilizationOverageForTeam", ctx, teamSlug, timestamp, resourceType)}
}

func (_c *MockQuerier_ResourceUtilizationOverageForTeam_Call) Run(run func(ctx context.Context, teamSlug slug.Slug, timestamp pgtype.Timestamptz, resourceType ResourceType)) *MockQuerier_ResourceUtilizationOverageForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug), args[2].(pgtype.Timestamptz), args[3].(ResourceType))
	})
	return _c
}

func (_c *MockQuerier_ResourceUtilizationOverageForTeam_Call) Return(_a0 []*ResourceUtilizationOverageForTeamRow, _a1 error) *MockQuerier_ResourceUtilizationOverageForTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ResourceUtilizationOverageForTeam_Call) RunAndReturn(run func(context.Context, slug.Slug, pgtype.Timestamptz, ResourceType) ([]*ResourceUtilizationOverageForTeamRow, error)) *MockQuerier_ResourceUtilizationOverageForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// ResourceUtilizationRangeForApp provides a mock function with given fields: ctx, environment, teamSlug, app
func (_m *MockQuerier) ResourceUtilizationRangeForApp(ctx context.Context, environment string, teamSlug slug.Slug, app string) (*ResourceUtilizationRangeForAppRow, error) {
	ret := _m.Called(ctx, environment, teamSlug, app)

	if len(ret) == 0 {
		panic("no return value specified for ResourceUtilizationRangeForApp")
	}

	var r0 *ResourceUtilizationRangeForAppRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, slug.Slug, string) (*ResourceUtilizationRangeForAppRow, error)); ok {
		return rf(ctx, environment, teamSlug, app)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, slug.Slug, string) *ResourceUtilizationRangeForAppRow); ok {
		r0 = rf(ctx, environment, teamSlug, app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ResourceUtilizationRangeForAppRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, slug.Slug, string) error); ok {
		r1 = rf(ctx, environment, teamSlug, app)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ResourceUtilizationRangeForApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResourceUtilizationRangeForApp'
type MockQuerier_ResourceUtilizationRangeForApp_Call struct {
	*mock.Call
}

// ResourceUtilizationRangeForApp is a helper method to define mock.On call
//   - ctx context.Context
//   - environment string
//   - teamSlug slug.Slug
//   - app string
func (_e *MockQuerier_Expecter) ResourceUtilizationRangeForApp(ctx interface{}, environment interface{}, teamSlug interface{}, app interface{}) *MockQuerier_ResourceUtilizationRangeForApp_Call {
	return &MockQuerier_ResourceUtilizationRangeForApp_Call{Call: _e.mock.On("ResourceUtilizationRangeForApp", ctx, environment, teamSlug, app)}
}

func (_c *MockQuerier_ResourceUtilizationRangeForApp_Call) Run(run func(ctx context.Context, environment string, teamSlug slug.Slug, app string)) *MockQuerier_ResourceUtilizationRangeForApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(slug.Slug), args[3].(string))
	})
	return _c
}

func (_c *MockQuerier_ResourceUtilizationRangeForApp_Call) Return(_a0 *ResourceUtilizationRangeForAppRow, _a1 error) *MockQuerier_ResourceUtilizationRangeForApp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ResourceUtilizationRangeForApp_Call) RunAndReturn(run func(context.Context, string, slug.Slug, string) (*ResourceUtilizationRangeForAppRow, error)) *MockQuerier_ResourceUtilizationRangeForApp_Call {
	_c.Call.Return(run)
	return _c
}

// ResourceUtilizationRangeForTeam provides a mock function with given fields: ctx, teamSlug
func (_m *MockQuerier) ResourceUtilizationRangeForTeam(ctx context.Context, teamSlug slug.Slug) (*ResourceUtilizationRangeForTeamRow, error) {
	ret := _m.Called(ctx, teamSlug)

	if len(ret) == 0 {
		panic("no return value specified for ResourceUtilizationRangeForTeam")
	}

	var r0 *ResourceUtilizationRangeForTeamRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) (*ResourceUtilizationRangeForTeamRow, error)); ok {
		return rf(ctx, teamSlug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) *ResourceUtilizationRangeForTeamRow); ok {
		r0 = rf(ctx, teamSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ResourceUtilizationRangeForTeamRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug) error); ok {
		r1 = rf(ctx, teamSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_ResourceUtilizationRangeForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResourceUtilizationRangeForTeam'
type MockQuerier_ResourceUtilizationRangeForTeam_Call struct {
	*mock.Call
}

// ResourceUtilizationRangeForTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
func (_e *MockQuerier_Expecter) ResourceUtilizationRangeForTeam(ctx interface{}, teamSlug interface{}) *MockQuerier_ResourceUtilizationRangeForTeam_Call {
	return &MockQuerier_ResourceUtilizationRangeForTeam_Call{Call: _e.mock.On("ResourceUtilizationRangeForTeam", ctx, teamSlug)}
}

func (_c *MockQuerier_ResourceUtilizationRangeForTeam_Call) Run(run func(ctx context.Context, teamSlug slug.Slug)) *MockQuerier_ResourceUtilizationRangeForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug))
	})
	return _c
}

func (_c *MockQuerier_ResourceUtilizationRangeForTeam_Call) Return(_a0 *ResourceUtilizationRangeForTeamRow, _a1 error) *MockQuerier_ResourceUtilizationRangeForTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_ResourceUtilizationRangeForTeam_Call) RunAndReturn(run func(context.Context, slug.Slug) (*ResourceUtilizationRangeForTeamRow, error)) *MockQuerier_ResourceUtilizationRangeForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// ResourceUtilizationUpsert provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) ResourceUtilizationUpsert(ctx context.Context, arg []ResourceUtilizationUpsertParams) *ResourceUtilizationUpsertBatchResults {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ResourceUtilizationUpsert")
	}

	var r0 *ResourceUtilizationUpsertBatchResults
	if rf, ok := ret.Get(0).(func(context.Context, []ResourceUtilizationUpsertParams) *ResourceUtilizationUpsertBatchResults); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ResourceUtilizationUpsertBatchResults)
		}
	}

	return r0
}

// MockQuerier_ResourceUtilizationUpsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResourceUtilizationUpsert'
type MockQuerier_ResourceUtilizationUpsert_Call struct {
	*mock.Call
}

// ResourceUtilizationUpsert is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []ResourceUtilizationUpsertParams
func (_e *MockQuerier_Expecter) ResourceUtilizationUpsert(ctx interface{}, arg interface{}) *MockQuerier_ResourceUtilizationUpsert_Call {
	return &MockQuerier_ResourceUtilizationUpsert_Call{Call: _e.mock.On("ResourceUtilizationUpsert", ctx, arg)}
}

func (_c *MockQuerier_ResourceUtilizationUpsert_Call) Run(run func(ctx context.Context, arg []ResourceUtilizationUpsertParams)) *MockQuerier_ResourceUtilizationUpsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]ResourceUtilizationUpsertParams))
	})
	return _c
}

func (_c *MockQuerier_ResourceUtilizationUpsert_Call) Return(_a0 *ResourceUtilizationUpsertBatchResults) *MockQuerier_ResourceUtilizationUpsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_ResourceUtilizationUpsert_Call) RunAndReturn(run func(context.Context, []ResourceUtilizationUpsertParams) *ResourceUtilizationUpsertBatchResults) *MockQuerier_ResourceUtilizationUpsert_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeGlobalUserRole provides a mock function with given fields: ctx, userID, roleName
func (_m *MockQuerier) RevokeGlobalUserRole(ctx context.Context, userID uuid.UUID, roleName RoleName) error {
	ret := _m.Called(ctx, userID, roleName)

	if len(ret) == 0 {
		panic("no return value specified for RevokeGlobalUserRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, RoleName) error); ok {
		r0 = rf(ctx, userID, roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_RevokeGlobalUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeGlobalUserRole'
type MockQuerier_RevokeGlobalUserRole_Call struct {
	*mock.Call
}

// RevokeGlobalUserRole is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - roleName RoleName
func (_e *MockQuerier_Expecter) RevokeGlobalUserRole(ctx interface{}, userID interface{}, roleName interface{}) *MockQuerier_RevokeGlobalUserRole_Call {
	return &MockQuerier_RevokeGlobalUserRole_Call{Call: _e.mock.On("RevokeGlobalUserRole", ctx, userID, roleName)}
}

func (_c *MockQuerier_RevokeGlobalUserRole_Call) Run(run func(ctx context.Context, userID uuid.UUID, roleName RoleName)) *MockQuerier_RevokeGlobalUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(RoleName))
	})
	return _c
}

func (_c *MockQuerier_RevokeGlobalUserRole_Call) Return(_a0 error) *MockQuerier_RevokeGlobalUserRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_RevokeGlobalUserRole_Call) RunAndReturn(run func(context.Context, uuid.UUID, RoleName) error) *MockQuerier_RevokeGlobalUserRole_Call {
	_c.Call.Return(run)
	return _c
}

// SearchTeams provides a mock function with given fields: ctx, slugMatch, limit
func (_m *MockQuerier) SearchTeams(ctx context.Context, slugMatch string, limit int32) ([]*Team, error) {
	ret := _m.Called(ctx, slugMatch, limit)

	if len(ret) == 0 {
		panic("no return value specified for SearchTeams")
	}

	var r0 []*Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int32) ([]*Team, error)); ok {
		return rf(ctx, slugMatch, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int32) []*Team); ok {
		r0 = rf(ctx, slugMatch, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int32) error); ok {
		r1 = rf(ctx, slugMatch, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_SearchTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchTeams'
type MockQuerier_SearchTeams_Call struct {
	*mock.Call
}

// SearchTeams is a helper method to define mock.On call
//   - ctx context.Context
//   - slugMatch string
//   - limit int32
func (_e *MockQuerier_Expecter) SearchTeams(ctx interface{}, slugMatch interface{}, limit interface{}) *MockQuerier_SearchTeams_Call {
	return &MockQuerier_SearchTeams_Call{Call: _e.mock.On("SearchTeams", ctx, slugMatch, limit)}
}

func (_c *MockQuerier_SearchTeams_Call) Run(run func(ctx context.Context, slugMatch string, limit int32)) *MockQuerier_SearchTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int32))
	})
	return _c
}

func (_c *MockQuerier_SearchTeams_Call) Return(_a0 []*Team, _a1 error) *MockQuerier_SearchTeams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_SearchTeams_Call) RunAndReturn(run func(context.Context, string, int32) ([]*Team, error)) *MockQuerier_SearchTeams_Call {
	_c.Call.Return(run)
	return _c
}

// SetLastSuccessfulSyncForTeam provides a mock function with given fields: ctx, argSlug
func (_m *MockQuerier) SetLastSuccessfulSyncForTeam(ctx context.Context, argSlug slug.Slug) error {
	ret := _m.Called(ctx, argSlug)

	if len(ret) == 0 {
		panic("no return value specified for SetLastSuccessfulSyncForTeam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) error); ok {
		r0 = rf(ctx, argSlug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_SetLastSuccessfulSyncForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLastSuccessfulSyncForTeam'
type MockQuerier_SetLastSuccessfulSyncForTeam_Call struct {
	*mock.Call
}

// SetLastSuccessfulSyncForTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - argSlug slug.Slug
func (_e *MockQuerier_Expecter) SetLastSuccessfulSyncForTeam(ctx interface{}, argSlug interface{}) *MockQuerier_SetLastSuccessfulSyncForTeam_Call {
	return &MockQuerier_SetLastSuccessfulSyncForTeam_Call{Call: _e.mock.On("SetLastSuccessfulSyncForTeam", ctx, argSlug)}
}

func (_c *MockQuerier_SetLastSuccessfulSyncForTeam_Call) Run(run func(ctx context.Context, argSlug slug.Slug)) *MockQuerier_SetLastSuccessfulSyncForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug))
	})
	return _c
}

func (_c *MockQuerier_SetLastSuccessfulSyncForTeam_Call) Return(_a0 error) *MockQuerier_SetLastSuccessfulSyncForTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_SetLastSuccessfulSyncForTeam_Call) RunAndReturn(run func(context.Context, slug.Slug) error) *MockQuerier_SetLastSuccessfulSyncForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// SetReconcilerErrorForTeam provides a mock function with given fields: ctx, correlationID, teamSlug, reconciler, errorMessage
func (_m *MockQuerier) SetReconcilerErrorForTeam(ctx context.Context, correlationID uuid.UUID, teamSlug slug.Slug, reconciler string, errorMessage string) error {
	ret := _m.Called(ctx, correlationID, teamSlug, reconciler, errorMessage)

	if len(ret) == 0 {
		panic("no return value specified for SetReconcilerErrorForTeam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, slug.Slug, string, string) error); ok {
		r0 = rf(ctx, correlationID, teamSlug, reconciler, errorMessage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_SetReconcilerErrorForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetReconcilerErrorForTeam'
type MockQuerier_SetReconcilerErrorForTeam_Call struct {
	*mock.Call
}

// SetReconcilerErrorForTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - correlationID uuid.UUID
//   - teamSlug slug.Slug
//   - reconciler string
//   - errorMessage string
func (_e *MockQuerier_Expecter) SetReconcilerErrorForTeam(ctx interface{}, correlationID interface{}, teamSlug interface{}, reconciler interface{}, errorMessage interface{}) *MockQuerier_SetReconcilerErrorForTeam_Call {
	return &MockQuerier_SetReconcilerErrorForTeam_Call{Call: _e.mock.On("SetReconcilerErrorForTeam", ctx, correlationID, teamSlug, reconciler, errorMessage)}
}

func (_c *MockQuerier_SetReconcilerErrorForTeam_Call) Run(run func(ctx context.Context, correlationID uuid.UUID, teamSlug slug.Slug, reconciler string, errorMessage string)) *MockQuerier_SetReconcilerErrorForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(slug.Slug), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockQuerier_SetReconcilerErrorForTeam_Call) Return(_a0 error) *MockQuerier_SetReconcilerErrorForTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_SetReconcilerErrorForTeam_Call) RunAndReturn(run func(context.Context, uuid.UUID, slug.Slug, string, string) error) *MockQuerier_SetReconcilerErrorForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// SetSessionExpires provides a mock function with given fields: ctx, expires, iD
func (_m *MockQuerier) SetSessionExpires(ctx context.Context, expires pgtype.Timestamptz, iD uuid.UUID) (*Session, error) {
	ret := _m.Called(ctx, expires, iD)

	if len(ret) == 0 {
		panic("no return value specified for SetSessionExpires")
	}

	var r0 *Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Timestamptz, uuid.UUID) (*Session, error)); ok {
		return rf(ctx, expires, iD)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Timestamptz, uuid.UUID) *Session); ok {
		r0 = rf(ctx, expires, iD)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgtype.Timestamptz, uuid.UUID) error); ok {
		r1 = rf(ctx, expires, iD)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_SetSessionExpires_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSessionExpires'
type MockQuerier_SetSessionExpires_Call struct {
	*mock.Call
}

// SetSessionExpires is a helper method to define mock.On call
//   - ctx context.Context
//   - expires pgtype.Timestamptz
//   - iD uuid.UUID
func (_e *MockQuerier_Expecter) SetSessionExpires(ctx interface{}, expires interface{}, iD interface{}) *MockQuerier_SetSessionExpires_Call {
	return &MockQuerier_SetSessionExpires_Call{Call: _e.mock.On("SetSessionExpires", ctx, expires, iD)}
}

func (_c *MockQuerier_SetSessionExpires_Call) Run(run func(ctx context.Context, expires pgtype.Timestamptz, iD uuid.UUID)) *MockQuerier_SetSessionExpires_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgtype.Timestamptz), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockQuerier_SetSessionExpires_Call) Return(_a0 *Session, _a1 error) *MockQuerier_SetSessionExpires_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_SetSessionExpires_Call) RunAndReturn(run func(context.Context, pgtype.Timestamptz, uuid.UUID) (*Session, error)) *MockQuerier_SetSessionExpires_Call {
	_c.Call.Return(run)
	return _c
}

// SetSlackAlertsChannel provides a mock function with given fields: ctx, teamSlug, environment, channelName
func (_m *MockQuerier) SetSlackAlertsChannel(ctx context.Context, teamSlug slug.Slug, environment string, channelName string) error {
	ret := _m.Called(ctx, teamSlug, environment, channelName)

	if len(ret) == 0 {
		panic("no return value specified for SetSlackAlertsChannel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, string, string) error); ok {
		r0 = rf(ctx, teamSlug, environment, channelName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_SetSlackAlertsChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSlackAlertsChannel'
type MockQuerier_SetSlackAlertsChannel_Call struct {
	*mock.Call
}

// SetSlackAlertsChannel is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
//   - environment string
//   - channelName string
func (_e *MockQuerier_Expecter) SetSlackAlertsChannel(ctx interface{}, teamSlug interface{}, environment interface{}, channelName interface{}) *MockQuerier_SetSlackAlertsChannel_Call {
	return &MockQuerier_SetSlackAlertsChannel_Call{Call: _e.mock.On("SetSlackAlertsChannel", ctx, teamSlug, environment, channelName)}
}

func (_c *MockQuerier_SetSlackAlertsChannel_Call) Run(run func(ctx context.Context, teamSlug slug.Slug, environment string, channelName string)) *MockQuerier_SetSlackAlertsChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockQuerier_SetSlackAlertsChannel_Call) Return(_a0 error) *MockQuerier_SetSlackAlertsChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_SetSlackAlertsChannel_Call) RunAndReturn(run func(context.Context, slug.Slug, string, string) error) *MockQuerier_SetSlackAlertsChannel_Call {
	_c.Call.Return(run)
	return _c
}

// SpecificResourceUtilizationForApp provides a mock function with given fields: ctx, environment, teamSlug, app, resourceType, timestamp
func (_m *MockQuerier) SpecificResourceUtilizationForApp(ctx context.Context, environment string, teamSlug slug.Slug, app string, resourceType ResourceType, timestamp pgtype.Timestamptz) (*SpecificResourceUtilizationForAppRow, error) {
	ret := _m.Called(ctx, environment, teamSlug, app, resourceType, timestamp)

	if len(ret) == 0 {
		panic("no return value specified for SpecificResourceUtilizationForApp")
	}

	var r0 *SpecificResourceUtilizationForAppRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, slug.Slug, string, ResourceType, pgtype.Timestamptz) (*SpecificResourceUtilizationForAppRow, error)); ok {
		return rf(ctx, environment, teamSlug, app, resourceType, timestamp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, slug.Slug, string, ResourceType, pgtype.Timestamptz) *SpecificResourceUtilizationForAppRow); ok {
		r0 = rf(ctx, environment, teamSlug, app, resourceType, timestamp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SpecificResourceUtilizationForAppRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, slug.Slug, string, ResourceType, pgtype.Timestamptz) error); ok {
		r1 = rf(ctx, environment, teamSlug, app, resourceType, timestamp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_SpecificResourceUtilizationForApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SpecificResourceUtilizationForApp'
type MockQuerier_SpecificResourceUtilizationForApp_Call struct {
	*mock.Call
}

// SpecificResourceUtilizationForApp is a helper method to define mock.On call
//   - ctx context.Context
//   - environment string
//   - teamSlug slug.Slug
//   - app string
//   - resourceType ResourceType
//   - timestamp pgtype.Timestamptz
func (_e *MockQuerier_Expecter) SpecificResourceUtilizationForApp(ctx interface{}, environment interface{}, teamSlug interface{}, app interface{}, resourceType interface{}, timestamp interface{}) *MockQuerier_SpecificResourceUtilizationForApp_Call {
	return &MockQuerier_SpecificResourceUtilizationForApp_Call{Call: _e.mock.On("SpecificResourceUtilizationForApp", ctx, environment, teamSlug, app, resourceType, timestamp)}
}

func (_c *MockQuerier_SpecificResourceUtilizationForApp_Call) Run(run func(ctx context.Context, environment string, teamSlug slug.Slug, app string, resourceType ResourceType, timestamp pgtype.Timestamptz)) *MockQuerier_SpecificResourceUtilizationForApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(slug.Slug), args[3].(string), args[4].(ResourceType), args[5].(pgtype.Timestamptz))
	})
	return _c
}

func (_c *MockQuerier_SpecificResourceUtilizationForApp_Call) Return(_a0 *SpecificResourceUtilizationForAppRow, _a1 error) *MockQuerier_SpecificResourceUtilizationForApp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_SpecificResourceUtilizationForApp_Call) RunAndReturn(run func(context.Context, string, slug.Slug, string, ResourceType, pgtype.Timestamptz) (*SpecificResourceUtilizationForAppRow, error)) *MockQuerier_SpecificResourceUtilizationForApp_Call {
	_c.Call.Return(run)
	return _c
}

// SpecificResourceUtilizationForTeam provides a mock function with given fields: ctx, teamSlug, resourceType, timestamp
func (_m *MockQuerier) SpecificResourceUtilizationForTeam(ctx context.Context, teamSlug slug.Slug, resourceType ResourceType, timestamp pgtype.Timestamptz) (*SpecificResourceUtilizationForTeamRow, error) {
	ret := _m.Called(ctx, teamSlug, resourceType, timestamp)

	if len(ret) == 0 {
		panic("no return value specified for SpecificResourceUtilizationForTeam")
	}

	var r0 *SpecificResourceUtilizationForTeamRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, ResourceType, pgtype.Timestamptz) (*SpecificResourceUtilizationForTeamRow, error)); ok {
		return rf(ctx, teamSlug, resourceType, timestamp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, ResourceType, pgtype.Timestamptz) *SpecificResourceUtilizationForTeamRow); ok {
		r0 = rf(ctx, teamSlug, resourceType, timestamp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SpecificResourceUtilizationForTeamRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug, ResourceType, pgtype.Timestamptz) error); ok {
		r1 = rf(ctx, teamSlug, resourceType, timestamp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_SpecificResourceUtilizationForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SpecificResourceUtilizationForTeam'
type MockQuerier_SpecificResourceUtilizationForTeam_Call struct {
	*mock.Call
}

// SpecificResourceUtilizationForTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
//   - resourceType ResourceType
//   - timestamp pgtype.Timestamptz
func (_e *MockQuerier_Expecter) SpecificResourceUtilizationForTeam(ctx interface{}, teamSlug interface{}, resourceType interface{}, timestamp interface{}) *MockQuerier_SpecificResourceUtilizationForTeam_Call {
	return &MockQuerier_SpecificResourceUtilizationForTeam_Call{Call: _e.mock.On("SpecificResourceUtilizationForTeam", ctx, teamSlug, resourceType, timestamp)}
}

func (_c *MockQuerier_SpecificResourceUtilizationForTeam_Call) Run(run func(ctx context.Context, teamSlug slug.Slug, resourceType ResourceType, timestamp pgtype.Timestamptz)) *MockQuerier_SpecificResourceUtilizationForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug), args[2].(ResourceType), args[3].(pgtype.Timestamptz))
	})
	return _c
}

func (_c *MockQuerier_SpecificResourceUtilizationForTeam_Call) Return(_a0 *SpecificResourceUtilizationForTeamRow, _a1 error) *MockQuerier_SpecificResourceUtilizationForTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_SpecificResourceUtilizationForTeam_Call) RunAndReturn(run func(context.Context, slug.Slug, ResourceType, pgtype.Timestamptz) (*SpecificResourceUtilizationForTeamRow, error)) *MockQuerier_SpecificResourceUtilizationForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// TeamExists provides a mock function with given fields: ctx, argSlug
func (_m *MockQuerier) TeamExists(ctx context.Context, argSlug slug.Slug) (bool, error) {
	ret := _m.Called(ctx, argSlug)

	if len(ret) == 0 {
		panic("no return value specified for TeamExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) (bool, error)); ok {
		return rf(ctx, argSlug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) bool); ok {
		r0 = rf(ctx, argSlug)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug) error); ok {
		r1 = rf(ctx, argSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_TeamExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TeamExists'
type MockQuerier_TeamExists_Call struct {
	*mock.Call
}

// TeamExists is a helper method to define mock.On call
//   - ctx context.Context
//   - argSlug slug.Slug
func (_e *MockQuerier_Expecter) TeamExists(ctx interface{}, argSlug interface{}) *MockQuerier_TeamExists_Call {
	return &MockQuerier_TeamExists_Call{Call: _e.mock.On("TeamExists", ctx, argSlug)}
}

func (_c *MockQuerier_TeamExists_Call) Run(run func(ctx context.Context, argSlug slug.Slug)) *MockQuerier_TeamExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug))
	})
	return _c
}

func (_c *MockQuerier_TeamExists_Call) Return(_a0 bool, _a1 error) *MockQuerier_TeamExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_TeamExists_Call) RunAndReturn(run func(context.Context, slug.Slug) (bool, error)) *MockQuerier_TeamExists_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTeam provides a mock function with given fields: ctx, purpose, slackChannel, _a3
func (_m *MockQuerier) UpdateTeam(ctx context.Context, purpose *string, slackChannel *string, _a3 slug.Slug) (*Team, error) {
	ret := _m.Called(ctx, purpose, slackChannel, _a3)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTeam")
	}

	var r0 *Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *string, *string, slug.Slug) (*Team, error)); ok {
		return rf(ctx, purpose, slackChannel, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string, *string, slug.Slug) *Team); ok {
		r0 = rf(ctx, purpose, slackChannel, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string, *string, slug.Slug) error); ok {
		r1 = rf(ctx, purpose, slackChannel, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_UpdateTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTeam'
type MockQuerier_UpdateTeam_Call struct {
	*mock.Call
}

// UpdateTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - purpose *string
//   - slackChannel *string
//   - _a3 slug.Slug
func (_e *MockQuerier_Expecter) UpdateTeam(ctx interface{}, purpose interface{}, slackChannel interface{}, _a3 interface{}) *MockQuerier_UpdateTeam_Call {
	return &MockQuerier_UpdateTeam_Call{Call: _e.mock.On("UpdateTeam", ctx, purpose, slackChannel, _a3)}
}

func (_c *MockQuerier_UpdateTeam_Call) Run(run func(ctx context.Context, purpose *string, slackChannel *string, _a3 slug.Slug)) *MockQuerier_UpdateTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*string), args[2].(*string), args[3].(slug.Slug))
	})
	return _c
}

func (_c *MockQuerier_UpdateTeam_Call) Return(_a0 *Team, _a1 error) *MockQuerier_UpdateTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_UpdateTeam_Call) RunAndReturn(run func(context.Context, *string, *string, slug.Slug) (*Team, error)) *MockQuerier_UpdateTeam_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, name, externalID, iD, email
func (_m *MockQuerier) UpdateUser(ctx context.Context, name string, externalID string, iD uuid.UUID, email string) (*User, error) {
	ret := _m.Called(ctx, name, externalID, iD, email)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, uuid.UUID, string) (*User, error)); ok {
		return rf(ctx, name, externalID, iD, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, uuid.UUID, string) *User); ok {
		r0 = rf(ctx, name, externalID, iD, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, uuid.UUID, string) error); ok {
		r1 = rf(ctx, name, externalID, iD, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockQuerier_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - externalID string
//   - iD uuid.UUID
//   - email string
func (_e *MockQuerier_Expecter) UpdateUser(ctx interface{}, name interface{}, externalID interface{}, iD interface{}, email interface{}) *MockQuerier_UpdateUser_Call {
	return &MockQuerier_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, name, externalID, iD, email)}
}

func (_c *MockQuerier_UpdateUser_Call) Run(run func(ctx context.Context, name string, externalID string, iD uuid.UUID, email string)) *MockQuerier_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(uuid.UUID), args[4].(string))
	})
	return _c
}

func (_c *MockQuerier_UpdateUser_Call) Return(_a0 *User, _a1 error) *MockQuerier_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_UpdateUser_Call) RunAndReturn(run func(context.Context, string, string, uuid.UUID, string) (*User, error)) *MockQuerier_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertReconciler provides a mock function with given fields: ctx, name, displayName, description, memberAware
func (_m *MockQuerier) UpsertReconciler(ctx context.Context, name string, displayName string, description string, memberAware bool) (*Reconciler, error) {
	ret := _m.Called(ctx, name, displayName, description, memberAware)

	if len(ret) == 0 {
		panic("no return value specified for UpsertReconciler")
	}

	var r0 *Reconciler
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, bool) (*Reconciler, error)); ok {
		return rf(ctx, name, displayName, description, memberAware)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, bool) *Reconciler); ok {
		r0 = rf(ctx, name, displayName, description, memberAware)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Reconciler)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, bool) error); ok {
		r1 = rf(ctx, name, displayName, description, memberAware)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_UpsertReconciler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertReconciler'
type MockQuerier_UpsertReconciler_Call struct {
	*mock.Call
}

// UpsertReconciler is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - displayName string
//   - description string
//   - memberAware bool
func (_e *MockQuerier_Expecter) UpsertReconciler(ctx interface{}, name interface{}, displayName interface{}, description interface{}, memberAware interface{}) *MockQuerier_UpsertReconciler_Call {
	return &MockQuerier_UpsertReconciler_Call{Call: _e.mock.On("UpsertReconciler", ctx, name, displayName, description, memberAware)}
}

func (_c *MockQuerier_UpsertReconciler_Call) Run(run func(ctx context.Context, name string, displayName string, description string, memberAware bool)) *MockQuerier_UpsertReconciler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(bool))
	})
	return _c
}

func (_c *MockQuerier_UpsertReconciler_Call) Return(_a0 *Reconciler, _a1 error) *MockQuerier_UpsertReconciler_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_UpsertReconciler_Call) RunAndReturn(run func(context.Context, string, string, string, bool) (*Reconciler, error)) *MockQuerier_UpsertReconciler_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertReconcilerConfig provides a mock function with given fields: ctx, reconciler, key, displayName, description, secret
func (_m *MockQuerier) UpsertReconcilerConfig(ctx context.Context, reconciler string, key string, displayName string, description string, secret bool) error {
	ret := _m.Called(ctx, reconciler, key, displayName, description, secret)

	if len(ret) == 0 {
		panic("no return value specified for UpsertReconcilerConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, bool) error); ok {
		r0 = rf(ctx, reconciler, key, displayName, description, secret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_UpsertReconcilerConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertReconcilerConfig'
type MockQuerier_UpsertReconcilerConfig_Call struct {
	*mock.Call
}

// UpsertReconcilerConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - reconciler string
//   - key string
//   - displayName string
//   - description string
//   - secret bool
func (_e *MockQuerier_Expecter) UpsertReconcilerConfig(ctx interface{}, reconciler interface{}, key interface{}, displayName interface{}, description interface{}, secret interface{}) *MockQuerier_UpsertReconcilerConfig_Call {
	return &MockQuerier_UpsertReconcilerConfig_Call{Call: _e.mock.On("UpsertReconcilerConfig", ctx, reconciler, key, displayName, description, secret)}
}

func (_c *MockQuerier_UpsertReconcilerConfig_Call) Run(run func(ctx context.Context, reconciler string, key string, displayName string, description string, secret bool)) *MockQuerier_UpsertReconcilerConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(bool))
	})
	return _c
}

func (_c *MockQuerier_UpsertReconcilerConfig_Call) Return(_a0 error) *MockQuerier_UpsertReconcilerConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_UpsertReconcilerConfig_Call) RunAndReturn(run func(context.Context, string, string, string, string, bool) error) *MockQuerier_UpsertReconcilerConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
