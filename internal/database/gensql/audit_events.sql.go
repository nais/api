// Code generated by sqlc. DO NOT EDIT.
// source: audit_events.sql

package gensql

import (
	"context"

	"github.com/google/uuid"
	"github.com/nais/api/internal/slug"
)

const createAuditEvent = `-- name: CreateAuditEvent :one
INSERT INTO audit_events (actor, action, resource_type, resource_name, team_slug)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type CreateAuditEventParams struct {
	Actor        string
	Action       string
	ResourceType string
	ResourceName string
	Team         *slug.Slug
}

func (q *Queries) CreateAuditEvent(ctx context.Context, arg CreateAuditEventParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createAuditEvent,
		arg.Actor,
		arg.Action,
		arg.ResourceType,
		arg.ResourceName,
		arg.Team,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createAuditEventData = `-- name: CreateAuditEventData :exec
INSERT INTO audit_events_data (event_id, key, value)
VALUES ($1, $2, $3)
`

type CreateAuditEventDataParams struct {
	EventID uuid.UUID
	Key     string
	Value   string
}

func (q *Queries) CreateAuditEventData(ctx context.Context, arg CreateAuditEventDataParams) error {
	_, err := q.db.Exec(ctx, createAuditEventData, arg.EventID, arg.Key, arg.Value)
	return err
}

const getAuditEventsCountForTeam = `-- name: GetAuditEventsCountForTeam :one
SELECT COUNT(*) FROM audit_events
WHERE team_slug = $1
`

func (q *Queries) GetAuditEventsCountForTeam(ctx context.Context, team *slug.Slug) (int64, error) {
	row := q.db.QueryRow(ctx, getAuditEventsCountForTeam, team)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAuditEventsForTeam = `-- name: GetAuditEventsForTeam :many
SELECT id, created_at, actor, action, resource_type, resource_name, team_slug FROM audit_events
WHERE team_slug = $1
ORDER BY created_at DESC
LIMIT $3 OFFSET $2
`

type GetAuditEventsForTeamParams struct {
	Team   *slug.Slug
	Offset int32
	Limit  int32
}

func (q *Queries) GetAuditEventsForTeam(ctx context.Context, arg GetAuditEventsForTeamParams) ([]*AuditEvent, error) {
	rows, err := q.db.Query(ctx, getAuditEventsForTeam, arg.Team, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*AuditEvent{}
	for rows.Next() {
		var i AuditEvent
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Actor,
			&i.Action,
			&i.ResourceType,
			&i.ResourceName,
			&i.TeamSlug,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
