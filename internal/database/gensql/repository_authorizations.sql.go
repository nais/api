// Code generated by sqlc. DO NOT EDIT.
// source: repository_authorizations.sql

package gensql

import (
	"context"

	"github.com/nais/api/internal/slug"
)

const createRepositoryAuthorization = `-- name: CreateRepositoryAuthorization :exec
INSERT INTO repository_authorizations (team_slug, github_repository)
VALUES ($1, $2)
`

type CreateRepositoryAuthorizationParams struct {
	TeamSlug         slug.Slug
	GithubRepository string
}

func (q *Queries) CreateRepositoryAuthorization(ctx context.Context, arg CreateRepositoryAuthorizationParams) error {
	_, err := q.db.Exec(ctx, createRepositoryAuthorization, arg.TeamSlug, arg.GithubRepository)
	return err
}

const getAuthorizedRepositories = `-- name: GetAuthorizedRepositories :many
SELECT
	github_repository
FROM
	repository_authorizations
WHERE
	team_slug = $1
ORDER BY
	github_repository ASC
`

func (q *Queries) GetAuthorizedRepositories(ctx context.Context, teamSlug slug.Slug) ([]string, error) {
	rows, err := q.db.Query(ctx, getAuthorizedRepositories, teamSlug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var github_repository string
		if err := rows.Scan(&github_repository); err != nil {
			return nil, err
		}
		items = append(items, github_repository)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isRepositoryAuthorized = `-- name: IsRepositoryAuthorized :one
SELECT
	COUNT(*) > 0
FROM
	repository_authorizations
WHERE
	team_slug = $1
	AND github_repository = $2
`

type IsRepositoryAuthorizedParams struct {
	TeamSlug         slug.Slug
	GithubRepository string
}

func (q *Queries) IsRepositoryAuthorized(ctx context.Context, arg IsRepositoryAuthorizedParams) (bool, error) {
	row := q.db.QueryRow(ctx, isRepositoryAuthorized, arg.TeamSlug, arg.GithubRepository)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const removeRepositoryAuthorization = `-- name: RemoveRepositoryAuthorization :exec
DELETE FROM repository_authorizations
WHERE
    team_slug = $1
    AND github_repository = $2
`

type RemoveRepositoryAuthorizationParams struct {
	TeamSlug         slug.Slug
	GithubRepository string
}

func (q *Queries) RemoveRepositoryAuthorization(ctx context.Context, arg RemoveRepositoryAuthorizationParams) error {
	_, err := q.db.Exec(ctx, removeRepositoryAuthorization, arg.TeamSlug, arg.GithubRepository)
	return err
}
