// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: reconciler_states.sql

package gensql

import (
	"context"
)

const getReconcilerStateForTeam = `-- name: GetReconcilerStateForTeam :one
SELECT reconciler, state, team_slug FROM reconciler_states
WHERE reconciler = $1 AND team_slug = $2
`

func (q *Queries) GetReconcilerStateForTeam(ctx context.Context, reconcilerName ReconcilerName, teamSlug string) (*ReconcilerState, error) {
	row := q.db.QueryRow(ctx, getReconcilerStateForTeam, reconcilerName, teamSlug)
	var i ReconcilerState
	err := row.Scan(&i.Reconciler, &i.State, &i.TeamSlug)
	return &i, err
}

const getTeamsWithPermissionInGitHubRepo = `-- name: GetTeamsWithPermissionInGitHubRepo :many
SELECT t.slug, t.purpose, t.last_successful_sync, t.slack_channel FROM teams t
JOIN reconciler_states rs ON rs.team_slug = t.slug
WHERE
    rs.reconciler = 'github:team'
    AND rs.state @> $1
ORDER BY t.slug ASC LIMIT $3 OFFSET $2
`

func (q *Queries) GetTeamsWithPermissionInGitHubRepo(ctx context.Context, stateMatcher []byte, offset int32, limit int32) ([]*Team, error) {
	rows, err := q.db.Query(ctx, getTeamsWithPermissionInGitHubRepo, stateMatcher, offset, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Team{}
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.Slug,
			&i.Purpose,
			&i.LastSuccessfulSync,
			&i.SlackChannel,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamsWithPermissionInGitHubRepoCount = `-- name: GetTeamsWithPermissionInGitHubRepoCount :one
SELECT count(1) FROM teams t
JOIN reconciler_states rs ON rs.team_slug = t.slug
WHERE
    rs.reconciler = 'github:team'
    AND rs.state @> $1
`

func (q *Queries) GetTeamsWithPermissionInGitHubRepoCount(ctx context.Context, stateMatcher []byte) (int64, error) {
	row := q.db.QueryRow(ctx, getTeamsWithPermissionInGitHubRepoCount, stateMatcher)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const removeReconcilerStateForTeam = `-- name: RemoveReconcilerStateForTeam :exec
DELETE FROM reconciler_states
WHERE reconciler = $1 AND team_slug = $2
`

func (q *Queries) RemoveReconcilerStateForTeam(ctx context.Context, reconcilerName ReconcilerName, teamSlug string) error {
	_, err := q.db.Exec(ctx, removeReconcilerStateForTeam, reconcilerName, teamSlug)
	return err
}

const setReconcilerStateForTeam = `-- name: SetReconcilerStateForTeam :exec
INSERT INTO reconciler_states (reconciler, team_slug, state)
VALUES($1, $2, $3)
ON CONFLICT (reconciler, team_slug) DO
    UPDATE SET state = $3
`

func (q *Queries) SetReconcilerStateForTeam(ctx context.Context, reconciler ReconcilerName, teamSlug string, state []byte) error {
	_, err := q.db.Exec(ctx, setReconcilerStateForTeam, reconciler, teamSlug, state)
	return err
}
