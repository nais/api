// Code generated by sqlc. DO NOT EDIT.
// source: reconciler_states.sql

package gensql

import (
	"context"

	"github.com/nais/api/internal/slug"
)

const deleteReconcilerStateForTeam = `-- name: DeleteReconcilerStateForTeam :exec
DELETE FROM reconciler_states
WHERE reconciler_name = $1 AND team_slug = $2
`

type DeleteReconcilerStateForTeamParams struct {
	ReconcilerName string
	TeamSlug       slug.Slug
}

func (q *Queries) DeleteReconcilerStateForTeam(ctx context.Context, arg DeleteReconcilerStateForTeamParams) error {
	_, err := q.db.Exec(ctx, deleteReconcilerStateForTeam, arg.ReconcilerName, arg.TeamSlug)
	return err
}

const getReconcilerStateForTeam = `-- name: GetReconcilerStateForTeam :one
SELECT id, reconciler_name, team_slug, value, created_at, updated_at
FROM reconciler_states
WHERE reconciler_name = $1 AND team_slug = $2
`

type GetReconcilerStateForTeamParams struct {
	ReconcilerName string
	TeamSlug       slug.Slug
}

func (q *Queries) GetReconcilerStateForTeam(ctx context.Context, arg GetReconcilerStateForTeamParams) (*ReconcilerState, error) {
	row := q.db.QueryRow(ctx, getReconcilerStateForTeam, arg.ReconcilerName, arg.TeamSlug)
	var i ReconcilerState
	err := row.Scan(
		&i.ID,
		&i.ReconcilerName,
		&i.TeamSlug,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const upsertReconcilerState = `-- name: UpsertReconcilerState :one
INSERT INTO reconciler_states (
    reconciler_name,
    team_slug,
    value
) VALUES (
    $1,
    $2,
    $3
)
ON CONFLICT DO
UPDATE SET value = EXCLUDED.value
RETURNING id, reconciler_name, team_slug, value, created_at, updated_at
`

type UpsertReconcilerStateParams struct {
	ReconcilerName string
	TeamSlug       slug.Slug
	Value          []byte
}

func (q *Queries) UpsertReconcilerState(ctx context.Context, arg UpsertReconcilerStateParams) (*ReconcilerState, error) {
	row := q.db.QueryRow(ctx, upsertReconcilerState, arg.ReconcilerName, arg.TeamSlug, arg.Value)
	var i ReconcilerState
	err := row.Scan(
		&i.ID,
		&i.ReconcilerName,
		&i.TeamSlug,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
