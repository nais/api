// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package gensql

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, external_id)
VALUES ($1, LOWER($2), $3)
RETURNING id, email, name, external_id
`

type CreateUserParams struct {
	Name       string
	Email      string
	ExternalID string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email, arg.ExternalID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.ExternalID,
	)
	return &i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, name, external_id FROM users
WHERE email = LOWER($1)
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.ExternalID,
	)
	return &i, err
}

const getUserByExternalID = `-- name: GetUserByExternalID :one
SELECT id, email, name, external_id FROM users
WHERE external_id = $1
`

func (q *Queries) GetUserByExternalID(ctx context.Context, externalID string) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByExternalID, externalID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.ExternalID,
	)
	return &i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, name, external_id FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.ExternalID,
	)
	return &i, err
}

const getUserTeams = `-- name: GetUserTeams :many
SELECT teams.slug, teams.purpose, teams.last_successful_sync, teams.slack_channel, teams.google_group_email, teams.azure_group_id, teams.github_team_slug, teams.gar_repository, teams.cdn_bucket, teams.deleted_at, user_roles.role_name FROM user_roles
JOIN teams ON teams.slug = user_roles.target_team_slug
WHERE user_roles.user_id = $1
ORDER BY teams.slug ASC
`

type GetUserTeamsRow struct {
	Team     Team
	RoleName RoleName
}

func (q *Queries) GetUserTeams(ctx context.Context, userID uuid.UUID) ([]*GetUserTeamsRow, error) {
	rows, err := q.db.Query(ctx, getUserTeams, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetUserTeamsRow{}
	for rows.Next() {
		var i GetUserTeamsRow
		if err := rows.Scan(
			&i.Team.Slug,
			&i.Team.Purpose,
			&i.Team.LastSuccessfulSync,
			&i.Team.SlackChannel,
			&i.Team.GoogleGroupEmail,
			&i.Team.AzureGroupID,
			&i.Team.GithubTeamSlug,
			&i.Team.GarRepository,
			&i.Team.CdnBucket,
			&i.Team.DeletedAt,
			&i.RoleName,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserTeamsCount = `-- name: GetUserTeamsCount :one
SELECT COUNT(*) FROM user_roles
WHERE user_roles.user_id = $1
AND target_team_slug IS NOT NULL
`

func (q *Queries) GetUserTeamsCount(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getUserTeamsCount, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserTeamsPaginated = `-- name: GetUserTeamsPaginated :many
SELECT teams.slug, teams.purpose, teams.last_successful_sync, teams.slack_channel, teams.google_group_email, teams.azure_group_id, teams.github_team_slug, teams.gar_repository, teams.cdn_bucket, teams.deleted_at, user_roles.role_name FROM user_roles
JOIN teams ON teams.slug = user_roles.target_team_slug
WHERE user_roles.user_id = $1
ORDER BY teams.slug ASC
LIMIT $3 OFFSET $2
`

type GetUserTeamsPaginatedParams struct {
	UserID uuid.UUID
	Offset int32
	Limit  int32
}

type GetUserTeamsPaginatedRow struct {
	Team     Team
	RoleName RoleName
}

func (q *Queries) GetUserTeamsPaginated(ctx context.Context, arg GetUserTeamsPaginatedParams) ([]*GetUserTeamsPaginatedRow, error) {
	rows, err := q.db.Query(ctx, getUserTeamsPaginated, arg.UserID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetUserTeamsPaginatedRow{}
	for rows.Next() {
		var i GetUserTeamsPaginatedRow
		if err := rows.Scan(
			&i.Team.Slug,
			&i.Team.Purpose,
			&i.Team.LastSuccessfulSync,
			&i.Team.SlackChannel,
			&i.Team.GoogleGroupEmail,
			&i.Team.AzureGroupID,
			&i.Team.GithubTeamSlug,
			&i.Team.GarRepository,
			&i.Team.CdnBucket,
			&i.Team.DeletedAt,
			&i.RoleName,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsers = `-- name: GetUsers :many
SELECT id, email, name, external_id FROM users
ORDER BY name, email ASC
LIMIT $2 OFFSET $1
`

type GetUsersParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]*User, error) {
	rows, err := q.db.Query(ctx, getUsers, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.ExternalID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByIDs = `-- name: GetUsersByIDs :many
SELECT id, email, name, external_id FROM users
WHERE id = ANY($1::uuid[])
ORDER BY name, email ASC
`

func (q *Queries) GetUsersByIDs(ctx context.Context, ids []uuid.UUID) ([]*User, error) {
	rows, err := q.db.Query(ctx, getUsersByIDs, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.ExternalID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersCount = `-- name: GetUsersCount :one
SELECT COUNT(*) FROM users
`

func (q *Queries) GetUsersCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getUsersCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET name = $1, email = LOWER($2), external_id = $3
WHERE id = $4
RETURNING id, email, name, external_id
`

type UpdateUserParams struct {
	Name       string
	Email      string
	ExternalID string
	ID         uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Name,
		arg.Email,
		arg.ExternalID,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.ExternalID,
	)
	return &i, err
}
