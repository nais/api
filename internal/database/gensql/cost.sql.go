// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: cost.sql

package gensql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/nais/api/internal/slug"
)

const dailyCostForApp = `-- name: DailyCostForApp :many
SELECT
    id, environment, team_slug, app, cost_type, date, daily_cost
FROM
    cost
WHERE
    date >= $1::date
    AND date <= $2::date
    AND environment = $3::text
    AND team_slug = $4::slug
    AND app = $5
ORDER BY
    date, cost_type ASC
`

// DailyCostForApp will fetch the daily cost for a specific team app in a specific environment, across all cost types
// in a date range.
func (q *Queries) DailyCostForApp(ctx context.Context, fromDate pgtype.Date, toDate pgtype.Date, environment string, teamSlug slug.Slug, app string) ([]*Cost, error) {
	rows, err := q.db.Query(ctx, dailyCostForApp,
		fromDate,
		toDate,
		environment,
		teamSlug,
		app,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Cost{}
	for rows.Next() {
		var i Cost
		if err := rows.Scan(
			&i.ID,
			&i.Environment,
			&i.TeamSlug,
			&i.App,
			&i.CostType,
			&i.Date,
			&i.DailyCost,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const dailyCostForTeam = `-- name: DailyCostForTeam :many
SELECT
    id, environment, team_slug, app, cost_type, date, daily_cost
FROM
    cost
WHERE
    date >= $1::date
    AND date <= $2::date
    AND team_slug = $3::slug
ORDER BY
    date, environment, app, cost_type ASC
`

// DailyCostForTeam will fetch the daily cost for a specific team across all apps and envs in a date range.
func (q *Queries) DailyCostForTeam(ctx context.Context, fromDate pgtype.Date, toDate pgtype.Date, teamSlug slug.Slug) ([]*Cost, error) {
	rows, err := q.db.Query(ctx, dailyCostForTeam, fromDate, toDate, teamSlug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Cost{}
	for rows.Next() {
		var i Cost
		if err := rows.Scan(
			&i.ID,
			&i.Environment,
			&i.TeamSlug,
			&i.App,
			&i.CostType,
			&i.Date,
			&i.DailyCost,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const dailyEnvCostForTeam = `-- name: DailyEnvCostForTeam :many
SELECT
    team_slug,
    app,
    date,
    SUM(daily_cost)::real AS daily_cost
FROM
    cost
WHERE
    date >= $1::date
    AND date <= $2::date
    AND environment = $3
    AND team_slug = $4::slug
GROUP BY
    team_slug, app, date
ORDER BY
    date, app ASC
`

type DailyEnvCostForTeamRow struct {
	TeamSlug  *slug.Slug
	App       string
	Date      pgtype.Date
	DailyCost float32
}

// DailyEnvCostForTeam will fetch the daily cost for a specific team and environment across all apps in a date range.
func (q *Queries) DailyEnvCostForTeam(ctx context.Context, fromDate pgtype.Date, toDate pgtype.Date, environment *string, teamSlug slug.Slug) ([]*DailyEnvCostForTeamRow, error) {
	rows, err := q.db.Query(ctx, dailyEnvCostForTeam,
		fromDate,
		toDate,
		environment,
		teamSlug,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*DailyEnvCostForTeamRow{}
	for rows.Next() {
		var i DailyEnvCostForTeamRow
		if err := rows.Scan(
			&i.TeamSlug,
			&i.App,
			&i.Date,
			&i.DailyCost,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const lastCostDate = `-- name: LastCostDate :one
SELECT
    MAX(date)::date AS date
FROM
    cost
`

// LastCostDate will return the last date that has a cost.
func (q *Queries) LastCostDate(ctx context.Context) (pgtype.Date, error) {
	row := q.db.QueryRow(ctx, lastCostDate)
	var date pgtype.Date
	err := row.Scan(&date)
	return date, err
}

const monthlyCostForApp = `-- name: MonthlyCostForApp :many
WITH last_run AS (
    SELECT MAX(date)::date AS "last_run"
    FROM cost
)
SELECT
    team_slug,
    app,
    environment,
    date_trunc('month', date)::date AS month,
    -- Extract last day of known cost samples for the month, or the last recorded date
    -- This helps with estimation etc
    MAX(CASE
        WHEN date_trunc('month', date) < date_trunc('month', last_run) THEN date_trunc('month', date) + interval '1 month' - interval '1 day'
        ELSE date_trunc('day', last_run)
    END)::date AS last_recorded_date,
    SUM(daily_cost)::real AS daily_cost
FROM cost c
LEFT JOIN last_run ON true
WHERE c.team_slug = $1::slug
AND c.app = $2
AND c.environment = $3::text
GROUP BY team_slug, app, environment, month
ORDER BY month DESC
LIMIT 12
`

type MonthlyCostForAppRow struct {
	TeamSlug         *slug.Slug
	App              string
	Environment      *string
	Month            pgtype.Date
	LastRecordedDate pgtype.Date
	DailyCost        float32
}

func (q *Queries) MonthlyCostForApp(ctx context.Context, teamSlug slug.Slug, app string, environment string) ([]*MonthlyCostForAppRow, error) {
	rows, err := q.db.Query(ctx, monthlyCostForApp, teamSlug, app, environment)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*MonthlyCostForAppRow{}
	for rows.Next() {
		var i MonthlyCostForAppRow
		if err := rows.Scan(
			&i.TeamSlug,
			&i.App,
			&i.Environment,
			&i.Month,
			&i.LastRecordedDate,
			&i.DailyCost,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const monthlyCostForTeam = `-- name: MonthlyCostForTeam :many
WITH last_run AS (
    SELECT MAX(date)::date AS "last_run"
    FROM cost
)
SELECT
    team_slug,
    date_trunc('month', date)::date AS month,
    -- Extract last day of known cost samples for the month, or the last recorded date
    -- This helps with estimation etc
    MAX(CASE
        WHEN date_trunc('month', date) < date_trunc('month', last_run) THEN date_trunc('month', date) + interval '1 month' - interval '1 day'
        ELSE date_trunc('day', last_run)
    END)::date AS last_recorded_date,
    SUM(daily_cost)::real AS daily_cost
FROM cost c
LEFT JOIN last_run ON true
WHERE c.team_slug = $1::slug
GROUP BY team_slug, month
ORDER BY month DESC
LIMIT 12
`

type MonthlyCostForTeamRow struct {
	TeamSlug         *slug.Slug
	Month            pgtype.Date
	LastRecordedDate pgtype.Date
	DailyCost        float32
}

func (q *Queries) MonthlyCostForTeam(ctx context.Context, teamSlug slug.Slug) ([]*MonthlyCostForTeamRow, error) {
	rows, err := q.db.Query(ctx, monthlyCostForTeam, teamSlug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*MonthlyCostForTeamRow{}
	for rows.Next() {
		var i MonthlyCostForTeamRow
		if err := rows.Scan(
			&i.TeamSlug,
			&i.Month,
			&i.LastRecordedDate,
			&i.DailyCost,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
