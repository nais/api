// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package gensql

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/nais/api/internal/slug"
)

type RepositoryAuthorizationEnum string

const (
	RepositoryAuthorizationEnumDeploy RepositoryAuthorizationEnum = "deploy"
)

func (e *RepositoryAuthorizationEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RepositoryAuthorizationEnum(s)
	case string:
		*e = RepositoryAuthorizationEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for RepositoryAuthorizationEnum: %T", src)
	}
	return nil
}

type NullRepositoryAuthorizationEnum struct {
	RepositoryAuthorizationEnum RepositoryAuthorizationEnum
	Valid                       bool // Valid is true if RepositoryAuthorizationEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRepositoryAuthorizationEnum) Scan(value interface{}) error {
	if value == nil {
		ns.RepositoryAuthorizationEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RepositoryAuthorizationEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRepositoryAuthorizationEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RepositoryAuthorizationEnum), nil
}

func (e RepositoryAuthorizationEnum) Valid() bool {
	switch e {
	case RepositoryAuthorizationEnumDeploy:
		return true
	}
	return false
}

func AllRepositoryAuthorizationEnumValues() []RepositoryAuthorizationEnum {
	return []RepositoryAuthorizationEnum{
		RepositoryAuthorizationEnumDeploy,
	}
}

type ResourceType string

const (
	ResourceTypeCpu    ResourceType = "cpu"
	ResourceTypeMemory ResourceType = "memory"
)

func (e *ResourceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ResourceType(s)
	case string:
		*e = ResourceType(s)
	default:
		return fmt.Errorf("unsupported scan type for ResourceType: %T", src)
	}
	return nil
}

type NullResourceType struct {
	ResourceType ResourceType
	Valid        bool // Valid is true if ResourceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullResourceType) Scan(value interface{}) error {
	if value == nil {
		ns.ResourceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ResourceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullResourceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ResourceType), nil
}

func (e ResourceType) Valid() bool {
	switch e {
	case ResourceTypeCpu,
		ResourceTypeMemory:
		return true
	}
	return false
}

func AllResourceTypeValues() []ResourceType {
	return []ResourceType{
		ResourceTypeCpu,
		ResourceTypeMemory,
	}
}

type RoleName string

const (
	RoleNameAdmin                 RoleName = "Admin"
	RoleNameDeploykeyviewer       RoleName = "Deploy key viewer"
	RoleNameServiceaccountcreator RoleName = "Service account creator"
	RoleNameServiceaccountowner   RoleName = "Service account owner"
	RoleNameSynchronizer          RoleName = "Synchronizer"
	RoleNameTeamcreator           RoleName = "Team creator"
	RoleNameTeammember            RoleName = "Team member"
	RoleNameTeamowner             RoleName = "Team owner"
	RoleNameTeamviewer            RoleName = "Team viewer"
	RoleNameUseradmin             RoleName = "User admin"
	RoleNameUserviewer            RoleName = "User viewer"
)

func (e *RoleName) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RoleName(s)
	case string:
		*e = RoleName(s)
	default:
		return fmt.Errorf("unsupported scan type for RoleName: %T", src)
	}
	return nil
}

type NullRoleName struct {
	RoleName RoleName
	Valid    bool // Valid is true if RoleName is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoleName) Scan(value interface{}) error {
	if value == nil {
		ns.RoleName, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RoleName.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoleName) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RoleName), nil
}

func (e RoleName) Valid() bool {
	switch e {
	case RoleNameAdmin,
		RoleNameDeploykeyviewer,
		RoleNameServiceaccountcreator,
		RoleNameServiceaccountowner,
		RoleNameSynchronizer,
		RoleNameTeamcreator,
		RoleNameTeammember,
		RoleNameTeamowner,
		RoleNameTeamviewer,
		RoleNameUseradmin,
		RoleNameUserviewer:
		return true
	}
	return false
}

func AllRoleNameValues() []RoleName {
	return []RoleName{
		RoleNameAdmin,
		RoleNameDeploykeyviewer,
		RoleNameServiceaccountcreator,
		RoleNameServiceaccountowner,
		RoleNameSynchronizer,
		RoleNameTeamcreator,
		RoleNameTeammember,
		RoleNameTeamowner,
		RoleNameTeamviewer,
		RoleNameUseradmin,
		RoleNameUserviewer,
	}
}

type AuditLog struct {
	ID               uuid.UUID
	CreatedAt        pgtype.Timestamptz
	CorrelationID    uuid.UUID
	ComponentName    string
	Actor            *string
	Action           string
	Message          string
	TargetType       string
	TargetIdentifier string
}

type Cost struct {
	ID          int32
	Environment *string
	TeamSlug    *slug.Slug
	App         string
	CostType    string
	Date        pgtype.Date
	DailyCost   float32
}

type Reconciler struct {
	Name        string
	DisplayName string
	Description string
	Enabled     bool
	MemberAware bool
}

type ReconcilerError struct {
	ID            int64
	CorrelationID uuid.UUID
	Reconciler    string
	CreatedAt     pgtype.Timestamptz
	ErrorMessage  string
	TeamSlug      slug.Slug
}

type ReconcilerResource struct {
	ID             uuid.UUID
	ReconcilerName string
	TeamSlug       slug.Slug
	Name           string
	Value          string
	Metadata       []byte
	CreatedAt      pgtype.Timestamptz
	UpdatedAt      pgtype.Timestamptz
}

type ResourceUtilizationMetric struct {
	ID           int32
	Timestamp    pgtype.Timestamptz
	Environment  string
	TeamSlug     slug.Slug
	App          string
	ResourceType ResourceType
	Usage        float64
	Request      float64
}

type ServiceAccount struct {
	ID   uuid.UUID
	Name string
}

type ServiceAccountRole struct {
	ID                     int32
	RoleName               RoleName
	ServiceAccountID       uuid.UUID
	TargetTeamSlug         *slug.Slug
	TargetServiceAccountID *uuid.UUID
}

type Session struct {
	ID      uuid.UUID
	UserID  uuid.UUID
	Expires pgtype.Timestamptz
}

type SlackAlertsChannel struct {
	TeamSlug    slug.Slug
	Environment string
	ChannelName string
}

type Team struct {
	Slug               slug.Slug
	Purpose            string
	LastSuccessfulSync pgtype.Timestamp
	SlackChannel       string
	GoogleGroupEmail   *string
}

type TeamDeleteKey struct {
	Key         uuid.UUID
	TeamSlug    slug.Slug
	CreatedAt   pgtype.Timestamptz
	CreatedBy   uuid.UUID
	ConfirmedAt pgtype.Timestamptz
}

type TeamEnvironment struct {
	ID           uuid.UUID
	TeamSlug     slug.Slug
	Environment  string
	Namespace    *string
	GcpProjectID *string
}

type User struct {
	ID         uuid.UUID
	Email      string
	Name       string
	ExternalID string
}

type UserRole struct {
	ID                     int32
	RoleName               RoleName
	UserID                 uuid.UUID
	TargetTeamSlug         *slug.Slug
	TargetServiceAccountID *uuid.UUID
}
