// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: session.sql

package gensql

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (user_id, expires)
VALUES ($1, $2)
RETURNING id, user_id, expires
`

type CreateSessionParams struct {
	UserID  uuid.UUID
	Expires pgtype.Timestamptz
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (*Session, error) {
	row := q.db.QueryRow(ctx, createSession, arg.UserID, arg.Expires)
	var i Session
	err := row.Scan(&i.ID, &i.UserID, &i.Expires)
	return &i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT id, user_id, expires FROM sessions
WHERE id = $1
`

func (q *Queries) GetSessionByID(ctx context.Context, id uuid.UUID) (*Session, error) {
	row := q.db.QueryRow(ctx, getSessionByID, id)
	var i Session
	err := row.Scan(&i.ID, &i.UserID, &i.Expires)
	return &i, err
}

const setSessionExpires = `-- name: SetSessionExpires :one
UPDATE sessions
SET expires = $1
WHERE id = $2
RETURNING id, user_id, expires
`

type SetSessionExpiresParams struct {
	Expires pgtype.Timestamptz
	ID      uuid.UUID
}

func (q *Queries) SetSessionExpires(ctx context.Context, arg SetSessionExpiresParams) (*Session, error) {
	row := q.db.QueryRow(ctx, setSessionExpires, arg.Expires, arg.ID)
	var i Session
	err := row.Scan(&i.ID, &i.UserID, &i.Expires)
	return &i, err
}
