// Code generated by sqlc. DO NOT EDIT.
// source: usersync.sql

package gensql

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUsersyncRun = `-- name: CreateUsersyncRun :exec
INSERT INTO usersync_runs (id, started_at, finished_at, error)
VALUES ($1, $2, $3, $4)
`

type CreateUsersyncRunParams struct {
	ID         uuid.UUID
	StartedAt  pgtype.Timestamptz
	FinishedAt pgtype.Timestamptz
	Error      *string
}

func (q *Queries) CreateUsersyncRun(ctx context.Context, arg CreateUsersyncRunParams) error {
	_, err := q.db.Exec(ctx, createUsersyncRun,
		arg.ID,
		arg.StartedAt,
		arg.FinishedAt,
		arg.Error,
	)
	return err
}

const getUsersyncRuns = `-- name: GetUsersyncRuns :many
SELECT id, started_at, finished_at, error FROM usersync_runs
ORDER BY started_at DESC
LIMIT $2 OFFSET $1
`

type GetUsersyncRunsParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) GetUsersyncRuns(ctx context.Context, arg GetUsersyncRunsParams) ([]*UsersyncRun, error) {
	rows, err := q.db.Query(ctx, getUsersyncRuns, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*UsersyncRun{}
	for rows.Next() {
		var i UsersyncRun
		if err := rows.Scan(
			&i.ID,
			&i.StartedAt,
			&i.FinishedAt,
			&i.Error,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersyncRunsCount = `-- name: GetUsersyncRunsCount :one
SELECT COUNT(*) FROM usersync_runs
`

func (q *Queries) GetUsersyncRunsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getUsersyncRunsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}
