// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: resourceusage.sql

package gensql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/nais/api/internal/slug"
)

const averageResourceUtilizationForTeam = `-- name: AverageResourceUtilizationForTeam :one
SELECT
    (SUM(usage) / 24 / 7)::double precision AS usage,
    (SUM(request) / 24 / 7)::double precision AS request
FROM
    resource_utilization_metrics
WHERE
    team_slug = $1
    AND resource_type = $2
    AND timestamp >= $3::timestamptz - INTERVAL '1 week'
    AND timestamp < $3::timestamptz
    AND request > usage
`

type AverageResourceUtilizationForTeamRow struct {
	Usage   float64
	Request float64
}

// AverageResourceUtilizationForTeam will return the average resource utilization for a team for a week.
func (q *Queries) AverageResourceUtilizationForTeam(ctx context.Context, teamSlug slug.Slug, resourceType ResourceType, timestamp pgtype.Timestamptz) (*AverageResourceUtilizationForTeamRow, error) {
	row := q.db.QueryRow(ctx, averageResourceUtilizationForTeam, teamSlug, resourceType, timestamp)
	var i AverageResourceUtilizationForTeamRow
	err := row.Scan(&i.Usage, &i.Request)
	return &i, err
}

const maxResourceUtilizationDate = `-- name: MaxResourceUtilizationDate :one
SELECT MAX(timestamp)::timestamptz FROM resource_utilization_metrics
`

// MaxResourceUtilizationDate will return the max date for resource utilization records.
func (q *Queries) MaxResourceUtilizationDate(ctx context.Context) (pgtype.Timestamptz, error) {
	row := q.db.QueryRow(ctx, maxResourceUtilizationDate)
	var column_1 pgtype.Timestamptz
	err := row.Scan(&column_1)
	return column_1, err
}

const resourceUtilizationForApp = `-- name: ResourceUtilizationForApp :many
SELECT
    id, timestamp, environment, team_slug, app, resource_type, usage, request
FROM
    resource_utilization_metrics
WHERE
    environment = $1
    AND team_slug = $2
    AND app = $3
    AND resource_type = $4
    AND timestamp >= $5::timestamptz
    AND timestamp < $6::timestamptz
ORDER BY
    timestamp ASC
`

type ResourceUtilizationForAppParams struct {
	Environment  string
	TeamSlug     slug.Slug
	App          string
	ResourceType ResourceType
	Start        pgtype.Timestamptz
	End          pgtype.Timestamptz
}

// ResourceUtilizationForApp will return resource utilization records for a given app.
func (q *Queries) ResourceUtilizationForApp(ctx context.Context, arg ResourceUtilizationForAppParams) ([]*ResourceUtilizationMetric, error) {
	rows, err := q.db.Query(ctx, resourceUtilizationForApp,
		arg.Environment,
		arg.TeamSlug,
		arg.App,
		arg.ResourceType,
		arg.Start,
		arg.End,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ResourceUtilizationMetric{}
	for rows.Next() {
		var i ResourceUtilizationMetric
		if err := rows.Scan(
			&i.ID,
			&i.Timestamp,
			&i.Environment,
			&i.TeamSlug,
			&i.App,
			&i.ResourceType,
			&i.Usage,
			&i.Request,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resourceUtilizationForTeam = `-- name: ResourceUtilizationForTeam :many
SELECT
    SUM(usage)::double precision AS usage,
    SUM(request)::double precision AS request,
    timestamp
FROM
    resource_utilization_metrics
WHERE
    environment = $1
    AND team_slug = $2
    AND resource_type = $3
    AND timestamp >= $4::timestamptz
    AND timestamp < $5::timestamptz
GROUP BY
    timestamp
ORDER BY
    timestamp ASC
`

type ResourceUtilizationForTeamRow struct {
	Usage     float64
	Request   float64
	Timestamp pgtype.Timestamptz
}

// ResourceUtilizationForTeam will return resource utilization records for a given team.
func (q *Queries) ResourceUtilizationForTeam(ctx context.Context, environment string, teamSlug slug.Slug, resourceType ResourceType, start pgtype.Timestamptz, end pgtype.Timestamptz) ([]*ResourceUtilizationForTeamRow, error) {
	rows, err := q.db.Query(ctx, resourceUtilizationForTeam,
		environment,
		teamSlug,
		resourceType,
		start,
		end,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ResourceUtilizationForTeamRow{}
	for rows.Next() {
		var i ResourceUtilizationForTeamRow
		if err := rows.Scan(&i.Usage, &i.Request, &i.Timestamp); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resourceUtilizationOverageForTeam = `-- name: ResourceUtilizationOverageForTeam :many
SELECT
    usage,
    request,
    app,
    environment,
    (request-usage)::double precision AS overage
FROM
    resource_utilization_metrics
WHERE
    team_slug = $1
    AND timestamp = $2
    AND resource_type = $3
GROUP BY
    app, environment, usage, request, timestamp
ORDER BY
    overage DESC
`

type ResourceUtilizationOverageForTeamRow struct {
	Usage       float64
	Request     float64
	App         string
	Environment string
	Overage     float64
}

// ResourceUtilizationOverageForTeam will return overage records for a given team, ordered by overage descending.
func (q *Queries) ResourceUtilizationOverageForTeam(ctx context.Context, teamSlug slug.Slug, timestamp pgtype.Timestamptz, resourceType ResourceType) ([]*ResourceUtilizationOverageForTeamRow, error) {
	rows, err := q.db.Query(ctx, resourceUtilizationOverageForTeam, teamSlug, timestamp, resourceType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ResourceUtilizationOverageForTeamRow{}
	for rows.Next() {
		var i ResourceUtilizationOverageForTeamRow
		if err := rows.Scan(
			&i.Usage,
			&i.Request,
			&i.App,
			&i.Environment,
			&i.Overage,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resourceUtilizationRangeForApp = `-- name: ResourceUtilizationRangeForApp :one
SELECT
    MIN(timestamp)::timestamptz AS "from",
    MAX(timestamp)::timestamptz AS "to"
FROM
    resource_utilization_metrics
WHERE
    environment = $1
    AND team_slug = $2
    AND app = $3
`

type ResourceUtilizationRangeForAppRow struct {
	From pgtype.Timestamptz
	To   pgtype.Timestamptz
}

// ResourceUtilizationRangeForApp will return the min and max timestamps for a specific app.
func (q *Queries) ResourceUtilizationRangeForApp(ctx context.Context, environment string, teamSlug slug.Slug, app string) (*ResourceUtilizationRangeForAppRow, error) {
	row := q.db.QueryRow(ctx, resourceUtilizationRangeForApp, environment, teamSlug, app)
	var i ResourceUtilizationRangeForAppRow
	err := row.Scan(&i.From, &i.To)
	return &i, err
}

const resourceUtilizationRangeForTeam = `-- name: ResourceUtilizationRangeForTeam :one
SELECT
    MIN(timestamp)::timestamptz AS "from",
    MAX(timestamp)::timestamptz AS "to"
FROM
    resource_utilization_metrics
WHERE
    team_slug = $1
`

type ResourceUtilizationRangeForTeamRow struct {
	From pgtype.Timestamptz
	To   pgtype.Timestamptz
}

// ResourceUtilizationRangeForTeam will return the min and max timestamps for a specific team.
func (q *Queries) ResourceUtilizationRangeForTeam(ctx context.Context, teamSlug slug.Slug) (*ResourceUtilizationRangeForTeamRow, error) {
	row := q.db.QueryRow(ctx, resourceUtilizationRangeForTeam, teamSlug)
	var i ResourceUtilizationRangeForTeamRow
	err := row.Scan(&i.From, &i.To)
	return &i, err
}

const specificResourceUtilizationForApp = `-- name: SpecificResourceUtilizationForApp :one
SELECT
    usage,
    request,
    timestamp
FROM
    resource_utilization_metrics
WHERE
    environment = $1
    AND team_slug = $2
    AND app = $3
    AND resource_type = $4
    AND timestamp = $5
`

type SpecificResourceUtilizationForAppRow struct {
	Usage     float64
	Request   float64
	Timestamp pgtype.Timestamptz
}

// SpecificResourceUtilizationForApp will return resource utilization for an app at a specific timestamp.
func (q *Queries) SpecificResourceUtilizationForApp(ctx context.Context, environment string, teamSlug slug.Slug, app string, resourceType ResourceType, timestamp pgtype.Timestamptz) (*SpecificResourceUtilizationForAppRow, error) {
	row := q.db.QueryRow(ctx, specificResourceUtilizationForApp,
		environment,
		teamSlug,
		app,
		resourceType,
		timestamp,
	)
	var i SpecificResourceUtilizationForAppRow
	err := row.Scan(&i.Usage, &i.Request, &i.Timestamp)
	return &i, err
}

const specificResourceUtilizationForTeam = `-- name: SpecificResourceUtilizationForTeam :one
SELECT
    SUM(usage)::double precision AS usage,
    SUM(request)::double precision AS request,
    timestamp
FROM
    resource_utilization_metrics
WHERE
    team_slug = $1
    AND resource_type = $2
    AND timestamp = $3
    AND request > usage
GROUP BY
    timestamp
`

type SpecificResourceUtilizationForTeamRow struct {
	Usage     float64
	Request   float64
	Timestamp pgtype.Timestamptz
}

// SpecificResourceUtilizationForTeam will return resource utilization for a team at a specific timestamp. Applications
// with a usage greater than request will be ignored.
func (q *Queries) SpecificResourceUtilizationForTeam(ctx context.Context, teamSlug slug.Slug, resourceType ResourceType, timestamp pgtype.Timestamptz) (*SpecificResourceUtilizationForTeamRow, error) {
	row := q.db.QueryRow(ctx, specificResourceUtilizationForTeam, teamSlug, resourceType, timestamp)
	var i SpecificResourceUtilizationForTeamRow
	err := row.Scan(&i.Usage, &i.Request, &i.Timestamp)
	return &i, err
}
