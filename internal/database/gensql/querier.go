// Code generated by sqlc. DO NOT EDIT.

package gensql

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/nais/api/internal/slug"
)

type Querier interface {
	AddReconcilerOptOut(ctx context.Context, arg AddReconcilerOptOutParams) error
	AssignGlobalRoleToServiceAccount(ctx context.Context, arg AssignGlobalRoleToServiceAccountParams) error
	AssignGlobalRoleToUser(ctx context.Context, arg AssignGlobalRoleToUserParams) error
	AssignTeamRoleToServiceAccount(ctx context.Context, arg AssignTeamRoleToServiceAccountParams) error
	AssignTeamRoleToUser(ctx context.Context, arg AssignTeamRoleToUserParams) error
	// AverageResourceUtilizationForTeam will return the average resource utilization for a team for a week.
	AverageResourceUtilizationForTeam(ctx context.Context, arg AverageResourceUtilizationForTeamParams) (*AverageResourceUtilizationForTeamRow, error)
	ClearReconcilerErrorsForTeam(ctx context.Context, arg ClearReconcilerErrorsForTeamParams) error
	ConfigureReconciler(ctx context.Context, arg ConfigureReconcilerParams) error
	ConfirmTeamDeleteKey(ctx context.Context, key uuid.UUID) error
	CostForInstance(ctx context.Context, arg CostForInstanceParams) (float32, error)
	// CostUpsert will insert or update a cost record. If there is a conflict on the daily_cost_key constrant, the
	// daily_cost column will be updated.
	CostUpsert(ctx context.Context, arg []CostUpsertParams) *CostUpsertBatchResults
	CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) error
	CreateAuditEvent(ctx context.Context, arg CreateAuditEventParams) (uuid.UUID, error)
	CreateAuditEventData(ctx context.Context, arg CreateAuditEventDataParams) error
	CreateAuditLog(ctx context.Context, arg CreateAuditLogParams) error
	CreateDependencytrackProject(ctx context.Context, arg CreateDependencytrackProjectParams) error
	CreateRepositoryAuthorization(ctx context.Context, arg CreateRepositoryAuthorizationParams) error
	CreateServiceAccount(ctx context.Context, name string) (*ServiceAccount, error)
	CreateSession(ctx context.Context, arg CreateSessionParams) (*Session, error)
	CreateTeam(ctx context.Context, arg CreateTeamParams) (*Team, error)
	CreateTeamDeleteKey(ctx context.Context, arg CreateTeamDeleteKeyParams) (*TeamDeleteKey, error)
	CreateUser(ctx context.Context, arg CreateUserParams) (*User, error)
	CurrentSqlInstancesCostForTeam(ctx context.Context, arg CurrentSqlInstancesCostForTeamParams) (float32, error)
	// DailyCostForApp will fetch the daily cost for a specific team app in a specific environment, across all cost types
	// in a date range.
	DailyCostForApp(ctx context.Context, arg DailyCostForAppParams) ([]*Cost, error)
	// DailyCostForTeam will fetch the daily cost for a specific team across all apps and envs in a date range.
	DailyCostForTeam(ctx context.Context, arg DailyCostForTeamParams) ([]*Cost, error)
	// DailyEnvCostForTeam will fetch the daily cost for a specific team and environment across all apps in a date range.
	DailyEnvCostForTeam(ctx context.Context, arg DailyEnvCostForTeamParams) ([]*DailyEnvCostForTeamRow, error)
	// DailyVulnerabilityForTeam will return the metrics for the given team from first to last date.
	DailyVulnerabilityForTeam(ctx context.Context, arg DailyVulnerabilityForTeamParams) ([]*DailyVulnerabilityForTeamRow, error)
	// DailyVulnerabilityForTeamAndEnvironment will return the metrics for the given team and environment from first to last date.
	DailyVulnerabilityForTeamAndEnvironment(ctx context.Context, arg DailyVulnerabilityForTeamAndEnvironmentParams) ([]*DailyVulnerabilityForTeamAndEnvironmentRow, error)
	DeleteAllEnvironments(ctx context.Context) error
	DeleteReconcilerConfig(ctx context.Context, arg DeleteReconcilerConfigParams) error
	DeleteReconcilerStateForTeam(ctx context.Context, arg DeleteReconcilerStateForTeamParams) error
	DeleteServiceAccount(ctx context.Context, id uuid.UUID) error
	DeleteSession(ctx context.Context, id uuid.UUID) error
	DeleteTeam(ctx context.Context, argSlug slug.Slug) error
	DeleteUser(ctx context.Context, id uuid.UUID) error
	DisableReconciler(ctx context.Context, name string) (*Reconciler, error)
	EnableReconciler(ctx context.Context, name string) (*Reconciler, error)
	GetActiveTeamBySlug(ctx context.Context, argSlug slug.Slug) (*Team, error)
	GetActiveTeams(ctx context.Context) ([]*Team, error)
	GetAllTeamMembers(ctx context.Context, teamSlug *slug.Slug) ([]*User, error)
	GetAllTeamSlugs(ctx context.Context) ([]slug.Slug, error)
	GetAllUserRoles(ctx context.Context) ([]*UserRole, error)
	GetAuditEventsCountForTeam(ctx context.Context, team *slug.Slug) (int64, error)
	GetAuditEventsForTeam(ctx context.Context, arg GetAuditEventsForTeamParams) ([]*AuditEvent, error)
	GetAuditLogsForCorrelationID(ctx context.Context, arg GetAuditLogsForCorrelationIDParams) ([]*AuditLog, error)
	GetAuditLogsForCorrelationIDCount(ctx context.Context, correlationID uuid.UUID) (int64, error)
	GetAuditLogsForReconciler(ctx context.Context, arg GetAuditLogsForReconcilerParams) ([]*AuditLog, error)
	GetAuditLogsForReconcilerCount(ctx context.Context, targetIdentifier string) (int64, error)
	GetAuditLogsForTeam(ctx context.Context, arg GetAuditLogsForTeamParams) ([]*AuditLog, error)
	GetAuditLogsForTeamCount(ctx context.Context, targetIdentifier string) (int64, error)
	GetEnabledReconcilers(ctx context.Context) ([]*Reconciler, error)
	GetReconciler(ctx context.Context, name string) (*Reconciler, error)
	GetReconcilerConfig(ctx context.Context, arg GetReconcilerConfigParams) ([]*GetReconcilerConfigRow, error)
	GetReconcilerState(ctx context.Context, reconcilerName string) ([]*GetReconcilerStateRow, error)
	GetReconcilerStateForTeam(ctx context.Context, arg GetReconcilerStateForTeamParams) (*ReconcilerState, error)
	GetReconcilers(ctx context.Context, arg GetReconcilersParams) ([]*Reconciler, error)
	GetReconcilersCount(ctx context.Context) (int64, error)
	GetRepositoryAuthorizations(ctx context.Context, arg GetRepositoryAuthorizationsParams) ([]RepositoryAuthorizationEnum, error)
	GetServiceAccountByApiKey(ctx context.Context, apiKey string) (*ServiceAccount, error)
	GetServiceAccountByName(ctx context.Context, name string) (*ServiceAccount, error)
	GetServiceAccountRoles(ctx context.Context, serviceAccountID uuid.UUID) ([]*ServiceAccountRole, error)
	GetServiceAccounts(ctx context.Context) ([]*ServiceAccount, error)
	GetServiceAccountsByIDs(ctx context.Context, ids []uuid.UUID) ([]*ServiceAccount, error)
	GetSessionByID(ctx context.Context, id uuid.UUID) (*Session, error)
	GetTeamBySlug(ctx context.Context, argSlug slug.Slug) (*Team, error)
	GetTeamBySlugs(ctx context.Context, slugs []slug.Slug) ([]*Team, error)
	GetTeamDeleteKey(ctx context.Context, key uuid.UUID) (*TeamDeleteKey, error)
	GetTeamEnvironments(ctx context.Context, arg GetTeamEnvironmentsParams) ([]*TeamAllEnvironment, error)
	// Input is two arrays of equal length, one for slugs and one for names
	GetTeamEnvironmentsBySlugsAndEnvNames(ctx context.Context, arg GetTeamEnvironmentsBySlugsAndEnvNamesParams) ([]*TeamAllEnvironment, error)
	GetTeamEnvironmentsCount(ctx context.Context, teamSlug slug.Slug) (int64, error)
	GetTeamMember(ctx context.Context, arg GetTeamMemberParams) (*User, error)
	GetTeamMemberOptOuts(ctx context.Context, arg GetTeamMemberOptOutsParams) ([]*GetTeamMemberOptOutsRow, error)
	GetTeamMembers(ctx context.Context, arg GetTeamMembersParams) ([]*User, error)
	GetTeamMembersCount(ctx context.Context, teamSlug *slug.Slug) (int64, error)
	GetTeamMembersForReconciler(ctx context.Context, arg GetTeamMembersForReconcilerParams) ([]*User, error)
	GetTeamReconcilerErrors(ctx context.Context, teamSlug slug.Slug) ([]*ReconcilerError, error)
	GetTeams(ctx context.Context, arg GetTeamsParams) ([]*Team, error)
	GetTeamsCount(ctx context.Context) (int64, error)
	GetUserByEmail(ctx context.Context, email string) (*User, error)
	GetUserByExternalID(ctx context.Context, externalID string) (*User, error)
	GetUserByID(ctx context.Context, id uuid.UUID) (*User, error)
	GetUserRoles(ctx context.Context, userID uuid.UUID) ([]*UserRole, error)
	GetUserRolesForUsers(ctx context.Context, userIds []uuid.UUID) ([]*GetUserRolesForUsersRow, error)
	GetUserTeams(ctx context.Context, userID uuid.UUID) ([]*GetUserTeamsRow, error)
	GetUserTeamsCount(ctx context.Context, userID uuid.UUID) (int64, error)
	GetUserTeamsPaginated(ctx context.Context, arg GetUserTeamsPaginatedParams) ([]*GetUserTeamsPaginatedRow, error)
	GetUsers(ctx context.Context, arg GetUsersParams) ([]*User, error)
	GetUsersByIDs(ctx context.Context, ids []uuid.UUID) ([]*User, error)
	GetUsersCount(ctx context.Context) (int64, error)
	GetUsersWithGloballyAssignedRole(ctx context.Context, roleName RoleName) ([]*User, error)
	InsertEnvironment(ctx context.Context, arg InsertEnvironmentParams) error
	// LastCostDate will return the last date that has a cost.
	LastCostDate(ctx context.Context) (pgtype.Date, error)
	ListRepositoriesByAuthorization(ctx context.Context, arg ListRepositoriesByAuthorizationParams) ([]string, error)
	// MaxResourceUtilizationDate will return the max date for resource utilization records.
	MaxResourceUtilizationDate(ctx context.Context) (pgtype.Timestamptz, error)
	MonthlyCostForApp(ctx context.Context, arg MonthlyCostForAppParams) ([]*MonthlyCostForAppRow, error)
	MonthlyCostForTeam(ctx context.Context, teamSlug slug.Slug) ([]*CostMonthlyTeam, error)
	RefreshCostMonthlyTeam(ctx context.Context) error
	// Refresh materialized view resource_team_range
	RefreshResourceTeamRange(ctx context.Context) error
	RemoveAllServiceAccountRoles(ctx context.Context, serviceAccountID uuid.UUID) error
	RemoveApiKeysFromServiceAccount(ctx context.Context, serviceAccountID uuid.UUID) error
	RemoveReconcilerOptOut(ctx context.Context, arg RemoveReconcilerOptOutParams) error
	RemoveRepositoryAuthorization(ctx context.Context, arg RemoveRepositoryAuthorizationParams) error
	RemoveUserFromTeam(ctx context.Context, arg RemoveUserFromTeamParams) error
	ResetReconcilerConfig(ctx context.Context, reconcilerName string) error
	// ResourceUtilizationForApp will return resource utilization records for a given app.
	ResourceUtilizationForApp(ctx context.Context, arg ResourceUtilizationForAppParams) ([]*ResourceUtilizationMetric, error)
	// ResourceUtilizationForTeam will return resource utilization records for a given team.
	ResourceUtilizationForTeam(ctx context.Context, arg ResourceUtilizationForTeamParams) ([]*ResourceUtilizationForTeamRow, error)
	// ResourceUtilizationOverageForTeam will return overage records for a given team, ordered by overage descending.
	ResourceUtilizationOverageForTeam(ctx context.Context, arg ResourceUtilizationOverageForTeamParams) ([]*ResourceUtilizationOverageForTeamRow, error)
	// ResourceUtilizationRangeForApp will return the min and max timestamps for a specific app.
	ResourceUtilizationRangeForApp(ctx context.Context, arg ResourceUtilizationRangeForAppParams) (*ResourceUtilizationRangeForAppRow, error)
	// ResourceUtilizationRangeForTeam will return the min and max timestamps for a specific team.
	ResourceUtilizationRangeForTeam(ctx context.Context, teamSlug slug.Slug) (*ResourceUtilizationRangeForTeamRow, error)
	// ResourceUtilizationUpsert will insert or update resource utilization records.
	ResourceUtilizationUpsert(ctx context.Context, arg []ResourceUtilizationUpsertParams) *ResourceUtilizationUpsertBatchResults
	RevokeGlobalUserRole(ctx context.Context, arg RevokeGlobalUserRoleParams) error
	SetLastSuccessfulSyncForTeam(ctx context.Context, argSlug slug.Slug) error
	SetReconcilerErrorForTeam(ctx context.Context, arg SetReconcilerErrorForTeamParams) error
	SetSessionExpires(ctx context.Context, arg SetSessionExpiresParams) (*Session, error)
	// SpecificResourceUtilizationForApp will return resource utilization for an app at a specific timestamp.
	SpecificResourceUtilizationForApp(ctx context.Context, arg SpecificResourceUtilizationForAppParams) (*SpecificResourceUtilizationForAppRow, error)
	// SpecificResourceUtilizationForTeam will return resource utilization for a team at a specific timestamp. Applications
	// with a usage greater than request will be ignored.
	SpecificResourceUtilizationForTeam(ctx context.Context, arg SpecificResourceUtilizationForTeamParams) ([]*SpecificResourceUtilizationForTeamRow, error)
	TeamExists(ctx context.Context, argSlug slug.Slug) (bool, error)
	UpdateTeam(ctx context.Context, arg UpdateTeamParams) (*Team, error)
	UpdateTeamExternalReferences(ctx context.Context, arg UpdateTeamExternalReferencesParams) (*Team, error)
	UpdateUser(ctx context.Context, arg UpdateUserParams) (*User, error)
	UpsertReconciler(ctx context.Context, arg UpsertReconcilerParams) (*Reconciler, error)
	UpsertReconcilerConfig(ctx context.Context, arg UpsertReconcilerConfigParams) error
	UpsertReconcilerState(ctx context.Context, arg UpsertReconcilerStateParams) (*ReconcilerState, error)
	UpsertTeamEnvironment(ctx context.Context, arg UpsertTeamEnvironmentParams) (*TeamEnvironment, error)
	// VulnerabilityMetricsDateRangeForTeam will return the first and last date that has a metrics.
	VulnerabilityMetricsDateRangeForTeam(ctx context.Context, teamSlug slug.Slug) (*VulnerabilityMetricsDateRangeForTeamRow, error)
	// VulnerabilityMetricsMaxDate will return the last date that has a metrics for the given project id.
	VulnerabilityMetricsMaxDate(ctx context.Context, arg VulnerabilityMetricsMaxDateParams) (pgtype.Date, error)
	VulnerabilityMetricsUpsert(ctx context.Context, arg []VulnerabilityMetricsUpsertParams) *VulnerabilityMetricsUpsertBatchResults
}

var _ Querier = (*Queries)(nil)
