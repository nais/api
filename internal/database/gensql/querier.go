// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package gensql

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/nais/api/internal/slug"
)

type Querier interface {
	AddReconcilerOptOut(ctx context.Context, teamSlug slug.Slug, userID uuid.UUID, reconcilerName ReconcilerName) error
	AssignGlobalRoleToServiceAccount(ctx context.Context, serviceAccountID uuid.UUID, roleName RoleName) error
	AssignGlobalRoleToUser(ctx context.Context, userID uuid.UUID, roleName RoleName) error
	AssignTeamRoleToServiceAccount(ctx context.Context, serviceAccountID uuid.UUID, roleName RoleName, targetTeamSlug slug.Slug) error
	AssignTeamRoleToUser(ctx context.Context, userID uuid.UUID, roleName RoleName, targetTeamSlug slug.Slug) error
	// AverageResourceUtilizationForTeam will return the average resource utilization for a team for a week.
	AverageResourceUtilizationForTeam(ctx context.Context, teamSlug slug.Slug, resourceType ResourceType, timestamp pgtype.Timestamptz) (*AverageResourceUtilizationForTeamRow, error)
	ClearReconcilerErrorsForTeam(ctx context.Context, teamSlug slug.Slug, reconciler ReconcilerName) error
	ConfigureReconciler(ctx context.Context, value string, reconcilerName ReconcilerName, key ReconcilerConfigKey) error
	ConfirmTeamDeleteKey(ctx context.Context, key uuid.UUID) error
	// CostUpsert will insert or update a cost record. If there is a conflict on the daily_cost_key constrant, the
	// daily_cost column will be updated.
	CostUpsert(ctx context.Context, arg []CostUpsertParams) *CostUpsertBatchResults
	CreateAPIKey(ctx context.Context, apiKey string, serviceAccountID uuid.UUID) error
	CreateAuditLog(ctx context.Context, arg CreateAuditLogParams) error
	CreateDependencytrackProject(ctx context.Context, environment string, teamSlug slug.Slug, app string, projectid uuid.UUID) error
	CreateRepositoryAuthorization(ctx context.Context, teamSlug slug.Slug, githubRepository string, repositoryAuthorization RepositoryAuthorizationEnum) error
	CreateServiceAccount(ctx context.Context, name string) (*ServiceAccount, error)
	CreateSession(ctx context.Context, userID uuid.UUID, expires pgtype.Timestamptz) (*Session, error)
	CreateTeam(ctx context.Context, slug slug.Slug, purpose string, slackChannel string) (*Team, error)
	CreateTeamDeleteKey(ctx context.Context, teamSlug slug.Slug, createdBy uuid.UUID) (*TeamDeleteKey, error)
	CreateUser(ctx context.Context, name string, email string, externalID string) (*User, error)
	// DailyCostForApp will fetch the daily cost for a specific team app in a specific environment, across all cost types
	// in a date range.
	DailyCostForApp(ctx context.Context, fromDate pgtype.Date, toDate pgtype.Date, environment string, teamSlug slug.Slug, app string) ([]*Cost, error)
	// DailyCostForTeam will fetch the daily cost for a specific team across all apps and envs in a date range.
	DailyCostForTeam(ctx context.Context, fromDate pgtype.Date, toDate pgtype.Date, teamSlug slug.Slug) ([]*Cost, error)
	// DailyEnvCostForTeam will fetch the daily cost for a specific team and environment across all apps in a date range.
	DailyEnvCostForTeam(ctx context.Context, fromDate pgtype.Date, toDate pgtype.Date, environment *string, teamSlug slug.Slug) ([]*DailyEnvCostForTeamRow, error)
	DailyVulnerabilityForTeam(ctx context.Context, fromDate pgtype.Date, toDate pgtype.Date, teamSlug slug.Slug) ([]*DailyVulnerabilityForTeamRow, error)
	DangerousGetReconcilerConfigValues(ctx context.Context, reconcilerName ReconcilerName) ([]*DangerousGetReconcilerConfigValuesRow, error)
	DeleteServiceAccount(ctx context.Context, id uuid.UUID) error
	DeleteSession(ctx context.Context, id uuid.UUID) error
	DeleteTeam(ctx context.Context, argSlug slug.Slug) error
	DeleteUser(ctx context.Context, id uuid.UUID) error
	DisableReconciler(ctx context.Context, name ReconcilerName) (*Reconciler, error)
	EnableReconciler(ctx context.Context, name ReconcilerName) (*Reconciler, error)
	FirstRunComplete(ctx context.Context) error
	GetActiveTeamBySlug(ctx context.Context, argSlug slug.Slug) (*Team, error)
	GetActiveTeams(ctx context.Context) ([]*Team, error)
	GetAllTeamMembers(ctx context.Context, teamSlug *slug.Slug) ([]*User, error)
	GetAllUserRoles(ctx context.Context) ([]*UserRole, error)
	GetAllUsers(ctx context.Context) ([]*User, error)
	GetAuditLogsForCorrelationID(ctx context.Context, correlationID uuid.UUID, offset int32, limit int32) ([]*AuditLog, error)
	GetAuditLogsForCorrelationIDCount(ctx context.Context, correlationID uuid.UUID) (int64, error)
	GetAuditLogsForReconciler(ctx context.Context, targetIdentifier string, offset int32, limit int32) ([]*AuditLog, error)
	GetAuditLogsForReconcilerCount(ctx context.Context, targetIdentifier string) (int64, error)
	GetAuditLogsForTeam(ctx context.Context, targetIdentifier string, offset int32, limit int32) ([]*AuditLog, error)
	GetAuditLogsForTeamCount(ctx context.Context, targetIdentifier string) (int64, error)
	GetEnabledReconcilers(ctx context.Context) ([]*Reconciler, error)
	GetReconciler(ctx context.Context, name ReconcilerName) (*Reconciler, error)
	GetReconcilerConfig(ctx context.Context, reconcilerName ReconcilerName) ([]*GetReconcilerConfigRow, error)
	GetReconcilerStateForTeam(ctx context.Context, reconcilerName ReconcilerName, teamSlug slug.Slug) (*ReconcilerState, error)
	GetReconcilers(ctx context.Context) ([]*Reconciler, error)
	GetRepositoryAuthorizations(ctx context.Context, teamSlug slug.Slug, githubRepository string) ([]RepositoryAuthorizationEnum, error)
	GetServiceAccountByApiKey(ctx context.Context, apiKey string) (*ServiceAccount, error)
	GetServiceAccountByName(ctx context.Context, name string) (*ServiceAccount, error)
	GetServiceAccountRoles(ctx context.Context, serviceAccountID uuid.UUID) ([]*ServiceAccountRole, error)
	GetServiceAccounts(ctx context.Context) ([]*ServiceAccount, error)
	GetSessionByID(ctx context.Context, id uuid.UUID) (*Session, error)
	GetSlackAlertsChannels(ctx context.Context, teamSlug slug.Slug) ([]*SlackAlertsChannel, error)
	GetTeamBySlug(ctx context.Context, argSlug slug.Slug) (*Team, error)
	GetTeamDeleteKey(ctx context.Context, key uuid.UUID) (*TeamDeleteKey, error)
	GetTeamMember(ctx context.Context, teamSlug *slug.Slug, userID uuid.UUID) (*User, error)
	GetTeamMemberOptOuts(ctx context.Context, userID uuid.UUID, teamSlug slug.Slug) ([]*GetTeamMemberOptOutsRow, error)
	GetTeamMembers(ctx context.Context, teamSlug *slug.Slug, offset int32, limit int32) ([]*User, error)
	GetTeamMembersCount(ctx context.Context, teamSlug *slug.Slug) (int64, error)
	GetTeamMembersForReconciler(ctx context.Context, teamSlug *slug.Slug, reconcilerName ReconcilerName) ([]*User, error)
	GetTeamReconcilerErrors(ctx context.Context, teamSlug slug.Slug) ([]*ReconcilerError, error)
	GetTeams(ctx context.Context) ([]*Team, error)
	GetTeamsCount(ctx context.Context) (int64, error)
	GetTeamsPaginated(ctx context.Context, offset int32, limit int32) ([]*Team, error)
	GetTeamsWithPermissionInGitHubRepo(ctx context.Context, stateMatcher []byte, offset int32, limit int32) ([]*Team, error)
	GetTeamsWithPermissionInGitHubRepoCount(ctx context.Context, stateMatcher []byte) (int64, error)
	GetUserByEmail(ctx context.Context, email string) (*User, error)
	GetUserByExternalID(ctx context.Context, externalID string) (*User, error)
	GetUserByID(ctx context.Context, id uuid.UUID) (*User, error)
	GetUserRoles(ctx context.Context, userID uuid.UUID) ([]*UserRole, error)
	GetUserTeams(ctx context.Context, userID uuid.UUID, limit int32, offset int32) ([]*GetUserTeamsRow, error)
	GetUserTeamsCount(ctx context.Context, userID uuid.UUID) (int64, error)
	GetUsers(ctx context.Context, limit int32, offset int32) ([]*User, error)
	GetUsersCount(ctx context.Context) (int64, error)
	GetUsersWithGloballyAssignedRole(ctx context.Context, roleName RoleName) ([]*User, error)
	IsFirstRun(ctx context.Context) (bool, error)
	// LastCostDate will return the last date that has a cost.
	LastCostDate(ctx context.Context) (pgtype.Date, error)
	// MaxResourceUtilizationDate will return the max date for resource utilization records.
	MaxResourceUtilizationDate(ctx context.Context) (pgtype.Timestamptz, error)
	MonthlyCostForApp(ctx context.Context, teamSlug slug.Slug, app string, environment string) ([]*MonthlyCostForAppRow, error)
	MonthlyCostForTeam(ctx context.Context, teamSlug slug.Slug) ([]*MonthlyCostForTeamRow, error)
	RemoveAllServiceAccountRoles(ctx context.Context, serviceAccountID uuid.UUID) error
	RemoveApiKeysFromServiceAccount(ctx context.Context, serviceAccountID uuid.UUID) error
	RemoveReconcilerOptOut(ctx context.Context, teamSlug slug.Slug, userID uuid.UUID, reconcilerName ReconcilerName) error
	RemoveReconcilerStateForTeam(ctx context.Context, reconcilerName ReconcilerName, teamSlug slug.Slug) error
	RemoveRepositoryAuthorization(ctx context.Context, teamSlug slug.Slug, githubRepository string, repositoryAuthorization RepositoryAuthorizationEnum) error
	RemoveSlackAlertsChannel(ctx context.Context, teamSlug slug.Slug, environment string) error
	RemoveUserFromTeam(ctx context.Context, userID uuid.UUID, teamSlug *slug.Slug) error
	ResetReconcilerConfig(ctx context.Context, reconcilerName ReconcilerName) error
	// ResourceUtilizationForApp will return resource utilization records for a given app.
	ResourceUtilizationForApp(ctx context.Context, arg ResourceUtilizationForAppParams) ([]*ResourceUtilizationMetric, error)
	// ResourceUtilizationForTeam will return resource utilization records for a given team.
	ResourceUtilizationForTeam(ctx context.Context, environment string, teamSlug slug.Slug, resourceType ResourceType, start pgtype.Timestamptz, end pgtype.Timestamptz) ([]*ResourceUtilizationForTeamRow, error)
	// ResourceUtilizationOverageForTeam will return overage records for a given team, ordered by overage descending.
	ResourceUtilizationOverageForTeam(ctx context.Context, teamSlug slug.Slug, timestamp pgtype.Timestamptz, resourceType ResourceType) ([]*ResourceUtilizationOverageForTeamRow, error)
	// ResourceUtilizationRangeForApp will return the min and max timestamps for a specific app.
	ResourceUtilizationRangeForApp(ctx context.Context, environment string, teamSlug slug.Slug, app string) (*ResourceUtilizationRangeForAppRow, error)
	// ResourceUtilizationRangeForTeam will return the min and max timestamps for a specific team.
	ResourceUtilizationRangeForTeam(ctx context.Context, teamSlug slug.Slug) (*ResourceUtilizationRangeForTeamRow, error)
	// ResourceUtilizationUpsert will insert or update resource utilization records.
	ResourceUtilizationUpsert(ctx context.Context, arg []ResourceUtilizationUpsertParams) *ResourceUtilizationUpsertBatchResults
	RevokeGlobalUserRole(ctx context.Context, userID uuid.UUID, roleName RoleName) error
	SearchTeams(ctx context.Context, slugMatch string, limit int32) ([]*Team, error)
	SetLastSuccessfulSyncForTeam(ctx context.Context, argSlug slug.Slug) error
	SetReconcilerErrorForTeam(ctx context.Context, correlationID uuid.UUID, teamSlug slug.Slug, reconciler ReconcilerName, errorMessage string) error
	SetReconcilerStateForTeam(ctx context.Context, reconciler ReconcilerName, teamSlug slug.Slug, state []byte) error
	SetSessionExpires(ctx context.Context, expires pgtype.Timestamptz, iD uuid.UUID) (*Session, error)
	SetSlackAlertsChannel(ctx context.Context, teamSlug slug.Slug, environment string, channelName string) error
	// SpecificResourceUtilizationForApp will return resource utilization for an app at a specific timestamp.
	SpecificResourceUtilizationForApp(ctx context.Context, environment string, teamSlug slug.Slug, app string, resourceType ResourceType, timestamp pgtype.Timestamptz) (*SpecificResourceUtilizationForAppRow, error)
	// SpecificResourceUtilizationForTeam will return resource utilization for a team at a specific timestamp. Applications
	// with a usage greater than request will be ignored.
	SpecificResourceUtilizationForTeam(ctx context.Context, teamSlug slug.Slug, resourceType ResourceType, timestamp pgtype.Timestamptz) (*SpecificResourceUtilizationForTeamRow, error)
	TeamExists(ctx context.Context, argSlug slug.Slug) (bool, error)
	UpdateTeam(ctx context.Context, purpose *string, slackChannel *string, slug slug.Slug) (*Team, error)
	UpdateUser(ctx context.Context, name string, externalID string, iD uuid.UUID, email string) (*User, error)
	VulnerabilityMetricsUpsert(ctx context.Context, arg []VulnerabilityMetricsUpsertParams) *VulnerabilityMetricsUpsertBatchResults
}

var _ Querier = (*Queries)(nil)
