// Code generated by sqlc. DO NOT EDIT.

package gensql

import (
	"context"

	"github.com/google/uuid"
	"github.com/nais/api/internal/slug"
)

type Querier interface {
	AssignGlobalRoleToServiceAccount(ctx context.Context, arg AssignGlobalRoleToServiceAccountParams) error
	AssignGlobalRoleToUser(ctx context.Context, arg AssignGlobalRoleToUserParams) error
	AssignTeamRoleToServiceAccount(ctx context.Context, arg AssignTeamRoleToServiceAccountParams) error
	AssignTeamRoleToUser(ctx context.Context, arg AssignTeamRoleToUserParams) error
	CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) error
	CreateServiceAccount(ctx context.Context, name string) (*ServiceAccount, error)
	CreateSession(ctx context.Context, arg CreateSessionParams) (*Session, error)
	CreateUser(ctx context.Context, arg CreateUserParams) (*User, error)
	CreateUsersyncRun(ctx context.Context, arg CreateUsersyncRunParams) error
	DeleteAllEnvironments(ctx context.Context) error
	DeleteServiceAccount(ctx context.Context, id uuid.UUID) error
	DeleteSession(ctx context.Context, id uuid.UUID) error
	// DeleteTeam deletes a team from the main team table. The team must have an already confirmed delete key for this to succeed.
	DeleteTeam(ctx context.Context, argSlug slug.Slug) error
	DeleteUser(ctx context.Context, id uuid.UUID) error
	// GetAllTeamMembers returns all team members of a non-deleted team.
	GetAllTeamMembers(ctx context.Context, teamSlug *slug.Slug) ([]*User, error)
	// GetAllTeamSlugs returns all team slugs in ascending order, excluding deleted teams.
	GetAllTeamSlugs(ctx context.Context) ([]slug.Slug, error)
	GetAllUserRoles(ctx context.Context) ([]*UserRole, error)
	GetServiceAccountByApiKey(ctx context.Context, apiKey string) (*ServiceAccount, error)
	GetServiceAccountByName(ctx context.Context, name string) (*ServiceAccount, error)
	GetServiceAccountRoles(ctx context.Context, serviceAccountID uuid.UUID) ([]*ServiceAccountRole, error)
	GetServiceAccounts(ctx context.Context) ([]*ServiceAccount, error)
	GetServiceAccountsByIDs(ctx context.Context, ids []uuid.UUID) ([]*ServiceAccount, error)
	GetSessionByID(ctx context.Context, id uuid.UUID) (*Session, error)
	// GetTeamBySlug returns a team by its slug, excluding deleted teams.
	GetTeamBySlug(ctx context.Context, argSlug slug.Slug) (*Team, error)
	// GetTeamEnvironments returns a slice of team environments, excluding deleted teams.
	GetTeamEnvironments(ctx context.Context, arg GetTeamEnvironmentsParams) ([]*TeamAllEnvironment, error)
	// GetTeamEnvironmentsBySlugsAndEnvNames returns a slice of team environments for a list of teams/envs, excluding
	// deleted teams.
	// Input is two arrays of equal length, one for slugs and one for names
	GetTeamEnvironmentsBySlugsAndEnvNames(ctx context.Context, arg GetTeamEnvironmentsBySlugsAndEnvNamesParams) ([]*TeamAllEnvironment, error)
	// GetTeamEnvironmentsCount returns the total number of team environments, excluding deleted teams.
	GetTeamEnvironmentsCount(ctx context.Context, teamSlug slug.Slug) (int64, error)
	// GetTeamMember returns a specific team member of a non-deleted team.
	GetTeamMember(ctx context.Context, arg GetTeamMemberParams) (*User, error)
	// GetTeamMembers returns a slice of team members of a non-deleted team.
	GetTeamMembers(ctx context.Context, arg GetTeamMembersParams) ([]*User, error)
	// GetTeamMembersCount returns the total number of team members of a non-deleted team.
	GetTeamMembersCount(ctx context.Context, teamSlug *slug.Slug) (int64, error)
	// GetTeams returns a slice of teams, excluding deleted teams.
	GetTeams(ctx context.Context, arg GetTeamsParams) ([]*Team, error)
	// GetTeamsBySlugs returns a slice of teams by their slugs, excluding deleted teams.
	GetTeamsBySlugs(ctx context.Context, slugs []slug.Slug) ([]*Team, error)
	// GetTeamsCount returns the total number or teams, excluding deleted teams.
	GetTeamsCount(ctx context.Context) (int64, error)
	GetUserByEmail(ctx context.Context, email string) (*User, error)
	GetUserByExternalID(ctx context.Context, externalID string) (*User, error)
	GetUserByID(ctx context.Context, id uuid.UUID) (*User, error)
	GetUserRoles(ctx context.Context, userID uuid.UUID) ([]*UserRole, error)
	GetUserRolesForUsers(ctx context.Context, userIds []uuid.UUID) ([]*GetUserRolesForUsersRow, error)
	GetUserTeams(ctx context.Context, userID uuid.UUID) ([]*GetUserTeamsRow, error)
	GetUserTeamsCount(ctx context.Context, userID uuid.UUID) (int64, error)
	GetUserTeamsPaginated(ctx context.Context, arg GetUserTeamsPaginatedParams) ([]*GetUserTeamsPaginatedRow, error)
	GetUsers(ctx context.Context, arg GetUsersParams) ([]*User, error)
	GetUsersByIDs(ctx context.Context, ids []uuid.UUID) ([]*User, error)
	GetUsersCount(ctx context.Context) (int64, error)
	GetUsersWithGloballyAssignedRole(ctx context.Context, roleName RoleName) ([]*User, error)
	GetUsersyncRuns(ctx context.Context, arg GetUsersyncRunsParams) ([]*UsersyncRun, error)
	GetUsersyncRunsCount(ctx context.Context) (int64, error)
	InsertEnvironment(ctx context.Context, arg InsertEnvironmentParams) error
	RemoveAllServiceAccountRoles(ctx context.Context, serviceAccountID uuid.UUID) error
	RemoveApiKeysFromServiceAccount(ctx context.Context, serviceAccountID uuid.UUID) error
	RevokeGlobalUserRole(ctx context.Context, arg RevokeGlobalUserRoleParams) error
	// SetLastSuccessfulSyncForTeam sets the last successful sync time for a non-deleted team.
	SetLastSuccessfulSyncForTeam(ctx context.Context, argSlug slug.Slug) error
	SetSessionExpires(ctx context.Context, arg SetSessionExpiresParams) (*Session, error)
	SetTeamDeleteKeyConfirmedAt(ctx context.Context, argSlug slug.Slug) error
	// TeamExists checks if a team exists. Deleted teams are not considered.
	TeamExists(ctx context.Context, argSlug slug.Slug) (bool, error)
	// UpdateTeamExternalReferences updates the external references of a non-deleted team.
	UpdateTeamExternalReferences(ctx context.Context, arg UpdateTeamExternalReferencesParams) (*Team, error)
	UpdateUser(ctx context.Context, arg UpdateUserParams) (*User, error)
	// UpsertTeamEnvironment creates or updates a team environment.
	UpsertTeamEnvironment(ctx context.Context, arg UpsertTeamEnvironmentParams) (*TeamEnvironment, error)
}

var _ Querier = (*Queries)(nil)
