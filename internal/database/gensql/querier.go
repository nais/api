// Code generated by sqlc. DO NOT EDIT.

package gensql

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/nais/api/internal/slug"
)

type Querier interface {
	AddReconcilerOptOut(ctx context.Context, arg AddReconcilerOptOutParams) error
	AddTeamRepository(ctx context.Context, arg AddTeamRepositoryParams) error
	AssignGlobalRoleToServiceAccount(ctx context.Context, arg AssignGlobalRoleToServiceAccountParams) error
	AssignGlobalRoleToUser(ctx context.Context, arg AssignGlobalRoleToUserParams) error
	AssignTeamRoleToServiceAccount(ctx context.Context, arg AssignTeamRoleToServiceAccountParams) error
	AssignTeamRoleToUser(ctx context.Context, arg AssignTeamRoleToUserParams) error
	ClearReconcilerErrorsForTeam(ctx context.Context, arg ClearReconcilerErrorsForTeamParams) error
	ConfigureReconciler(ctx context.Context, arg ConfigureReconcilerParams) error
	CostForInstance(ctx context.Context, arg CostForInstanceParams) (float32, error)
	CostForTeam(ctx context.Context, arg CostForTeamParams) (float32, error)
	// CostUpsert will insert or update a cost record. If there is a conflict on the daily_cost_key constrant, the
	// daily_cost column will be updated.
	CostUpsert(ctx context.Context, arg []CostUpsertParams) *CostUpsertBatchResults
	CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) error
	CreateAuditEvent(ctx context.Context, arg CreateAuditEventParams) error
	CreateAuditLog(ctx context.Context, arg CreateAuditLogParams) error
	CreateServiceAccount(ctx context.Context, name string) (*ServiceAccount, error)
	CreateSession(ctx context.Context, arg CreateSessionParams) (*Session, error)
	CreateUser(ctx context.Context, arg CreateUserParams) (*User, error)
	CreateUsersyncRun(ctx context.Context, arg CreateUsersyncRunParams) error
	CurrentSqlInstancesCostForTeam(ctx context.Context, arg CurrentSqlInstancesCostForTeamParams) (float32, error)
	// DailyCostForApp will fetch the daily cost for a specific team app in a specific environment, across all cost types
	// in a date range.
	DailyCostForApp(ctx context.Context, arg DailyCostForAppParams) ([]*Cost, error)
	// DailyCostForTeam will fetch the daily cost for a specific team across all apps and envs in a date range.
	DailyCostForTeam(ctx context.Context, arg DailyCostForTeamParams) ([]*Cost, error)
	// DailyEnvCostForTeam will fetch the daily cost for a specific team and environment across all apps in a date range.
	DailyEnvCostForTeam(ctx context.Context, arg DailyEnvCostForTeamParams) ([]*DailyEnvCostForTeamRow, error)
	DeleteAllEnvironments(ctx context.Context) error
	DeleteReconcilerConfig(ctx context.Context, arg DeleteReconcilerConfigParams) error
	DeleteReconcilerStateForTeam(ctx context.Context, arg DeleteReconcilerStateForTeamParams) error
	DeleteServiceAccount(ctx context.Context, id uuid.UUID) error
	DeleteSession(ctx context.Context, id uuid.UUID) error
	// DeleteTeam deletes a team from the main team table. The team must have an already confirmed delete key for this to succeed.
	DeleteTeam(ctx context.Context, argSlug slug.Slug) error
	DeleteUser(ctx context.Context, id uuid.UUID) error
	DisableReconciler(ctx context.Context, name string) (*Reconciler, error)
	EnableReconciler(ctx context.Context, name string) (*Reconciler, error)
	// GetAllTeamMembers returns all team members of a non-deleted team.
	GetAllTeamMembers(ctx context.Context, teamSlug *slug.Slug) ([]*User, error)
	// GetAllTeamSlugs returns all team slugs in ascending order, excluding deleted teams.
	GetAllTeamSlugs(ctx context.Context) ([]slug.Slug, error)
	GetAllUserRoles(ctx context.Context) ([]*UserRole, error)
	GetAuditEventsCountForTeam(ctx context.Context, team *slug.Slug) (int64, error)
	GetAuditEventsCountForTeamByResource(ctx context.Context, arg GetAuditEventsCountForTeamByResourceParams) (int64, error)
	GetAuditEventsForTeam(ctx context.Context, arg GetAuditEventsForTeamParams) ([]*AuditEvent, error)
	GetAuditEventsForTeamByResource(ctx context.Context, arg GetAuditEventsForTeamByResourceParams) ([]*AuditEvent, error)
	GetAuditLogsForCorrelationID(ctx context.Context, arg GetAuditLogsForCorrelationIDParams) ([]*AuditLog, error)
	GetAuditLogsForCorrelationIDCount(ctx context.Context, correlationID uuid.UUID) (int64, error)
	GetAuditLogsForReconciler(ctx context.Context, arg GetAuditLogsForReconcilerParams) ([]*AuditLog, error)
	GetAuditLogsForReconcilerCount(ctx context.Context, targetIdentifier string) (int64, error)
	GetAuditLogsForTeam(ctx context.Context, arg GetAuditLogsForTeamParams) ([]*AuditLog, error)
	GetAuditLogsForTeamCount(ctx context.Context, targetIdentifier string) (int64, error)
	GetEnabledReconcilers(ctx context.Context) ([]*Reconciler, error)
	GetReconciler(ctx context.Context, name string) (*Reconciler, error)
	GetReconcilerConfig(ctx context.Context, arg GetReconcilerConfigParams) ([]*GetReconcilerConfigRow, error)
	GetReconcilerErrors(ctx context.Context, arg GetReconcilerErrorsParams) ([]*GetReconcilerErrorsRow, error)
	GetReconcilerErrorsCount(ctx context.Context) (int64, error)
	GetReconcilerState(ctx context.Context, reconcilerName string) ([]*GetReconcilerStateRow, error)
	GetReconcilerStateForTeam(ctx context.Context, arg GetReconcilerStateForTeamParams) (*ReconcilerState, error)
	GetReconcilers(ctx context.Context, arg GetReconcilersParams) ([]*Reconciler, error)
	GetReconcilersCount(ctx context.Context) (int64, error)
	GetServiceAccountByApiKey(ctx context.Context, apiKey string) (*ServiceAccount, error)
	GetServiceAccountByName(ctx context.Context, name string) (*ServiceAccount, error)
	GetServiceAccountRoles(ctx context.Context, serviceAccountID uuid.UUID) ([]*ServiceAccountRole, error)
	GetServiceAccounts(ctx context.Context) ([]*ServiceAccount, error)
	GetServiceAccountsByIDs(ctx context.Context, ids []uuid.UUID) ([]*ServiceAccount, error)
	GetSessionByID(ctx context.Context, id uuid.UUID) (*Session, error)
	// GetTeamBySlug returns a team by its slug, excluding deleted teams.
	GetTeamBySlug(ctx context.Context, argSlug slug.Slug) (*Team, error)
	// GetTeamEnvironments returns a slice of team environments, excluding deleted teams.
	GetTeamEnvironments(ctx context.Context, arg GetTeamEnvironmentsParams) ([]*TeamAllEnvironment, error)
	// GetTeamEnvironmentsBySlugsAndEnvNames returns a slice of team environments for a list of teams/envs, excluding
	// deleted teams.
	// Input is two arrays of equal length, one for slugs and one for names
	GetTeamEnvironmentsBySlugsAndEnvNames(ctx context.Context, arg GetTeamEnvironmentsBySlugsAndEnvNamesParams) ([]*TeamAllEnvironment, error)
	// GetTeamEnvironmentsCount returns the total number of team environments, excluding deleted teams.
	GetTeamEnvironmentsCount(ctx context.Context, teamSlug slug.Slug) (int64, error)
	// GetTeamMember returns a specific team member of a non-deleted team.
	GetTeamMember(ctx context.Context, arg GetTeamMemberParams) (*User, error)
	// GetTeamMemberOptOuts returns a slice of team member opt-outs.
	GetTeamMemberOptOuts(ctx context.Context, arg GetTeamMemberOptOutsParams) ([]*GetTeamMemberOptOutsRow, error)
	// GetTeamMembers returns a slice of team members of a non-deleted team.
	GetTeamMembers(ctx context.Context, arg GetTeamMembersParams) ([]*User, error)
	// GetTeamMembersCount returns the total number of team members of a non-deleted team.
	GetTeamMembersCount(ctx context.Context, teamSlug *slug.Slug) (int64, error)
	GetTeamReconcilerErrors(ctx context.Context, teamSlug slug.Slug) ([]*ReconcilerError, error)
	GetTeamRepositories(ctx context.Context, teamSlug slug.Slug) ([]string, error)
	// GetTeams returns a slice of teams, excluding deleted teams.
	GetTeams(ctx context.Context, arg GetTeamsParams) ([]*Team, error)
	// GetTeamsBySlugs returns a slice of teams by their slugs, excluding deleted teams.
	GetTeamsBySlugs(ctx context.Context, slugs []slug.Slug) ([]*Team, error)
	// GetTeamsCount returns the total number or teams, excluding deleted teams.
	GetTeamsCount(ctx context.Context) (int64, error)
	GetUserByEmail(ctx context.Context, email string) (*User, error)
	GetUserByExternalID(ctx context.Context, externalID string) (*User, error)
	GetUserByID(ctx context.Context, id uuid.UUID) (*User, error)
	GetUserRoles(ctx context.Context, userID uuid.UUID) ([]*UserRole, error)
	GetUserRolesForUsers(ctx context.Context, userIds []uuid.UUID) ([]*GetUserRolesForUsersRow, error)
	GetUserTeams(ctx context.Context, userID uuid.UUID) ([]*GetUserTeamsRow, error)
	GetUserTeamsCount(ctx context.Context, userID uuid.UUID) (int64, error)
	GetUserTeamsPaginated(ctx context.Context, arg GetUserTeamsPaginatedParams) ([]*GetUserTeamsPaginatedRow, error)
	GetUsers(ctx context.Context, arg GetUsersParams) ([]*User, error)
	GetUsersByIDs(ctx context.Context, ids []uuid.UUID) ([]*User, error)
	GetUsersCount(ctx context.Context) (int64, error)
	GetUsersWithGloballyAssignedRole(ctx context.Context, roleName RoleName) ([]*User, error)
	GetUsersyncRuns(ctx context.Context, arg GetUsersyncRunsParams) ([]*UsersyncRun, error)
	GetUsersyncRunsCount(ctx context.Context) (int64, error)
	InsertEnvironment(ctx context.Context, arg InsertEnvironmentParams) error
	IsTeamRepository(ctx context.Context, arg IsTeamRepositoryParams) (bool, error)
	// LastCostDate will return the last date that has a cost.
	LastCostDate(ctx context.Context) (pgtype.Date, error)
	MonthlyCostForApp(ctx context.Context, arg MonthlyCostForAppParams) ([]*MonthlyCostForAppRow, error)
	MonthlyCostForTeam(ctx context.Context, teamSlug slug.Slug) ([]*CostMonthlyTeam, error)
	RefreshCostMonthlyTeam(ctx context.Context) error
	RemoveAllServiceAccountRoles(ctx context.Context, serviceAccountID uuid.UUID) error
	RemoveApiKeysFromServiceAccount(ctx context.Context, serviceAccountID uuid.UUID) error
	RemoveReconcilerOptOut(ctx context.Context, arg RemoveReconcilerOptOutParams) error
	RemoveTeamRepository(ctx context.Context, arg RemoveTeamRepositoryParams) error
	// RemoveUserFromTeam removes a user from a team.
	RemoveUserFromTeam(ctx context.Context, arg RemoveUserFromTeamParams) error
	ResetReconcilerConfig(ctx context.Context, reconcilerName string) error
	RevokeGlobalUserRole(ctx context.Context, arg RevokeGlobalUserRoleParams) error
	// SetLastSuccessfulSyncForTeam sets the last successful sync time for a non-deleted team.
	SetLastSuccessfulSyncForTeam(ctx context.Context, argSlug slug.Slug) error
	SetReconcilerErrorForTeam(ctx context.Context, arg SetReconcilerErrorForTeamParams) error
	SetSessionExpires(ctx context.Context, arg SetSessionExpiresParams) (*Session, error)
	SetTeamDeleteKeyConfirmedAt(ctx context.Context, argSlug slug.Slug) error
	// TeamExists checks if a team exists. Deleted teams are not considered.
	TeamExists(ctx context.Context, argSlug slug.Slug) (bool, error)
	// UpdateTeam updates the purpose and slack channel of a non-deleted team.
	UpdateTeam(ctx context.Context, arg UpdateTeamParams) (*Team, error)
	// UpdateTeamExternalReferences updates the external references of a non-deleted team.
	UpdateTeamExternalReferences(ctx context.Context, arg UpdateTeamExternalReferencesParams) (*Team, error)
	UpdateUser(ctx context.Context, arg UpdateUserParams) (*User, error)
	UpsertReconciler(ctx context.Context, arg UpsertReconcilerParams) (*Reconciler, error)
	UpsertReconcilerConfig(ctx context.Context, arg UpsertReconcilerConfigParams) error
	UpsertReconcilerState(ctx context.Context, arg UpsertReconcilerStateParams) (*ReconcilerState, error)
	// UpsertTeamEnvironment creates or updates a team environment.
	UpsertTeamEnvironment(ctx context.Context, arg UpsertTeamEnvironmentParams) (*TeamEnvironment, error)
}

var _ Querier = (*Queries)(nil)
