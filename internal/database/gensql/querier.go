// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package gensql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	AddReconcilerOptOut(ctx context.Context, teamSlug string, userID pgtype.UUID, reconcilerName ReconcilerName) error
	AssignGlobalRoleToServiceAccount(ctx context.Context, serviceAccountID pgtype.UUID, roleName RoleName) error
	AssignGlobalRoleToUser(ctx context.Context, userID pgtype.UUID, roleName RoleName) error
	AssignTeamRoleToServiceAccount(ctx context.Context, serviceAccountID pgtype.UUID, roleName RoleName, targetTeamSlug *string) error
	AssignTeamRoleToUser(ctx context.Context, userID pgtype.UUID, roleName RoleName, targetTeamSlug *string) error
	// AverageResourceUtilizationForTeam will return the average resource utilization for a team for a week.
	AverageResourceUtilizationForTeam(ctx context.Context, teamSlug string, resourceType ResourceType, timestamptimestamptz1WeekpgCataloginterval pgtype.Timestamptz, timestamp pgtype.Timestamptz) (*AverageResourceUtilizationForTeamRow, error)
	ClearReconcilerErrorsForTeam(ctx context.Context, teamSlug string, reconciler ReconcilerName) error
	ConfigureReconciler(ctx context.Context, value string, reconcilerName ReconcilerName, key ReconcilerConfigKey) error
	ConfirmTeamDeleteKey(ctx context.Context, key pgtype.UUID) error
	// CostUpsert will insert or update a cost record. If there is a conflict on the daily_cost_key constrant, the
	// daily_cost column will be updated.
	CostUpsert(ctx context.Context, arg []CostUpsertParams) *CostUpsertBatchResults
	CreateAPIKey(ctx context.Context, apiKey string, serviceAccountID pgtype.UUID) error
	CreateAuditLog(ctx context.Context, correlationID pgtype.UUID, actor *string, componentName string, targetType string, targetIdentifier string, action string, message string) error
	CreateRepositoryAuthorization(ctx context.Context, teamSlug string, githubRepository string, repositoryAuthorization RepositoryAuthorizationEnum) error
	CreateServiceAccount(ctx context.Context, name string) (*ServiceAccount, error)
	CreateSession(ctx context.Context, userID pgtype.UUID, expires pgtype.Timestamptz) (*Session, error)
	CreateTeam(ctx context.Context, slug string, purpose string, slackChannel string) (*Team, error)
	CreateTeamDeleteKey(ctx context.Context, teamSlug string, createdBy pgtype.UUID) (*TeamDeleteKey, error)
	CreateUser(ctx context.Context, name string, email string, externalID string) (*User, error)
	// DailyCostForApp will fetch the daily cost for a specific team app in a specific environment, across all cost types
	// in a date range.
	DailyCostForApp(ctx context.Context, fromDate pgtype.Date, toDate pgtype.Date, environment *string, teamSlug *string, app string) ([]*Cost, error)
	// DailyCostForTeam will fetch the daily cost for a specific team across all apps and envs in a date range.
	DailyCostForTeam(ctx context.Context, fromDate pgtype.Date, toDate pgtype.Date, teamSlug *string) ([]*Cost, error)
	// DailyEnvCostForTeam will fetch the daily cost for a specific team and env across all apps in a date range.
	DailyEnvCostForTeam(ctx context.Context, fromDate pgtype.Date, toDate pgtype.Date, environment *string, teamSlug *string) ([]*DailyEnvCostForTeamRow, error)
	DangerousGetReconcilerConfigValues(ctx context.Context, reconcilerName ReconcilerName) ([]*DangerousGetReconcilerConfigValuesRow, error)
	DeleteServiceAccount(ctx context.Context, id pgtype.UUID) error
	DeleteSession(ctx context.Context, id pgtype.UUID) error
	DeleteTeam(ctx context.Context, slug string) error
	DeleteUser(ctx context.Context, id pgtype.UUID) error
	DisableReconciler(ctx context.Context, name ReconcilerName) (*Reconciler, error)
	EnableReconciler(ctx context.Context, name ReconcilerName) (*Reconciler, error)
	FirstRunComplete(ctx context.Context) error
	GetActiveTeamBySlug(ctx context.Context, slug string) (*Team, error)
	GetActiveTeams(ctx context.Context) ([]*Team, error)
	GetAllTeamMembers(ctx context.Context, teamSlug *string) ([]*User, error)
	GetAllUserRoles(ctx context.Context) ([]*UserRole, error)
	GetAllUsers(ctx context.Context) ([]*User, error)
	GetAuditLogsForCorrelationID(ctx context.Context, correlationID pgtype.UUID, offset int32, limit int32) ([]*AuditLog, error)
	GetAuditLogsForCorrelationIDCount(ctx context.Context, correlationID pgtype.UUID) (int64, error)
	GetAuditLogsForReconciler(ctx context.Context, targetIdentifier string, offset int32, limit int32) ([]*AuditLog, error)
	GetAuditLogsForReconcilerCount(ctx context.Context, targetIdentifier string) (int64, error)
	GetAuditLogsForTeam(ctx context.Context, targetIdentifier string, offset int32, limit int32) ([]*AuditLog, error)
	GetAuditLogsForTeamCount(ctx context.Context, targetIdentifier string) (int64, error)
	GetEnabledReconcilers(ctx context.Context) ([]*Reconciler, error)
	GetReconciler(ctx context.Context, name ReconcilerName) (*Reconciler, error)
	GetReconcilerConfig(ctx context.Context, reconcilerName ReconcilerName) ([]*GetReconcilerConfigRow, error)
	GetReconcilerStateForTeam(ctx context.Context, reconcilerName ReconcilerName, teamSlug string) (*ReconcilerState, error)
	GetReconcilers(ctx context.Context) ([]*Reconciler, error)
	GetRepositoryAuthorizations(ctx context.Context, teamSlug string, githubRepository string) ([]RepositoryAuthorizationEnum, error)
	GetServiceAccountByApiKey(ctx context.Context, apiKey string) (*ServiceAccount, error)
	GetServiceAccountByName(ctx context.Context, name string) (*ServiceAccount, error)
	GetServiceAccountRoles(ctx context.Context, serviceAccountID pgtype.UUID) ([]*ServiceAccountRole, error)
	GetServiceAccounts(ctx context.Context) ([]*ServiceAccount, error)
	GetSessionByID(ctx context.Context, id pgtype.UUID) (*Session, error)
	GetSlackAlertsChannels(ctx context.Context, teamSlug string) ([]*SlackAlertsChannel, error)
	GetTeamBySlug(ctx context.Context, slug string) (*Team, error)
	GetTeamDeleteKey(ctx context.Context, key pgtype.UUID) (*TeamDeleteKey, error)
	GetTeamMember(ctx context.Context, teamSlug *string, userID pgtype.UUID) (*User, error)
	GetTeamMemberOptOuts(ctx context.Context, userID pgtype.UUID, teamSlug string) ([]*GetTeamMemberOptOutsRow, error)
	GetTeamMembers(ctx context.Context, teamSlug *string, offset int32, limit int32) ([]*User, error)
	GetTeamMembersCount(ctx context.Context, teamSlug *string) (int64, error)
	GetTeamMembersForReconciler(ctx context.Context, teamSlug *string, reconcilerName ReconcilerName) ([]*User, error)
	GetTeamReconcilerErrors(ctx context.Context, teamSlug string) ([]*ReconcilerError, error)
	GetTeams(ctx context.Context) ([]*Team, error)
	GetTeamsCount(ctx context.Context) (int64, error)
	GetTeamsPaginated(ctx context.Context, offset int32, limit int32) ([]*Team, error)
	GetTeamsWithPermissionInGitHubRepo(ctx context.Context, stateMatcher []byte, offset int32, limit int32) ([]*Team, error)
	GetTeamsWithPermissionInGitHubRepoCount(ctx context.Context, stateMatcher []byte) (int64, error)
	GetUserByEmail(ctx context.Context, email string) (*User, error)
	GetUserByExternalID(ctx context.Context, externalID string) (*User, error)
	GetUserByID(ctx context.Context, id pgtype.UUID) (*User, error)
	GetUserRoles(ctx context.Context, userID pgtype.UUID) ([]*UserRole, error)
	GetUserTeams(ctx context.Context, userID pgtype.UUID, limit int32, offset int32) ([]*GetUserTeamsRow, error)
	GetUserTeamsCount(ctx context.Context, userID pgtype.UUID) (int64, error)
	GetUsers(ctx context.Context, limit int32, offset int32) ([]*User, error)
	GetUsersCount(ctx context.Context) (int64, error)
	GetUsersWithGloballyAssignedRole(ctx context.Context, roleName RoleName) ([]*User, error)
	IsFirstRun(ctx context.Context) (bool, error)
	// LastCostDate will return the last date that has a cost.
	LastCostDate(ctx context.Context) (pgtype.Date, error)
	// MaxResourceUtilizationDate will return the max date for resource utilization records.
	MaxResourceUtilizationDate(ctx context.Context) (pgtype.Timestamptz, error)
	MonthlyCostForApp(ctx context.Context, teamSlug *string, app string, environment *string) ([]*MonthlyCostForAppRow, error)
	MonthlyCostForTeam(ctx context.Context, teamSlug *string) ([]*MonthlyCostForTeamRow, error)
	RemoveAllServiceAccountRoles(ctx context.Context, serviceAccountID pgtype.UUID) error
	RemoveApiKeysFromServiceAccount(ctx context.Context, serviceAccountID pgtype.UUID) error
	RemoveReconcilerOptOut(ctx context.Context, teamSlug string, userID pgtype.UUID, reconcilerName ReconcilerName) error
	RemoveReconcilerStateForTeam(ctx context.Context, reconcilerName ReconcilerName, teamSlug string) error
	RemoveRepositoryAuthorization(ctx context.Context, teamSlug string, githubRepository string, repositoryAuthorization RepositoryAuthorizationEnum) error
	RemoveSlackAlertsChannel(ctx context.Context, teamSlug string, environment string) error
	RemoveUserFromTeam(ctx context.Context, userID pgtype.UUID, teamSlug *string) error
	ResetReconcilerConfig(ctx context.Context, reconcilerName ReconcilerName) error
	// ResourceUtilizationForApp will return resource utilization records for a given app.
	ResourceUtilizationForApp(ctx context.Context, environment string, teamSlug string, app string, resourceType ResourceType, start pgtype.Timestamptz, end pgtype.Timestamptz) ([]*ResourceUtilizationMetric, error)
	// ResourceUtilizationForTeam will return resource utilization records for a given team.
	ResourceUtilizationForTeam(ctx context.Context, environment string, teamSlug string, resourceType ResourceType, start pgtype.Timestamptz, end pgtype.Timestamptz) ([]*ResourceUtilizationForTeamRow, error)
	// ResourceUtilizationOverageForTeam will return overage records for a given team, ordered by overage descending.
	ResourceUtilizationOverageForTeam(ctx context.Context, teamSlug string, timestamp pgtype.Timestamptz, resourceType ResourceType) ([]*ResourceUtilizationOverageForTeamRow, error)
	// ResourceUtilizationRangeForApp will return the min and max timestamps for a specific app.
	ResourceUtilizationRangeForApp(ctx context.Context, environment string, teamSlug string, app string) (*ResourceUtilizationRangeForAppRow, error)
	// ResourceUtilizationRangeForTeam will return the min and max timestamps for a specific team.
	ResourceUtilizationRangeForTeam(ctx context.Context, teamSlug string) (*ResourceUtilizationRangeForTeamRow, error)
	// ResourceUtilizationUpsert will insert or update resource utilization records.
	ResourceUtilizationUpsert(ctx context.Context, arg []ResourceUtilizationUpsertParams) *ResourceUtilizationUpsertBatchResults
	RevokeGlobalUserRole(ctx context.Context, userID pgtype.UUID, roleName RoleName) error
	SetLastSuccessfulSyncForTeam(ctx context.Context, slug string) error
	SetReconcilerErrorForTeam(ctx context.Context, correlationID pgtype.UUID, teamSlug string, reconciler ReconcilerName, errorMessage string) error
	SetReconcilerStateForTeam(ctx context.Context, reconciler ReconcilerName, teamSlug string, state []byte) error
	SetSessionExpires(ctx context.Context, expires pgtype.Timestamptz, iD pgtype.UUID) (*Session, error)
	SetSlackAlertsChannel(ctx context.Context, teamSlug string, environment string, channelName string) error
	// SpecificResourceUtilizationForApp will return resource utilization for an app at a specific timestamp.
	SpecificResourceUtilizationForApp(ctx context.Context, environment string, teamSlug string, app string, resourceType ResourceType, timestamp pgtype.Timestamptz) (*SpecificResourceUtilizationForAppRow, error)
	// SpecificResourceUtilizationForTeam will return resource utilization for a team at a specific timestamp. Applications
	// with a usage greater than request will be ignored.
	SpecificResourceUtilizationForTeam(ctx context.Context, teamSlug string, resourceType ResourceType, timestamp pgtype.Timestamptz) (*SpecificResourceUtilizationForTeamRow, error)
	UpdateTeam(ctx context.Context, purpose *string, slackChannel *string, slug string) (*Team, error)
	UpdateUser(ctx context.Context, name string, externalID string, iD pgtype.UUID, email string) (*User, error)
}

var _ Querier = (*Queries)(nil)
