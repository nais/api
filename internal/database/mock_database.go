// Code generated by mockery. DO NOT EDIT.

package database

import (
	context "context"

	authz "github.com/nais/api/internal/auth/authz"

	gensql "github.com/nais/api/internal/database/gensql"

	mock "github.com/stretchr/testify/mock"

	pgxpool "github.com/jackc/pgx/v5/pgxpool"

	slug "github.com/nais/api/internal/slug"

	uuid "github.com/google/uuid"
)

// MockDatabase is an autogenerated mock type for the Database type
type MockDatabase struct {
	mock.Mock
}

type MockDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabase) EXPECT() *MockDatabase_Expecter {
	return &MockDatabase_Expecter{mock: &_m.Mock}
}

// AssignGlobalRoleToServiceAccount provides a mock function with given fields: ctx, serviceAccountID, roleName
func (_m *MockDatabase) AssignGlobalRoleToServiceAccount(ctx context.Context, serviceAccountID uuid.UUID, roleName gensql.RoleName) error {
	ret := _m.Called(ctx, serviceAccountID, roleName)

	if len(ret) == 0 {
		panic("no return value specified for AssignGlobalRoleToServiceAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, gensql.RoleName) error); ok {
		r0 = rf(ctx, serviceAccountID, roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_AssignGlobalRoleToServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignGlobalRoleToServiceAccount'
type MockDatabase_AssignGlobalRoleToServiceAccount_Call struct {
	*mock.Call
}

// AssignGlobalRoleToServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceAccountID uuid.UUID
//   - roleName gensql.RoleName
func (_e *MockDatabase_Expecter) AssignGlobalRoleToServiceAccount(ctx interface{}, serviceAccountID interface{}, roleName interface{}) *MockDatabase_AssignGlobalRoleToServiceAccount_Call {
	return &MockDatabase_AssignGlobalRoleToServiceAccount_Call{Call: _e.mock.On("AssignGlobalRoleToServiceAccount", ctx, serviceAccountID, roleName)}
}

func (_c *MockDatabase_AssignGlobalRoleToServiceAccount_Call) Run(run func(ctx context.Context, serviceAccountID uuid.UUID, roleName gensql.RoleName)) *MockDatabase_AssignGlobalRoleToServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(gensql.RoleName))
	})
	return _c
}

func (_c *MockDatabase_AssignGlobalRoleToServiceAccount_Call) Return(_a0 error) *MockDatabase_AssignGlobalRoleToServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_AssignGlobalRoleToServiceAccount_Call) RunAndReturn(run func(context.Context, uuid.UUID, gensql.RoleName) error) *MockDatabase_AssignGlobalRoleToServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// AssignGlobalRoleToUser provides a mock function with given fields: ctx, userID, roleName
func (_m *MockDatabase) AssignGlobalRoleToUser(ctx context.Context, userID uuid.UUID, roleName gensql.RoleName) error {
	ret := _m.Called(ctx, userID, roleName)

	if len(ret) == 0 {
		panic("no return value specified for AssignGlobalRoleToUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, gensql.RoleName) error); ok {
		r0 = rf(ctx, userID, roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_AssignGlobalRoleToUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignGlobalRoleToUser'
type MockDatabase_AssignGlobalRoleToUser_Call struct {
	*mock.Call
}

// AssignGlobalRoleToUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - roleName gensql.RoleName
func (_e *MockDatabase_Expecter) AssignGlobalRoleToUser(ctx interface{}, userID interface{}, roleName interface{}) *MockDatabase_AssignGlobalRoleToUser_Call {
	return &MockDatabase_AssignGlobalRoleToUser_Call{Call: _e.mock.On("AssignGlobalRoleToUser", ctx, userID, roleName)}
}

func (_c *MockDatabase_AssignGlobalRoleToUser_Call) Run(run func(ctx context.Context, userID uuid.UUID, roleName gensql.RoleName)) *MockDatabase_AssignGlobalRoleToUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(gensql.RoleName))
	})
	return _c
}

func (_c *MockDatabase_AssignGlobalRoleToUser_Call) Return(_a0 error) *MockDatabase_AssignGlobalRoleToUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_AssignGlobalRoleToUser_Call) RunAndReturn(run func(context.Context, uuid.UUID, gensql.RoleName) error) *MockDatabase_AssignGlobalRoleToUser_Call {
	_c.Call.Return(run)
	return _c
}

// AssignTeamRoleToServiceAccount provides a mock function with given fields: ctx, serviceAccountID, roleName, teamSlug
func (_m *MockDatabase) AssignTeamRoleToServiceAccount(ctx context.Context, serviceAccountID uuid.UUID, roleName gensql.RoleName, teamSlug slug.Slug) error {
	ret := _m.Called(ctx, serviceAccountID, roleName, teamSlug)

	if len(ret) == 0 {
		panic("no return value specified for AssignTeamRoleToServiceAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, gensql.RoleName, slug.Slug) error); ok {
		r0 = rf(ctx, serviceAccountID, roleName, teamSlug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_AssignTeamRoleToServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignTeamRoleToServiceAccount'
type MockDatabase_AssignTeamRoleToServiceAccount_Call struct {
	*mock.Call
}

// AssignTeamRoleToServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceAccountID uuid.UUID
//   - roleName gensql.RoleName
//   - teamSlug slug.Slug
func (_e *MockDatabase_Expecter) AssignTeamRoleToServiceAccount(ctx interface{}, serviceAccountID interface{}, roleName interface{}, teamSlug interface{}) *MockDatabase_AssignTeamRoleToServiceAccount_Call {
	return &MockDatabase_AssignTeamRoleToServiceAccount_Call{Call: _e.mock.On("AssignTeamRoleToServiceAccount", ctx, serviceAccountID, roleName, teamSlug)}
}

func (_c *MockDatabase_AssignTeamRoleToServiceAccount_Call) Run(run func(ctx context.Context, serviceAccountID uuid.UUID, roleName gensql.RoleName, teamSlug slug.Slug)) *MockDatabase_AssignTeamRoleToServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(gensql.RoleName), args[3].(slug.Slug))
	})
	return _c
}

func (_c *MockDatabase_AssignTeamRoleToServiceAccount_Call) Return(_a0 error) *MockDatabase_AssignTeamRoleToServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_AssignTeamRoleToServiceAccount_Call) RunAndReturn(run func(context.Context, uuid.UUID, gensql.RoleName, slug.Slug) error) *MockDatabase_AssignTeamRoleToServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAPIKey provides a mock function with given fields: ctx, apiKey, serviceAccountID
func (_m *MockDatabase) CreateAPIKey(ctx context.Context, apiKey string, serviceAccountID uuid.UUID) error {
	ret := _m.Called(ctx, apiKey, serviceAccountID)

	if len(ret) == 0 {
		panic("no return value specified for CreateAPIKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID) error); ok {
		r0 = rf(ctx, apiKey, serviceAccountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_CreateAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAPIKey'
type MockDatabase_CreateAPIKey_Call struct {
	*mock.Call
}

// CreateAPIKey is a helper method to define mock.On call
//   - ctx context.Context
//   - apiKey string
//   - serviceAccountID uuid.UUID
func (_e *MockDatabase_Expecter) CreateAPIKey(ctx interface{}, apiKey interface{}, serviceAccountID interface{}) *MockDatabase_CreateAPIKey_Call {
	return &MockDatabase_CreateAPIKey_Call{Call: _e.mock.On("CreateAPIKey", ctx, apiKey, serviceAccountID)}
}

func (_c *MockDatabase_CreateAPIKey_Call) Run(run func(ctx context.Context, apiKey string, serviceAccountID uuid.UUID)) *MockDatabase_CreateAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_CreateAPIKey_Call) Return(_a0 error) *MockDatabase_CreateAPIKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_CreateAPIKey_Call) RunAndReturn(run func(context.Context, string, uuid.UUID) error) *MockDatabase_CreateAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceAccount provides a mock function with given fields: ctx, name
func (_m *MockDatabase) CreateServiceAccount(ctx context.Context, name string) (*ServiceAccount, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceAccount")
	}

	var r0 *ServiceAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ServiceAccount, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ServiceAccount); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CreateServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceAccount'
type MockDatabase_CreateServiceAccount_Call struct {
	*mock.Call
}

// CreateServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockDatabase_Expecter) CreateServiceAccount(ctx interface{}, name interface{}) *MockDatabase_CreateServiceAccount_Call {
	return &MockDatabase_CreateServiceAccount_Call{Call: _e.mock.On("CreateServiceAccount", ctx, name)}
}

func (_c *MockDatabase_CreateServiceAccount_Call) Run(run func(ctx context.Context, name string)) *MockDatabase_CreateServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabase_CreateServiceAccount_Call) Return(_a0 *ServiceAccount, _a1 error) *MockDatabase_CreateServiceAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CreateServiceAccount_Call) RunAndReturn(run func(context.Context, string) (*ServiceAccount, error)) *MockDatabase_CreateServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSession provides a mock function with given fields: ctx, userID
func (_m *MockDatabase) CreateSession(ctx context.Context, userID uuid.UUID) (*Session, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 *Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Session, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Session); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type MockDatabase_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockDatabase_Expecter) CreateSession(ctx interface{}, userID interface{}) *MockDatabase_CreateSession_Call {
	return &MockDatabase_CreateSession_Call{Call: _e.mock.On("CreateSession", ctx, userID)}
}

func (_c *MockDatabase_CreateSession_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockDatabase_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_CreateSession_Call) Return(_a0 *Session, _a1 error) *MockDatabase_CreateSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CreateSession_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*Session, error)) *MockDatabase_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, name, email, externalID
func (_m *MockDatabase) CreateUser(ctx context.Context, name string, email string, externalID string) (*User, error) {
	ret := _m.Called(ctx, name, email, externalID)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*User, error)); ok {
		return rf(ctx, name, email, externalID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *User); ok {
		r0 = rf(ctx, name, email, externalID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, name, email, externalID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockDatabase_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - email string
//   - externalID string
func (_e *MockDatabase_Expecter) CreateUser(ctx interface{}, name interface{}, email interface{}, externalID interface{}) *MockDatabase_CreateUser_Call {
	return &MockDatabase_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, name, email, externalID)}
}

func (_c *MockDatabase_CreateUser_Call) Run(run func(ctx context.Context, name string, email string, externalID string)) *MockDatabase_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockDatabase_CreateUser_Call) Return(_a0 *User, _a1 error) *MockDatabase_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CreateUser_Call) RunAndReturn(run func(context.Context, string, string, string) (*User, error)) *MockDatabase_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllEnvironments provides a mock function with given fields: ctx
func (_m *MockDatabase) DeleteAllEnvironments(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllEnvironments")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_DeleteAllEnvironments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllEnvironments'
type MockDatabase_DeleteAllEnvironments_Call struct {
	*mock.Call
}

// DeleteAllEnvironments is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) DeleteAllEnvironments(ctx interface{}) *MockDatabase_DeleteAllEnvironments_Call {
	return &MockDatabase_DeleteAllEnvironments_Call{Call: _e.mock.On("DeleteAllEnvironments", ctx)}
}

func (_c *MockDatabase_DeleteAllEnvironments_Call) Run(run func(ctx context.Context)) *MockDatabase_DeleteAllEnvironments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatabase_DeleteAllEnvironments_Call) Return(_a0 error) *MockDatabase_DeleteAllEnvironments_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_DeleteAllEnvironments_Call) RunAndReturn(run func(context.Context) error) *MockDatabase_DeleteAllEnvironments_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceAccount provides a mock function with given fields: ctx, serviceAccountID
func (_m *MockDatabase) DeleteServiceAccount(ctx context.Context, serviceAccountID uuid.UUID) error {
	ret := _m.Called(ctx, serviceAccountID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, serviceAccountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_DeleteServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceAccount'
type MockDatabase_DeleteServiceAccount_Call struct {
	*mock.Call
}

// DeleteServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceAccountID uuid.UUID
func (_e *MockDatabase_Expecter) DeleteServiceAccount(ctx interface{}, serviceAccountID interface{}) *MockDatabase_DeleteServiceAccount_Call {
	return &MockDatabase_DeleteServiceAccount_Call{Call: _e.mock.On("DeleteServiceAccount", ctx, serviceAccountID)}
}

func (_c *MockDatabase_DeleteServiceAccount_Call) Run(run func(ctx context.Context, serviceAccountID uuid.UUID)) *MockDatabase_DeleteServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_DeleteServiceAccount_Call) Return(_a0 error) *MockDatabase_DeleteServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_DeleteServiceAccount_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockDatabase_DeleteServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSession provides a mock function with given fields: ctx, sessionID
func (_m *MockDatabase) DeleteSession(ctx context.Context, sessionID uuid.UUID) error {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_DeleteSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSession'
type MockDatabase_DeleteSession_Call struct {
	*mock.Call
}

// DeleteSession is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID uuid.UUID
func (_e *MockDatabase_Expecter) DeleteSession(ctx interface{}, sessionID interface{}) *MockDatabase_DeleteSession_Call {
	return &MockDatabase_DeleteSession_Call{Call: _e.mock.On("DeleteSession", ctx, sessionID)}
}

func (_c *MockDatabase_DeleteSession_Call) Run(run func(ctx context.Context, sessionID uuid.UUID)) *MockDatabase_DeleteSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_DeleteSession_Call) Return(_a0 error) *MockDatabase_DeleteSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_DeleteSession_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockDatabase_DeleteSession_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTeam provides a mock function with given fields: ctx, teamSlug
func (_m *MockDatabase) DeleteTeam(ctx context.Context, teamSlug slug.Slug) error {
	ret := _m.Called(ctx, teamSlug)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTeam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) error); ok {
		r0 = rf(ctx, teamSlug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_DeleteTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTeam'
type MockDatabase_DeleteTeam_Call struct {
	*mock.Call
}

// DeleteTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
func (_e *MockDatabase_Expecter) DeleteTeam(ctx interface{}, teamSlug interface{}) *MockDatabase_DeleteTeam_Call {
	return &MockDatabase_DeleteTeam_Call{Call: _e.mock.On("DeleteTeam", ctx, teamSlug)}
}

func (_c *MockDatabase_DeleteTeam_Call) Run(run func(ctx context.Context, teamSlug slug.Slug)) *MockDatabase_DeleteTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug))
	})
	return _c
}

func (_c *MockDatabase_DeleteTeam_Call) Return(_a0 error) *MockDatabase_DeleteTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_DeleteTeam_Call) RunAndReturn(run func(context.Context, slug.Slug) error) *MockDatabase_DeleteTeam_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, userID
func (_m *MockDatabase) DeleteUser(ctx context.Context, userID uuid.UUID) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockDatabase_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockDatabase_Expecter) DeleteUser(ctx interface{}, userID interface{}) *MockDatabase_DeleteUser_Call {
	return &MockDatabase_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, userID)}
}

func (_c *MockDatabase_DeleteUser_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockDatabase_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_DeleteUser_Call) Return(_a0 error) *MockDatabase_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_DeleteUser_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockDatabase_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// ExtendSession provides a mock function with given fields: ctx, sessionID
func (_m *MockDatabase) ExtendSession(ctx context.Context, sessionID uuid.UUID) (*Session, error) {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for ExtendSession")
	}

	var r0 *Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Session, error)); ok {
		return rf(ctx, sessionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Session); ok {
		r0 = rf(ctx, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_ExtendSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtendSession'
type MockDatabase_ExtendSession_Call struct {
	*mock.Call
}

// ExtendSession is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID uuid.UUID
func (_e *MockDatabase_Expecter) ExtendSession(ctx interface{}, sessionID interface{}) *MockDatabase_ExtendSession_Call {
	return &MockDatabase_ExtendSession_Call{Call: _e.mock.On("ExtendSession", ctx, sessionID)}
}

func (_c *MockDatabase_ExtendSession_Call) Run(run func(ctx context.Context, sessionID uuid.UUID)) *MockDatabase_ExtendSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_ExtendSession_Call) Return(_a0 *Session, _a1 error) *MockDatabase_ExtendSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_ExtendSession_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*Session, error)) *MockDatabase_ExtendSession_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTeamMembers provides a mock function with given fields: ctx, teamSlug
func (_m *MockDatabase) GetAllTeamMembers(ctx context.Context, teamSlug slug.Slug) ([]*User, error) {
	ret := _m.Called(ctx, teamSlug)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTeamMembers")
	}

	var r0 []*User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) ([]*User, error)); ok {
		return rf(ctx, teamSlug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) []*User); ok {
		r0 = rf(ctx, teamSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug) error); ok {
		r1 = rf(ctx, teamSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetAllTeamMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTeamMembers'
type MockDatabase_GetAllTeamMembers_Call struct {
	*mock.Call
}

// GetAllTeamMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
func (_e *MockDatabase_Expecter) GetAllTeamMembers(ctx interface{}, teamSlug interface{}) *MockDatabase_GetAllTeamMembers_Call {
	return &MockDatabase_GetAllTeamMembers_Call{Call: _e.mock.On("GetAllTeamMembers", ctx, teamSlug)}
}

func (_c *MockDatabase_GetAllTeamMembers_Call) Run(run func(ctx context.Context, teamSlug slug.Slug)) *MockDatabase_GetAllTeamMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug))
	})
	return _c
}

func (_c *MockDatabase_GetAllTeamMembers_Call) Return(_a0 []*User, _a1 error) *MockDatabase_GetAllTeamMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetAllTeamMembers_Call) RunAndReturn(run func(context.Context, slug.Slug) ([]*User, error)) *MockDatabase_GetAllTeamMembers_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTeamSlugs provides a mock function with given fields: ctx
func (_m *MockDatabase) GetAllTeamSlugs(ctx context.Context) ([]slug.Slug, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTeamSlugs")
	}

	var r0 []slug.Slug
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]slug.Slug, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []slug.Slug); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]slug.Slug)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetAllTeamSlugs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTeamSlugs'
type MockDatabase_GetAllTeamSlugs_Call struct {
	*mock.Call
}

// GetAllTeamSlugs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) GetAllTeamSlugs(ctx interface{}) *MockDatabase_GetAllTeamSlugs_Call {
	return &MockDatabase_GetAllTeamSlugs_Call{Call: _e.mock.On("GetAllTeamSlugs", ctx)}
}

func (_c *MockDatabase_GetAllTeamSlugs_Call) Run(run func(ctx context.Context)) *MockDatabase_GetAllTeamSlugs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatabase_GetAllTeamSlugs_Call) Return(_a0 []slug.Slug, _a1 error) *MockDatabase_GetAllTeamSlugs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetAllTeamSlugs_Call) RunAndReturn(run func(context.Context) ([]slug.Slug, error)) *MockDatabase_GetAllTeamSlugs_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUserRoles provides a mock function with given fields: ctx
func (_m *MockDatabase) GetAllUserRoles(ctx context.Context) ([]*UserRole, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUserRoles")
	}

	var r0 []*UserRole
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*UserRole, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*UserRole); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*UserRole)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetAllUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUserRoles'
type MockDatabase_GetAllUserRoles_Call struct {
	*mock.Call
}

// GetAllUserRoles is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) GetAllUserRoles(ctx interface{}) *MockDatabase_GetAllUserRoles_Call {
	return &MockDatabase_GetAllUserRoles_Call{Call: _e.mock.On("GetAllUserRoles", ctx)}
}

func (_c *MockDatabase_GetAllUserRoles_Call) Run(run func(ctx context.Context)) *MockDatabase_GetAllUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatabase_GetAllUserRoles_Call) Return(_a0 []*UserRole, _a1 error) *MockDatabase_GetAllUserRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetAllUserRoles_Call) RunAndReturn(run func(context.Context) ([]*UserRole, error)) *MockDatabase_GetAllUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetPool provides a mock function with given fields:
func (_m *MockDatabase) GetPool() *pgxpool.Pool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPool")
	}

	var r0 *pgxpool.Pool
	if rf, ok := ret.Get(0).(func() *pgxpool.Pool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgxpool.Pool)
		}
	}

	return r0
}

// MockDatabase_GetPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPool'
type MockDatabase_GetPool_Call struct {
	*mock.Call
}

// GetPool is a helper method to define mock.On call
func (_e *MockDatabase_Expecter) GetPool() *MockDatabase_GetPool_Call {
	return &MockDatabase_GetPool_Call{Call: _e.mock.On("GetPool")}
}

func (_c *MockDatabase_GetPool_Call) Run(run func()) *MockDatabase_GetPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatabase_GetPool_Call) Return(_a0 *pgxpool.Pool) *MockDatabase_GetPool_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_GetPool_Call) RunAndReturn(run func() *pgxpool.Pool) *MockDatabase_GetPool_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceAccountByApiKey provides a mock function with given fields: ctx, apiKey
func (_m *MockDatabase) GetServiceAccountByApiKey(ctx context.Context, apiKey string) (*ServiceAccount, error) {
	ret := _m.Called(ctx, apiKey)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceAccountByApiKey")
	}

	var r0 *ServiceAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ServiceAccount, error)); ok {
		return rf(ctx, apiKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ServiceAccount); ok {
		r0 = rf(ctx, apiKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, apiKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetServiceAccountByApiKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceAccountByApiKey'
type MockDatabase_GetServiceAccountByApiKey_Call struct {
	*mock.Call
}

// GetServiceAccountByApiKey is a helper method to define mock.On call
//   - ctx context.Context
//   - apiKey string
func (_e *MockDatabase_Expecter) GetServiceAccountByApiKey(ctx interface{}, apiKey interface{}) *MockDatabase_GetServiceAccountByApiKey_Call {
	return &MockDatabase_GetServiceAccountByApiKey_Call{Call: _e.mock.On("GetServiceAccountByApiKey", ctx, apiKey)}
}

func (_c *MockDatabase_GetServiceAccountByApiKey_Call) Run(run func(ctx context.Context, apiKey string)) *MockDatabase_GetServiceAccountByApiKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabase_GetServiceAccountByApiKey_Call) Return(_a0 *ServiceAccount, _a1 error) *MockDatabase_GetServiceAccountByApiKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetServiceAccountByApiKey_Call) RunAndReturn(run func(context.Context, string) (*ServiceAccount, error)) *MockDatabase_GetServiceAccountByApiKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceAccountByName provides a mock function with given fields: ctx, name
func (_m *MockDatabase) GetServiceAccountByName(ctx context.Context, name string) (*ServiceAccount, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceAccountByName")
	}

	var r0 *ServiceAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ServiceAccount, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ServiceAccount); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetServiceAccountByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceAccountByName'
type MockDatabase_GetServiceAccountByName_Call struct {
	*mock.Call
}

// GetServiceAccountByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockDatabase_Expecter) GetServiceAccountByName(ctx interface{}, name interface{}) *MockDatabase_GetServiceAccountByName_Call {
	return &MockDatabase_GetServiceAccountByName_Call{Call: _e.mock.On("GetServiceAccountByName", ctx, name)}
}

func (_c *MockDatabase_GetServiceAccountByName_Call) Run(run func(ctx context.Context, name string)) *MockDatabase_GetServiceAccountByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabase_GetServiceAccountByName_Call) Return(_a0 *ServiceAccount, _a1 error) *MockDatabase_GetServiceAccountByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetServiceAccountByName_Call) RunAndReturn(run func(context.Context, string) (*ServiceAccount, error)) *MockDatabase_GetServiceAccountByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceAccountRoles provides a mock function with given fields: ctx, serviceAccountID
func (_m *MockDatabase) GetServiceAccountRoles(ctx context.Context, serviceAccountID uuid.UUID) ([]*authz.Role, error) {
	ret := _m.Called(ctx, serviceAccountID)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceAccountRoles")
	}

	var r0 []*authz.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*authz.Role, error)); ok {
		return rf(ctx, serviceAccountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*authz.Role); ok {
		r0 = rf(ctx, serviceAccountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*authz.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, serviceAccountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetServiceAccountRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceAccountRoles'
type MockDatabase_GetServiceAccountRoles_Call struct {
	*mock.Call
}

// GetServiceAccountRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceAccountID uuid.UUID
func (_e *MockDatabase_Expecter) GetServiceAccountRoles(ctx interface{}, serviceAccountID interface{}) *MockDatabase_GetServiceAccountRoles_Call {
	return &MockDatabase_GetServiceAccountRoles_Call{Call: _e.mock.On("GetServiceAccountRoles", ctx, serviceAccountID)}
}

func (_c *MockDatabase_GetServiceAccountRoles_Call) Run(run func(ctx context.Context, serviceAccountID uuid.UUID)) *MockDatabase_GetServiceAccountRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_GetServiceAccountRoles_Call) Return(_a0 []*authz.Role, _a1 error) *MockDatabase_GetServiceAccountRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetServiceAccountRoles_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*authz.Role, error)) *MockDatabase_GetServiceAccountRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceAccounts provides a mock function with given fields: ctx
func (_m *MockDatabase) GetServiceAccounts(ctx context.Context) ([]*ServiceAccount, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceAccounts")
	}

	var r0 []*ServiceAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*ServiceAccount, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*ServiceAccount); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetServiceAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceAccounts'
type MockDatabase_GetServiceAccounts_Call struct {
	*mock.Call
}

// GetServiceAccounts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) GetServiceAccounts(ctx interface{}) *MockDatabase_GetServiceAccounts_Call {
	return &MockDatabase_GetServiceAccounts_Call{Call: _e.mock.On("GetServiceAccounts", ctx)}
}

func (_c *MockDatabase_GetServiceAccounts_Call) Run(run func(ctx context.Context)) *MockDatabase_GetServiceAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatabase_GetServiceAccounts_Call) Return(_a0 []*ServiceAccount, _a1 error) *MockDatabase_GetServiceAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetServiceAccounts_Call) RunAndReturn(run func(context.Context) ([]*ServiceAccount, error)) *MockDatabase_GetServiceAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceAccountsByIDs provides a mock function with given fields: ctx, ids
func (_m *MockDatabase) GetServiceAccountsByIDs(ctx context.Context, ids []uuid.UUID) ([]*ServiceAccount, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceAccountsByIDs")
	}

	var r0 []*ServiceAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]*ServiceAccount, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []*ServiceAccount); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetServiceAccountsByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceAccountsByIDs'
type MockDatabase_GetServiceAccountsByIDs_Call struct {
	*mock.Call
}

// GetServiceAccountsByIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []uuid.UUID
func (_e *MockDatabase_Expecter) GetServiceAccountsByIDs(ctx interface{}, ids interface{}) *MockDatabase_GetServiceAccountsByIDs_Call {
	return &MockDatabase_GetServiceAccountsByIDs_Call{Call: _e.mock.On("GetServiceAccountsByIDs", ctx, ids)}
}

func (_c *MockDatabase_GetServiceAccountsByIDs_Call) Run(run func(ctx context.Context, ids []uuid.UUID)) *MockDatabase_GetServiceAccountsByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_GetServiceAccountsByIDs_Call) Return(_a0 []*ServiceAccount, _a1 error) *MockDatabase_GetServiceAccountsByIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetServiceAccountsByIDs_Call) RunAndReturn(run func(context.Context, []uuid.UUID) ([]*ServiceAccount, error)) *MockDatabase_GetServiceAccountsByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetSessionByID provides a mock function with given fields: ctx, sessionID
func (_m *MockDatabase) GetSessionByID(ctx context.Context, sessionID uuid.UUID) (*Session, error) {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionByID")
	}

	var r0 *Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Session, error)); ok {
		return rf(ctx, sessionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Session); ok {
		r0 = rf(ctx, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetSessionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessionByID'
type MockDatabase_GetSessionByID_Call struct {
	*mock.Call
}

// GetSessionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID uuid.UUID
func (_e *MockDatabase_Expecter) GetSessionByID(ctx interface{}, sessionID interface{}) *MockDatabase_GetSessionByID_Call {
	return &MockDatabase_GetSessionByID_Call{Call: _e.mock.On("GetSessionByID", ctx, sessionID)}
}

func (_c *MockDatabase_GetSessionByID_Call) Run(run func(ctx context.Context, sessionID uuid.UUID)) *MockDatabase_GetSessionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_GetSessionByID_Call) Return(_a0 *Session, _a1 error) *MockDatabase_GetSessionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetSessionByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*Session, error)) *MockDatabase_GetSessionByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamBySlug provides a mock function with given fields: ctx, teamSlug
func (_m *MockDatabase) GetTeamBySlug(ctx context.Context, teamSlug slug.Slug) (*Team, error) {
	ret := _m.Called(ctx, teamSlug)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamBySlug")
	}

	var r0 *Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) (*Team, error)); ok {
		return rf(ctx, teamSlug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) *Team); ok {
		r0 = rf(ctx, teamSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug) error); ok {
		r1 = rf(ctx, teamSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetTeamBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamBySlug'
type MockDatabase_GetTeamBySlug_Call struct {
	*mock.Call
}

// GetTeamBySlug is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
func (_e *MockDatabase_Expecter) GetTeamBySlug(ctx interface{}, teamSlug interface{}) *MockDatabase_GetTeamBySlug_Call {
	return &MockDatabase_GetTeamBySlug_Call{Call: _e.mock.On("GetTeamBySlug", ctx, teamSlug)}
}

func (_c *MockDatabase_GetTeamBySlug_Call) Run(run func(ctx context.Context, teamSlug slug.Slug)) *MockDatabase_GetTeamBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug))
	})
	return _c
}

func (_c *MockDatabase_GetTeamBySlug_Call) Return(_a0 *Team, _a1 error) *MockDatabase_GetTeamBySlug_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetTeamBySlug_Call) RunAndReturn(run func(context.Context, slug.Slug) (*Team, error)) *MockDatabase_GetTeamBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamEnvironments provides a mock function with given fields: ctx, teamSlug, p
func (_m *MockDatabase) GetTeamEnvironments(ctx context.Context, teamSlug slug.Slug, p Page) ([]*TeamEnvironment, int, error) {
	ret := _m.Called(ctx, teamSlug, p)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamEnvironments")
	}

	var r0 []*TeamEnvironment
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, Page) ([]*TeamEnvironment, int, error)); ok {
		return rf(ctx, teamSlug, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, Page) []*TeamEnvironment); ok {
		r0 = rf(ctx, teamSlug, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*TeamEnvironment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug, Page) int); ok {
		r1 = rf(ctx, teamSlug, p)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, slug.Slug, Page) error); ok {
		r2 = rf(ctx, teamSlug, p)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDatabase_GetTeamEnvironments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamEnvironments'
type MockDatabase_GetTeamEnvironments_Call struct {
	*mock.Call
}

// GetTeamEnvironments is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
//   - p Page
func (_e *MockDatabase_Expecter) GetTeamEnvironments(ctx interface{}, teamSlug interface{}, p interface{}) *MockDatabase_GetTeamEnvironments_Call {
	return &MockDatabase_GetTeamEnvironments_Call{Call: _e.mock.On("GetTeamEnvironments", ctx, teamSlug, p)}
}

func (_c *MockDatabase_GetTeamEnvironments_Call) Run(run func(ctx context.Context, teamSlug slug.Slug, p Page)) *MockDatabase_GetTeamEnvironments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug), args[2].(Page))
	})
	return _c
}

func (_c *MockDatabase_GetTeamEnvironments_Call) Return(_a0 []*TeamEnvironment, _a1 int, _a2 error) *MockDatabase_GetTeamEnvironments_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDatabase_GetTeamEnvironments_Call) RunAndReturn(run func(context.Context, slug.Slug, Page) ([]*TeamEnvironment, int, error)) *MockDatabase_GetTeamEnvironments_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamEnvironmentsBySlugsAndEnvNames provides a mock function with given fields: ctx, keys
func (_m *MockDatabase) GetTeamEnvironmentsBySlugsAndEnvNames(ctx context.Context, keys []EnvSlugName) ([]*TeamEnvironment, error) {
	ret := _m.Called(ctx, keys)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamEnvironmentsBySlugsAndEnvNames")
	}

	var r0 []*TeamEnvironment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []EnvSlugName) ([]*TeamEnvironment, error)); ok {
		return rf(ctx, keys)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []EnvSlugName) []*TeamEnvironment); ok {
		r0 = rf(ctx, keys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*TeamEnvironment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []EnvSlugName) error); ok {
		r1 = rf(ctx, keys)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetTeamEnvironmentsBySlugsAndEnvNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamEnvironmentsBySlugsAndEnvNames'
type MockDatabase_GetTeamEnvironmentsBySlugsAndEnvNames_Call struct {
	*mock.Call
}

// GetTeamEnvironmentsBySlugsAndEnvNames is a helper method to define mock.On call
//   - ctx context.Context
//   - keys []EnvSlugName
func (_e *MockDatabase_Expecter) GetTeamEnvironmentsBySlugsAndEnvNames(ctx interface{}, keys interface{}) *MockDatabase_GetTeamEnvironmentsBySlugsAndEnvNames_Call {
	return &MockDatabase_GetTeamEnvironmentsBySlugsAndEnvNames_Call{Call: _e.mock.On("GetTeamEnvironmentsBySlugsAndEnvNames", ctx, keys)}
}

func (_c *MockDatabase_GetTeamEnvironmentsBySlugsAndEnvNames_Call) Run(run func(ctx context.Context, keys []EnvSlugName)) *MockDatabase_GetTeamEnvironmentsBySlugsAndEnvNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]EnvSlugName))
	})
	return _c
}

func (_c *MockDatabase_GetTeamEnvironmentsBySlugsAndEnvNames_Call) Return(_a0 []*TeamEnvironment, _a1 error) *MockDatabase_GetTeamEnvironmentsBySlugsAndEnvNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetTeamEnvironmentsBySlugsAndEnvNames_Call) RunAndReturn(run func(context.Context, []EnvSlugName) ([]*TeamEnvironment, error)) *MockDatabase_GetTeamEnvironmentsBySlugsAndEnvNames_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamMember provides a mock function with given fields: ctx, teamSlug, userID
func (_m *MockDatabase) GetTeamMember(ctx context.Context, teamSlug slug.Slug, userID uuid.UUID) (*User, error) {
	ret := _m.Called(ctx, teamSlug, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamMember")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, uuid.UUID) (*User, error)); ok {
		return rf(ctx, teamSlug, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, uuid.UUID) *User); ok {
		r0 = rf(ctx, teamSlug, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug, uuid.UUID) error); ok {
		r1 = rf(ctx, teamSlug, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetTeamMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamMember'
type MockDatabase_GetTeamMember_Call struct {
	*mock.Call
}

// GetTeamMember is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
//   - userID uuid.UUID
func (_e *MockDatabase_Expecter) GetTeamMember(ctx interface{}, teamSlug interface{}, userID interface{}) *MockDatabase_GetTeamMember_Call {
	return &MockDatabase_GetTeamMember_Call{Call: _e.mock.On("GetTeamMember", ctx, teamSlug, userID)}
}

func (_c *MockDatabase_GetTeamMember_Call) Run(run func(ctx context.Context, teamSlug slug.Slug, userID uuid.UUID)) *MockDatabase_GetTeamMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_GetTeamMember_Call) Return(_a0 *User, _a1 error) *MockDatabase_GetTeamMember_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetTeamMember_Call) RunAndReturn(run func(context.Context, slug.Slug, uuid.UUID) (*User, error)) *MockDatabase_GetTeamMember_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamMembers provides a mock function with given fields: ctx, teamSlug, p
func (_m *MockDatabase) GetTeamMembers(ctx context.Context, teamSlug slug.Slug, p Page) ([]*User, int, error) {
	ret := _m.Called(ctx, teamSlug, p)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamMembers")
	}

	var r0 []*User
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, Page) ([]*User, int, error)); ok {
		return rf(ctx, teamSlug, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, Page) []*User); ok {
		r0 = rf(ctx, teamSlug, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug, Page) int); ok {
		r1 = rf(ctx, teamSlug, p)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, slug.Slug, Page) error); ok {
		r2 = rf(ctx, teamSlug, p)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDatabase_GetTeamMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamMembers'
type MockDatabase_GetTeamMembers_Call struct {
	*mock.Call
}

// GetTeamMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
//   - p Page
func (_e *MockDatabase_Expecter) GetTeamMembers(ctx interface{}, teamSlug interface{}, p interface{}) *MockDatabase_GetTeamMembers_Call {
	return &MockDatabase_GetTeamMembers_Call{Call: _e.mock.On("GetTeamMembers", ctx, teamSlug, p)}
}

func (_c *MockDatabase_GetTeamMembers_Call) Run(run func(ctx context.Context, teamSlug slug.Slug, p Page)) *MockDatabase_GetTeamMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug), args[2].(Page))
	})
	return _c
}

func (_c *MockDatabase_GetTeamMembers_Call) Return(_a0 []*User, _a1 int, _a2 error) *MockDatabase_GetTeamMembers_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDatabase_GetTeamMembers_Call) RunAndReturn(run func(context.Context, slug.Slug, Page) ([]*User, int, error)) *MockDatabase_GetTeamMembers_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeams provides a mock function with given fields: ctx, p
func (_m *MockDatabase) GetTeams(ctx context.Context, p Page) ([]*Team, int, error) {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for GetTeams")
	}

	var r0 []*Team
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, Page) ([]*Team, int, error)); ok {
		return rf(ctx, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, Page) []*Team); ok {
		r0 = rf(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, Page) int); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, Page) error); ok {
		r2 = rf(ctx, p)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDatabase_GetTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeams'
type MockDatabase_GetTeams_Call struct {
	*mock.Call
}

// GetTeams is a helper method to define mock.On call
//   - ctx context.Context
//   - p Page
func (_e *MockDatabase_Expecter) GetTeams(ctx interface{}, p interface{}) *MockDatabase_GetTeams_Call {
	return &MockDatabase_GetTeams_Call{Call: _e.mock.On("GetTeams", ctx, p)}
}

func (_c *MockDatabase_GetTeams_Call) Run(run func(ctx context.Context, p Page)) *MockDatabase_GetTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Page))
	})
	return _c
}

func (_c *MockDatabase_GetTeams_Call) Return(_a0 []*Team, _a1 int, _a2 error) *MockDatabase_GetTeams_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDatabase_GetTeams_Call) RunAndReturn(run func(context.Context, Page) ([]*Team, int, error)) *MockDatabase_GetTeams_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamsBySlugs provides a mock function with given fields: ctx, teamSlugs
func (_m *MockDatabase) GetTeamsBySlugs(ctx context.Context, teamSlugs []slug.Slug) ([]*Team, error) {
	ret := _m.Called(ctx, teamSlugs)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamsBySlugs")
	}

	var r0 []*Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []slug.Slug) ([]*Team, error)); ok {
		return rf(ctx, teamSlugs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []slug.Slug) []*Team); ok {
		r0 = rf(ctx, teamSlugs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []slug.Slug) error); ok {
		r1 = rf(ctx, teamSlugs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetTeamsBySlugs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamsBySlugs'
type MockDatabase_GetTeamsBySlugs_Call struct {
	*mock.Call
}

// GetTeamsBySlugs is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlugs []slug.Slug
func (_e *MockDatabase_Expecter) GetTeamsBySlugs(ctx interface{}, teamSlugs interface{}) *MockDatabase_GetTeamsBySlugs_Call {
	return &MockDatabase_GetTeamsBySlugs_Call{Call: _e.mock.On("GetTeamsBySlugs", ctx, teamSlugs)}
}

func (_c *MockDatabase_GetTeamsBySlugs_Call) Run(run func(ctx context.Context, teamSlugs []slug.Slug)) *MockDatabase_GetTeamsBySlugs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]slug.Slug))
	})
	return _c
}

func (_c *MockDatabase_GetTeamsBySlugs_Call) Return(_a0 []*Team, _a1 error) *MockDatabase_GetTeamsBySlugs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetTeamsBySlugs_Call) RunAndReturn(run func(context.Context, []slug.Slug) ([]*Team, error)) *MockDatabase_GetTeamsBySlugs_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *MockDatabase) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockDatabase_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockDatabase_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockDatabase_GetUserByEmail_Call {
	return &MockDatabase_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockDatabase_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockDatabase_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabase_GetUserByEmail_Call) Return(_a0 *User, _a1 error) *MockDatabase_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (*User, error)) *MockDatabase_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByExternalID provides a mock function with given fields: ctx, externalID
func (_m *MockDatabase) GetUserByExternalID(ctx context.Context, externalID string) (*User, error) {
	ret := _m.Called(ctx, externalID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByExternalID")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*User, error)); ok {
		return rf(ctx, externalID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *User); ok {
		r0 = rf(ctx, externalID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, externalID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetUserByExternalID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByExternalID'
type MockDatabase_GetUserByExternalID_Call struct {
	*mock.Call
}

// GetUserByExternalID is a helper method to define mock.On call
//   - ctx context.Context
//   - externalID string
func (_e *MockDatabase_Expecter) GetUserByExternalID(ctx interface{}, externalID interface{}) *MockDatabase_GetUserByExternalID_Call {
	return &MockDatabase_GetUserByExternalID_Call{Call: _e.mock.On("GetUserByExternalID", ctx, externalID)}
}

func (_c *MockDatabase_GetUserByExternalID_Call) Run(run func(ctx context.Context, externalID string)) *MockDatabase_GetUserByExternalID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabase_GetUserByExternalID_Call) Return(_a0 *User, _a1 error) *MockDatabase_GetUserByExternalID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetUserByExternalID_Call) RunAndReturn(run func(context.Context, string) (*User, error)) *MockDatabase_GetUserByExternalID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *MockDatabase) GetUserByID(ctx context.Context, id uuid.UUID) (*User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockDatabase_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockDatabase_Expecter) GetUserByID(ctx interface{}, id interface{}) *MockDatabase_GetUserByID_Call {
	return &MockDatabase_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, id)}
}

func (_c *MockDatabase_GetUserByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockDatabase_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_GetUserByID_Call) Return(_a0 *User, _a1 error) *MockDatabase_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetUserByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*User, error)) *MockDatabase_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserRoles provides a mock function with given fields: ctx, userID
func (_m *MockDatabase) GetUserRoles(ctx context.Context, userID uuid.UUID) ([]*authz.Role, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRoles")
	}

	var r0 []*authz.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*authz.Role, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*authz.Role); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*authz.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRoles'
type MockDatabase_GetUserRoles_Call struct {
	*mock.Call
}

// GetUserRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockDatabase_Expecter) GetUserRoles(ctx interface{}, userID interface{}) *MockDatabase_GetUserRoles_Call {
	return &MockDatabase_GetUserRoles_Call{Call: _e.mock.On("GetUserRoles", ctx, userID)}
}

func (_c *MockDatabase_GetUserRoles_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockDatabase_GetUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_GetUserRoles_Call) Return(_a0 []*authz.Role, _a1 error) *MockDatabase_GetUserRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetUserRoles_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*authz.Role, error)) *MockDatabase_GetUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserRolesForUsers provides a mock function with given fields: ctx, userIDs
func (_m *MockDatabase) GetUserRolesForUsers(ctx context.Context, userIDs []uuid.UUID) (map[uuid.UUID][]*authz.Role, error) {
	ret := _m.Called(ctx, userIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRolesForUsers")
	}

	var r0 map[uuid.UUID][]*authz.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) (map[uuid.UUID][]*authz.Role, error)); ok {
		return rf(ctx, userIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) map[uuid.UUID][]*authz.Role); ok {
		r0 = rf(ctx, userIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uuid.UUID][]*authz.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, userIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetUserRolesForUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRolesForUsers'
type MockDatabase_GetUserRolesForUsers_Call struct {
	*mock.Call
}

// GetUserRolesForUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - userIDs []uuid.UUID
func (_e *MockDatabase_Expecter) GetUserRolesForUsers(ctx interface{}, userIDs interface{}) *MockDatabase_GetUserRolesForUsers_Call {
	return &MockDatabase_GetUserRolesForUsers_Call{Call: _e.mock.On("GetUserRolesForUsers", ctx, userIDs)}
}

func (_c *MockDatabase_GetUserRolesForUsers_Call) Run(run func(ctx context.Context, userIDs []uuid.UUID)) *MockDatabase_GetUserRolesForUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_GetUserRolesForUsers_Call) Return(_a0 map[uuid.UUID][]*authz.Role, _a1 error) *MockDatabase_GetUserRolesForUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetUserRolesForUsers_Call) RunAndReturn(run func(context.Context, []uuid.UUID) (map[uuid.UUID][]*authz.Role, error)) *MockDatabase_GetUserRolesForUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserTeams provides a mock function with given fields: ctx, userID
func (_m *MockDatabase) GetUserTeams(ctx context.Context, userID uuid.UUID) ([]*UserTeam, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserTeams")
	}

	var r0 []*UserTeam
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*UserTeam, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*UserTeam); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*UserTeam)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetUserTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserTeams'
type MockDatabase_GetUserTeams_Call struct {
	*mock.Call
}

// GetUserTeams is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockDatabase_Expecter) GetUserTeams(ctx interface{}, userID interface{}) *MockDatabase_GetUserTeams_Call {
	return &MockDatabase_GetUserTeams_Call{Call: _e.mock.On("GetUserTeams", ctx, userID)}
}

func (_c *MockDatabase_GetUserTeams_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockDatabase_GetUserTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_GetUserTeams_Call) Return(_a0 []*UserTeam, _a1 error) *MockDatabase_GetUserTeams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetUserTeams_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*UserTeam, error)) *MockDatabase_GetUserTeams_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserTeamsPaginated provides a mock function with given fields: ctx, userID, p
func (_m *MockDatabase) GetUserTeamsPaginated(ctx context.Context, userID uuid.UUID, p Page) ([]*UserTeam, int, error) {
	ret := _m.Called(ctx, userID, p)

	if len(ret) == 0 {
		panic("no return value specified for GetUserTeamsPaginated")
	}

	var r0 []*UserTeam
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, Page) ([]*UserTeam, int, error)); ok {
		return rf(ctx, userID, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, Page) []*UserTeam); ok {
		r0 = rf(ctx, userID, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*UserTeam)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, Page) int); ok {
		r1 = rf(ctx, userID, p)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, Page) error); ok {
		r2 = rf(ctx, userID, p)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDatabase_GetUserTeamsPaginated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserTeamsPaginated'
type MockDatabase_GetUserTeamsPaginated_Call struct {
	*mock.Call
}

// GetUserTeamsPaginated is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - p Page
func (_e *MockDatabase_Expecter) GetUserTeamsPaginated(ctx interface{}, userID interface{}, p interface{}) *MockDatabase_GetUserTeamsPaginated_Call {
	return &MockDatabase_GetUserTeamsPaginated_Call{Call: _e.mock.On("GetUserTeamsPaginated", ctx, userID, p)}
}

func (_c *MockDatabase_GetUserTeamsPaginated_Call) Run(run func(ctx context.Context, userID uuid.UUID, p Page)) *MockDatabase_GetUserTeamsPaginated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(Page))
	})
	return _c
}

func (_c *MockDatabase_GetUserTeamsPaginated_Call) Return(_a0 []*UserTeam, _a1 int, _a2 error) *MockDatabase_GetUserTeamsPaginated_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDatabase_GetUserTeamsPaginated_Call) RunAndReturn(run func(context.Context, uuid.UUID, Page) ([]*UserTeam, int, error)) *MockDatabase_GetUserTeamsPaginated_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields: ctx, p
func (_m *MockDatabase) GetUsers(ctx context.Context, p Page) ([]*User, int, error) {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []*User
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, Page) ([]*User, int, error)); ok {
		return rf(ctx, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, Page) []*User); ok {
		r0 = rf(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, Page) int); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, Page) error); ok {
		r2 = rf(ctx, p)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDatabase_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type MockDatabase_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - p Page
func (_e *MockDatabase_Expecter) GetUsers(ctx interface{}, p interface{}) *MockDatabase_GetUsers_Call {
	return &MockDatabase_GetUsers_Call{Call: _e.mock.On("GetUsers", ctx, p)}
}

func (_c *MockDatabase_GetUsers_Call) Run(run func(ctx context.Context, p Page)) *MockDatabase_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Page))
	})
	return _c
}

func (_c *MockDatabase_GetUsers_Call) Return(_a0 []*User, _a1 int, _a2 error) *MockDatabase_GetUsers_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDatabase_GetUsers_Call) RunAndReturn(run func(context.Context, Page) ([]*User, int, error)) *MockDatabase_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersByIDs provides a mock function with given fields: ctx, ids
func (_m *MockDatabase) GetUsersByIDs(ctx context.Context, ids []uuid.UUID) ([]*User, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersByIDs")
	}

	var r0 []*User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]*User, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []*User); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetUsersByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersByIDs'
type MockDatabase_GetUsersByIDs_Call struct {
	*mock.Call
}

// GetUsersByIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []uuid.UUID
func (_e *MockDatabase_Expecter) GetUsersByIDs(ctx interface{}, ids interface{}) *MockDatabase_GetUsersByIDs_Call {
	return &MockDatabase_GetUsersByIDs_Call{Call: _e.mock.On("GetUsersByIDs", ctx, ids)}
}

func (_c *MockDatabase_GetUsersByIDs_Call) Run(run func(ctx context.Context, ids []uuid.UUID)) *MockDatabase_GetUsersByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_GetUsersByIDs_Call) Return(_a0 []*User, _a1 error) *MockDatabase_GetUsersByIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetUsersByIDs_Call) RunAndReturn(run func(context.Context, []uuid.UUID) ([]*User, error)) *MockDatabase_GetUsersByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersWithGloballyAssignedRole provides a mock function with given fields: ctx, roleName
func (_m *MockDatabase) GetUsersWithGloballyAssignedRole(ctx context.Context, roleName gensql.RoleName) ([]*User, error) {
	ret := _m.Called(ctx, roleName)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersWithGloballyAssignedRole")
	}

	var r0 []*User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, gensql.RoleName) ([]*User, error)); ok {
		return rf(ctx, roleName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, gensql.RoleName) []*User); ok {
		r0 = rf(ctx, roleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, gensql.RoleName) error); ok {
		r1 = rf(ctx, roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetUsersWithGloballyAssignedRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersWithGloballyAssignedRole'
type MockDatabase_GetUsersWithGloballyAssignedRole_Call struct {
	*mock.Call
}

// GetUsersWithGloballyAssignedRole is a helper method to define mock.On call
//   - ctx context.Context
//   - roleName gensql.RoleName
func (_e *MockDatabase_Expecter) GetUsersWithGloballyAssignedRole(ctx interface{}, roleName interface{}) *MockDatabase_GetUsersWithGloballyAssignedRole_Call {
	return &MockDatabase_GetUsersWithGloballyAssignedRole_Call{Call: _e.mock.On("GetUsersWithGloballyAssignedRole", ctx, roleName)}
}

func (_c *MockDatabase_GetUsersWithGloballyAssignedRole_Call) Run(run func(ctx context.Context, roleName gensql.RoleName)) *MockDatabase_GetUsersWithGloballyAssignedRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(gensql.RoleName))
	})
	return _c
}

func (_c *MockDatabase_GetUsersWithGloballyAssignedRole_Call) Return(_a0 []*User, _a1 error) *MockDatabase_GetUsersWithGloballyAssignedRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetUsersWithGloballyAssignedRole_Call) RunAndReturn(run func(context.Context, gensql.RoleName) ([]*User, error)) *MockDatabase_GetUsersWithGloballyAssignedRole_Call {
	_c.Call.Return(run)
	return _c
}

// InsertEnvironment provides a mock function with given fields: ctx, name, gcp
func (_m *MockDatabase) InsertEnvironment(ctx context.Context, name string, gcp bool) error {
	ret := _m.Called(ctx, name, gcp)

	if len(ret) == 0 {
		panic("no return value specified for InsertEnvironment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, name, gcp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_InsertEnvironment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertEnvironment'
type MockDatabase_InsertEnvironment_Call struct {
	*mock.Call
}

// InsertEnvironment is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - gcp bool
func (_e *MockDatabase_Expecter) InsertEnvironment(ctx interface{}, name interface{}, gcp interface{}) *MockDatabase_InsertEnvironment_Call {
	return &MockDatabase_InsertEnvironment_Call{Call: _e.mock.On("InsertEnvironment", ctx, name, gcp)}
}

func (_c *MockDatabase_InsertEnvironment_Call) Run(run func(ctx context.Context, name string, gcp bool)) *MockDatabase_InsertEnvironment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *MockDatabase_InsertEnvironment_Call) Return(_a0 error) *MockDatabase_InsertEnvironment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_InsertEnvironment_Call) RunAndReturn(run func(context.Context, string, bool) error) *MockDatabase_InsertEnvironment_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAllServiceAccountRoles provides a mock function with given fields: ctx, serviceAccountID
func (_m *MockDatabase) RemoveAllServiceAccountRoles(ctx context.Context, serviceAccountID uuid.UUID) error {
	ret := _m.Called(ctx, serviceAccountID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAllServiceAccountRoles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, serviceAccountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_RemoveAllServiceAccountRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAllServiceAccountRoles'
type MockDatabase_RemoveAllServiceAccountRoles_Call struct {
	*mock.Call
}

// RemoveAllServiceAccountRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceAccountID uuid.UUID
func (_e *MockDatabase_Expecter) RemoveAllServiceAccountRoles(ctx interface{}, serviceAccountID interface{}) *MockDatabase_RemoveAllServiceAccountRoles_Call {
	return &MockDatabase_RemoveAllServiceAccountRoles_Call{Call: _e.mock.On("RemoveAllServiceAccountRoles", ctx, serviceAccountID)}
}

func (_c *MockDatabase_RemoveAllServiceAccountRoles_Call) Run(run func(ctx context.Context, serviceAccountID uuid.UUID)) *MockDatabase_RemoveAllServiceAccountRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_RemoveAllServiceAccountRoles_Call) Return(_a0 error) *MockDatabase_RemoveAllServiceAccountRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_RemoveAllServiceAccountRoles_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockDatabase_RemoveAllServiceAccountRoles_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveApiKeysFromServiceAccount provides a mock function with given fields: ctx, serviceAccountID
func (_m *MockDatabase) RemoveApiKeysFromServiceAccount(ctx context.Context, serviceAccountID uuid.UUID) error {
	ret := _m.Called(ctx, serviceAccountID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveApiKeysFromServiceAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, serviceAccountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_RemoveApiKeysFromServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveApiKeysFromServiceAccount'
type MockDatabase_RemoveApiKeysFromServiceAccount_Call struct {
	*mock.Call
}

// RemoveApiKeysFromServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceAccountID uuid.UUID
func (_e *MockDatabase_Expecter) RemoveApiKeysFromServiceAccount(ctx interface{}, serviceAccountID interface{}) *MockDatabase_RemoveApiKeysFromServiceAccount_Call {
	return &MockDatabase_RemoveApiKeysFromServiceAccount_Call{Call: _e.mock.On("RemoveApiKeysFromServiceAccount", ctx, serviceAccountID)}
}

func (_c *MockDatabase_RemoveApiKeysFromServiceAccount_Call) Run(run func(ctx context.Context, serviceAccountID uuid.UUID)) *MockDatabase_RemoveApiKeysFromServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_RemoveApiKeysFromServiceAccount_Call) Return(_a0 error) *MockDatabase_RemoveApiKeysFromServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_RemoveApiKeysFromServiceAccount_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockDatabase_RemoveApiKeysFromServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeGlobalUserRole provides a mock function with given fields: ctx, userID, roleName
func (_m *MockDatabase) RevokeGlobalUserRole(ctx context.Context, userID uuid.UUID, roleName gensql.RoleName) error {
	ret := _m.Called(ctx, userID, roleName)

	if len(ret) == 0 {
		panic("no return value specified for RevokeGlobalUserRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, gensql.RoleName) error); ok {
		r0 = rf(ctx, userID, roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_RevokeGlobalUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeGlobalUserRole'
type MockDatabase_RevokeGlobalUserRole_Call struct {
	*mock.Call
}

// RevokeGlobalUserRole is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - roleName gensql.RoleName
func (_e *MockDatabase_Expecter) RevokeGlobalUserRole(ctx interface{}, userID interface{}, roleName interface{}) *MockDatabase_RevokeGlobalUserRole_Call {
	return &MockDatabase_RevokeGlobalUserRole_Call{Call: _e.mock.On("RevokeGlobalUserRole", ctx, userID, roleName)}
}

func (_c *MockDatabase_RevokeGlobalUserRole_Call) Run(run func(ctx context.Context, userID uuid.UUID, roleName gensql.RoleName)) *MockDatabase_RevokeGlobalUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(gensql.RoleName))
	})
	return _c
}

func (_c *MockDatabase_RevokeGlobalUserRole_Call) Return(_a0 error) *MockDatabase_RevokeGlobalUserRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_RevokeGlobalUserRole_Call) RunAndReturn(run func(context.Context, uuid.UUID, gensql.RoleName) error) *MockDatabase_RevokeGlobalUserRole_Call {
	_c.Call.Return(run)
	return _c
}

// SetLastSuccessfulSyncForTeam provides a mock function with given fields: ctx, teamSlug
func (_m *MockDatabase) SetLastSuccessfulSyncForTeam(ctx context.Context, teamSlug slug.Slug) error {
	ret := _m.Called(ctx, teamSlug)

	if len(ret) == 0 {
		panic("no return value specified for SetLastSuccessfulSyncForTeam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) error); ok {
		r0 = rf(ctx, teamSlug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_SetLastSuccessfulSyncForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLastSuccessfulSyncForTeam'
type MockDatabase_SetLastSuccessfulSyncForTeam_Call struct {
	*mock.Call
}

// SetLastSuccessfulSyncForTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
func (_e *MockDatabase_Expecter) SetLastSuccessfulSyncForTeam(ctx interface{}, teamSlug interface{}) *MockDatabase_SetLastSuccessfulSyncForTeam_Call {
	return &MockDatabase_SetLastSuccessfulSyncForTeam_Call{Call: _e.mock.On("SetLastSuccessfulSyncForTeam", ctx, teamSlug)}
}

func (_c *MockDatabase_SetLastSuccessfulSyncForTeam_Call) Run(run func(ctx context.Context, teamSlug slug.Slug)) *MockDatabase_SetLastSuccessfulSyncForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug))
	})
	return _c
}

func (_c *MockDatabase_SetLastSuccessfulSyncForTeam_Call) Return(_a0 error) *MockDatabase_SetLastSuccessfulSyncForTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_SetLastSuccessfulSyncForTeam_Call) RunAndReturn(run func(context.Context, slug.Slug) error) *MockDatabase_SetLastSuccessfulSyncForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// SetTeamMemberRole provides a mock function with given fields: ctx, userID, teamSlug, roleName
func (_m *MockDatabase) SetTeamMemberRole(ctx context.Context, userID uuid.UUID, teamSlug slug.Slug, roleName gensql.RoleName) error {
	ret := _m.Called(ctx, userID, teamSlug, roleName)

	if len(ret) == 0 {
		panic("no return value specified for SetTeamMemberRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, slug.Slug, gensql.RoleName) error); ok {
		r0 = rf(ctx, userID, teamSlug, roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_SetTeamMemberRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTeamMemberRole'
type MockDatabase_SetTeamMemberRole_Call struct {
	*mock.Call
}

// SetTeamMemberRole is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - teamSlug slug.Slug
//   - roleName gensql.RoleName
func (_e *MockDatabase_Expecter) SetTeamMemberRole(ctx interface{}, userID interface{}, teamSlug interface{}, roleName interface{}) *MockDatabase_SetTeamMemberRole_Call {
	return &MockDatabase_SetTeamMemberRole_Call{Call: _e.mock.On("SetTeamMemberRole", ctx, userID, teamSlug, roleName)}
}

func (_c *MockDatabase_SetTeamMemberRole_Call) Run(run func(ctx context.Context, userID uuid.UUID, teamSlug slug.Slug, roleName gensql.RoleName)) *MockDatabase_SetTeamMemberRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(slug.Slug), args[3].(gensql.RoleName))
	})
	return _c
}

func (_c *MockDatabase_SetTeamMemberRole_Call) Return(_a0 error) *MockDatabase_SetTeamMemberRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_SetTeamMemberRole_Call) RunAndReturn(run func(context.Context, uuid.UUID, slug.Slug, gensql.RoleName) error) *MockDatabase_SetTeamMemberRole_Call {
	_c.Call.Return(run)
	return _c
}

// SyncEnvironments provides a mock function with given fields: ctx, envs
func (_m *MockDatabase) SyncEnvironments(ctx context.Context, envs []*Environment) error {
	ret := _m.Called(ctx, envs)

	if len(ret) == 0 {
		panic("no return value specified for SyncEnvironments")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*Environment) error); ok {
		r0 = rf(ctx, envs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_SyncEnvironments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncEnvironments'
type MockDatabase_SyncEnvironments_Call struct {
	*mock.Call
}

// SyncEnvironments is a helper method to define mock.On call
//   - ctx context.Context
//   - envs []*Environment
func (_e *MockDatabase_Expecter) SyncEnvironments(ctx interface{}, envs interface{}) *MockDatabase_SyncEnvironments_Call {
	return &MockDatabase_SyncEnvironments_Call{Call: _e.mock.On("SyncEnvironments", ctx, envs)}
}

func (_c *MockDatabase_SyncEnvironments_Call) Run(run func(ctx context.Context, envs []*Environment)) *MockDatabase_SyncEnvironments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*Environment))
	})
	return _c
}

func (_c *MockDatabase_SyncEnvironments_Call) Return(_a0 error) *MockDatabase_SyncEnvironments_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_SyncEnvironments_Call) RunAndReturn(run func(context.Context, []*Environment) error) *MockDatabase_SyncEnvironments_Call {
	_c.Call.Return(run)
	return _c
}

// TeamExists provides a mock function with given fields: ctx, team
func (_m *MockDatabase) TeamExists(ctx context.Context, team slug.Slug) (bool, error) {
	ret := _m.Called(ctx, team)

	if len(ret) == 0 {
		panic("no return value specified for TeamExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) (bool, error)); ok {
		return rf(ctx, team)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) bool); ok {
		r0 = rf(ctx, team)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug) error); ok {
		r1 = rf(ctx, team)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_TeamExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TeamExists'
type MockDatabase_TeamExists_Call struct {
	*mock.Call
}

// TeamExists is a helper method to define mock.On call
//   - ctx context.Context
//   - team slug.Slug
func (_e *MockDatabase_Expecter) TeamExists(ctx interface{}, team interface{}) *MockDatabase_TeamExists_Call {
	return &MockDatabase_TeamExists_Call{Call: _e.mock.On("TeamExists", ctx, team)}
}

func (_c *MockDatabase_TeamExists_Call) Run(run func(ctx context.Context, team slug.Slug)) *MockDatabase_TeamExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug))
	})
	return _c
}

func (_c *MockDatabase_TeamExists_Call) Return(_a0 bool, _a1 error) *MockDatabase_TeamExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_TeamExists_Call) RunAndReturn(run func(context.Context, slug.Slug) (bool, error)) *MockDatabase_TeamExists_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function with given fields: ctx, fn
func (_m *MockDatabase) Transaction(ctx context.Context, fn DatabaseTransactionFunc) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, DatabaseTransactionFunc) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type MockDatabase_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fn DatabaseTransactionFunc
func (_e *MockDatabase_Expecter) Transaction(ctx interface{}, fn interface{}) *MockDatabase_Transaction_Call {
	return &MockDatabase_Transaction_Call{Call: _e.mock.On("Transaction", ctx, fn)}
}

func (_c *MockDatabase_Transaction_Call) Run(run func(ctx context.Context, fn DatabaseTransactionFunc)) *MockDatabase_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DatabaseTransactionFunc))
	})
	return _c
}

func (_c *MockDatabase_Transaction_Call) Return(_a0 error) *MockDatabase_Transaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_Transaction_Call) RunAndReturn(run func(context.Context, DatabaseTransactionFunc) error) *MockDatabase_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTeamExternalReferences provides a mock function with given fields: ctx, params
func (_m *MockDatabase) UpdateTeamExternalReferences(ctx context.Context, params gensql.UpdateTeamExternalReferencesParams) (*Team, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTeamExternalReferences")
	}

	var r0 *Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, gensql.UpdateTeamExternalReferencesParams) (*Team, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, gensql.UpdateTeamExternalReferencesParams) *Team); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, gensql.UpdateTeamExternalReferencesParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_UpdateTeamExternalReferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTeamExternalReferences'
type MockDatabase_UpdateTeamExternalReferences_Call struct {
	*mock.Call
}

// UpdateTeamExternalReferences is a helper method to define mock.On call
//   - ctx context.Context
//   - params gensql.UpdateTeamExternalReferencesParams
func (_e *MockDatabase_Expecter) UpdateTeamExternalReferences(ctx interface{}, params interface{}) *MockDatabase_UpdateTeamExternalReferences_Call {
	return &MockDatabase_UpdateTeamExternalReferences_Call{Call: _e.mock.On("UpdateTeamExternalReferences", ctx, params)}
}

func (_c *MockDatabase_UpdateTeamExternalReferences_Call) Run(run func(ctx context.Context, params gensql.UpdateTeamExternalReferencesParams)) *MockDatabase_UpdateTeamExternalReferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(gensql.UpdateTeamExternalReferencesParams))
	})
	return _c
}

func (_c *MockDatabase_UpdateTeamExternalReferences_Call) Return(_a0 *Team, _a1 error) *MockDatabase_UpdateTeamExternalReferences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_UpdateTeamExternalReferences_Call) RunAndReturn(run func(context.Context, gensql.UpdateTeamExternalReferencesParams) (*Team, error)) *MockDatabase_UpdateTeamExternalReferences_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, userID, name, email, externalID
func (_m *MockDatabase) UpdateUser(ctx context.Context, userID uuid.UUID, name string, email string, externalID string) (*User, error) {
	ret := _m.Called(ctx, userID, name, email, externalID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, string) (*User, error)); ok {
		return rf(ctx, userID, name, email, externalID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, string) *User); ok {
		r0 = rf(ctx, userID, name, email, externalID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, string, string) error); ok {
		r1 = rf(ctx, userID, name, email, externalID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockDatabase_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - name string
//   - email string
//   - externalID string
func (_e *MockDatabase_Expecter) UpdateUser(ctx interface{}, userID interface{}, name interface{}, email interface{}, externalID interface{}) *MockDatabase_UpdateUser_Call {
	return &MockDatabase_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, userID, name, email, externalID)}
}

func (_c *MockDatabase_UpdateUser_Call) Run(run func(ctx context.Context, userID uuid.UUID, name string, email string, externalID string)) *MockDatabase_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockDatabase_UpdateUser_Call) Return(_a0 *User, _a1 error) *MockDatabase_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_UpdateUser_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, string, string) (*User, error)) *MockDatabase_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertTeamEnvironment provides a mock function with given fields: ctx, teamSlug, environment, slackChannel, gcpProjectID
func (_m *MockDatabase) UpsertTeamEnvironment(ctx context.Context, teamSlug slug.Slug, environment string, slackChannel *string, gcpProjectID *string) error {
	ret := _m.Called(ctx, teamSlug, environment, slackChannel, gcpProjectID)

	if len(ret) == 0 {
		panic("no return value specified for UpsertTeamEnvironment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, string, *string, *string) error); ok {
		r0 = rf(ctx, teamSlug, environment, slackChannel, gcpProjectID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_UpsertTeamEnvironment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertTeamEnvironment'
type MockDatabase_UpsertTeamEnvironment_Call struct {
	*mock.Call
}

// UpsertTeamEnvironment is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
//   - environment string
//   - slackChannel *string
//   - gcpProjectID *string
func (_e *MockDatabase_Expecter) UpsertTeamEnvironment(ctx interface{}, teamSlug interface{}, environment interface{}, slackChannel interface{}, gcpProjectID interface{}) *MockDatabase_UpsertTeamEnvironment_Call {
	return &MockDatabase_UpsertTeamEnvironment_Call{Call: _e.mock.On("UpsertTeamEnvironment", ctx, teamSlug, environment, slackChannel, gcpProjectID)}
}

func (_c *MockDatabase_UpsertTeamEnvironment_Call) Run(run func(ctx context.Context, teamSlug slug.Slug, environment string, slackChannel *string, gcpProjectID *string)) *MockDatabase_UpsertTeamEnvironment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug), args[2].(string), args[3].(*string), args[4].(*string))
	})
	return _c
}

func (_c *MockDatabase_UpsertTeamEnvironment_Call) Return(_a0 error) *MockDatabase_UpsertTeamEnvironment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_UpsertTeamEnvironment_Call) RunAndReturn(run func(context.Context, slug.Slug, string, *string, *string) error) *MockDatabase_UpsertTeamEnvironment_Call {
	_c.Call.Return(run)
	return _c
}

// UserIsTeamOwner provides a mock function with given fields: ctx, userID, teamSlug
func (_m *MockDatabase) UserIsTeamOwner(ctx context.Context, userID uuid.UUID, teamSlug slug.Slug) (bool, error) {
	ret := _m.Called(ctx, userID, teamSlug)

	if len(ret) == 0 {
		panic("no return value specified for UserIsTeamOwner")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, slug.Slug) (bool, error)); ok {
		return rf(ctx, userID, teamSlug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, slug.Slug) bool); ok {
		r0 = rf(ctx, userID, teamSlug)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, slug.Slug) error); ok {
		r1 = rf(ctx, userID, teamSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_UserIsTeamOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserIsTeamOwner'
type MockDatabase_UserIsTeamOwner_Call struct {
	*mock.Call
}

// UserIsTeamOwner is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - teamSlug slug.Slug
func (_e *MockDatabase_Expecter) UserIsTeamOwner(ctx interface{}, userID interface{}, teamSlug interface{}) *MockDatabase_UserIsTeamOwner_Call {
	return &MockDatabase_UserIsTeamOwner_Call{Call: _e.mock.On("UserIsTeamOwner", ctx, userID, teamSlug)}
}

func (_c *MockDatabase_UserIsTeamOwner_Call) Run(run func(ctx context.Context, userID uuid.UUID, teamSlug slug.Slug)) *MockDatabase_UserIsTeamOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(slug.Slug))
	})
	return _c
}

func (_c *MockDatabase_UserIsTeamOwner_Call) Return(_a0 bool, _a1 error) *MockDatabase_UserIsTeamOwner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_UserIsTeamOwner_Call) RunAndReturn(run func(context.Context, uuid.UUID, slug.Slug) (bool, error)) *MockDatabase_UserIsTeamOwner_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDatabase creates a new instance of MockDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabase(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockDatabase {
	mock := &MockDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
