// Code generated by sqlc. DO NOT EDIT.
// source: batch.go

package eventsql

import (
	"context"
	"errors"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const upsert = `-- name: Upsert :batchexec
INSERT INTO
	k8s_events (
		uid,
		environment_name,
		involved_kind,
		involved_name,
		involved_namespace,
		data,
		reason,
		triggered_at
	)
VALUES
	(
		$1,
		$2,
		$3,
		$4,
		$5,
		$6,
		$7,
		$8
	)
ON CONFLICT (uid) DO NOTHING
`

type UpsertBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type UpsertParams struct {
	Uid               uuid.UUID
	EnvironmentName   string
	InvolvedKind      string
	InvolvedName      string
	InvolvedNamespace string
	Data              []byte
	Reason            string
	TriggeredAt       pgtype.Timestamptz
}

func (q *Queries) Upsert(ctx context.Context, arg []UpsertParams) *UpsertBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Uid,
			a.EnvironmentName,
			a.InvolvedKind,
			a.InvolvedName,
			a.InvolvedNamespace,
			a.Data,
			a.Reason,
			a.TriggeredAt,
		}
		batch.Queue(upsert, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &UpsertBatchResults{br, len(arg), false}
}

func (b *UpsertBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *UpsertBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
