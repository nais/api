// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package grpcusersql

import (
	"context"

	"github.com/google/uuid"
)

const count = `-- name: Count :one
SELECT
	COUNT(*)
FROM
	users
`

func (q *Queries) Count(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, count)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getByEmail = `-- name: GetByEmail :one
SELECT
	id, email, name, external_id
FROM
	users
WHERE
	email = LOWER($1)
`

func (q *Queries) GetByEmail(ctx context.Context, email string) (*User, error) {
	row := q.db.QueryRow(ctx, getByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.ExternalID,
	)
	return &i, err
}

const getByExternalID = `-- name: GetByExternalID :one
SELECT
	id, email, name, external_id
FROM
	users
WHERE
	external_id = $1
`

func (q *Queries) GetByExternalID(ctx context.Context, externalID string) (*User, error) {
	row := q.db.QueryRow(ctx, getByExternalID, externalID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.ExternalID,
	)
	return &i, err
}

const getByID = `-- name: GetByID :one
SELECT
	id, email, name, external_id
FROM
	users
WHERE
	id = $1
`

func (q *Queries) GetByID(ctx context.Context, id uuid.UUID) (*User, error) {
	row := q.db.QueryRow(ctx, getByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.ExternalID,
	)
	return &i, err
}

const list = `-- name: List :many
SELECT
	id, email, name, external_id
FROM
	users
ORDER BY
	name,
	email ASC
LIMIT
	$2
OFFSET
	$1
`

type ListParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) List(ctx context.Context, arg ListParams) ([]*User, error) {
	rows, err := q.db.Query(ctx, list, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.ExternalID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
