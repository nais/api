// Code generated by mockery. DO NOT EDIT.

package grpcteamsql

import (
	context "context"

	slug "github.com/nais/api/internal/slug"
	mock "github.com/stretchr/testify/mock"
)

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
}

type MockQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerier) EXPECT() *MockQuerier_Expecter {
	return &MockQuerier_Expecter{mock: &_m.Mock}
}

// DeleteTeam provides a mock function with given fields: ctx, argSlug
func (_m *MockQuerier) DeleteTeam(ctx context.Context, argSlug slug.Slug) error {
	ret := _m.Called(ctx, argSlug)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTeam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) error); ok {
		r0 = rf(ctx, argSlug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_DeleteTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTeam'
type MockQuerier_DeleteTeam_Call struct {
	*mock.Call
}

// DeleteTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - argSlug slug.Slug
func (_e *MockQuerier_Expecter) DeleteTeam(ctx interface{}, argSlug interface{}) *MockQuerier_DeleteTeam_Call {
	return &MockQuerier_DeleteTeam_Call{Call: _e.mock.On("DeleteTeam", ctx, argSlug)}
}

func (_c *MockQuerier_DeleteTeam_Call) Run(run func(ctx context.Context, argSlug slug.Slug)) *MockQuerier_DeleteTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug))
	})
	return _c
}

func (_c *MockQuerier_DeleteTeam_Call) Return(_a0 error) *MockQuerier_DeleteTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_DeleteTeam_Call) RunAndReturn(run func(context.Context, slug.Slug) error) *MockQuerier_DeleteTeam_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamBySlug provides a mock function with given fields: ctx, argSlug
func (_m *MockQuerier) GetTeamBySlug(ctx context.Context, argSlug slug.Slug) (*Team, error) {
	ret := _m.Called(ctx, argSlug)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamBySlug")
	}

	var r0 *Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) (*Team, error)); ok {
		return rf(ctx, argSlug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) *Team); ok {
		r0 = rf(ctx, argSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug) error); ok {
		r1 = rf(ctx, argSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetTeamBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamBySlug'
type MockQuerier_GetTeamBySlug_Call struct {
	*mock.Call
}

// GetTeamBySlug is a helper method to define mock.On call
//   - ctx context.Context
//   - argSlug slug.Slug
func (_e *MockQuerier_Expecter) GetTeamBySlug(ctx interface{}, argSlug interface{}) *MockQuerier_GetTeamBySlug_Call {
	return &MockQuerier_GetTeamBySlug_Call{Call: _e.mock.On("GetTeamBySlug", ctx, argSlug)}
}

func (_c *MockQuerier_GetTeamBySlug_Call) Run(run func(ctx context.Context, argSlug slug.Slug)) *MockQuerier_GetTeamBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug))
	})
	return _c
}

func (_c *MockQuerier_GetTeamBySlug_Call) Return(_a0 *Team, _a1 error) *MockQuerier_GetTeamBySlug_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetTeamBySlug_Call) RunAndReturn(run func(context.Context, slug.Slug) (*Team, error)) *MockQuerier_GetTeamBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamEnvironments provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) GetTeamEnvironments(ctx context.Context, arg GetTeamEnvironmentsParams) ([]*TeamAllEnvironment, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamEnvironments")
	}

	var r0 []*TeamAllEnvironment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GetTeamEnvironmentsParams) ([]*TeamAllEnvironment, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetTeamEnvironmentsParams) []*TeamAllEnvironment); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*TeamAllEnvironment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetTeamEnvironmentsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetTeamEnvironments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamEnvironments'
type MockQuerier_GetTeamEnvironments_Call struct {
	*mock.Call
}

// GetTeamEnvironments is a helper method to define mock.On call
//   - ctx context.Context
//   - arg GetTeamEnvironmentsParams
func (_e *MockQuerier_Expecter) GetTeamEnvironments(ctx interface{}, arg interface{}) *MockQuerier_GetTeamEnvironments_Call {
	return &MockQuerier_GetTeamEnvironments_Call{Call: _e.mock.On("GetTeamEnvironments", ctx, arg)}
}

func (_c *MockQuerier_GetTeamEnvironments_Call) Run(run func(ctx context.Context, arg GetTeamEnvironmentsParams)) *MockQuerier_GetTeamEnvironments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(GetTeamEnvironmentsParams))
	})
	return _c
}

func (_c *MockQuerier_GetTeamEnvironments_Call) Return(_a0 []*TeamAllEnvironment, _a1 error) *MockQuerier_GetTeamEnvironments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetTeamEnvironments_Call) RunAndReturn(run func(context.Context, GetTeamEnvironmentsParams) ([]*TeamAllEnvironment, error)) *MockQuerier_GetTeamEnvironments_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamEnvironmentsCount provides a mock function with given fields: ctx, teamSlug
func (_m *MockQuerier) GetTeamEnvironmentsCount(ctx context.Context, teamSlug slug.Slug) (int64, error) {
	ret := _m.Called(ctx, teamSlug)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamEnvironmentsCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) (int64, error)); ok {
		return rf(ctx, teamSlug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) int64); ok {
		r0 = rf(ctx, teamSlug)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug) error); ok {
		r1 = rf(ctx, teamSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetTeamEnvironmentsCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamEnvironmentsCount'
type MockQuerier_GetTeamEnvironmentsCount_Call struct {
	*mock.Call
}

// GetTeamEnvironmentsCount is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
func (_e *MockQuerier_Expecter) GetTeamEnvironmentsCount(ctx interface{}, teamSlug interface{}) *MockQuerier_GetTeamEnvironmentsCount_Call {
	return &MockQuerier_GetTeamEnvironmentsCount_Call{Call: _e.mock.On("GetTeamEnvironmentsCount", ctx, teamSlug)}
}

func (_c *MockQuerier_GetTeamEnvironmentsCount_Call) Run(run func(ctx context.Context, teamSlug slug.Slug)) *MockQuerier_GetTeamEnvironmentsCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug))
	})
	return _c
}

func (_c *MockQuerier_GetTeamEnvironmentsCount_Call) Return(_a0 int64, _a1 error) *MockQuerier_GetTeamEnvironmentsCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetTeamEnvironmentsCount_Call) RunAndReturn(run func(context.Context, slug.Slug) (int64, error)) *MockQuerier_GetTeamEnvironmentsCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamMembers provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) GetTeamMembers(ctx context.Context, arg GetTeamMembersParams) ([]*User, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamMembers")
	}

	var r0 []*User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GetTeamMembersParams) ([]*User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetTeamMembersParams) []*User); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetTeamMembersParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetTeamMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamMembers'
type MockQuerier_GetTeamMembers_Call struct {
	*mock.Call
}

// GetTeamMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - arg GetTeamMembersParams
func (_e *MockQuerier_Expecter) GetTeamMembers(ctx interface{}, arg interface{}) *MockQuerier_GetTeamMembers_Call {
	return &MockQuerier_GetTeamMembers_Call{Call: _e.mock.On("GetTeamMembers", ctx, arg)}
}

func (_c *MockQuerier_GetTeamMembers_Call) Run(run func(ctx context.Context, arg GetTeamMembersParams)) *MockQuerier_GetTeamMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(GetTeamMembersParams))
	})
	return _c
}

func (_c *MockQuerier_GetTeamMembers_Call) Return(_a0 []*User, _a1 error) *MockQuerier_GetTeamMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetTeamMembers_Call) RunAndReturn(run func(context.Context, GetTeamMembersParams) ([]*User, error)) *MockQuerier_GetTeamMembers_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamMembersCount provides a mock function with given fields: ctx, teamSlug
func (_m *MockQuerier) GetTeamMembersCount(ctx context.Context, teamSlug slug.Slug) (int64, error) {
	ret := _m.Called(ctx, teamSlug)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamMembersCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) (int64, error)); ok {
		return rf(ctx, teamSlug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) int64); ok {
		r0 = rf(ctx, teamSlug)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug) error); ok {
		r1 = rf(ctx, teamSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetTeamMembersCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamMembersCount'
type MockQuerier_GetTeamMembersCount_Call struct {
	*mock.Call
}

// GetTeamMembersCount is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
func (_e *MockQuerier_Expecter) GetTeamMembersCount(ctx interface{}, teamSlug interface{}) *MockQuerier_GetTeamMembersCount_Call {
	return &MockQuerier_GetTeamMembersCount_Call{Call: _e.mock.On("GetTeamMembersCount", ctx, teamSlug)}
}

func (_c *MockQuerier_GetTeamMembersCount_Call) Run(run func(ctx context.Context, teamSlug slug.Slug)) *MockQuerier_GetTeamMembersCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug))
	})
	return _c
}

func (_c *MockQuerier_GetTeamMembersCount_Call) Return(_a0 int64, _a1 error) *MockQuerier_GetTeamMembersCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetTeamMembersCount_Call) RunAndReturn(run func(context.Context, slug.Slug) (int64, error)) *MockQuerier_GetTeamMembersCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamRepositories provides a mock function with given fields: ctx, teamSlug
func (_m *MockQuerier) GetTeamRepositories(ctx context.Context, teamSlug slug.Slug) ([]string, error) {
	ret := _m.Called(ctx, teamSlug)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamRepositories")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) ([]string, error)); ok {
		return rf(ctx, teamSlug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) []string); ok {
		r0 = rf(ctx, teamSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug) error); ok {
		r1 = rf(ctx, teamSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetTeamRepositories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamRepositories'
type MockQuerier_GetTeamRepositories_Call struct {
	*mock.Call
}

// GetTeamRepositories is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
func (_e *MockQuerier_Expecter) GetTeamRepositories(ctx interface{}, teamSlug interface{}) *MockQuerier_GetTeamRepositories_Call {
	return &MockQuerier_GetTeamRepositories_Call{Call: _e.mock.On("GetTeamRepositories", ctx, teamSlug)}
}

func (_c *MockQuerier_GetTeamRepositories_Call) Run(run func(ctx context.Context, teamSlug slug.Slug)) *MockQuerier_GetTeamRepositories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug))
	})
	return _c
}

func (_c *MockQuerier_GetTeamRepositories_Call) Return(_a0 []string, _a1 error) *MockQuerier_GetTeamRepositories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetTeamRepositories_Call) RunAndReturn(run func(context.Context, slug.Slug) ([]string, error)) *MockQuerier_GetTeamRepositories_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeams provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) GetTeams(ctx context.Context, arg GetTeamsParams) ([]*Team, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetTeams")
	}

	var r0 []*Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GetTeamsParams) ([]*Team, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetTeamsParams) []*Team); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetTeamsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeams'
type MockQuerier_GetTeams_Call struct {
	*mock.Call
}

// GetTeams is a helper method to define mock.On call
//   - ctx context.Context
//   - arg GetTeamsParams
func (_e *MockQuerier_Expecter) GetTeams(ctx interface{}, arg interface{}) *MockQuerier_GetTeams_Call {
	return &MockQuerier_GetTeams_Call{Call: _e.mock.On("GetTeams", ctx, arg)}
}

func (_c *MockQuerier_GetTeams_Call) Run(run func(ctx context.Context, arg GetTeamsParams)) *MockQuerier_GetTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(GetTeamsParams))
	})
	return _c
}

func (_c *MockQuerier_GetTeams_Call) Return(_a0 []*Team, _a1 error) *MockQuerier_GetTeams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetTeams_Call) RunAndReturn(run func(context.Context, GetTeamsParams) ([]*Team, error)) *MockQuerier_GetTeams_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamsCount provides a mock function with given fields: ctx
func (_m *MockQuerier) GetTeamsCount(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamsCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetTeamsCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamsCount'
type MockQuerier_GetTeamsCount_Call struct {
	*mock.Call
}

// GetTeamsCount is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) GetTeamsCount(ctx interface{}) *MockQuerier_GetTeamsCount_Call {
	return &MockQuerier_GetTeamsCount_Call{Call: _e.mock.On("GetTeamsCount", ctx)}
}

func (_c *MockQuerier_GetTeamsCount_Call) Run(run func(ctx context.Context)) *MockQuerier_GetTeamsCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_GetTeamsCount_Call) Return(_a0 int64, _a1 error) *MockQuerier_GetTeamsCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetTeamsCount_Call) RunAndReturn(run func(context.Context) (int64, error)) *MockQuerier_GetTeamsCount_Call {
	_c.Call.Return(run)
	return _c
}

// IsTeamRepository provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) IsTeamRepository(ctx context.Context, arg IsTeamRepositoryParams) (bool, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for IsTeamRepository")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, IsTeamRepositoryParams) (bool, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, IsTeamRepositoryParams) bool); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, IsTeamRepositoryParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_IsTeamRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTeamRepository'
type MockQuerier_IsTeamRepository_Call struct {
	*mock.Call
}

// IsTeamRepository is a helper method to define mock.On call
//   - ctx context.Context
//   - arg IsTeamRepositoryParams
func (_e *MockQuerier_Expecter) IsTeamRepository(ctx interface{}, arg interface{}) *MockQuerier_IsTeamRepository_Call {
	return &MockQuerier_IsTeamRepository_Call{Call: _e.mock.On("IsTeamRepository", ctx, arg)}
}

func (_c *MockQuerier_IsTeamRepository_Call) Run(run func(ctx context.Context, arg IsTeamRepositoryParams)) *MockQuerier_IsTeamRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(IsTeamRepositoryParams))
	})
	return _c
}

func (_c *MockQuerier_IsTeamRepository_Call) Return(_a0 bool, _a1 error) *MockQuerier_IsTeamRepository_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_IsTeamRepository_Call) RunAndReturn(run func(context.Context, IsTeamRepositoryParams) (bool, error)) *MockQuerier_IsTeamRepository_Call {
	_c.Call.Return(run)
	return _c
}

// SetLastSuccessfulSyncForTeam provides a mock function with given fields: ctx, argSlug
func (_m *MockQuerier) SetLastSuccessfulSyncForTeam(ctx context.Context, argSlug slug.Slug) error {
	ret := _m.Called(ctx, argSlug)

	if len(ret) == 0 {
		panic("no return value specified for SetLastSuccessfulSyncForTeam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) error); ok {
		r0 = rf(ctx, argSlug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_SetLastSuccessfulSyncForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLastSuccessfulSyncForTeam'
type MockQuerier_SetLastSuccessfulSyncForTeam_Call struct {
	*mock.Call
}

// SetLastSuccessfulSyncForTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - argSlug slug.Slug
func (_e *MockQuerier_Expecter) SetLastSuccessfulSyncForTeam(ctx interface{}, argSlug interface{}) *MockQuerier_SetLastSuccessfulSyncForTeam_Call {
	return &MockQuerier_SetLastSuccessfulSyncForTeam_Call{Call: _e.mock.On("SetLastSuccessfulSyncForTeam", ctx, argSlug)}
}

func (_c *MockQuerier_SetLastSuccessfulSyncForTeam_Call) Run(run func(ctx context.Context, argSlug slug.Slug)) *MockQuerier_SetLastSuccessfulSyncForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug))
	})
	return _c
}

func (_c *MockQuerier_SetLastSuccessfulSyncForTeam_Call) Return(_a0 error) *MockQuerier_SetLastSuccessfulSyncForTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_SetLastSuccessfulSyncForTeam_Call) RunAndReturn(run func(context.Context, slug.Slug) error) *MockQuerier_SetLastSuccessfulSyncForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTeamExternalReferences provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) UpdateTeamExternalReferences(ctx context.Context, arg UpdateTeamExternalReferencesParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTeamExternalReferences")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, UpdateTeamExternalReferencesParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_UpdateTeamExternalReferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTeamExternalReferences'
type MockQuerier_UpdateTeamExternalReferences_Call struct {
	*mock.Call
}

// UpdateTeamExternalReferences is a helper method to define mock.On call
//   - ctx context.Context
//   - arg UpdateTeamExternalReferencesParams
func (_e *MockQuerier_Expecter) UpdateTeamExternalReferences(ctx interface{}, arg interface{}) *MockQuerier_UpdateTeamExternalReferences_Call {
	return &MockQuerier_UpdateTeamExternalReferences_Call{Call: _e.mock.On("UpdateTeamExternalReferences", ctx, arg)}
}

func (_c *MockQuerier_UpdateTeamExternalReferences_Call) Run(run func(ctx context.Context, arg UpdateTeamExternalReferencesParams)) *MockQuerier_UpdateTeamExternalReferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(UpdateTeamExternalReferencesParams))
	})
	return _c
}

func (_c *MockQuerier_UpdateTeamExternalReferences_Call) Return(_a0 error) *MockQuerier_UpdateTeamExternalReferences_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_UpdateTeamExternalReferences_Call) RunAndReturn(run func(context.Context, UpdateTeamExternalReferencesParams) error) *MockQuerier_UpdateTeamExternalReferences_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertTeamEnvironment provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) UpsertTeamEnvironment(ctx context.Context, arg UpsertTeamEnvironmentParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpsertTeamEnvironment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, UpsertTeamEnvironmentParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_UpsertTeamEnvironment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertTeamEnvironment'
type MockQuerier_UpsertTeamEnvironment_Call struct {
	*mock.Call
}

// UpsertTeamEnvironment is a helper method to define mock.On call
//   - ctx context.Context
//   - arg UpsertTeamEnvironmentParams
func (_e *MockQuerier_Expecter) UpsertTeamEnvironment(ctx interface{}, arg interface{}) *MockQuerier_UpsertTeamEnvironment_Call {
	return &MockQuerier_UpsertTeamEnvironment_Call{Call: _e.mock.On("UpsertTeamEnvironment", ctx, arg)}
}

func (_c *MockQuerier_UpsertTeamEnvironment_Call) Run(run func(ctx context.Context, arg UpsertTeamEnvironmentParams)) *MockQuerier_UpsertTeamEnvironment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(UpsertTeamEnvironmentParams))
	})
	return _c
}

func (_c *MockQuerier_UpsertTeamEnvironment_Call) Return(_a0 error) *MockQuerier_UpsertTeamEnvironment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_UpsertTeamEnvironment_Call) RunAndReturn(run func(context.Context, UpsertTeamEnvironmentParams) error) *MockQuerier_UpsertTeamEnvironment_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
