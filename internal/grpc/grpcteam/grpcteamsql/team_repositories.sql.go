// Code generated by sqlc. DO NOT EDIT.
// source: team_repositories.sql

package grpcteamsql

import (
	"context"

	"github.com/nais/api/internal/slug"
)

const getTeamRepositories = `-- name: GetTeamRepositories :many
SELECT
	github_repository
FROM
	team_repositories
WHERE
	team_slug = $1
ORDER BY
	github_repository ASC
`

func (q *Queries) GetTeamRepositories(ctx context.Context, teamSlug slug.Slug) ([]string, error) {
	rows, err := q.db.Query(ctx, getTeamRepositories, teamSlug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var github_repository string
		if err := rows.Scan(&github_repository); err != nil {
			return nil, err
		}
		items = append(items, github_repository)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isTeamRepository = `-- name: IsTeamRepository :one
SELECT
	COUNT(*) > 0
FROM
	team_repositories
WHERE
	team_slug = $1
	AND github_repository = $2
`

type IsTeamRepositoryParams struct {
	TeamSlug         slug.Slug
	GithubRepository string
}

func (q *Queries) IsTeamRepository(ctx context.Context, arg IsTeamRepositoryParams) (bool, error) {
	row := q.db.QueryRow(ctx, isTeamRepository, arg.TeamSlug, arg.GithubRepository)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}
