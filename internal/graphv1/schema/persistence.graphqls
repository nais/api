interface Persistence implements Node {
  id: ID!
  name: String!
  team: Team!
  environment: TeamEnvironment!
}

type BigQueryDataset implements Persistence & Node {
  id: ID!
  name: String!
  team: Team!
  environment: TeamEnvironment!
  cascadingDelete: Boolean!
  description: String
  access: [BigQueryDatasetAccess!]!
  status: BigQueryDatasetStatus!
  workload: Workload
  cost: Float!
}

type BigQueryDatasetAccess {
  role: String!
  email: String!
}

type BigQueryDatasetStatus {
  creationTime: Time!
  lastModifiedTime: Time
}

type Bucket implements Persistence & Node {
  id: ID!
  name: String!
  team: Team!
  environment: TeamEnvironment!
  cascadingDelete: Boolean!
  publicAccessPrevention: String!
  uniformBucketLevelAccess: Boolean!
  cors: [BucketCors!]!
  projectId: String!
  workload: Workload
  status: BucketStatus!
}

type BucketCors {
  maxAgeSeconds: Int
  methods: [String!]!
  origins: [String!]!
  responseHeaders: [String!]!
}

type BucketStatus {
  state: String!
}

type KafkaTopic implements Persistence & Node {
  id: ID!
  name: String!
  team: Team!
  environment: TeamEnvironment!
  acl(
    first: Int
    after: Cursor
    last: Int
    before: Cursor
    filter: KafkaTopicAclFilter
    orderBy: KafkaTopicAclOrder
  ): KafkaTopicAclConnection!
  configuration: KafkaTopicConfiguration
  pool: String!
  status: KafkaTopicStatus!
}

type KafkaTopicAcl {
  access: String!
  applicationName: String!
  teamName: String!
  team: Team
  workload: Workload
}

type KafkaTopicConfiguration {
  cleanupPolicy: String
  maxMessageBytes: Int
  minimumInSyncReplicas: Int
  partitions: Int
  replication: Int
  retentionBytes: Int
  retentionHours: Int
  segmentHours: Int
}

type KafkaTopicStatus {
  state: String!
}

type OpenSearch implements Persistence & Node {
  id: ID!
  name: String!
  team: Team!
  environment: TeamEnvironment!
  status: OpenSearchStatus!
  workload: Workload
  access: [OpenSearchAccess!]!
  cost: Float!
}

type OpenSearchAccess {
  workload: Workload!
  role: String!
}

type OpenSearchStatus {
  state: String!
}

type RedisInstance implements Persistence & Node {
  id: ID!
  name: String!
  team: Team!
  environment: TeamEnvironment!
  access: [RedisInstanceAccess!]!
  cost: Float!
  workload: Workload
  status: RedisInstanceStatus!
}

type RedisInstanceAccess {
  workload: Workload!
  role: String!
}

type RedisInstanceStatus {
  state: String!
}

type BigQueryDatasetConnection {
  pageInfo: PageInfo!
  edges: [BigQueryDatasetEdge!]!
}

type BucketConnection {
  pageInfo: PageInfo!
  edges: [BucketEdge!]!
}

type KafkaTopicConnection {
  pageInfo: PageInfo!
  edges: [KafkaTopicEdge!]!
}

type KafkaTopicAclConnection {
  pageInfo: PageInfo!
  edges: [KafkaTopicAclEdge!]!
}

type OpenSearchConnection {
  pageInfo: PageInfo!
  edges: [OpenSearchEdge!]!
}

type RedisInstanceConnection {
  pageInfo: PageInfo!
  edges: [RedisInstanceEdge!]!
}

type BigQueryDatasetEdge {
  cursor: Cursor!
  node: BigQueryDataset!
}

type BucketEdge {
  cursor: Cursor!
  node: Bucket!
}

type KafkaTopicEdge {
  cursor: Cursor!
  node: KafkaTopic!
}

type KafkaTopicAclEdge {
  cursor: Cursor!
  node: KafkaTopicAcl!
}

type OpenSearchEdge {
  cursor: Cursor!
  node: OpenSearch!
}

type RedisInstanceEdge {
  cursor: Cursor!
  node: RedisInstance!
}

input BigQueryDatasetOrder {
  field: BigQueryDatasetOrderField!
  direction: OrderDirection!
}

input BucketOrder {
  field: BucketOrderField!
  direction: OrderDirection!
}

input KafkaTopicAclFilter {
  team: Slug
  application: String
}

input KafkaTopicOrder {
  field: KafkaTopicOrderField!
  direction: OrderDirection!
}

input KafkaTopicAclOrder {
  field: KafkaTopicAclOrderField!
  direction: OrderDirection!
}

input OpenSearchOrder {
  field: OpenSearchOrderField!
  direction: OrderDirection!
}

input RedisInstanceOrder {
  field: RedisInstanceOrderField!
  direction: OrderDirection!
}

enum BigQueryDatasetOrderField {
  NAME
  ENVIRONMENT
}

enum BucketOrderField {
  NAME
  ENVIRONMENT
}

enum KafkaTopicOrderField {
  NAME
  ENVIRONMENT
}

enum KafkaTopicAclOrderField {
  TEAM_SLUG
  CONSUMER
  ACCESS
}

enum OpenSearchOrderField {
  NAME
  ENVIRONMENT
}

enum RedisInstanceOrderField {
  NAME
  ENVIRONMENT
}