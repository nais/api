// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package modelv1

import (
	"fmt"
	"io"
	"strconv"

	"github.com/google/uuid"
)

// Pagination information.
type PageInfo struct {
	// The total amount if items accessible.
	TotalCount int `json:"totalCount"`
	// Whether or not there exists a next page in the data set.
	HasNextPage bool `json:"hasNextPage"`
	// Whether or not there exists a previous page in the data set.
	HasPreviousPage bool   `json:"hasPreviousPage"`
	StartCursor     string `json:"startCursor"`
	EndCursor       string `json:"endCursor"`
}

// The query root for the NAIS GraphQL API.
type Query struct {
}

// User type.
type User struct {
	// Unique ID of the user.
	ID uuid.UUID `json:"id"`
	// The email address of the user.
	Email string `json:"email"`
	// The name of the user.
	Name string `json:"name"`
	// The external ID of the user.
	ExternalID string `json:"externalId"`
	// This field will only be populated via the me query
	IsAdmin bool `json:"isAdmin"`
}

type UserConnection struct {
	PageInfo PageInfo    `json:"pageInfo"`
	Edges    []*UserEdge `json:"edges"`
}

type UserEdge struct {
	Cursor string `json:"cursor"`
	Node   User   `json:"node"`
}

type UserOrder struct {
	Field     UserOrderField `json:"field"`
	Direction OrderDirection `json:"direction"`
}

type OrderDirection string

const (
	// Ascending sort order.
	OrderDirectionAsc OrderDirection = "ASC"
	// Descending sort order.
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserOrderField string

const (
	// Order by name
	UserOrderFieldName UserOrderField = "NAME"
	// Order by email
	UserOrderFieldEmail UserOrderField = "EMAIL"
)

var AllUserOrderField = []UserOrderField{
	UserOrderFieldName,
	UserOrderFieldEmail,
}

func (e UserOrderField) IsValid() bool {
	switch e {
	case UserOrderFieldName, UserOrderFieldEmail:
		return true
	}
	return false
}

func (e UserOrderField) String() string {
	return string(e)
}

func (e *UserOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserOrderField", str)
	}
	return nil
}

func (e UserOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
