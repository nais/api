// Code generated by sqlc. DO NOT EDIT.

package authzsql

import (
	"context"

	"github.com/google/uuid"
)

type Querier interface {
	AssignGlobalRoleToUser(ctx context.Context, arg AssignGlobalRoleToUserParams) error
	AssignRoleToServiceAccount(ctx context.Context, arg AssignRoleToServiceAccountParams) error
	AssignTeamRoleToUser(ctx context.Context, arg AssignTeamRoleToUserParams) error
	CountRoles(ctx context.Context) (int64, error)
	CountRolesForServiceAccount(ctx context.Context, serviceAccountID uuid.UUID) (int64, error)
	GetRoleByName(ctx context.Context, name string) (*Role, error)
	GetRolesForServiceAccounts(ctx context.Context, serviceAccountIds []uuid.UUID) ([]*GetRolesForServiceAccountsRow, error)
	// TODO: This should be rewritten to fetch rows from the roles table instead as it uses the authz.Role struct, which reflects rows from the roles table.
	GetRolesForUsers(ctx context.Context, userIds []uuid.UUID) ([]*GetRolesForUsersRow, error)
	HasGlobalAuthorization(ctx context.Context, arg HasGlobalAuthorizationParams) (bool, error)
	HasTeamAuthorization(ctx context.Context, arg HasTeamAuthorizationParams) (bool, error)
	ListRoles(ctx context.Context, arg ListRolesParams) ([]*Role, error)
	ListRolesForServiceAccount(ctx context.Context, arg ListRolesForServiceAccountParams) ([]*Role, error)
	RevokeRoleFromServiceAccount(ctx context.Context, arg RevokeRoleFromServiceAccountParams) error
	ServiceAccountCanAssignRole(ctx context.Context, arg ServiceAccountCanAssignRoleParams) (bool, error)
	ServiceAccountHasRole(ctx context.Context, arg ServiceAccountHasRoleParams) (bool, error)
	UserCanAssignRole(ctx context.Context, arg UserCanAssignRoleParams) (bool, error)
}

var _ Querier = (*Queries)(nil)
