// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package authn

import (
	"net/http"

	"github.com/nais/api/internal/session"
	mock "github.com/stretchr/testify/mock"
)

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

type MockHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandler) EXPECT() *MockHandler_Expecter {
	return &MockHandler_Expecter{mock: &_m.Mock}
}

// Callback provides a mock function for the type MockHandler
func (_mock *MockHandler) Callback(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockHandler_Callback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Callback'
type MockHandler_Callback_Call struct {
	*mock.Call
}

// Callback is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockHandler_Expecter) Callback(w interface{}, r interface{}) *MockHandler_Callback_Call {
	return &MockHandler_Callback_Call{Call: _e.mock.On("Callback", w, r)}
}

func (_c *MockHandler_Callback_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockHandler_Callback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHandler_Callback_Call) Return() *MockHandler_Callback_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_Callback_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockHandler_Callback_Call {
	_c.Run(run)
	return _c
}

// DeleteCookie provides a mock function for the type MockHandler
func (_mock *MockHandler) DeleteCookie(w http.ResponseWriter, name string) {
	_mock.Called(w, name)
	return
}

// MockHandler_DeleteCookie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCookie'
type MockHandler_DeleteCookie_Call struct {
	*mock.Call
}

// DeleteCookie is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - name string
func (_e *MockHandler_Expecter) DeleteCookie(w interface{}, name interface{}) *MockHandler_DeleteCookie_Call {
	return &MockHandler_DeleteCookie_Call{Call: _e.mock.On("DeleteCookie", w, name)}
}

func (_c *MockHandler_DeleteCookie_Call) Run(run func(w http.ResponseWriter, name string)) *MockHandler_DeleteCookie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHandler_DeleteCookie_Call) Return() *MockHandler_DeleteCookie_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_DeleteCookie_Call) RunAndReturn(run func(w http.ResponseWriter, name string)) *MockHandler_DeleteCookie_Call {
	_c.Run(run)
	return _c
}

// Login provides a mock function for the type MockHandler
func (_mock *MockHandler) Login(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockHandler_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockHandler_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockHandler_Expecter) Login(w interface{}, r interface{}) *MockHandler_Login_Call {
	return &MockHandler_Login_Call{Call: _e.mock.On("Login", w, r)}
}

func (_c *MockHandler_Login_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockHandler_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHandler_Login_Call) Return() *MockHandler_Login_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_Login_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockHandler_Login_Call {
	_c.Run(run)
	return _c
}

// Logout provides a mock function for the type MockHandler
func (_mock *MockHandler) Logout(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockHandler_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type MockHandler_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockHandler_Expecter) Logout(w interface{}, r interface{}) *MockHandler_Logout_Call {
	return &MockHandler_Logout_Call{Call: _e.mock.On("Logout", w, r)}
}

func (_c *MockHandler_Logout_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockHandler_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHandler_Logout_Call) Return() *MockHandler_Logout_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_Logout_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockHandler_Logout_Call {
	_c.Run(run)
	return _c
}

// SetSessionCookie provides a mock function for the type MockHandler
func (_mock *MockHandler) SetSessionCookie(w http.ResponseWriter, session1 *session.Session) {
	_mock.Called(w, session1)
	return
}

// MockHandler_SetSessionCookie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSessionCookie'
type MockHandler_SetSessionCookie_Call struct {
	*mock.Call
}

// SetSessionCookie is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - session1 *session.Session
func (_e *MockHandler_Expecter) SetSessionCookie(w interface{}, session1 interface{}) *MockHandler_SetSessionCookie_Call {
	return &MockHandler_SetSessionCookie_Call{Call: _e.mock.On("SetSessionCookie", w, session1)}
}

func (_c *MockHandler_SetSessionCookie_Call) Run(run func(w http.ResponseWriter, session1 *session.Session)) *MockHandler_SetSessionCookie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *session.Session
		if args[1] != nil {
			arg1 = args[1].(*session.Session)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHandler_SetSessionCookie_Call) Return() *MockHandler_SetSessionCookie_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_SetSessionCookie_Call) RunAndReturn(run func(w http.ResponseWriter, session1 *session.Session)) *MockHandler_SetSessionCookie_Call {
	_c.Run(run)
	return _c
}
