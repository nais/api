// Code generated by mockery. DO NOT EDIT.

package search

import (
	context "context"

	model "github.com/nais/api/internal/graph/model"
	mock "github.com/stretchr/testify/mock"
)

// MockSearchable is an autogenerated mock type for the Searchable type
type MockSearchable struct {
	mock.Mock
}

type MockSearchable_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSearchable) EXPECT() *MockSearchable_Expecter {
	return &MockSearchable_Expecter{mock: &_m.Mock}
}

// Search provides a mock function with given fields: ctx, q, filter
func (_m *MockSearchable) Search(ctx context.Context, q string, filter *model.SearchFilter) []*Result {
	ret := _m.Called(ctx, q, filter)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []*Result
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.SearchFilter) []*Result); ok {
		r0 = rf(ctx, q, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Result)
		}
	}

	return r0
}

// MockSearchable_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockSearchable_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - q string
//   - filter *model.SearchFilter
func (_e *MockSearchable_Expecter) Search(ctx interface{}, q interface{}, filter interface{}) *MockSearchable_Search_Call {
	return &MockSearchable_Search_Call{Call: _e.mock.On("Search", ctx, q, filter)}
}

func (_c *MockSearchable_Search_Call) Run(run func(ctx context.Context, q string, filter *model.SearchFilter)) *MockSearchable_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*model.SearchFilter))
	})
	return _c
}

func (_c *MockSearchable_Search_Call) Return(_a0 []*Result) *MockSearchable_Search_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchable_Search_Call) RunAndReturn(run func(context.Context, string, *model.SearchFilter) []*Result) *MockSearchable_Search_Call {
	_c.Call.Return(run)
	return _c
}

// SupportsSearchFilter provides a mock function with given fields: filter
func (_m *MockSearchable) SupportsSearchFilter(filter *model.SearchFilter) bool {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for SupportsSearchFilter")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.SearchFilter) bool); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockSearchable_SupportsSearchFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SupportsSearchFilter'
type MockSearchable_SupportsSearchFilter_Call struct {
	*mock.Call
}

// SupportsSearchFilter is a helper method to define mock.On call
//   - filter *model.SearchFilter
func (_e *MockSearchable_Expecter) SupportsSearchFilter(filter interface{}) *MockSearchable_SupportsSearchFilter_Call {
	return &MockSearchable_SupportsSearchFilter_Call{Call: _e.mock.On("SupportsSearchFilter", filter)}
}

func (_c *MockSearchable_SupportsSearchFilter_Call) Run(run func(filter *model.SearchFilter)) *MockSearchable_SupportsSearchFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.SearchFilter))
	})
	return _c
}

func (_c *MockSearchable_SupportsSearchFilter_Call) Return(_a0 bool) *MockSearchable_SupportsSearchFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchable_SupportsSearchFilter_Call) RunAndReturn(run func(*model.SearchFilter) bool) *MockSearchable_SupportsSearchFilter_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSearchable creates a new instance of MockSearchable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSearchable(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockSearchable {
	mock := &MockSearchable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
