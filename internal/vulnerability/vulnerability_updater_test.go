package vulnerability

import (
	"context"
	"github.com/nais/api/internal/k8s"
	"github.com/nais/api/internal/k8s/fake"
	"github.com/nais/api/internal/thirdparty/dependencytrack"
	dpFake "github.com/nais/api/internal/thirdparty/dependencytrack/fake"
	logrustest "github.com/sirupsen/logrus/hooks/test"
	"os"
	"testing"
)

func TestUpdater_UpdateVulnerabilityMetrics(t *testing.T) {
	log, _ := logrustest.NewNullLogger()
	ctx := context.Background()
	dpMock := dpFake.New()
	k8sOpts := []k8s.Opt{}
	k8sOpts = append(k8sOpts, k8s.WithClientsCreator(fake.Clients(os.DirFS("./data/k8s"))))
	//mockDb := db.MockDatabase(t)

	//k8sClient, err := k8s.New(
	//	"test",
	//	k8s.Config{},
	//	mockDb,
	//	log.WithField("test", "k8s"),
	//	k8sOpts...)
	//
	//if err != nil {
	//	t.Errorf("expected no error, got %v", err)
	//}

	//mockDb.EXPECT().GetAllTeams(mock.Anything).Return(
	//	[]*gensql.Team{
	//		{
	//			Slug: "team1",
	//		},
	//	}, nil)
	//
	updater := NewMetricUpdater(nil, dpMock, nil, log)
	_, err := updater.UpdateVulnerabilityMetricsForTeam(ctx, "team1", []*dependencytrack.AppInstance{
		{
			Env:   "test",
			Team:  "team1",
			App:   "test-app",
			Image: "test-image",
		},
	})
	if err != nil {
		t.Errorf("expected no error, got %v", err)
	}
}
