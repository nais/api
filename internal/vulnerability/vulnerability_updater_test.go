package vulnerability

import (
	"context"
	"github.com/nais/api/internal/database/gensql"
	"github.com/nais/api/internal/slug"
	"github.com/nais/api/internal/thirdparty/dependencytrack"
	dpFake "github.com/nais/api/internal/thirdparty/dependencytrack/fake"
	logrustest "github.com/sirupsen/logrus/hooks/test"
	"github.com/stretchr/testify/mock"
	"testing"
)

func TestUpdater_UpdateVulnerabilityMetrics(t *testing.T) {
	log, _ := logrustest.NewNullLogger()
	ctx := context.Background()
	dpMock := dpFake.New()
	mockDb := gensql.NewMockQuerier(t)

	mockDb.EXPECT().CreateDependencytrackProject(
		mock.Anything, "test", slug.Slug("team1"), "test-app", mock.Anything).Return(nil)

	// mockDb.EXPECT().VulnerabilityMetricsUpsert(mock.Anything, mock.Anything).Return(nil)

	updater := NewMetricUpdater(nil, dpMock, mockDb, log)
	result, err := updater.UpsertBatchParams(ctx, "team1", []*dependencytrack.AppInstance{
		{
			Env:   "test",
			Team:  "team1",
			App:   "test-app",
			Image: "test-image",
		},
	})
	if err != nil {
		t.Errorf("expected no error, got %v", err)
	}
	if len(result) != 2 {
		t.Errorf("expected 2 result, got %d", len(result))
	}
}
