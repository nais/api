package vulnerability

import (
	"context"
	"strings"

	"github.com/nais/api/internal/graph/sortfilter"
)

var SortFilterImageVulnerabilities = sortfilter.New[*ImageVulnerability, ImageVulnerabilityOrderField, *struct{}](ImageVulnerabilityOrderFieldIdentifier)

func init() {
	SortFilterImageVulnerabilities.RegisterOrderBy(ImageVulnerabilityOrderFieldIdentifier, func(ctx context.Context, a, b *ImageVulnerability) int {
		return strings.Compare(a.Identifier, b.Identifier)
	})
	SortFilterImageVulnerabilities.RegisterOrderBy(ImageVulnerabilityOrderFieldPackage, func(ctx context.Context, a, b *ImageVulnerability) int {
		return strings.Compare(a.Package, b.Package)
	})
	SortFilterImageVulnerabilities.RegisterOrderBy(ImageVulnerabilityOrderFieldState, func(ctx context.Context, a, b *ImageVulnerability) int {
		return strings.Compare(a.State.String(), b.State.String())
	})
	SortFilterImageVulnerabilities.RegisterConcurrentOrderBy(ImageVulnerabilityOrderFieldSuppressed, func(ctx context.Context, a *ImageVulnerability) int {
		vuln, err := GetImageAnalysisTrail(ctx, a)
		if err != nil {
			return 0
		}

		if vuln.Suppressed {
			return 1
		}

		return 0
	})
	SortFilterImageVulnerabilities.RegisterOrderBy(ImageVulnerabilityOrderFieldSeverity, func(ctx context.Context, a, b *ImageVulnerability) int {
		severityToScore := map[ImageVulnerabilitySeverity]int{
			ImageVulnerabilitySeverityCritical:   5,
			ImageVulnerabilitySeverityHigh:       4,
			ImageVulnerabilitySeverityMedium:     3,
			ImageVulnerabilitySeverityLow:        2,
			ImageVulnerabilitySeverityUnassigned: 1,
		}

		return severityToScore[a.Severity] - severityToScore[b.Severity]
	})
}
