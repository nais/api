package vulnerability

import (
	"github.com/nais/api/internal/slug"
	"github.com/nais/api/internal/workload"
	"github.com/nais/v13s/pkg/api/vulnerabilities"
)

func toImageVulnerability(v *vulnerabilities.Vulnerability) *ImageVulnerability {
	description := v.Cve.Description
	if description == "" {
		description = v.Cve.Title
	}
	img := &ImageVulnerability{
		vulnerabilityID: v.Id,
		Identifier:      v.Cve.Id,
		Severity:        ImageVulnerabilitySeverity(v.Cve.Severity.String()),
		Description:     description,
		Package:         v.Package,
	}

	if v.Suppression != nil {
		imgState := ImageVulnerabilityState("NOT_SET")
		state := ImageVulnerabilityAnalysisState("NOT_SET")
		switch v.GetSuppression().SuppressedReason {
		case vulnerabilities.SuppressState_FALSE_POSITIVE:
			imgState = ImageVulnerabilityStateFalsePositive
			state = ImageVulnerabilityAnalysisStateFalsePositive
		case vulnerabilities.SuppressState_IN_TRIAGE:
			imgState = ImageVulnerabilityStateTriage
			state = ImageVulnerabilityAnalysisStateInTriage
		case vulnerabilities.SuppressState_NOT_AFFECTED:
			imgState = ImageVulnerabilityStateNotAffected
			state = ImageVulnerabilityAnalysisStateNotAffected
		case vulnerabilities.SuppressState_RESOLVED:
			imgState = ImageVulnerabilityStateResolved
			state = ImageVulnerabilityAnalysisStateResolved
		}

		img.State = imgState
		img.AnalysisTrail = &ImageVulnerabilityAnalysisTrail{
			State:      state,
			Suppressed: v.Suppression.Suppressed,
			AllComments: []*ImageVulnerabilityAnalysisComment{{
				Comment:    v.Suppression.SuppressedDetails,
				State:      state,
				Suppressed: v.Suppression.Suppressed,
				OnBehalfOf: v.Suppression.SuppressedBy,
				Timestamp:  v.Suppression.LastUpdated.AsTime(),
			}},
		}
	} else {
		img.AnalysisTrail = &ImageVulnerabilityAnalysisTrail{}
	}
	return img
}

func toWorkloadVulnerabilitySummary(w *vulnerabilities.WorkloadSummary) *WorkloadVulnerabilitySummary {
	wType := workload.TypeApplication
	if w.GetWorkload().GetType() == "job" {
		wType = workload.TypeJob
	}
	return &WorkloadVulnerabilitySummary{
		Summary: &ImageVulnerabilitySummary{
			Critical:   int(w.GetVulnerabilitySummary().Critical),
			High:       int(w.GetVulnerabilitySummary().High),
			Medium:     int(w.GetVulnerabilitySummary().Medium),
			Low:        int(w.GetVulnerabilitySummary().Low),
			Unassigned: int(w.GetVulnerabilitySummary().Unassigned),
			Total:      int(w.GetVulnerabilitySummary().Total),
			RiskScore:  int(w.GetVulnerabilitySummary().RiskScore),
		},
		HasSbom:         w.GetVulnerabilitySummary().GetHasSbom(),
		TeamSlug:        slug.Slug(w.GetWorkload().GetNamespace()),
		EnvironmentName: w.GetWorkload().GetCluster(),
		WorkloadReference: &workload.Reference{
			Name: w.GetWorkload().GetName(),
			Type: wType,
		},
	}
}
