package vulnerability

import (
	"time"

	"github.com/nais/api/internal/slug"
	"github.com/nais/api/internal/workload"
	"github.com/nais/v13s/pkg/api/vulnerabilities"
)

func toImageVulnerability(v *vulnerabilities.Vulnerability) *ImageVulnerability {
	description := v.Cve.Description
	if description == "" {
		description = v.Cve.Title
	}

	var severitySince *time.Time
	if v.SeveritySince != nil {
		t := v.SeveritySince.AsTime()
		severitySince = &t
	}

	imgageVulnerability := &ImageVulnerability{
		vulnerabilityID:          v.Id,
		Identifier:               v.Cve.Id,
		Severity:                 ImageVulnerabilitySeverity(v.Cve.Severity.String()),
		Description:              description,
		Package:                  v.Package,
		SeveritySince:            severitySince,
		VulnerabilityDetailsLink: v.Cve.Link,
	}

	if v.GetSuppression() != nil {
		var imageVulnerabilityState ImageVulnerabilityState
		switch v.GetSuppression().GetSuppressedReason() {
		case vulnerabilities.SuppressState_FALSE_POSITIVE:
			imageVulnerabilityState = ImageVulnerabilityStateFalsePositive
		case vulnerabilities.SuppressState_IN_TRIAGE:
			imageVulnerabilityState = ImageVulnerabilityStateTriage
		case vulnerabilities.SuppressState_NOT_AFFECTED:
			imageVulnerabilityState = ImageVulnerabilityStateNotAffected
		case vulnerabilities.SuppressState_RESOLVED:
			imageVulnerabilityState = ImageVulnerabilityStateResolved
		}

		imgageVulnerability.State = &imageVulnerabilityState
		imgageVulnerability.Suppression = ImageVulnerabilitySuppressionState{
			Comment:    v.Suppression.SuppressedDetails,
			Suppressed: v.Suppression.Suppressed,
		}
	}
	return imgageVulnerability
}

func toWorkloadVulnerabilitySummary(w *vulnerabilities.WorkloadSummary) *WorkloadVulnerabilitySummary {
	wType := workload.TypeApplication
	if w.GetWorkload().GetType() == "job" {
		wType = workload.TypeJob
	}

	var lastUpdated *time.Time
	if ts := w.GetVulnerabilitySummary().GetLastUpdated(); ts != nil {
		t := ts.AsTime()
		lastUpdated = &t
	}

	return &WorkloadVulnerabilitySummary{
		Summary: &ImageVulnerabilitySummary{
			Critical:    int(w.GetVulnerabilitySummary().Critical),
			High:        int(w.GetVulnerabilitySummary().High),
			Medium:      int(w.GetVulnerabilitySummary().Medium),
			Low:         int(w.GetVulnerabilitySummary().Low),
			Unassigned:  int(w.GetVulnerabilitySummary().Unassigned),
			Total:       int(w.GetVulnerabilitySummary().Total),
			RiskScore:   int(w.GetVulnerabilitySummary().RiskScore),
			LastUpdated: lastUpdated,
		},
		HasSbom:         w.GetVulnerabilitySummary().GetHasSbom(),
		TeamSlug:        slug.Slug(w.GetWorkload().GetNamespace()),
		EnvironmentName: w.GetWorkload().GetCluster(),
		WorkloadReference: &workload.Reference{
			Name: w.GetWorkload().GetName(),
			Type: wType,
		},
	}
}

func mapVulnerabilitySeverity(severity ImageVulnerabilitySeverity) vulnerabilities.Severity {
	switch severity {
	case ImageVulnerabilitySeverityCritical:
		return vulnerabilities.Severity_CRITICAL
	case ImageVulnerabilitySeverityHigh:
		return vulnerabilities.Severity_HIGH
	case ImageVulnerabilitySeverityMedium:
		return vulnerabilities.Severity_MEDIUM
	case ImageVulnerabilitySeverityLow:
		return vulnerabilities.Severity_LOW
	case ImageVulnerabilitySeverityUnassigned:
		return vulnerabilities.Severity_UNASSIGNED
	default:
		return vulnerabilities.Severity_UNASSIGNED
	}
}
