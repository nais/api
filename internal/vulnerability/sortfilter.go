package vulnerability

import (
	"context"
	"strings"

	"github.com/nais/api/internal/graph/sortfilter"
	"github.com/nais/api/internal/workload"
)

var SortFilterImageVulnerabilities = sortfilter.New[*ImageVulnerability, ImageVulnerabilityOrderField, struct{}]()

func init() {
	workloadInit()

	SortFilterImageVulnerabilities.RegisterSort("IDENTIFIER", func(ctx context.Context, a, b *ImageVulnerability) int {
		return strings.Compare(a.Identifier, b.Identifier)
	})
	SortFilterImageVulnerabilities.RegisterSort("PACKAGE", func(ctx context.Context, a, b *ImageVulnerability) int {
		return strings.Compare(a.Package, b.Package)
	})
	SortFilterImageVulnerabilities.RegisterSort("STATE", func(ctx context.Context, a, b *ImageVulnerability) int {
		return strings.Compare(a.State.String(), b.State.String())
	})
	SortFilterImageVulnerabilities.RegisterConcurrentSort("SUPPRESSED", func(ctx context.Context, a *ImageVulnerability) int {
		vuln, err := GetImageAnalysisTrail(ctx, a)
		if err != nil {
			return 0
		}

		if vuln.Suppressed {
			return 1
		}

		return 0
	})
	SortFilterImageVulnerabilities.RegisterSort("SEVERITY", func(ctx context.Context, a, b *ImageVulnerability) int {
		severityToScore := map[ImageVulnerabilitySeverity]int{
			ImageVulnerabilitySeverityCritical:   5,
			ImageVulnerabilitySeverityHigh:       4,
			ImageVulnerabilitySeverityMedium:     3,
			ImageVulnerabilitySeverityLow:        2,
			ImageVulnerabilitySeverityUnassigned: 1,
		}

		return severityToScore[a.Severity] - severityToScore[b.Severity]
	})
}

func workloadInit() {
	summarySorter := func(fn func(sum *ImageVulnerabilitySummary) int) sortfilter.ConcurrentSortFunc[workload.Workload] {
		return func(ctx context.Context, a workload.Workload) int {
			ref, err := GetImageMetadata(ctx, a.GetImageString())
			if err != nil {
				return -1
			}

			if ref == nil || ref.Summary == nil {
				return -1
			}

			return fn(ref.Summary)
		}
	}

	workload.SortFilter.RegisterConcurrentSort("VULNERABILITY_RISK_SCORE", summarySorter(func(sum *ImageVulnerabilitySummary) int {
		return sum.RiskScore
	}))
	workload.SortFilter.RegisterConcurrentSort("VULNERABILITY_SEVERITY_CRITICAL", summarySorter(func(sum *ImageVulnerabilitySummary) int {
		return sum.Critical
	}))
	workload.SortFilter.RegisterConcurrentSort("VULNERABILITY_SEVERITY_HIGH", summarySorter(func(sum *ImageVulnerabilitySummary) int {
		return sum.High
	}))
	workload.SortFilter.RegisterConcurrentSort("VULNERABILITY_SEVERITY_MEDIUM", summarySorter(func(sum *ImageVulnerabilitySummary) int {
		return sum.Medium
	}))
	workload.SortFilter.RegisterConcurrentSort("VULNERABILITY_SEVERITY_LOW", summarySorter(func(sum *ImageVulnerabilitySummary) int {
		return sum.Low
	}))
	workload.SortFilter.RegisterConcurrentSort("VULNERABILITY_SEVERITY_UNASSIGNED", summarySorter(func(sum *ImageVulnerabilitySummary) int {
		return sum.Unassigned
	}))
}
