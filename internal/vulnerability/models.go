package vulnerability

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/nais/api/internal/graph/ident"
	"github.com/nais/api/internal/graph/model"
	"github.com/nais/api/internal/graph/pagination"
	"github.com/nais/api/internal/slug"
	"github.com/nais/api/internal/workload"
)

type (
	WorkloadVulnerabilitySummaryConnection    = pagination.Connection[*WorkloadVulnerabilitySummary]
	WorkloadVulnerabilitySummaryEdge          = pagination.Edge[*WorkloadVulnerabilitySummary]
	ImageVulnerabilityConnection              = pagination.Connection[*ImageVulnerability]
	ImageVulnerabilityEdge                    = pagination.Edge[*ImageVulnerability]
	ContainerImageWorkloadReferenceConnection = pagination.Connection[*ContainerImageWorkloadReference]
	ContainerImageWorkloadReferenceEdge       = pagination.Edge[*ContainerImageWorkloadReference]
)

type ContainerImageWorkloadReference struct {
	Reference       *workload.Reference `json:"-"`
	TeamSlug        slug.Slug           `json:"-"`
	EnvironmentName string              `json:"-"`
}

type ImageVulnerability struct {
	Identifier               string                         `json:"identifier"`
	Severity                 ImageVulnerabilitySeverity     `json:"severity"`
	Description              string                         `json:"description"`
	Package                  string                         `json:"package"`
	SeveritySince            *time.Time                     `json:"severitySince"`
	Suppression              *ImageVulnerabilitySuppression `json:"suppression"`
	VulnerabilityDetailsLink string                         `json:"vulnerabilityDetailsLink"`
	vulnerabilityID          string                         `json:"-"`
}

func (ImageVulnerability) IsNode() {}
func (i *ImageVulnerability) ID() ident.Ident {
	return ident.NewIdent(identVulnerability, i.vulnerabilityID)
}

type ImageVulnerabilityOrder struct {
	Field     ImageVulnerabilityOrderField `json:"field"`
	Direction model.OrderDirection         `json:"direction"`
}

type ImageVulnerabilitySuppression struct {
	State  ImageVulnerabilitySuppressionState `json:"state"`
	Reason string                             `json:"reason"`
}

type ImageVulnerabilitySummary struct {
	Total       int        `json:"total"`
	RiskScore   int        `json:"riskScore"`
	Low         int        `json:"low"`
	Medium      int        `json:"medium"`
	High        int        `json:"high"`
	Critical    int        `json:"critical"`
	Unassigned  int        `json:"unassigned"`
	LastUpdated *time.Time `json:"lastUpdated"`
}

type ImageVulnerabilityOrderField string

func (e ImageVulnerabilityOrderField) IsValid() bool {
	_, ok := SortFilterImageVulnerabilities[e]
	return ok
}

func (e ImageVulnerabilityOrderField) String() string {
	return string(e)
}

func (e *ImageVulnerabilityOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ImageVulnerabilityOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ImageVulnerabilityOrderField", str)
	}
	return nil
}

func (e ImageVulnerabilityOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ImageVulnerabilitySeverity string

const (
	ImageVulnerabilitySeverityLow        ImageVulnerabilitySeverity = "LOW"
	ImageVulnerabilitySeverityMedium     ImageVulnerabilitySeverity = "MEDIUM"
	ImageVulnerabilitySeverityHigh       ImageVulnerabilitySeverity = "HIGH"
	ImageVulnerabilitySeverityCritical   ImageVulnerabilitySeverity = "CRITICAL"
	ImageVulnerabilitySeverityUnassigned ImageVulnerabilitySeverity = "UNASSIGNED"
)

func (e ImageVulnerabilitySeverity) IsValid() bool {
	switch e {
	case ImageVulnerabilitySeverityLow, ImageVulnerabilitySeverityMedium, ImageVulnerabilitySeverityHigh, ImageVulnerabilitySeverityCritical, ImageVulnerabilitySeverityUnassigned:
		return true
	}
	return false
}

func (e ImageVulnerabilitySeverity) String() string {
	return string(e)
}

func (e *ImageVulnerabilitySeverity) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ImageVulnerabilitySeverity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ImageVulnerabilitySeverity", str)
	}
	return nil
}

func (e ImageVulnerabilitySeverity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ImageDetails struct {
	Name               string                     `json:"name"`
	Version            string                     `json:"version"`
	Summary            *ImageVulnerabilitySummary `json:"summary"`
	HasSBOM            bool                       `json:"hasSbom"`
	ProjectURL         string                     `json:"projectUrl"`
	WorkloadReferences []*WorkloadReference       `json:"-"`
}

type WorkloadReference struct {
	Environment  string `json:"environment"`
	Team         string `json:"team"`
	WorkloadType string `json:"workloadType"`
	Name         string `json:"name"`
}

func toGraphWorkloadReference(r *WorkloadReference) *ContainerImageWorkloadReference {
	workloadType := workload.TypeApplication

	if r.WorkloadType == "job" {
		workloadType = workload.TypeJob
	}

	return &ContainerImageWorkloadReference{
		Reference: &workload.Reference{
			Name: r.Name,
			Type: workloadType,
		},
		TeamSlug:        slug.Slug(r.Team),
		EnvironmentName: r.Environment,
	}
}

type TeamVulnerabilitySummary struct {
	RiskScore   int        `json:"riskScore"`
	Critical    int        `json:"critical"`
	High        int        `json:"high"`
	Medium      int        `json:"medium"`
	Low         int        `json:"low"`
	Unassigned  int        `json:"unassigned"`
	SBOMCount   int        `json:"sbomCount"`
	Coverage    float64    `json:"coverage"`
	LastUpdated *time.Time `json:"lastUpdated"`

	TeamSlug slug.Slug `json:"-"`
}

type WorkloadVulnerabilitySummary struct {
	HasSbom           bool                       `json:"hasSBOM"`
	Summary           *ImageVulnerabilitySummary `json:"summary"`
	TeamSlug          slug.Slug                  `json:"-"`
	EnvironmentName   string                     `json:"-"`
	WorkloadReference *workload.Reference        `json:"-"`
}

func (w WorkloadVulnerabilitySummary) IsNode() {}
func (w *WorkloadVulnerabilitySummary) ID() ident.Ident {
	return newWorkloadVulnerabilitySummaryIdent(WorkloadReference{
		Environment:  w.EnvironmentName,
		Team:         w.TeamSlug.String(),
		Name:         w.WorkloadReference.Name,
		WorkloadType: w.WorkloadReference.Type.String(),
	})
}

type VulnerabilitySummaryOrder struct {
	Field     VulnerabilitySummaryOrderByField `json:"field"`
	Direction model.OrderDirection             `json:"direction"`
}

type VulnerabilitySummaryOrderByField string

const (
	VulnerabilitySummaryOrderByFieldName                            VulnerabilitySummaryOrderByField = "NAME"
	VulnerabilitySummaryOrderByFieldEnvironment                     VulnerabilitySummaryOrderByField = "ENVIRONMENT"
	VulnerabilitySummaryOrderByFieldVulnerabilityRiskScore          VulnerabilitySummaryOrderByField = "VULNERABILITY_RISK_SCORE"
	VulnerabilitySummaryOrderByFieldVulnerabilitySeverityCritical   VulnerabilitySummaryOrderByField = "VULNERABILITY_SEVERITY_CRITICAL"
	VulnerabilitySummaryOrderByFieldVulnerabilitySeverityHigh       VulnerabilitySummaryOrderByField = "VULNERABILITY_SEVERITY_HIGH"
	VulnerabilitySummaryOrderByFieldVulnerabilitySeverityMedium     VulnerabilitySummaryOrderByField = "VULNERABILITY_SEVERITY_MEDIUM"
	VulnerabilitySummaryOrderByFieldVulnerabilitySeverityLow        VulnerabilitySummaryOrderByField = "VULNERABILITY_SEVERITY_LOW"
	VulnerabilitySummaryOrderByFieldVulnerabilitySeverityUnassigned VulnerabilitySummaryOrderByField = "VULNERABILITY_SEVERITY_UNASSIGNED"
	VulnerabilitySummaryOrderByFieldVulnerabilityLastScanned        VulnerabilitySummaryOrderByField = "VULNERABILITY_LAST_SCANNED"
)

var AllVulnerabilitySummaryOrderByField = []VulnerabilitySummaryOrderByField{
	VulnerabilitySummaryOrderByFieldName,
	VulnerabilitySummaryOrderByFieldEnvironment,
	VulnerabilitySummaryOrderByFieldVulnerabilityRiskScore,
	VulnerabilitySummaryOrderByFieldVulnerabilitySeverityCritical,
	VulnerabilitySummaryOrderByFieldVulnerabilitySeverityHigh,
	VulnerabilitySummaryOrderByFieldVulnerabilitySeverityMedium,
	VulnerabilitySummaryOrderByFieldVulnerabilitySeverityLow,
	VulnerabilitySummaryOrderByFieldVulnerabilitySeverityUnassigned,
	VulnerabilitySummaryOrderByFieldVulnerabilityLastScanned,
}

func (e VulnerabilitySummaryOrderByField) IsValid() bool {
	switch e {
	case VulnerabilitySummaryOrderByFieldName, VulnerabilitySummaryOrderByFieldEnvironment, VulnerabilitySummaryOrderByFieldVulnerabilityRiskScore, VulnerabilitySummaryOrderByFieldVulnerabilitySeverityCritical, VulnerabilitySummaryOrderByFieldVulnerabilitySeverityHigh, VulnerabilitySummaryOrderByFieldVulnerabilitySeverityMedium, VulnerabilitySummaryOrderByFieldVulnerabilitySeverityLow, VulnerabilitySummaryOrderByFieldVulnerabilitySeverityUnassigned, VulnerabilitySummaryOrderByFieldVulnerabilityLastScanned:
		return true
	}
	return false
}

func (e VulnerabilitySummaryOrderByField) String() string {
	return string(e)
}

func (e *VulnerabilitySummaryOrderByField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VulnerabilitySummaryOrderByField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VulnerabilitySummaryOrderByField", str)
	}
	return nil
}

func (e VulnerabilitySummaryOrderByField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TeamVulnerabilityRiskScoreTrend string

const (
	TeamVulnerabilityRiskScoreTrendUp   TeamVulnerabilityRiskScoreTrend = "UP"
	TeamVulnerabilityRiskScoreTrendDown TeamVulnerabilityRiskScoreTrend = "DOWN"
	TeamVulnerabilityRiskScoreTrendFlat TeamVulnerabilityRiskScoreTrend = "FLAT"
)

var AllTeamVulnerabilityRiskScoreTrend = []TeamVulnerabilityRiskScoreTrend{
	TeamVulnerabilityRiskScoreTrendUp,
	TeamVulnerabilityRiskScoreTrendDown,
	TeamVulnerabilityRiskScoreTrendFlat,
}

func (e TeamVulnerabilityRiskScoreTrend) IsValid() bool {
	switch e {
	case TeamVulnerabilityRiskScoreTrendUp, TeamVulnerabilityRiskScoreTrendDown, TeamVulnerabilityRiskScoreTrendFlat:
		return true
	}
	return false
}

func (e TeamVulnerabilityRiskScoreTrend) String() string {
	return string(e)
}

func (e *TeamVulnerabilityRiskScoreTrend) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TeamVulnerabilityRiskScoreTrend(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TeamVulnerabilityRiskScoreTrend", str)
	}
	return nil
}

func (e TeamVulnerabilityRiskScoreTrend) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ImageVulnerabilityFilter struct {
	Severity      ImageVulnerabilitySeverity `json:"severity,omitempty"`
	SeveritySince *time.Time                 `json:"severitySince,omitempty"`
}

type UpdateImageVulnerabilityInput struct {
	VulnerabilityID ident.Ident                        `json:"vulnerabilityID"`
	Reason          string                             `json:"reason"`
	Suppress        bool                               `json:"suppress"`
	State           ImageVulnerabilitySuppressionState `json:"state"`
}

type UpdateImageVulnerabilityPayload struct {
	Vulnerability *ImageVulnerability `json:"vulnerability"`
}

type ImageVulnerabilitySuppressionState string

const (
	ImageVulnerabilitySuppressionStateInTriage      ImageVulnerabilitySuppressionState = "IN_TRIAGE"
	ImageVulnerabilitySuppressionStateResolved      ImageVulnerabilitySuppressionState = "RESOLVED"
	ImageVulnerabilitySuppressionStateFalsePositive ImageVulnerabilitySuppressionState = "FALSE_POSITIVE"
	ImageVulnerabilitySuppressionStateNotAffected   ImageVulnerabilitySuppressionState = "NOT_AFFECTED"
)

var AllImageVulnerabilitySuppressionState = []ImageVulnerabilitySuppressionState{
	ImageVulnerabilitySuppressionStateInTriage,
	ImageVulnerabilitySuppressionStateResolved,
	ImageVulnerabilitySuppressionStateFalsePositive,
	ImageVulnerabilitySuppressionStateNotAffected,
}

func (e ImageVulnerabilitySuppressionState) IsValid() bool {
	switch e {
	case ImageVulnerabilitySuppressionStateInTriage, ImageVulnerabilitySuppressionStateResolved, ImageVulnerabilitySuppressionStateFalsePositive, ImageVulnerabilitySuppressionStateNotAffected:
		return true
	}
	return false
}

func (e ImageVulnerabilitySuppressionState) String() string {
	return string(e)
}

func (e *ImageVulnerabilitySuppressionState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ImageVulnerabilitySuppressionState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ImageVulnerabilitySuppressionState", str)
	}
	return nil
}

func (e ImageVulnerabilitySuppressionState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TeamVulnerabilitySummaryFilter struct {
	Environments []string `json:"environments,omitempty"`
}

type ImageVulnerabilitySample struct {
	Summary *ImageVulnerabilitySummary `json:"summary"`
	Date    time.Time                  `json:"date"`
}

type ImageVulnerabilityHistory struct {
	Samples []*ImageVulnerabilitySample `json:"samples"`
}

type TenantVulnerabilitySummary struct {
	RiskScore   int        `json:"riskScore"`
	Critical    int        `json:"critical"`
	High        int        `json:"high"`
	Medium      int        `json:"medium"`
	Low         int        `json:"low"`
	Unassigned  int        `json:"unassigned"`
	SbomCount   int        `json:"sbomCount"`
	Coverage    float64    `json:"coverage"`
	LastUpdated *time.Time `json:"lastUpdated"`
}
