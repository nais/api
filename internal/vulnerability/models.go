package vulnerability

import (
	"context"
	"fmt"
	"io"
	"slices"
	"strconv"
	"time"

	"github.com/nais/api/internal/graph/ident"
	"github.com/nais/api/internal/graph/model"
	"github.com/nais/api/internal/graph/pagination"
	"github.com/nais/api/internal/graph/sortfilter"
	"github.com/nais/api/internal/slug"
	"github.com/nais/api/internal/workload"
)

// Extend WorkloadOrderField
const (
	WorkloadOrderFieldRiskScore          workload.WorkloadOrderField = "VULNERABILITY_RISK_SCORE"
	WorkloadOrderFieldSeverityCritical   workload.WorkloadOrderField = "VULNERABILITY_SEVERITY_CRITICAL"
	WorkloadOrderFieldSeverityHigh       workload.WorkloadOrderField = "VULNERABILITY_SEVERITY_HIGH"
	WorkloadOrderFieldSeverityMedium     workload.WorkloadOrderField = "VULNERABILITY_SEVERITY_MEDIUM"
	WorkloadOrderFieldSeverityLow        workload.WorkloadOrderField = "VULNERABILITY_SEVERITY_LOW"
	WorkloadOrderFieldSeverityUnassigned workload.WorkloadOrderField = "VULNERABILITY_SEVERITY_UNASSIGNED"
)

func init() {
	workload.AllWorkloadOrderField = append(
		workload.AllWorkloadOrderField,
		WorkloadOrderFieldRiskScore,
		WorkloadOrderFieldSeverityCritical,
		WorkloadOrderFieldSeverityHigh,
		WorkloadOrderFieldSeverityMedium,
		WorkloadOrderFieldSeverityLow,
		WorkloadOrderFieldSeverityUnassigned,
	)

	summarySorter := func(fn func(sum *ImageVulnerabilitySummary) int) sortfilter.ConcurrentOrderBy[workload.Workload] {
		return func(ctx context.Context, a workload.Workload) int {
			ref, err := GetImageMetadata(ctx, a.GetImageString())
			if err != nil {
				return -1
			}
			if ref == nil || ref.Summary == nil {
				return -1
			}

			return fn(ref.Summary)
		}
	}

	workload.SortFilter.RegisterConcurrentOrderBy(WorkloadOrderFieldRiskScore, summarySorter(func(sum *ImageVulnerabilitySummary) int {
		return sum.RiskScore
	}))
	workload.SortFilter.RegisterConcurrentOrderBy(WorkloadOrderFieldSeverityCritical, summarySorter(func(sum *ImageVulnerabilitySummary) int {
		return sum.Critical
	}))
	workload.SortFilter.RegisterConcurrentOrderBy(WorkloadOrderFieldSeverityHigh, summarySorter(func(sum *ImageVulnerabilitySummary) int {
		return sum.High
	}))
	workload.SortFilter.RegisterConcurrentOrderBy(WorkloadOrderFieldSeverityMedium, summarySorter(func(sum *ImageVulnerabilitySummary) int {
		return sum.Medium
	}))
	workload.SortFilter.RegisterConcurrentOrderBy(WorkloadOrderFieldSeverityLow, summarySorter(func(sum *ImageVulnerabilitySummary) int {
		return sum.Low
	}))
	workload.SortFilter.RegisterConcurrentOrderBy(WorkloadOrderFieldSeverityUnassigned, summarySorter(func(sum *ImageVulnerabilitySummary) int {
		return sum.Unassigned
	}))
}

type (
	ImageVulnerabilityConnection                = pagination.Connection[*ImageVulnerability]
	ImageVulnerabilityEdge                      = pagination.Edge[*ImageVulnerability]
	ContainerImageWorkloadReferenceConnection   = pagination.Connection[*ContainerImageWorkloadReference]
	ContainerImageWorkloadReferenceEdge         = pagination.Edge[*ContainerImageWorkloadReference]
	ImageVulnerabilityAnalysisCommentConnection = pagination.Connection[*ImageVulnerabilityAnalysisComment]
	ImageVulnerabilityAnalysisCommentEdge       = pagination.Edge[*ImageVulnerabilityAnalysisComment]
)

type ContainerImageWorkloadReference struct {
	Reference       *workload.Reference `json:"-"`
	TeamSlug        slug.Slug           `json:"-"`
	EnvironmentName string              `json:"-"`
}

type ImageVulnerability struct {
	Identifier  string                     `json:"identifier"`
	Severity    ImageVulnerabilitySeverity `json:"severity"`
	Description string                     `json:"description"`
	Package     string                     `json:"package"`
	State       ImageVulnerabilityState    `json:"state"`

	projectID       string `json:"-"`
	componentID     string `json:"-"`
	vulnerabilityID string `json:"-"`
}

func (ImageVulnerability) IsNode() {}
func (i *ImageVulnerability) ID() ident.Ident {
	return newVulnerabilityIdent(i.projectID, i.vulnerabilityID, i.componentID)
}

type ImageVulnerabilityOrder struct {
	Field     ImageVulnerabilityOrderField `json:"field"`
	Direction model.OrderDirection         `json:"direction"`
}

type ImageVulnerabilitySummary struct {
	Total      int `json:"total"`
	RiskScore  int `json:"riskScore"`
	Low        int `json:"low"`
	Medium     int `json:"medium"`
	High       int `json:"high"`
	Critical   int `json:"critical"`
	Unassigned int `json:"unassigned"`
}

type ImageVulnerabilityOrderField string

const (
	// Order by the field
	ImageVulnerabilityOrderFieldIdentifier ImageVulnerabilityOrderField = "IDENTIFIER"
	ImageVulnerabilityOrderFieldSeverity   ImageVulnerabilityOrderField = "SEVERITY"
	ImageVulnerabilityOrderFieldPackage    ImageVulnerabilityOrderField = "PACKAGE"
	ImageVulnerabilityOrderFieldState      ImageVulnerabilityOrderField = "STATE"
)

var AllImageVulnerabilityOrderField = []ImageVulnerabilityOrderField{
	ImageVulnerabilityOrderFieldSeverity,
	ImageVulnerabilityOrderFieldIdentifier,
	ImageVulnerabilityOrderFieldPackage,
}

func (e ImageVulnerabilityOrderField) IsValid() bool {
	return slices.Contains(AllImageVulnerabilityOrderField, e)
}

func (e ImageVulnerabilityOrderField) String() string {
	return string(e)
}

func (e *ImageVulnerabilityOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ImageVulnerabilityOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ImageVulnerabilityOrderField", str)
	}
	return nil
}

func (e ImageVulnerabilityOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ImageVulnerabilitySeverity string

const (
	ImageVulnerabilitySeverityLow        ImageVulnerabilitySeverity = "LOW"
	ImageVulnerabilitySeverityMedium     ImageVulnerabilitySeverity = "MEDIUM"
	ImageVulnerabilitySeverityHigh       ImageVulnerabilitySeverity = "HIGH"
	ImageVulnerabilitySeverityCritical   ImageVulnerabilitySeverity = "CRITICAL"
	ImageVulnerabilitySeverityUnassigned ImageVulnerabilitySeverity = "UNASSIGNED"
)

var AllImageVulnerabilitySeverity = []ImageVulnerabilitySeverity{
	ImageVulnerabilitySeverityLow,
	ImageVulnerabilitySeverityMedium,
	ImageVulnerabilitySeverityHigh,
	ImageVulnerabilitySeverityCritical,
	ImageVulnerabilitySeverityUnassigned,
}

func (e ImageVulnerabilitySeverity) IsValid() bool {
	switch e {
	case ImageVulnerabilitySeverityLow, ImageVulnerabilitySeverityMedium, ImageVulnerabilitySeverityHigh, ImageVulnerabilitySeverityCritical, ImageVulnerabilitySeverityUnassigned:
		return true
	}
	return false
}

func (e ImageVulnerabilitySeverity) String() string {
	return string(e)
}

func (e *ImageVulnerabilitySeverity) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ImageVulnerabilitySeverity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ImageVulnerabilitySeverity", str)
	}
	return nil
}

func (e ImageVulnerabilitySeverity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ImageVulnerabilityState string

const (
	ImageVulnerabilityStateTriage        ImageVulnerabilityState = "TRIAGE"
	ImageVulnerabilityStateResolved      ImageVulnerabilityState = "RESOLVED"
	ImageVulnerabilityStateFalsePositive ImageVulnerabilityState = "FALSE_POSITIVE"
	ImageVulnerabilityStateNotAffected   ImageVulnerabilityState = "NOT_AFFECTED"
)

var AllImageVulnerabilityState = []ImageVulnerabilityState{
	ImageVulnerabilityStateTriage,
	ImageVulnerabilityStateResolved,
	ImageVulnerabilityStateFalsePositive,
	ImageVulnerabilityStateNotAffected,
}

func (e ImageVulnerabilityState) IsValid() bool {
	switch e {
	case ImageVulnerabilityStateTriage, ImageVulnerabilityStateResolved, ImageVulnerabilityStateFalsePositive, ImageVulnerabilityStateNotAffected:
		return true
	}
	return false
}

func (e ImageVulnerabilityState) String() string {
	return string(e)
}

func (e *ImageVulnerabilityState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ImageVulnerabilityState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ImageVulnerabilityState", str)
	}
	return nil
}

func (e ImageVulnerabilityState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ImageDetails struct {
	ProjectID          string                     `json:"projectId"`
	Name               string                     `json:"name"`
	Version            string                     `json:"version"`
	Summary            *ImageVulnerabilitySummary `json:"summary"`
	HasSBOM            bool                       `json:"hasSbom"`
	ProjectURL         string                     `json:"projectUrl"`
	WorkloadReferences []*WorkloadReference       `json:"-"`
}

type WorkloadReference struct {
	Environment  string
	Team         string
	WorkloadType string
	Name         string
}

func toGraphWorkloadReference(r *WorkloadReference) *ContainerImageWorkloadReference {
	workloadType := workload.TypeApplication

	if r.WorkloadType == "job" {
		workloadType = workload.TypeJob
	}

	return &ContainerImageWorkloadReference{
		Reference: &workload.Reference{
			Name: r.Name,
			Type: workloadType,
		},
		TeamSlug:        slug.Slug(r.Team),
		EnvironmentName: r.Environment,
	}
}

type TeamVulnerabilitySummary struct {
	RiskScore  int     `json:"riskScore"`
	Critical   int     `json:"critical"`
	High       int     `json:"high"`
	Medium     int     `json:"medium"`
	Low        int     `json:"low"`
	Unassigned int     `json:"unassigned"`
	BomCount   int     `json:"bomCount"`
	Coverage   float64 `json:"coverage"`

	TeamSlug slug.Slug `json:"-"`
}

type TeamVulnerabilityRanking string

const (
	// Top third most vulnerable teams.
	TeamVulnerabilityRankingMostVulnerable TeamVulnerabilityRanking = "MOST_VULNERABLE"
	// Middle third most vulnerable teams.
	TeamVulnerabilityRankingMiddle TeamVulnerabilityRanking = "MIDDLE"
	// Bottom third most vulnerable teams.
	TeamVulnerabilityRankingLeastVulnerable TeamVulnerabilityRanking = "LEAST_VULNERABLE"
	// Unknown ranking.
	TeamVulnerabilityRankingUnknown TeamVulnerabilityRanking = "UNKNOWN"
)

var AllTeamVulnerabilityRanking = []TeamVulnerabilityRanking{
	TeamVulnerabilityRankingMostVulnerable,
	TeamVulnerabilityRankingMiddle,
	TeamVulnerabilityRankingLeastVulnerable,
	TeamVulnerabilityRankingUnknown,
}

func (e TeamVulnerabilityRanking) IsValid() bool {
	switch e {
	case TeamVulnerabilityRankingMostVulnerable, TeamVulnerabilityRankingMiddle, TeamVulnerabilityRankingLeastVulnerable, TeamVulnerabilityRankingUnknown:
		return true
	}
	return false
}

func (e TeamVulnerabilityRanking) String() string {
	return string(e)
}

func (e *TeamVulnerabilityRanking) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TeamVulnerabilityRanking(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TeamVulnerabilityRanking", str)
	}
	return nil
}

func (e TeamVulnerabilityRanking) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TeamVulnerabilityRiskScoreTrend string

const (
	// Risk score is increasing.
	TeamVulnerabilityRiskScoreTrendUp TeamVulnerabilityRiskScoreTrend = "UP"
	// Risk score is decreasing.
	TeamVulnerabilityRiskScoreTrendDown TeamVulnerabilityRiskScoreTrend = "DOWN"
	// Risk score is not changing.
	TeamVulnerabilityRiskScoreTrendFlat TeamVulnerabilityRiskScoreTrend = "FLAT"
)

var AllTeamVulnerabilityRiskScoreTrend = []TeamVulnerabilityRiskScoreTrend{
	TeamVulnerabilityRiskScoreTrendUp,
	TeamVulnerabilityRiskScoreTrendDown,
	TeamVulnerabilityRiskScoreTrendFlat,
}

func (e TeamVulnerabilityRiskScoreTrend) IsValid() bool {
	switch e {
	case TeamVulnerabilityRiskScoreTrendUp, TeamVulnerabilityRiskScoreTrendDown, TeamVulnerabilityRiskScoreTrendFlat:
		return true
	}
	return false
}

func (e TeamVulnerabilityRiskScoreTrend) String() string {
	return string(e)
}

func (e *TeamVulnerabilityRiskScoreTrend) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TeamVulnerabilityRiskScoreTrend(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TeamVulnerabilityRiskScoreTrend", str)
	}
	return nil
}

func (e TeamVulnerabilityRiskScoreTrend) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ImageVulnerabilityAnalysisComment struct {
	Comment    string                          `json:"comment"`
	State      ImageVulnerabilityAnalysisState `json:"state"`
	Suppressed bool                            `json:"suppressed"`
	Timestamp  time.Time                       `json:"timestamp"`
	OnBehalfOf string                          `json:"onBehalfOf"`
}

type ImageVulnerabilityAnalysisTrail struct {
	State      ImageVulnerabilityAnalysisState `json:"state"`
	Suppressed bool                            `json:"suppressed"`

	AllComments []*ImageVulnerabilityAnalysisComment `json:"-"`
}

type UpdateImageVulnerabilityInput struct {
	// The id of the vulnerability to suppress.
	VulnerabilityID ident.Ident `json:"vulnerabilityID"`
	// The analysis state of the vulnerability.
	AnalysisState ImageVulnerabilityAnalysisState `json:"analysisState"`
	// The a comment for suppressing the vulnerability.
	Comment string `json:"comment"`
	// Should the vulnerability be suppressed.
	Suppress bool `json:"suppress"`
}

type UpdateImageVulnerabilityPayload struct {
	Vulnerability *ImageVulnerability `json:"vulnerability"`
}

type ImageVulnerabilityAnalysisState string

const (
	// Vulnerability is triaged.
	ImageVulnerabilityAnalysisStateInTriage ImageVulnerabilityAnalysisState = "IN_TRIAGE"
	// Vulnerability is resolved.
	ImageVulnerabilityAnalysisStateResolved ImageVulnerabilityAnalysisState = "RESOLVED"
	// Vulnerability is marked as false positive.
	ImageVulnerabilityAnalysisStateFalsePositive ImageVulnerabilityAnalysisState = "FALSE_POSITIVE"
	// Vulnerability is marked as not affected.
	ImageVulnerabilityAnalysisStateNotAffected ImageVulnerabilityAnalysisState = "NOT_AFFECTED"
)

var AllImageVulnerabilityAnalysisState = []ImageVulnerabilityAnalysisState{
	ImageVulnerabilityAnalysisStateInTriage,
	ImageVulnerabilityAnalysisStateResolved,
	ImageVulnerabilityAnalysisStateFalsePositive,
	ImageVulnerabilityAnalysisStateNotAffected,
}

func (e ImageVulnerabilityAnalysisState) IsValid() bool {
	switch e {
	case ImageVulnerabilityAnalysisStateInTriage, ImageVulnerabilityAnalysisStateResolved, ImageVulnerabilityAnalysisStateFalsePositive, ImageVulnerabilityAnalysisStateNotAffected:
		return true
	}
	return false
}

func (e ImageVulnerabilityAnalysisState) String() string {
	return string(e)
}

func (e *ImageVulnerabilityAnalysisState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ImageVulnerabilityAnalysisState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ImageVulnerabilityAnalysisState", str)
	}
	return nil
}

func (e ImageVulnerabilityAnalysisState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TeamVulnerabilityStatus struct {
	State       TeamVulnerabilityState `json:"state"`
	Title       string                 `json:"title"`
	Description string                 `json:"description"`
}

type TeamVulnerabilityState string

const (
	TeamVulnerabilityStateOk                         TeamVulnerabilityState = "OK"
	TeamVulnerabilityStateTooManyVulnerableWorkloads TeamVulnerabilityState = "TOO_MANY_VULNERABLE_WORKLOADS"
	TeamVulnerabilityStateCoverageTooLow             TeamVulnerabilityState = "COVERAGE_TOO_LOW"
	TeamVulnerabilityStateVulnerable                 TeamVulnerabilityState = "VULNERABLE"
	TeamVulnerabilityStateMissingSbom                TeamVulnerabilityState = "MISSING_SBOM"
)

var AllTeamVulnerabilityState = []TeamVulnerabilityState{
	TeamVulnerabilityStateOk,
	TeamVulnerabilityStateTooManyVulnerableWorkloads,
	TeamVulnerabilityStateCoverageTooLow,
	TeamVulnerabilityStateVulnerable,
	TeamVulnerabilityStateMissingSbom,
}

func (e TeamVulnerabilityState) IsValid() bool {
	switch e {
	case TeamVulnerabilityStateOk, TeamVulnerabilityStateTooManyVulnerableWorkloads, TeamVulnerabilityStateCoverageTooLow, TeamVulnerabilityStateVulnerable, TeamVulnerabilityStateMissingSbom:
		return true
	}
	return false
}

func (e TeamVulnerabilityState) String() string {
	return string(e)
}

func (e *TeamVulnerabilityState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TeamVulnerabilityState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TeamVulnerabilityState", str)
	}
	return nil
}

func (e TeamVulnerabilityState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TeamVulnerabilitySummaryFilter struct {
	Environments []string `json:"environments,omitempty"`
}
