package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/nais/api/internal/auth/authz"
	sqlc "github.com/nais/api/internal/database/gensql"
	"github.com/nais/api/internal/graph/gengql"
	"github.com/nais/api/internal/graph/model"
)

// Roles is the resolver for the roles field.
func (r *serviceAccountResolver) Roles(ctx context.Context, obj *model.ServiceAccount) ([]*model.Role, error) {
	actor := authz.ActorFromContext(ctx)
	said, err := obj.ID.AsUUID()
	if err != nil {
		return nil, err
	}

	err = authz.RequireRole(actor, sqlc.RoleNameAdmin)
	if err != nil && actor.User.GetID() != said {
		return nil, err
	}

	roles, err := r.database.GetServiceAccountRoles(ctx, said)
	if err != nil {
		return nil, err
	}

	return toGraphRoles(roles), nil
}

// ServiceAccount returns gengql.ServiceAccountResolver implementation.
func (r *Resolver) ServiceAccount() gengql.ServiceAccountResolver { return &serviceAccountResolver{r} }

type serviceAccountResolver struct{ *Resolver }
