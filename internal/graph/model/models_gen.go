// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

// Authenticated user type. Can be a user or a service account.
type AuthenticatedUser interface {
	IsAuthenticatedUser()
}

type OrderBy struct {
	// Order direction.
	Direction SortOrder `json:"direction"`
	// The field to order by.
	Field OrderByField `json:"field"`
}

// Pagination information.
type PageInfo struct {
	// The total amount if items accessible.
	TotalCount int `json:"totalCount"`
	// Whether or not there exists a next page in the data set.
	HasNextPage bool `json:"hasNextPage"`
	// Whether or not there exists a previous page in the data set.
	HasPreviousPage bool `json:"hasPreviousPage"`
}

// The query root for the NAIS GraphQL API.
type Query struct {
}

// Paginated teams type.
type TeamList struct {
	// The list of teams.
	Nodes []*Team `json:"nodes"`
	// Pagination information.
	PageInfo PageInfo `json:"pageInfo"`
}

type UserList struct {
	Nodes    []*User  `json:"nodes"`
	PageInfo PageInfo `json:"pageInfo"`
}

type UsersyncRunList struct {
	Nodes    []*UsersyncRun `json:"nodes"`
	PageInfo PageInfo       `json:"pageInfo"`
}

type OrderByField string

const (
	// Order by name
	OrderByFieldName OrderByField = "NAME"
	// Order by env
	OrderByFieldEnv OrderByField = "ENV"
	// Order by status
	OrderByFieldStatus OrderByField = "STATUS"
)

var AllOrderByField = []OrderByField{
	OrderByFieldName,
	OrderByFieldEnv,
	OrderByFieldStatus,
}

func (e OrderByField) IsValid() bool {
	switch e {
	case OrderByFieldName, OrderByFieldEnv, OrderByFieldStatus:
		return true
	}
	return false
}

func (e OrderByField) String() string {
	return string(e)
}

func (e *OrderByField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderByField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderByField", str)
	}
	return nil
}

func (e OrderByField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortOrder string

const (
	// Ascending sort order.
	SortOrderAsc SortOrder = "ASC"
	// Descending sort order.
	SortOrderDesc SortOrder = "DESC"
)

var AllSortOrder = []SortOrder{
	SortOrderAsc,
	SortOrderDesc,
}

func (e SortOrder) IsValid() bool {
	switch e {
	case SortOrderAsc, SortOrderDesc:
		return true
	}
	return false
}

func (e SortOrder) String() string {
	return string(e)
}

func (e *SortOrder) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortOrder(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortOrder", str)
	}
	return nil
}

func (e SortOrder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// User sync run status.
type UsersyncRunStatus string

const (
	// Successful user sync run.
	UsersyncRunStatusSuccess UsersyncRunStatus = "SUCCESS"
	// Failed user sync run.
	UsersyncRunStatusFailure UsersyncRunStatus = "FAILURE"
)

var AllUsersyncRunStatus = []UsersyncRunStatus{
	UsersyncRunStatusSuccess,
	UsersyncRunStatusFailure,
}

func (e UsersyncRunStatus) IsValid() bool {
	switch e {
	case UsersyncRunStatusSuccess, UsersyncRunStatusFailure:
		return true
	}
	return false
}

func (e UsersyncRunStatus) String() string {
	return string(e)
}

func (e *UsersyncRunStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UsersyncRunStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UsersyncRunStatus", str)
	}
	return nil
}

func (e UsersyncRunStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
