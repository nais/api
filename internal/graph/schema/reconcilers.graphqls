extend type Mutation {
	"""
	Enable a reconciler

	A reconciler must be fully configured before it can be enabled.
	"""
	enableReconciler(input: EnableReconcilerInput!): Reconciler!

	"""
	Disable a reconciler

	The reconciler configuration will be left intact.
	"""
	disableReconciler(input: DisableReconcilerInput!): Reconciler!

	"Configure a reconciler."
	configureReconciler(input: ConfigureReconcilerInput!): Reconciler!
}

extend type Query {
	"Get a collection of reconcilers."
	reconcilers(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): ReconcilerConnection!
}

extend enum ActivityLogEntryResourceType {
	"All activity log entries related to reconcilers will use this resource type."
	RECONCILER
}

type ReconcilerConnection {
	"Pagination information."
	pageInfo: PageInfo!

	"List of nodes."
	nodes: [Reconciler!]!

	"List of edges."
	edges: [ReconcilerEdge!]!
}

type ReconcilerEdge {
	"Cursor for this edge that can be used for pagination."
	cursor: Cursor!

	"The reconciler."
	node: Reconciler!
}

"Reconciler type."
type Reconciler implements Node {
	"Unique identifier for the reconciler."
	id: ID!

	"The name of the reconciler."
	name: String!

	"The human-friendly name of the reconciler."
	displayName: String!

	"Description of what the reconciler is responsible for."
	description: String!

	"Whether or not the reconciler is enabled."
	enabled: Boolean!

	"Reconciler configuration keys and descriptions."
	config: [ReconcilerConfig!]!

	"Whether or not the reconciler is fully configured and ready to be enabled."
	configured: Boolean!

	"Potential errors that have occurred during the reconciler's operation."
	errors(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): ReconcilerErrorConnection!
}

type ReconcilerErrorConnection {
	"Pagination information."
	pageInfo: PageInfo!

	"List of nodes."
	nodes: [ReconcilerError!]!

	"List of edges."
	edges: [ReconcilerErrorEdge!]!
}

type ReconcilerErrorEdge {
	"Cursor for this edge that can be used for pagination."
	cursor: Cursor!

	"The reconcilerError."
	node: ReconcilerError!
}

type ReconcilerError {
	correlationID: String!
	createdAt: Time!
	message: String!
	team: Team!
}

"Reconciler configuration type."
type ReconcilerConfig {
	"Configuration key."
	key: String!

	"The human-friendly name of the configuration key."
	displayName: String!

	"Configuration description."
	description: String!

	"Whether or not the configuration key has a value."
	configured: Boolean!

	"Whether or not the configuration value is considered a secret. Secret values will not be exposed through the API."
	secret: Boolean!

	"Configuration value. This will be set to null if the value is considered a secret."
	value: String
}

"Reconciler configuration input."
input ReconcilerConfigInput {
	"Configuration key."
	key: String!

	"Configuration value."
	value: String!
}

type ReconcilerEnabledActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}

type ReconcilerDisabledActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}

type ReconcilerConfiguredActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String

	"Data associated with the update."
	data: ReconcilerConfiguredActivityLogData!
}

type ReconcilerConfiguredActivityLogData {
	"Keys that were updated."
	updatedKeys: [String!]!
}

input EnableReconcilerInput {
	"The name of the reconciler to enable."
	name: String!
}

input DisableReconcilerInput {
	"The name of the reconciler to disable."
	name: String!
}

input ConfigureReconcilerInput {
	"The name of the reconciler to configure."
	name: String!

	"List of reconciler config inputs."
	config: [ReconcilerConfigInput!]!
}
