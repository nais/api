extend type Query {
	"Get a list of teams."
	teams(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Ordering options for items returned from the connection."
		orderBy: TeamOrder

		"Filter options for the teams returned from the connection."
		filter: TeamFilter
	): TeamConnection!

	"Get a team by its slug."
	team(slug: Slug!): Team!
}

extend type Mutation {
	"""
	Create a new Nais team

	The user creating the team will be granted team ownership, unless the user is a service account, in which case the
	team will not get an initial owner. To add one or more owners to the team, refer to the `addTeamOwners` mutation.

	Creation of a team will also create external resources for the team, which will be managed by the Nais API
	reconcilers. This will be done asynchronously.

	Refer to the [official Nais documentation](https://docs.nais.io/explanations/team/) for more information regarding
	Nais teams.
	"""
	createTeam(input: CreateTeamInput!): CreateTeamPayload!

	"""
	Update an existing Nais team

	This mutation can be used to update the team purpose and the main Slack channel. It is not possible to update the
	team slug.
	"""
	updateTeam(input: UpdateTeamInput!): UpdateTeamPayload!

	"""
	Update an environment for a team
	"""
	updateTeamEnvironment(input: UpdateTeamEnvironmentInput!): UpdateTeamEnvironmentPayload!

	"""
	Request a key that can be used to trigger a team deletion process

	Deleting a team is a two step process. First an owner of the team (or an admin) must request a team deletion key,
	and then a second owner of the team (or an admin) must confirm the deletion using the confirmTeamDeletion mutation.

	The returned delete key is valid for an hour, and can only be used once.

	Note: Service accounts are not allowed to request team delete keys.
	"""
	requestTeamDeletion(input: RequestTeamDeletionInput!): RequestTeamDeletionPayload!

	"""
	Confirm a team deletion

	This will start the actual team deletion process, which will be done in an asynchronous manner. All external
	entities controlled by Nais will also be deleted.

	WARNING: There is no going back after starting this process.

	Note: Service accounts are not allowed to confirm a team deletion.
	"""
	confirmTeamDeletion(input: ConfirmTeamDeletionInput!): ConfirmTeamDeletionPayload!

	"""
	Add a team member

	If the user is already a member or an owner of the team, the mutation will result in an error.
	"""
	addTeamMember(input: AddTeamMemberInput!): AddTeamMemberPayload!

	"""
	Remove a team member

	If the user is not already a member or an owner of the team, the mutation will result in an error.
	"""
	removeTeamMember(input: RemoveTeamMemberInput!): RemoveTeamMemberPayload!

	"""
	Assign a role to a team member

	The user must already be a member of the team for this mutation to succeed.
	"""
	setTeamMemberRole(input: SetTeamMemberRoleInput!): SetTeamMemberRolePayload!
}

"""
The team type represents a team on the [Nais platform](https://nais.io/).

Learn more about what Nais teams are and what they can be used for in the [official Nais documentation](https://docs.nais.io/explanations/team/).

External resources (e.g. entraIDGroupID, gitHubTeamSlug) are managed by [Nais API reconcilers](https://github.com/nais/api-reconcilers).
"""
type Team implements Node {
	"The globally unique ID of the team."
	id: ID!

	"Unique slug of the team."
	slug: Slug!

	"Main Slack channel for the team."
	slackChannel: String!

	"Purpose of the team."
	purpose: String!

	"External resources for the team."
	externalResources: TeamExternalResources!

	"Get a specific member of the team."
	member(email: String!): TeamMember!

	"Team members."
	members(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Ordering options for items returned from the connection."
		orderBy: TeamMemberOrder
	): TeamMemberConnection!

	"Timestamp of the last successful synchronization of the team."
	lastSuccessfulSync: Time

	"Whether or not the team is currently being deleted."
	deletionInProgress: Boolean!

	"Whether or not the viewer is an owner of the team."
	viewerIsOwner: Boolean!

	"Whether or not the viewer is a member of the team."
	viewerIsMember: Boolean!

	"Environments for the team."
	environments: [TeamEnvironment!]!

	"Get a specific environment for the team."
	environment(name: String!): TeamEnvironment!

	"Get a delete key for the team."
	deleteKey(key: String!): TeamDeleteKey!

	"Overall inventory of resources for the team."
	inventoryCounts: TeamInventoryCounts!
}

type TeamEnvironment implements Node {
	"The globally unique ID of the team environment."
	id: ID!

	"Name of the team environment."
	name: String! @deprecated(reason: "Use the `environment` field to get the environment name.")

	"The GCP project ID for the team environment."
	gcpProjectID: String

	"The Slack alerts channel for the team environment."
	slackAlertsChannel: String!

	"The connected team."
	team: Team!
}

type TeamMember {
	"Team instance."
	team: Team!

	"User instance."
	user: User!

	"The role that the user has in the team."
	role: TeamMemberRole!
}

type CreateTeamPayload {
	"The newly created team."
	team: Team
}

type UpdateTeamPayload {
	"The updated team."
	team: Team
}

type UpdateTeamEnvironmentPayload {
	"The updated team environment."
	environment: TeamEnvironment @deprecated(reason: "Use the `teamEnvironment` field instead.")

	"The updated team environment."
	teamEnvironment: TeamEnvironment
}

type RequestTeamDeletionPayload {
	"The delete key for the team. This can be used to confirm the deletion of the team."
	key: TeamDeleteKey
}

type ConfirmTeamDeletionPayload {
	"Whether or not the asynchronous deletion process was started."
	deletionStarted: Boolean
}

type AddTeamMemberPayload {
	"The added team member."
	member: TeamMember
}

type RemoveTeamMemberPayload {
	"The user that was removed from the team."
	user: User

	"The team that the member was removed from."
	team: Team
}

type SetTeamMemberRolePayload {
	"The updated team member."
	member: TeamMember
}

type TeamDeleteKey {
	"The unique key used to confirm the deletion of a team."
	key: String!

	"The creation timestamp of the key."
	createdAt: Time!

	"Expiration timestamp of the key."
	expires: Time!

	"The user who created the key."
	createdBy: User!

	"The team the delete key is for."
	team: Team!
}

type TeamConnection {
	"Pagination information."
	pageInfo: PageInfo!

	"List of nodes."
	nodes: [Team!]!

	"List of edges."
	edges: [TeamEdge!]!
}

type TeamMemberConnection {
	"Pagination information."
	pageInfo: PageInfo!

	"List of nodes."
	nodes: [TeamMember!]!

	"List of edges."
	edges: [TeamMemberEdge!]!
}

type TeamEdge {
	"Cursor for this edge that can be used for pagination."
	cursor: Cursor!

	"The team."
	node: Team!
}

type TeamMemberEdge {
	"Cursor for this edge that can be used for pagination."
	cursor: Cursor!

	"The team member."
	node: TeamMember!
}

type TeamInventoryCounts

input CreateTeamInput {
	"""
	Unique team slug.

	After creation, this value can not be changed. Also, after a potential deletion of the team, the slug can not be
	reused, so please choose wisely.
	"""
	slug: Slug!

	"""
	The purpose / description of the team.

	What is the team for? What is the team working on? This value is meant for human consumption, and should be enough
	to give a newcomer an idea of what the team is about.
	"""
	purpose: String!

	"""
	The main Slack channel for the team.

	Where does the team communicate? This value is used to link to the team's main Slack channel.
	"""
	slackChannel: String!
}

input UpdateTeamInput {
	"Slug of the team to update."
	slug: Slug!

	"""
	An optional new purpose / description of the team.

	When omitted the existing value will not be updated.
	"""
	purpose: String

	"""
	An optional new Slack channel for the team.

	When omitted the existing value will not be updated.
	"""
	slackChannel: String
}

input UpdateTeamEnvironmentInput {
	"Slug of the team to update."
	slug: Slug!

	"Name of the environment to update."
	environmentName: String!

	"Slack alerts channel for the environment. Set to an empty string to remove the existing value."
	slackAlertsChannel: String
}

"Ordering options when fetching teams."
input TeamOrder {
	"The field to order items by."
	field: TeamOrderField!

	"The direction to order items by."
	direction: OrderDirection!
}

"Ordering options for team members."
input TeamMemberOrder {
	"The field to order items by."
	field: TeamMemberOrderField!

	"The direction to order items by."
	direction: OrderDirection!
}

input RequestTeamDeletionInput {
	"Slug of the team to request a team deletion key for."
	slug: Slug!
}

input ConfirmTeamDeletionInput {
	"Slug of the team to confirm deletion for."
	slug: Slug!

	"Deletion key, acquired using the requestTeamDeletion mutation."
	key: String!
}

input AddTeamMemberInput {
	"Slug of the team that should receive a new member."
	teamSlug: Slug!

	"The email address of the user to add to the team."
	userEmail: String!

	"The role that the user will have in the team."
	role: TeamMemberRole!
}

input RemoveTeamMemberInput {
	"Slug of the team that the member should be removed from."
	teamSlug: Slug!

	"The email address of the user to remove from the team."
	userEmail: String!
}

input SetTeamMemberRoleInput {
	"The slug of the team."
	teamSlug: Slug!

	"The email address of the user."
	userEmail: String!

	"The role to assign."
	role: TeamMemberRole!
}

"Possible fields to order teams by."
enum TeamOrderField {
	"The unique slug of the team."
	SLUG
}

"Possible fields to order team members by."
enum TeamMemberOrderField {
	"The name of user."
	NAME

	"The email address of the user."
	EMAIL

	"The role the user has in the team."
	ROLE
}

"Team member roles."
enum TeamMemberRole {
	"Regular member, read only access."
	MEMBER

	"Team owner, full access to the team."
	OWNER
}

extend enum ActivityLogEntryResourceType {
	"All activity log entries related to teams will use this resource type."
	TEAM
}

type TeamCreatedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}

type TeamUpdatedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String

	"Data associated with the update."
	data: TeamUpdatedActivityLogEntryData!
}

type TeamUpdatedActivityLogEntryData {
	"Fields that were updated."
	updatedFields: [TeamUpdatedActivityLogEntryDataUpdatedField!]!
}

type TeamUpdatedActivityLogEntryDataUpdatedField {
	"The name of the field."
	field: String!

	"The old value of the field."
	oldValue: String

	"The new value of the field."
	newValue: String
}

type TeamCreateDeleteKeyActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}

type TeamConfirmDeleteKeyActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}

type TeamMemberAddedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String

	"Data associated with the action."
	data: TeamMemberAddedActivityLogEntryData!
}

type TeamMemberAddedActivityLogEntryData {
	"The role that the user was added with."
	role: TeamMemberRole!

	"The ID of the user that was added."
	userID: ID!

	"The email address of the user that was added."
	userEmail: String!
}

type TeamMemberRemovedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String

	"Data associated with the action."
	data: TeamMemberRemovedActivityLogEntryData!
}

type TeamMemberRemovedActivityLogEntryData {
	"The ID of the user that was removed."
	userID: ID!

	"The email address of the user that was removed."
	userEmail: String!
}

type TeamMemberSetRoleActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String

	"Data associated with the action."
	data: TeamMemberSetRoleActivityLogEntryData!
}

type TeamMemberSetRoleActivityLogEntryData {
	"The role that the user was assigned."
	role: TeamMemberRole!

	"The ID of the user that was added."
	userID: ID!

	"The email address of the user that was added."
	userEmail: String!
}

type TeamEnvironmentUpdatedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String

	"Data associated with the action."
	data: TeamEnvironmentUpdatedActivityLogEntryData!
}

type TeamEnvironmentUpdatedActivityLogEntryData {
	"Fields that were updated."
	updatedFields: [TeamEnvironmentUpdatedActivityLogEntryDataUpdatedField!]!
}

type TeamEnvironmentUpdatedActivityLogEntryDataUpdatedField {
	"The name of the field."
	field: String!

	"The old value of the field."
	oldValue: String

	"The new value of the field."
	newValue: String
}

type TeamExternalResources {
	"The Entra ID (f.k.a. Azure AD) group for the team."
	entraIDGroup: TeamEntraIDGroup

	"The teams GitHub team."
	gitHubTeam: TeamGitHubTeam

	"The Google group for the team."
	googleGroup: TeamGoogleGroup

	"Google Artifact Registry."
	googleArtifactRegistry: TeamGoogleArtifactRegistry

	"CDN bucket."
	cdn: TeamCDN
}

type TeamCDN {
	"The CDN bucket for the team."
	bucket: String!
}

type TeamEntraIDGroup {
	"The ID of the Entra ID (f.k.a. Azure AD) group for the team."
	groupID: String!
}

type TeamGitHubTeam {
	"The slug of the GitHub team."
	slug: String!
}

type TeamGoogleGroup {
	"The email address of the Google Workspace group for the team."
	email: String!
}

type TeamGoogleArtifactRegistry {
	"The Google Artifact Registry for the team."
	repository: String!
}

"""
Input for filtering teams.
"""
input TeamFilter {
	"""
	Filter teams by the existence of workloads.
	"""
	hasWorkloads: Boolean
}
