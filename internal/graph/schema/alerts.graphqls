extend type TeamEnvironment {
	alerts(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor

		"""
		Ordering options for items returned from the connection.
		"""
		orderBy: AlertOrder

		"""
		Filter the returned objects
		"""
		filter: TeamAlertsFilter
	): AlertConnection!
}

"""
Alert interface.
"""
interface Alert implements Node {
	"The unique identifier for the alert."
	id: ID!
	"The name of the alert."
	name: String!

	"The environment slug that the alert belongs to."
	environmentName: String!

	"The team slug that the alert belongs to."
	teamSlug: Slug!

	"The state of the alert."
	state: AlertState!
}

"""
PrometheusAlert type
"""
type PrometheusAlert implements Node & Alert {
	"The unique identifier for the alert."
	id: ID!

	"The name of the alert."
	name: String!

	"The environment slug that the alert belongs to."
	environmentName: String!

	"The team slug that the alert belongs to."
	teamSlug: Slug!

	"The state of the alert."
	state: AlertState!
}

"""
AlertConnection connection.
"""
type AlertConnection {
	"""
	Pagination information.
	"""
	pageInfo: PageInfo!

	"""
	List of nodes.
	"""
	nodes: [Alert!]!

	"""
	List of edges.
	"""
	edges: [AlertEdge!]!
}

"""
Alert edge.
"""
type AlertEdge {
	"""
	Cursor for this edge that can be used for pagination.
	"""
	cursor: Cursor!

	"""
	The Alert.
	"""
	node: Alert!
}

"""
Fields to order alerts in an environment by.
"""
enum AlertOrderField {
	"""
	Order by name.
	"""
	NAME
	"""
	Order by creation time.
	"""
	ENVIRONMENT
}

"""
Ordering options when fetching alerts.
"""
input AlertOrder {
	"""
	The field to order items by.
	"""
	field: AlertOrderField!

	"""
	The direction to order items by.
	"""
	direction: OrderDirection!
}

"""
Input for filtering alerts.
"""
input TeamAlertsFilter {
	"""
	Only return alerts from the given named states.
	"""
	states: [AlertState!]
}

enum AlertState {
	"""
	Only return alerts that are firing.
	"""
	FIRING

	"""
	Only return alerts that are inactive.
	"""
	INACTIVE

	"""
	Only return alerts that are pending.
	"""
	PENDING
}
