extend type Team {
	"Kafka topics owned by the team."
	kafkaTopics(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Ordering options for items returned from the connection."
		orderBy: KafkaTopicOrder
	): KafkaTopicConnection!
}

extend type TeamEnvironment {
	"Kafka topic in the team environment."
	kafkaTopic(name: String!): KafkaTopic!
}

extend interface Workload {
	"Kafka topics the workload has access to. This does not currently support pagination, but will return all available Kafka topics."
	kafkaTopicAcls(
		"Ordering options for items returned from the connection."
		orderBy: KafkaTopicAclOrder
	): KafkaTopicAclConnection!
}

extend type Application {
	"Kafka topics the application has access to. This does not currently support pagination, but will return all available Kafka topics."
	kafkaTopicAcls(
		"Ordering options for items returned from the connection."
		orderBy: KafkaTopicAclOrder
	): KafkaTopicAclConnection!
}

extend type Job {
	"Kafka topics the job has access to. This does not currently support pagination, but will return all available Kafka topics."
	kafkaTopicAcls(
		"Ordering options for items returned from the connection."
		orderBy: KafkaTopicAclOrder
	): KafkaTopicAclConnection!
}

extend type TeamInventoryCounts {
	kafkaTopics: TeamInventoryCountKafkaTopics!
}

type TeamInventoryCountKafkaTopics {
	"Total number of Kafka topics."
	total: Int!
}

type KafkaTopic implements Persistence & Node {
	id: ID!
	name: String!
	team: Team!
	environment: TeamEnvironment! @deprecated(reason: "Use the `teamEnvironment` field instead.")
	teamEnvironment: TeamEnvironment!
	acl(
		first: Int
		after: Cursor
		last: Int
		before: Cursor
		filter: KafkaTopicAclFilter
		orderBy: KafkaTopicAclOrder
	): KafkaTopicAclConnection!
	configuration: KafkaTopicConfiguration
	pool: String!
}

type KafkaTopicAcl {
	access: String!
	workloadName: String!
	teamName: String!
	team: Team
	workload: Workload
	topic: KafkaTopic!
}

type KafkaTopicConfiguration {
	cleanupPolicy: String
	maxMessageBytes: Int
	minimumInSyncReplicas: Int
	partitions: Int
	replication: Int
	retentionBytes: Int
	retentionHours: Int
	segmentHours: Int
}

type KafkaTopicConnection {
	pageInfo: PageInfo!
	nodes: [KafkaTopic!]!
	edges: [KafkaTopicEdge!]!
}

type KafkaTopicAclConnection {
	pageInfo: PageInfo!
	nodes: [KafkaTopicAcl!]!
	edges: [KafkaTopicAclEdge!]!
}

type KafkaTopicEdge {
	cursor: Cursor!
	node: KafkaTopic!
}

type KafkaTopicAclEdge {
	cursor: Cursor!
	node: KafkaTopicAcl!
}

input KafkaTopicAclFilter {
	team: Slug
	workload: String
	validWorkloads: Boolean
}

input KafkaTopicOrder {
	field: KafkaTopicOrderField!
	direction: OrderDirection!
}

input KafkaTopicAclOrder {
	field: KafkaTopicAclOrderField!
	direction: OrderDirection!
}

enum KafkaTopicOrderField {
	NAME
	ENVIRONMENT
}

enum KafkaTopicAclOrderField {
	TOPIC_NAME
	TEAM_SLUG
	CONSUMER
	ACCESS
}

extend union SearchNode = KafkaTopic

extend enum SearchType {
	KAFKA_TOPIC
}
