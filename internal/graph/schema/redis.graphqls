extend type Team {
	"Redis instances owned by the team."
	redisInstances(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Ordering options for items returned from the connection."
		orderBy: RedisInstanceOrder
	): RedisInstanceConnection!
}

extend type TeamEnvironment {
	"Redis instance in the team environment."
	redisInstance(name: String!): RedisInstance!
}

extend interface Workload {
	"Redis instances referenced by the workload. This does not currently support pagination, but will return all available Redis instances."
	redisInstances(
		"Ordering options for items returned from the connection."
		orderBy: RedisInstanceOrder
	): RedisInstanceConnection!
}

extend type Application {
	"Redis instances referenced by the application. This does not currently support pagination, but will return all available Redis instances."
	redisInstances(
		"Ordering options for items returned from the connection."
		orderBy: RedisInstanceOrder
	): RedisInstanceConnection!
}

extend type Job {
	"Redis instances referenced by the job. This does not currently support pagination, but will return all available Redis instances."
	redisInstances(
		"Ordering options for items returned from the connection."
		orderBy: RedisInstanceOrder
	): RedisInstanceConnection!
}

extend type TeamInventoryCounts {
	redisInstances: TeamInventoryCountRedisInstances!
}

type TeamInventoryCountRedisInstances {
	"Total number of Redis instances."
	total: Int!
}

type RedisInstance implements Persistence & Node {
	id: ID!
	name: String!
	team: Team!
	environment: TeamEnvironment!
	access(
		first: Int
		after: Cursor
		last: Int
		before: Cursor
		orderBy: RedisInstanceAccessOrder
	): RedisInstanceAccessConnection!
	workload: Workload
	status: RedisInstanceStatus!
}

type RedisInstanceAccess {
	workload: Workload!
	access: String!
}

type RedisInstanceStatus {
	state: String!
}

type RedisInstanceAccessConnection {
	pageInfo: PageInfo!
	nodes: [RedisInstanceAccess!]!
	edges: [RedisInstanceAccessEdge!]!
}

type RedisInstanceConnection {
	pageInfo: PageInfo!
	nodes: [RedisInstance!]!
	edges: [RedisInstanceEdge!]!
}

type RedisInstanceAccessEdge {
	cursor: Cursor!
	node: RedisInstanceAccess!
}

type RedisInstanceEdge {
	cursor: Cursor!
	node: RedisInstance!
}

input RedisInstanceAccessOrder {
	field: RedisInstanceAccessOrderField!
	direction: OrderDirection!
}

input RedisInstanceOrder {
	field: RedisInstanceOrderField!
	direction: OrderDirection!
}

enum RedisInstanceAccessOrderField {
	ACCESS
	WORKLOAD
}

enum RedisInstanceOrderField {
	NAME
	ENVIRONMENT
}

extend union SearchNode = RedisInstance

extend enum SearchType {
	REDIS_INSTANCE
}
