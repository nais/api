extend type Team {
	"The cost for the team."
	cost: TeamCost!
}

extend type TeamEnvironment {
	"The cost for the team environment."
	cost: TeamEnvironmentCost!
}

type TeamCost {
	daily(
		"Start date of the period, inclusive."
		from: Date!

		"End date of the period, inclusive."
		to: Date!

		"Filter the results."
		filter: TeamCostDailyFilter
	): TeamCostPeriod!

	monthlySummary: TeamCostMonthlySummary!
}

input TeamCostDailyFilter {
	"Services to include in the summary."
	services: [String!]
}

type TeamEnvironmentCost {
	daily(
		"Start date of the period, inclusive."
		from: Date!

		"End date of the period, inclusive."
		to: Date!
	): TeamEnvironmentCostPeriod!
}

type TeamCostMonthlySummary {
	"The total cost for the last 12 months."
	sum: Float!

	"The cost series."
	series: [TeamCostMonthlySample!]!
}

type TeamCostMonthlySample {
	"The last date with cost data in the month."
	date: Date!

	"The total cost for the month."
	cost: Float!
}

type TeamCostPeriod {
	"The total cost for the period."
	sum: Float!

	"The cost series."
	series: [ServiceCostSeries!]!
}

type TeamEnvironmentCostPeriod {
	"The total cost for the period."
	sum: Float!

	"The cost series."
	series: [WorkloadCostSeries!]!
}

extend interface Workload {
	"The cost for a workload."
	cost: WorkloadCost!
}

extend type Application {
	"The cost for the application."
	cost: WorkloadCost!
}

extend type Job {
	"The cost for the job."
	cost: WorkloadCost!
}

type WorkloadCost {
	"Get the cost for a workload within a time period."
	daily(
		"Start date of the period, inclusive."
		from: Date!

		"End date of the period, inclusive."
		to: Date!
	): WorkloadCostPeriod!

	"The cost for the last 12 months."
	monthly: WorkloadCostPeriod!
}

type WorkloadCostPeriod {
	"The total cost for the period."
	sum: Float!

	"The cost series."
	series: [ServiceCostSeries!]!
}

type ServiceCostSeries {
	"The date for the cost. When calculating the cost for a monthly period, the date will be the last day of the month that has cost data."
	date: Date!

	"The sum of the cost across all services."
	sum: Float!

	"The cost for the services used by the workload."
	services: [ServiceCostSample!]!
}

type WorkloadCostSeries {
	"The date for the cost. When calculating the cost for a monthly period, the date will be the last day of the month that has cost data."
	date: Date!

	"The sum of the cost across all workloads."
	sum: Float!

	"The cost for the workloads in the environment."
	workloads: [WorkloadCostSample!]!
}

type ServiceCostSample {
	"The name of the service."
	service: String!

	"The cost in euros."
	cost: Float!
}

type WorkloadCostSample {
	"The workload."
	workload: Workload

	"The name of the workload."
	workloadName: String!

	"The cost in euros."
	cost: Float!
}

extend type OpenSearch {
	cost: OpenSearchCost!
}

type OpenSearchCost {
	sum: Float!
}

extend type RedisInstance {
	cost: RedisInstanceCost!
}

type RedisInstanceCost {
	sum: Float!
}

extend type ValkeyInstance {
	cost: ValkeyInstanceCost!
}

type ValkeyInstanceCost {
	sum: Float!
}

extend type BigQueryDataset {
	cost: BigQueryDatasetCost!
}

type BigQueryDatasetCost {
	sum: Float!
}

extend type SqlInstance {
	cost: SqlInstanceCost!
}

type SqlInstanceCost {
	sum: Float!
}
