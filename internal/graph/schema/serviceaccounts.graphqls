extend type Query {
	"""
	Get a list of service accounts.
	"""
	serviceAccounts(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor
	): ServiceAccountConnection!

	"""
	Returns a service account by its ID.
	"""
	serviceAccount(
		"""
		ID of the service account.
		"""
		id: ID!
	): ServiceAccount!
}

extend type Mutation {
	"""
	Create a service account.
	"""
	createServiceAccount(input: CreateServiceAccountInput!): CreateServiceAccountPayload!

	"""
	Update a service account.
	"""
	updateServiceAccount(input: UpdateServiceAccountInput!): UpdateServiceAccountPayload!

	"""
	Delete a service account.
	"""
	deleteServiceAccount(input: DeleteServiceAccountInput!): DeleteServiceAccountPayload!

	"""
	Assign a role to a service account.
	"""
	assignRoleToServiceAccount(
		input: AssignRoleToServiceAccountInput!
	): AssignRoleToServiceAccountPayload!

	"""
	Revoke a role from a service account.
	"""
	revokeRoleFromServiceAccount(
		input: RevokeRoleFromServiceAccountInput!
	): RevokeRoleFromServiceAccountPayload!

	"""
	Create a service account token.

	The secret is automatically generated, and is returned as a part of the payload for this mutation. The secret can
	not be retrieved at a later stage.

	A service account can have multiple active tokens at the same time.
	"""
	createServiceAccountToken(
		input: CreateServiceAccountTokenInput!
	): CreateServiceAccountTokenPayload!

	"""
	Update a service account token.

	Note that the secret itself can not be updated, only the metadata.
	"""
	updateServiceAccountToken(
		input: UpdateServiceAccountTokenInput!
	): UpdateServiceAccountTokenPayload!

	"""
	Delete a service account token.
	"""
	deleteServiceAccountToken(
		input: DeleteServiceAccountTokenInput!
	): DeleteServiceAccountTokenPayload!
}

input CreateServiceAccountInput {
	"""
	The name of the service account.
	"""
	name: String!

	"""
	A description of the service account.
	"""
	description: String!

	"""
	The team slug that the service account belongs to.
	"""
	teamSlug: Slug
}

input UpdateServiceAccountInput {
	"""
	The ID of the service account to update.
	"""
	serviceAccountID: ID!

	"""
	The new description of the service account.

	If not specified, the description will remain unchanged.
	"""
	description: String
}

input DeleteServiceAccountInput {
	"""
	The ID of the service account to delete.
	"""
	serviceAccountID: ID!
}

input AssignRoleToServiceAccountInput {
	"""
	The ID of the service account to assign the role to.
	"""
	serviceAccountID: ID!

	"""
	The name of the role to assign.
	"""
	roleName: String!
}

input RevokeRoleFromServiceAccountInput {
	"""
	The ID of the service account to revoke the role from.
	"""
	serviceAccountID: ID!

	"""
	The name of the role to revoke.
	"""
	roleName: String!
}

input CreateServiceAccountTokenInput {
	"""
	The ID of the service account to create the token for.
	"""
	serviceAccountID: ID!

	"""
	The name of the service account token.
	"""
	name: String!

	"""
	The description of the service account token.
	"""
	description: String!

	"""
	Optional expiry date of the token.

	If not specified, the token will never expire.
	"""
	expiresAt: Date
}

input UpdateServiceAccountTokenInput {
	"""
	The ID of the service account token to update.
	"""
	serviceAccountTokenID: ID!

	"""
	The new name of the service account token.

	If not specified, the name will remain unchanged.
	"""
	name: String

	"""
	The new description of the service account token.

	If not specified, the description will remain unchanged.
	"""
	description: String
}

input DeleteServiceAccountTokenInput {
	"""
	The ID of the service account token to delete.
	"""
	serviceAccountTokenID: ID!
}

"""
The service account type represents machine-users of the Nais API.

These types of users can be used to automate certain parts of the API, for instance team creation and managing team members.

Service accounts are created using the `createServiceAccount` mutation, and authenticate using tokens generated by the `createServiceAccountToken` mutation.
"""
type ServiceAccount implements Node {
	"""
	The globally unique ID of the service account.
	"""
	id: ID!

	"""
	The name of the service account.
	"""
	name: String!

	"""
	The description of the service account.
	"""
	description: String!

	"""
	Creation time of the service account.
	"""
	createdAt: Time!

	"""
	When the service account was last updated.
	"""
	updatedAt: Time!

	"""
	When the service account was last used for authentication.
	"""
	lastUsedAt: Time

	"""
	The team that the service account belongs to.
	"""
	team: Team

	"""
	The roles that are assigned to the service account.
	"""
	roles(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor
	): RoleConnection!

	"""
	The service account tokens.
	"""
	tokens(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor
	): ServiceAccountTokenConnection!
}

type CreateServiceAccountPayload {
	"""
	The created service account.
	"""
	serviceAccount: ServiceAccount
}

type UpdateServiceAccountPayload {
	"""
	The updated service account.
	"""
	serviceAccount: ServiceAccount
}

type DeleteServiceAccountPayload {
	"""
	Whether or not the service account was deleted.
	"""
	serviceAccountDeleted: Boolean
}

type AssignRoleToServiceAccountPayload {
	"""
	The service account that had a role assigned.
	"""
	serviceAccount: ServiceAccount
}

type RevokeRoleFromServiceAccountPayload {
	"""
	The service account that had a role revoked.
	"""
	serviceAccount: ServiceAccount
}

type CreateServiceAccountTokenPayload {
	"""
	The service account that the token belongs to.
	"""
	serviceAccount: ServiceAccount

	"""
	The created service account token.
	"""
	serviceAccountToken: ServiceAccountToken

	"""
	The secret of the service account token.

	This value is only returned once, and can not be retrieved at a later stage. If the secret is lost, a new token must be created.

	Once obtained, the secret can be used to authenticate as the service account using the HTTP `Authorization` request header:

	```
	Authorization: Bearer <secret>
	```
	"""
	secret: String
}

type UpdateServiceAccountTokenPayload {
	"""
	The service account that the token belongs to.
	"""
	serviceAccount: ServiceAccount

	"""
	The updated service account token.
	"""
	serviceAccountToken: ServiceAccountToken
}

type DeleteServiceAccountTokenPayload {
	"""
	The service account that the token belonged to.
	"""
	serviceAccount: ServiceAccount

	"""
	Whether or not the service account token was deleted.
	"""
	serviceAccountTokenDeleted: Boolean
}

type ServiceAccountToken implements Node {
	"""
	The globally unique ID of the service account token.
	"""
	id: ID!

	"""
	The name of the service account token.
	"""
	name: String!

	"""
	The description of the service account token.
	"""
	description: String!

	"""
	When the service account token was created.
	"""
	createdAt: Time!

	"""
	When the service account token was last updated.
	"""
	updatedAt: Time!

	"""
	When the service account token was last used for authentication.
	"""
	lastUsedAt: Time

	"""
	Expiry date of the token. If this value is empty the token never expires.
	"""
	expiresAt: Date
}

type ServiceAccountConnection {
	"""
	A list of service accounts.
	"""
	nodes: [ServiceAccount!]!

	"""
	A list of edges.
	"""
	edges: [ServiceAccountEdge!]!

	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
}

type ServiceAccountEdge {
	"""
	The service account.
	"""
	node: ServiceAccount!

	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}

type ServiceAccountTokenConnection {
	"""
	A list of service accounts tokens.
	"""
	nodes: [ServiceAccountToken!]!

	"""
	A list of edges.
	"""
	edges: [ServiceAccountTokenEdge!]!

	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
}

type ServiceAccountTokenEdge {
	"""
	The service account token.
	"""
	node: ServiceAccountToken!

	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}

extend enum ActivityLogEntryResourceType {
	SERVICE_ACCOUNT
}

type ServiceAccountCreatedActivityLogEntry implements ActivityLogEntry & Node {
	"""
	ID of the entry.
	"""
	id: ID!

	"""
	The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user.
	"""
	actor: String!

	"""
	Creation time of the entry.
	"""
	createdAt: Time!

	"""
	Message that summarizes the entry.
	"""
	message: String!

	"""
	Type of the resource that was affected by the action.
	"""
	resourceType: ActivityLogEntryResourceType!

	"""
	Name of the resource that was affected by the action.
	"""
	resourceName: String!

	"""
	The team slug that the entry belongs to.
	"""
	teamSlug: Slug

	"""
	The environment name that the entry belongs to.
	"""
	environmentName: String
}

type ServiceAccountUpdatedActivityLogEntry implements ActivityLogEntry & Node {
	"""
	ID of the entry.
	"""
	id: ID!

	"""
	The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user.
	"""
	actor: String!

	"""
	Creation time of the entry.
	"""
	createdAt: Time!

	"""
	Message that summarizes the entry.
	"""
	message: String!

	"""
	Type of the resource that was affected by the action.
	"""
	resourceType: ActivityLogEntryResourceType!

	"""
	Name of the resource that was affected by the action.
	"""
	resourceName: String!

	"""
	The team slug that the entry belongs to.
	"""
	teamSlug: Slug

	"""
	The environment name that the entry belongs to.
	"""
	environmentName: String

	"""
	Data associated with the entry.
	"""
	data: ServiceAccountUpdatedActivityLogEntryData!
}

type ServiceAccountUpdatedActivityLogEntryData {
	"""
	Fields that were updated.
	"""
	updatedFields: [ServiceAccountUpdatedActivityLogEntryDataUpdatedField!]!
}

type ServiceAccountUpdatedActivityLogEntryDataUpdatedField {
	"""
	The name of the field.
	"""
	field: String!

	"""
	The old value of the field.
	"""
	oldValue: String

	"""
	The new value of the field.
	"""
	newValue: String
}

type ServiceAccountDeletedActivityLogEntry implements ActivityLogEntry & Node {
	"""
	ID of the entry.
	"""
	id: ID!

	"""
	The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user.
	"""
	actor: String!

	"""
	Creation time of the entry.
	"""
	createdAt: Time!

	"""
	Message that summarizes the entry.
	"""
	message: String!

	"""
	Type of the resource that was affected by the action.
	"""
	resourceType: ActivityLogEntryResourceType!

	"""
	Name of the resource that was affected by the action.
	"""
	resourceName: String!

	"""
	The team slug that the entry belongs to.
	"""
	teamSlug: Slug

	"""
	The environment name that the entry belongs to.
	"""
	environmentName: String
}

type RoleAssignedToServiceAccountActivityLogEntry implements ActivityLogEntry & Node {
	"""
	ID of the entry.
	"""
	id: ID!

	"""
	The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user.
	"""
	actor: String!

	"""
	Creation time of the entry.
	"""
	createdAt: Time!

	"""
	Message that summarizes the entry.
	"""
	message: String!

	"""
	Type of the resource that was affected by the action.
	"""
	resourceType: ActivityLogEntryResourceType!

	"""
	Name of the resource that was affected by the action.
	"""
	resourceName: String!

	"""
	The team slug that the entry belongs to.
	"""
	teamSlug: Slug

	"""
	The environment name that the entry belongs to.
	"""
	environmentName: String

	"""
	Data associated with the entry.
	"""
	data: RoleAssignedToServiceAccountActivityLogEntryData!
}

type RoleAssignedToServiceAccountActivityLogEntryData {
	"""
	The added role.
	"""
	roleName: String!
}

type RoleRevokedFromServiceAccountActivityLogEntry implements ActivityLogEntry & Node {
	"""
	ID of the entry.
	"""
	id: ID!

	"""
	The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user.
	"""
	actor: String!

	"""
	Creation time of the entry.
	"""
	createdAt: Time!

	"""
	Message that summarizes the entry.
	"""
	message: String!

	"""
	Type of the resource that was affected by the action.
	"""
	resourceType: ActivityLogEntryResourceType!

	"""
	Name of the resource that was affected by the action.
	"""
	resourceName: String!

	"""
	The team slug that the entry belongs to.
	"""
	teamSlug: Slug

	"""
	The environment name that the entry belongs to.
	"""
	environmentName: String

	"""
	Data associated with the entry.
	"""
	data: RoleRevokedFromServiceAccountActivityLogEntryData!
}

type RoleRevokedFromServiceAccountActivityLogEntryData {
	"""
	The removed role.
	"""
	roleName: String!
}

type ServiceAccountTokenCreatedActivityLogEntry implements ActivityLogEntry & Node {
	"""
	ID of the entry.
	"""
	id: ID!

	"""
	The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user.
	"""
	actor: String!

	"""
	Creation time of the entry.
	"""
	createdAt: Time!

	"""
	Message that summarizes the entry.
	"""
	message: String!

	"""
	Type of the resource that was affected by the action.
	"""
	resourceType: ActivityLogEntryResourceType!

	"""
	Name of the resource that was affected by the action.
	"""
	resourceName: String!

	"""
	The team slug that the entry belongs to.
	"""
	teamSlug: Slug

	"""
	The environment name that the entry belongs to.
	"""
	environmentName: String

	"""
	Data associated with the entry.
	"""
	data: ServiceAccountTokenCreatedActivityLogEntryData!
}

type ServiceAccountTokenCreatedActivityLogEntryData {
	"""
	The name of the service account token.
	"""
	tokenName: String!
}

type ServiceAccountTokenUpdatedActivityLogEntry implements ActivityLogEntry & Node {
	"""
	ID of the entry.
	"""
	id: ID!

	"""
	The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user.
	"""
	actor: String!

	"""
	Creation time of the entry.
	"""
	createdAt: Time!

	"""
	Message that summarizes the entry.
	"""
	message: String!

	"""
	Type of the resource that was affected by the action.
	"""
	resourceType: ActivityLogEntryResourceType!

	"""
	Name of the resource that was affected by the action.
	"""
	resourceName: String!

	"""
	The team slug that the entry belongs to.
	"""
	teamSlug: Slug

	"""
	The environment name that the entry belongs to.
	"""
	environmentName: String

	"""
	Data associated with the entry.
	"""
	data: ServiceAccountTokenUpdatedActivityLogEntryData!
}

type ServiceAccountTokenUpdatedActivityLogEntryData {
	"""
	Fields that were updated.
	"""
	updatedFields: [ServiceAccountTokenUpdatedActivityLogEntryDataUpdatedField!]!
}

type ServiceAccountTokenUpdatedActivityLogEntryDataUpdatedField {
	"""
	The name of the field.
	"""
	field: String!

	"""
	The old value of the field.
	"""
	oldValue: String

	"""
	The new value of the field.
	"""
	newValue: String
}

type ServiceAccountTokenDeletedActivityLogEntry implements ActivityLogEntry & Node {
	"""
	ID of the entry.
	"""
	id: ID!

	"""
	The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user.
	"""
	actor: String!

	"""
	Creation time of the entry.
	"""
	createdAt: Time!

	"""
	Message that summarizes the entry.
	"""
	message: String!

	"""
	Type of the resource that was affected by the action.
	"""
	resourceType: ActivityLogEntryResourceType!

	"""
	Name of the resource that was affected by the action.
	"""
	resourceName: String!

	"""
	The team slug that the entry belongs to.
	"""
	teamSlug: Slug

	"""
	The environment name that the entry belongs to.
	"""
	environmentName: String

	"""
	Data associated with the entry.
	"""
	data: ServiceAccountTokenDeletedActivityLogEntryData!
}

type ServiceAccountTokenDeletedActivityLogEntryData {
	"""
	The name of the service account token.
	"""
	tokenName: String!
}
