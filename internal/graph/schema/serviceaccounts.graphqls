extend type Query {
	"""
	Get a list of service accounts.
	"""
	serviceAccounts(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): ServiceAccountConnection!

	"""
	Returns a service account by its ID.
	"""
	serviceAccount("ID of the service account." id: ID!): ServiceAccount!
}

extend type Mutation {
	createServiceAccount(input: CreateServiceAccountInput!): CreateServiceAccountPayload!
	updateServiceAccount(input: UpdateServiceAccountInput!): UpdateServiceAccountPayload!
	deleteServiceAccount(input: DeleteServiceAccountInput!): DeleteServiceAccountPayload!
	addRoleToServiceAccount(input: AddRoleToServiceAccountInput!): AddRoleToServiceAccountPayload!
	removeRoleFromServiceAccount(
		input: RemoveRoleFromServiceAccountInput!
	): RemoveRoleFromServiceAccountPayload!
	createServiceAccountToken(
		input: CreateServiceAccountTokenInput!
	): CreateServiceAccountTokenPayload!
	updateServiceAccountToken(
		input: UpdateServiceAccountTokenInput!
	): UpdateServiceAccountTokenPayload!
	deleteServiceAccountToken(
		input: DeleteServiceAccountTokenInput!
	): DeleteServiceAccountTokenPayload!
}

input CreateServiceAccountInput {
	name: String!
	description: String!
	teamSlug: Slug
}

input UpdateServiceAccountInput {
	id: ID!
	name: String
	description: String
}

input DeleteServiceAccountInput {
	id: ID!
}

input AddRoleToServiceAccountInput {
	serviceAccountID: ID!
	roleName: String!
}

input RemoveRoleFromServiceAccountInput {
	serviceAccountID: ID!
	roleName: String!
}

input CreateServiceAccountTokenInput {
	serviceAccountID: ID!
	note: String!
	expiresAt: Date
}

input UpdateServiceAccountTokenInput {
	serviceAccountTokenID: ID!
	note: String
	expiresAt: UpdateServiceAccountTokenExpiresAtInput
}

input UpdateServiceAccountTokenExpiresAtInput @oneOf {
	expiresAt: Date
	removeExpiry: Boolean
}

input DeleteServiceAccountTokenInput {
	serviceAccountTokenID: ID!
}

"""
Service account type.
"""
type ServiceAccount implements Node {
	"""
	The globally unique ID of the service account.
	"""
	id: ID!

	"""
	The name of the service account.
	"""
	name: String!

	"""
	The description of the service account.
	"""
	description: String!

	"""
	When the service account was created.
	"""
	createdAt: Time!

	"""
	The team that the service account belongs to.
	"""
	team: Team
}

type CreateServiceAccountPayload {
	serviceAccount: ServiceAccount
}

type UpdateServiceAccountPayload {
	serviceAccount: ServiceAccount
}

type DeleteServiceAccountPayload {
	serviceAccountDeleted: Boolean
}

type AddRoleToServiceAccountPayload {
	serviceAccount: ServiceAccount
}

type RemoveRoleFromServiceAccountPayload {
	serviceAccount: ServiceAccount
}

type CreateServiceAccountTokenPayload {
	serviceAccountToken: ServiceAccountToken
	token: String
}

type UpdateServiceAccountTokenPayload {
	serviceAccountToken: ServiceAccountToken
}

type DeleteServiceAccountTokenPayload {
	serviceAccountTokenDeleted: Boolean
}

type ServiceAccountToken {
	"""
	The globally unique ID of the service account token.
	"""
	id: ID!

	"""
	The note of the service account token.
	"""
	note: String!

	"""
	When the service account token was created.
	"""
	createdAt: Time!

	"""
	When the service account token was last updated.
	"""
	updatedAt: Time

	"""
	When the service account token expires.
	"""
	expiresAt: Date
}

type ServiceAccountConnection {
	"""
	A list of service accounts.
	"""
	nodes: [ServiceAccount!]!

	"""
	A list of edges.
	"""
	edges: [ServiceAccountEdge!]!

	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
}

type ServiceAccountEdge {
	"""
	The service account.
	"""
	node: ServiceAccount!

	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
