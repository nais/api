extend type Team {
	"""
	Nais applications owned by the team.
	"""
	applications(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor

		"""
		Ordering options for items returned from the connection.
		"""
		orderBy: ApplicationOrder

		"""
		Filtering options for items returned from the connection.
		"""
		filter: TeamApplicationsFilter
	): ApplicationConnection!
}

extend type TeamEnvironment {
	"""
	Nais application in the team environment.
	"""
	application(
		"""
		The name of the application.
		"""
		name: String!
	): Application!
}

extend type Mutation {
	"""
	Delete an application.
	"""
	deleteApplication(
		"""
		Input for deleting an application.
		"""
		input: DeleteApplicationInput!
	): DeleteApplicationPayload!

	"""
	Restart an application.
	"""
	restartApplication(
		"""
		Input for restarting an application.
		"""
		input: RestartApplicationInput!
	): RestartApplicationPayload!
}

extend type TeamInventoryCounts {
	"""
	Application inventory count for a team.
	"""
	applications: TeamInventoryCountApplications!
}

"""
Application inventory count for a team.
"""
type TeamInventoryCountApplications {
	"""
	Total number of applications.
	"""
	total: Int!

	"""
	Number of applications considered "not nais". When an application is considered "not nais", it means that the
	application might not be working as expected, or that it is not following the Nais guidelines.
	"""
	notNais: Int!
}

"""
An application lets you run one or more instances of a container image on the [Nais platform](https://nais.io/).

Learn more about how to create and configure your applications in the [Nais documentation](https://docs.nais.io/workloads/application/).
"""
type Application implements Node & Workload & ActivityLogger {
	"""
	The globally unique ID of the application.
	"""
	id: ID!

	"""
	The name of the application.
	"""
	name: String!

	"""
	The team that owns the application.
	"""
	team: Team!

	"""
	The environment the application is deployed in.
	"""
	environment: TeamEnvironment! @deprecated(reason: "Use the `teamEnvironment` field instead.")

	"""
	The team environment for the application.
	"""
	teamEnvironment: TeamEnvironment!

	"""
	The container image of the application.
	"""
	image: ContainerImage!

	"""
	Resources for the application.
	"""
	resources: ApplicationResources!

	"""
	List of ingresses for the application.
	"""
	ingresses: [Ingress!]!

	"""
	List of authentication and authorization for the application.
	"""
	authIntegrations: [ApplicationAuthIntegrations!]!

	"""
	The application manifest.
	"""
	manifest: ApplicationManifest!

	"""
	The application instances.
	"""
	instances(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor
	): ApplicationInstanceConnection!

	"""
	If set, when the application was marked for deletion.
	"""
	deletionStartedAt: Time

	"""
	Activity log associated with the application.
	"""
	activityLog(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor

		"""
		Filter items.
		"""
		filter: ActivityLogFilter
	): ActivityLogEntryConnection!
}

"""
Input for filtering the applications of a team.
"""
input TeamApplicationsFilter {
	"""
	Filter by the name of the application.
	"""
	name: String

	"""
	Filter by the name of the environment.
	"""
	environments: [String!]
}

"""
The manifest that describes the application.
"""
type ApplicationManifest implements WorkloadManifest {
	"""
	The manifest content, serialized as a YAML document.
	"""
	content: String!
}

"""
Authentication integrations for the application.
"""
union ApplicationAuthIntegrations =
	| EntraIDAuthIntegration
	| IDPortenAuthIntegration
	| MaskinportenAuthIntegration
	| TokenXAuthIntegration

type ApplicationResources implements WorkloadResources {
	"""
	Instances using resources above this threshold will be killed.
	"""
	limits: WorkloadResourceQuantity!

	"""
	How many resources are allocated to each instance.
	"""
	requests: WorkloadResourceQuantity!

	"""
	Scaling strategies for the application.
	"""
	scaling: ApplicationScaling!
}

"""
The scaling configuration of an application.
"""
type ApplicationScaling {
	"""
	The minimum number of application instances.
	"""
	minInstances: Int!

	"""
	The maximum number of application instances.
	"""
	maxInstances: Int!

	"""
	Scaling strategies for the application.
	"""
	strategies: [ScalingStrategy!]!
}

"""
Types of scaling strategies.
"""
union ScalingStrategy = CPUScalingStrategy | KafkaLagScalingStrategy

"""
A scaling strategy based on CPU usage

Read more: https://docs.nais.io/workloads/application/reference/automatic-scaling/#cpu-based-scaling
"""
type CPUScalingStrategy {
	"""
	The threshold that must be met for the scaling to trigger.
	"""
	threshold: Int!
}

type KafkaLagScalingStrategy {
	"""
	The threshold that must be met for the scaling to trigger.
	"""
	threshold: Int!

	"""
	The consumer group of the topic.
	"""
	consumerGroup: String!

	"""
	The name of the Kafka topic.
	"""
	topicName: String!
}

"""
Application connection.
"""
type ApplicationConnection {
	"""
	Pagination information.
	"""
	pageInfo: PageInfo!

	"""
	List of nodes.
	"""
	nodes: [Application!]!

	"""
	List of edges.
	"""
	edges: [ApplicationEdge!]!
}

"""
Application edge.
"""
type ApplicationEdge {
	"""
	Cursor for this edge that can be used for pagination.
	"""
	cursor: Cursor!

	"""
	The application.
	"""
	node: Application!
}

"""
Ordering options when fetching applications.
"""
input ApplicationOrder {
	"""
	The field to order items by.
	"""
	field: ApplicationOrderField!

	"""
	The direction to order items by.
	"""
	direction: OrderDirection!
}

"""
Fields to order applications by.
"""
enum ApplicationOrderField {
	"""
	Order applications by name.
	"""
	NAME

	"""
	Order applications by the name of the environment.
	"""
	ENVIRONMENT
}

extend union SearchNode = Application

extend enum SearchType {
	"""
	Search for applications.
	"""
	APPLICATION
}

input DeleteApplicationInput {
	"""
	Name of the application.
	"""
	name: String!

	"""
	Slug of the team that owns the application.
	"""
	teamSlug: Slug!

	"""
	Name of the environment where the application runs.
	"""
	environmentName: String!
}

type DeleteApplicationPayload {
	"""
	The team that owned the deleted application.
	"""
	team: Team

	"""
	Whether or not the application was deleted.
	"""
	success: Boolean
}

input RestartApplicationInput {
	"""
	Name of the application.
	"""
	name: String!

	"""
	Slug of the team that owns the application.
	"""
	teamSlug: Slug!

	"""
	Name of the environment where the application runs.
	"""
	environmentName: String!
}

type RestartApplicationPayload {
	"""
	The application that was restarted.
	"""
	application: Application
}

type Ingress {
	"""
	URL for the ingress.
	"""
	url: String!

	"""
	Type of ingress.
	"""
	type: IngressType!

	"""
	Metrics for the ingress.
	"""
	metrics: IngressMetrics!
}

type IngressMetrics {
	"""
	Number of requests to the ingress per second.
	"""
	requestsPerSecond: Float!

	"""
	Number of errors in the ingress per second.
	"""
	errorsPerSecond: Float!
	"""
	Ingress metrics between start and end with step size.
	"""
	series(input: IngressMetricsInput!): [IngressMetricSample!]!
}

input IngressMetricsInput {
	"""
	Fetch metrics from this timestamp.
	"""
	start: Time!

	"""
	Fetch metrics until this timestamp.
	"""
	end: Time!

	"""
	Type of metric to fetch.
	"""
	type: IngressMetricsType!
}

"""
Type of ingress metrics to fetch.
"""
enum IngressMetricsType {
	"""
	Number of requests to the ingress per second.
	"""
	REQUESTS_PER_SECOND
	"""
	Number of errors in the ingress per second.
	"""
	ERRORS_PER_SECOND
}

"""
Ingress metric type.
"""
type IngressMetricSample {
	"Timestamp of the value."
	timestamp: Time!
	"Value of the IngressMetricsType at the given timestamp."
	value: Float!
}

enum IngressType {
	UNKNOWN
	EXTERNAL
	INTERNAL
	AUTHENTICATED
}

type ApplicationInstance implements Node {
	id: ID!
	name: String!
	image: ContainerImage!
	restarts: Int!
	created: Time!
	status: ApplicationInstanceStatus!
}

type ApplicationInstanceStatus {
	state: ApplicationInstanceState!
	message: String!
}

enum ApplicationInstanceState {
	RUNNING
	FAILING
	UNKNOWN
}

type ApplicationInstanceConnection {
	"""
	Pagination information.
	"""
	pageInfo: PageInfo!

	"""
	List of nodes.
	"""
	nodes: [ApplicationInstance!]!

	"""
	List of edges.
	"""
	edges: [ApplicationInstanceEdge!]!
}

type ApplicationInstanceEdge {
	"""
	Cursor for this edge that can be used for pagination.
	"""
	cursor: Cursor!

	"""
	The instance.
	"""
	node: ApplicationInstance!
}

extend enum ActivityLogEntryResourceType {
	"All activity log entries related to applications will use this resource type."
	APP
}

type ApplicationDeletedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}

type ApplicationRestartedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}

# This is managed directly by the activitylog package since it
# combines data within the database.
type ApplicationScaledActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String

	"Data associated with the update."
	data: ApplicationScaledActivityLogEntryData!
}

enum ScalingDirection {
	"""
	The scaling direction is up.
	"""
	UP

	"""
	The scaling direction is down.
	"""
	DOWN
}

type ApplicationScaledActivityLogEntryData {
	newSize: Int!
	direction: ScalingDirection!
}

extend enum ActivityLogActivityType {
	"""
	An application was deleted.
	"""
	APPLICATION_DELETED

	"""
	An application was restarted.
	"""
	APPLICATION_RESTARTED

	"""
	An application was scaled.
	"""
	APPLICATION_SCALED
}
