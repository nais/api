extend type Mutation {
	"""
	Updates a vulnerability
	This mutation is currently unstable and may change in the future.
	"""
	updateImageVulnerability(input: UpdateImageVulnerabilityInput!): UpdateImageVulnerabilityPayload!
}

extend type Query {
	"Get the vulnerability summary history for all teams."
	imageVulnerabilityHistory(
		"Get vulnerability summary from given date until today."
		from: Date!
	): ImageVulnerabilityHistory!

	"Get the vulnerability summary for the tenant."
	vulnerabilitySummary: TenantVulnerabilitySummary!
}

extend interface Workload {
	"Get the vulnerability summary history for workload."
	imageVulnerabilityHistory(
		"Get vulnerability summary from given date until today."
		from: Date!
	): ImageVulnerabilityHistory!
}

extend enum TeamOrderField {
	"The accumulated risk score of the teams workloads."
	RISK_SCORE
	"The accumulated number of critical vulnerabilities of the teams workloads."
	CRITICAL_VULNERABILITIES
	"The accumulated number of high vulnerabilities of the teams workloads."
	HIGH_VULNERABILITIES
	"The accumulated number of medium vulnerabilities of the teams workloads."
	MEDIUM_VULNERABILITIES
	"The accumulated number of low vulnerabilities of the teams workloads."
	LOW_VULNERABILITIES
	"The accumulated number of unassigned vulnerabilities of the teams workloads."
	UNASSIGNED_VULNERABILITIES
	"The team's software bill of materials (SBOM) coverage."
	SBOM_COVERAGE
}

extend type Application {
	"Get the vulnerability summary history for application."
	imageVulnerabilityHistory(
		"Get vulnerability summary from given date until today."
		from: Date!
	): ImageVulnerabilityHistory!
}

extend type Job {
	"Get the vulnerability summary history for job."
	imageVulnerabilityHistory(
		"Get vulnerability summary from given date until today."
		from: Date!
	): ImageVulnerabilityHistory!
}

extend type Team {
	"Get the vulnerability summary history for team."
	imageVulnerabilityHistory(
		"Get vulnerability summary from given date until today."
		from: Date!
	): ImageVulnerabilityHistory!
}

type ImageVulnerabilityHistory {
	"Vulnerability summary samples."
	samples: [ImageVulnerabilitySample!]!
}

extend type ContainerImage {
	"Whether the image has a software bill of materials (SBOM) attached to it."
	hasSBOM: Boolean!

	"Get the vulnerabilities of the image."
	vulnerabilities(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Filter the vulnerabilities."
		filter: ImageVulnerabilityFilter

		"Ordering options for items returned from the connection."
		orderBy: ImageVulnerabilityOrder
	): ImageVulnerabilityConnection!

	"Get the summary of the vulnerabilities of the image."
	vulnerabilitySummary: ImageVulnerabilitySummary

	"Workloads using this container image."
	workloadReferences(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): ContainerImageWorkloadReferenceConnection!
}

extend type Team {
	vulnerabilitySummary(filter: TeamVulnerabilitySummaryFilter): TeamVulnerabilitySummary!

	"Fetch vulnerability summaries for workloads in the team."
	vulnerabilitySummaries(
		"Filter the workloads by named environments."
		filter: TeamVulnerabilitySummaryFilter

		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Ordering options for items returned from the connection."
		orderBy: VulnerabilitySummaryOrder
	): WorkloadVulnerabilitySummaryConnection!
}

type WorkloadVulnerabilitySummaryConnection {
	"Information to aid in pagination."
	pageInfo: PageInfo!

	"List of edges."
	edges: [WorkloadVulnerabilitySummaryEdge!]!

	"List of nodes."
	nodes: [WorkloadVulnerabilitySummary!]!
}

type WorkloadVulnerabilitySummaryEdge {
	"A cursor for use in pagination."
	cursor: Cursor!

	"The workload vulnerability summary."
	node: WorkloadVulnerabilitySummary!
}

extend enum ActivityLogEntryResourceType {
	"All activity log entries related to vulnerabilities will use this resource type."
	VULNERABILITY
}

"""
Input for filtering team workloads.
"""
input TeamVulnerabilitySummaryFilter {
	"""
	Only return workloads from the given named environments.
	"""
	environments: [String!]
}

"""
Input for filtering image vulnerabilities.
"""
input ImageVulnerabilityFilter {
	"""
	Only return vulnerabilities with the given severity.
	"""
	severity: ImageVulnerabilitySeverity
	severitySince: Time
}

type ImageVulnerabilitySummary {
	"Total number of vulnerabilities."
	total: Int!

	"Risk score of the image."
	riskScore: Int!

	"Number of vulnerabilities with severity LOW."
	low: Int!

	"Number of vulnerabilities with severity MEDIUM."
	medium: Int!

	"Number of vulnerabilities with severity HIGH."
	high: Int!

	"Number of vulnerabilities with severity CRITICAL."
	critical: Int!

	"Number of vulnerabilities with severity UNASSIGNED."
	unassigned: Int!

	"Timestamp of the last update of the vulnerability summary."
	lastUpdated: Time
}

type ImageVulnerabilityConnection {
	"Information to aid in pagination."
	pageInfo: PageInfo!

	"List of edges."
	edges: [ImageVulnerabilityEdge!]!

	"List of nodes."
	nodes: [ImageVulnerability!]!
}

type ImageVulnerabilitySample {
	"The historic image vulnerability summary"
	summary: ImageVulnerabilitySummary!

	"Timestamp of the vulnerability summary."
	date: Time!
}

type ContainerImageWorkloadReferenceConnection {
	"Information to aid in pagination."
	pageInfo: PageInfo!

	"List of edges."
	edges: [ContainerImageWorkloadReferenceEdge!]!

	"List of nodes."
	nodes: [ContainerImageWorkloadReference!]!
}

type ImageVulnerabilityEdge {
	"A cursor for use in pagination."
	cursor: Cursor!

	"The image vulnerability."
	node: ImageVulnerability!
}

type ContainerImageWorkloadReferenceEdge {
	"A cursor for use in pagination."
	cursor: Cursor!

	"The workload reference."
	node: ContainerImageWorkloadReference!
}

type ContainerImageWorkloadReference {
	"The workload using the container image."
	workload: Workload!
}

type ImageVulnerability implements Node {
	"The globally unique ID of the image vulnerability node."
	id: ID!

	"The unique identifier of the vulnerability. E.g. CVE-****-****."
	identifier: String!

	"Severity of the vulnerability."
	severity: ImageVulnerabilitySeverity!

	"Description of the vulnerability."
	description: String!

	"Package name of the vulnerability."
	package: String!

	suppression: ImageVulnerabilitySuppression

	"Timestamp of when the vulnerability got its current severity."
	severitySince: Time

	"Link to the vulnerability details."
	vulnerabilityDetailsLink: String!
}

enum ImageVulnerabilitySeverity {
	LOW
	MEDIUM
	HIGH
	CRITICAL
	UNASSIGNED
}

enum ImageVulnerabilitySuppressionState {
	"Vulnerability is in triage."
	IN_TRIAGE
	"Vulnerability is resolved."
	RESOLVED
	"Vulnerability is marked as false positive."
	FALSE_POSITIVE
	"Vulnerability is marked as not affected."
	NOT_AFFECTED
}

"Ordering options when fetching teams."
input ImageVulnerabilityOrder {
	"The field to order items by."
	field: ImageVulnerabilityOrderField!

	"The direction to order items by."
	direction: OrderDirection!
}

enum ImageVulnerabilityOrderField {
	IDENTIFIER
	SEVERITY
	SEVERITY_SINCE
	PACKAGE
	STATE
	SUPPRESSED
}

type WorkloadVulnerabilitySummary implements Node {
	"The globally unique ID of the workload vulnerability summary node."
	id: ID!

	"The workload"
	workload: Workload!

	"True if the workload has a software bill of materials (SBOM) attached."
	hasSBOM: Boolean!

	"The vulnerability summary for the workload."
	summary: ImageVulnerabilitySummary!
}

"""
Ordering options when fetching vulnerability summaries for workloads.
"""
input VulnerabilitySummaryOrder {
	"""
	The field to order items by.
	"""
	field: VulnerabilitySummaryOrderByField!

	"""
	The direction to order items by.
	"""
	direction: OrderDirection!
}

enum VulnerabilitySummaryOrderByField {
	"""
	Order by name.
	"""
	NAME
	"""
	Order by the name of the environment the workload is deployed in.
	"""
	ENVIRONMENT
	"""
	Order by risk score"
	"""
	VULNERABILITY_RISK_SCORE
	"""
	Order by vulnerability severity critical"
	"""
	VULNERABILITY_SEVERITY_CRITICAL
	"""
	Order by vulnerability severity high"
	"""
	VULNERABILITY_SEVERITY_HIGH
	"""
	Order by vulnerability severity medium"
	"""
	VULNERABILITY_SEVERITY_MEDIUM
	"""
	Order by vulnerability severity low"
	"""
	VULNERABILITY_SEVERITY_LOW
	"""
	Order by vulnerability severity unassigned"
	"""
	VULNERABILITY_SEVERITY_UNASSIGNED
}

type TenantVulnerabilitySummary {
	"Risk score of the tenant."
	riskScore: Int!
	"Number of vulnerabilities with severity CRITICAL."
	critical: Int!
	"Number of vulnerabilities with severity HIGH."
	high: Int!
	"Number of vulnerabilities with severity MEDIUM."
	medium: Int!
	"Number of vulnerabilities with severity LOW."
	low: Int!
	"Number of vulnerabilities with severity UNASSIGNED."
	unassigned: Int!
	"Number of workloads with a software bill of materials (SBOM) attached."
	sbomCount: Int!
	"SBOM Coverage of the tenant."
	coverage: Float!
	"Timestamp of the last update of the vulnerability summary."
	lastUpdated: Time
}

type TeamVulnerabilitySummary {
	"Risk score of the team."
	riskScore: Int!
	"Number of vulnerabilities with severity CRITICAL."
	critical: Int!
	"Number of vulnerabilities with severity HIGH."
	high: Int!
	"Number of vulnerabilities with severity MEDIUM."
	medium: Int!
	"Number of vulnerabilities with severity LOW."
	low: Int!
	"Number of vulnerabilities with severity UNASSIGNED."
	unassigned: Int!
	"Number of workloads with a software bill of materials (SBOM) attached."
	sbomCount: Int!
	"Coverage of the team."
	coverage: Float!
	"Timestamp of the last update of the vulnerability summary."
	lastUpdated: Time
	"Trend of vulnerability status for the team."
	riskScoreTrend: TeamVulnerabilityRiskScoreTrend!
}

enum TeamVulnerabilityRiskScoreTrend {
	"Risk score is increasing."
	UP
	"Risk score is decreasing."
	DOWN
	"Risk score is not changing."
	FLAT
}

extend enum WorkloadOrderField {
	"Order by risk score"
	VULNERABILITY_RISK_SCORE
	"Order apps by vulnerability severity critical"
	VULNERABILITY_SEVERITY_CRITICAL
	"Order apps by vulnerability severity high"
	VULNERABILITY_SEVERITY_HIGH
	"Order apps by vulnerability severity medium"
	VULNERABILITY_SEVERITY_MEDIUM
	"Order apps by vulnerability severity low"
	VULNERABILITY_SEVERITY_LOW
	"Order apps by vulnerability severity unassigned"
	VULNERABILITY_SEVERITY_UNASSIGNED
	"Order by whether the workload has a software bill of materials (SBOM)"
	HAS_SBOM
	"Order by the last time the vulnerabilities were scanned."
	VULNERABILITY_LAST_SCANNED
}

type ImageVulnerabilitySuppression {
	"Suppression state of the vulnerability."
	state: ImageVulnerabilitySuppressionState!
	"The reason for the suppression of the vulnerability."
	reason: String!
}

input UpdateImageVulnerabilityInput {
	"The id of the vulnerability to suppress."
	vulnerabilityID: ID!
	"The reason for suppressing the vulnerability."
	reason: String!
	"Should the vulnerability be suppressed."
	suppress: Boolean!
	"New state of the vulnerability."
	state: ImageVulnerabilitySuppressionState
}

type UpdateImageVulnerabilityPayload {
	"The vulnerability updated."
	vulnerability: ImageVulnerability
}

type VulnerabilityActivityLogEntryData {
	"The unique identifier of the vulnerability. E.g. CVE-****-****."
	identifier: String!
	"The severity of the vulnerability."
	severity: ImageVulnerabilitySeverity!
	"The package affected by the vulnerability."
	package: String!
	"The previous suppression state of the vulnerability."
	previousSuppression: ImageVulnerabilitySuppression
	"The new suppression state of the vulnerability."
	newSuppression: ImageVulnerabilitySuppression
}

type VulnerabilityUpdatedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String

	"Data associated with the update."
	data: VulnerabilityActivityLogEntryData!
}

extend enum ActivityLogActivityType {
	"Activity log entry for when a vulnerability is updated."
	VULNERABILITY_UPDATED
}
