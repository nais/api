extend type Team {
	"OpenSearch instances owned by the team."
	openSearches(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Ordering options for items returned from the connection."
		orderBy: OpenSearchOrder
	): OpenSearchConnection!
}

extend type TeamEnvironment {
	"OpenSearch instance in the team environment."
	openSearch(name: String!): OpenSearch!
}

extend interface Workload {
	"OpenSearch instance referenced by the workload."
	openSearch: OpenSearch
}

extend type Application {
	"OpenSearch instance referenced by the workload."
	openSearch: OpenSearch
}

extend type Job {
	"OpenSearch instance referenced by the workload."
	openSearch: OpenSearch
}

extend type TeamInventoryCounts {
	openSearches: TeamInventoryCountOpenSearches!
}

type TeamInventoryCountOpenSearches {
	"Total number of OpenSearch instances."
	total: Int!
}

type OpenSearch implements Persistence & Node {
	id: ID!
	name: String!
	team: Team!
	environment: TeamEnvironment! @deprecated(reason: "Use the `teamEnvironment` field instead.")
	teamEnvironment: TeamEnvironment!
	terminationProtection: Boolean!
	status: OpenSearchStatus!
	workload: Workload
	access(
		first: Int
		after: Cursor
		last: Int
		before: Cursor
		orderBy: OpenSearchAccessOrder
	): OpenSearchAccessConnection!
	"Fetch version for the OpenSearch instance."
	version: String!
}

type OpenSearchAccess {
	workload: Workload!
	access: String!
}

type OpenSearchStatus {
	state: String!
}

type OpenSearchAccessConnection {
	pageInfo: PageInfo!
	nodes: [OpenSearchAccess!]!
	edges: [OpenSearchAccessEdge!]!
}

type OpenSearchConnection {
	pageInfo: PageInfo!
	nodes: [OpenSearch!]!
	edges: [OpenSearchEdge!]!
}

type OpenSearchAccessEdge {
	cursor: Cursor!
	node: OpenSearchAccess!
}

type OpenSearchEdge {
	cursor: Cursor!
	node: OpenSearch!
}

input OpenSearchAccessOrder {
	field: OpenSearchAccessOrderField!
	direction: OrderDirection!
}

input OpenSearchOrder {
	field: OpenSearchOrderField!
	direction: OrderDirection!
}

enum OpenSearchAccessOrderField {
	ACCESS
	WORKLOAD
}

enum OpenSearchOrderField {
	NAME
	ENVIRONMENT
}

extend union SearchNode = OpenSearch

extend enum SearchType {
	OPENSEARCH
}

enum OpenSearchSize {
	"Small OpenSearch instance."
	SMALL

	"Medium OpenSearch instance."
	MEDIUM

	"Large OpenSearch instance."
	LARGE
}

enum OpenSearchMajorVersion {
	"OpenSearch Version 2.x"
	V2
}

input CreateOpenSearchInput {
	"Name of the OpenSearch instance."
	name: String!
	"The environment name that the OpenSearch instance belongs to."
	environmentName: String!
	"The team that owns the OpenSearch instance."
	teamSlug: Slug!
	"Size of the OpenSearch instance."
	size: OpenSearchSize!
	"Major version of the OpenSearch instance."
	version: OpenSearchMajorVersion
}

type CreateOpenSearchPayload {
	"OpenSearch instance that was created."
	openSearch: OpenSearch!
}

extend type Mutation {
	"Create a new OpenSearch instance."
	createOpenSearch(input: CreateOpenSearchInput!): CreateOpenSearchPayload!
}
