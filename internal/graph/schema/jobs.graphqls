extend type Team {
	"Nais jobs owned by the team."
	jobs(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Ordering options for items returned from the connection."
		orderBy: JobOrder

		"Filtering options for items returned from the connection."
		filter: TeamJobsFilter
	): JobConnection!
}

extend type Mutation {
	"Delete a job."
	deleteJob(input: DeleteJobInput!): DeleteJobPayload!

	"Trigger a job"
	triggerJob(input: TriggerJobInput!): TriggerJobPayload!
}

extend type TeamEnvironment {
	"Nais job in the team environment."
	job(name: String!): Job!
}

extend type TeamInventoryCounts {
	jobs: TeamInventoryCountJobs!
}

extend enum ActivityLogEntryResourceType {
	"All activity log entries related to jobs will use this resource type."
	JOB
}

input TeamJobsFilter {
	"""
	Filter by the name of the job.
	"""
	name: String!

	"""
	Filter by the name of the environment.
	"""
	environments: [String!]
}
type Job implements Node & Workload {
	"The globally unique ID of the job."
	id: ID!

	"The name of the job."
	name: String!

	"The team that owns the job."
	team: Team!

	"The environment the job is deployed in."
	environment: TeamEnvironment! @deprecated(reason: "Use the `teamEnvironment` field instead.")

	"The team environment for the job."
	teamEnvironment: TeamEnvironment!

	"The container image of the job."
	image: ContainerImage!

	"Resources for the job."
	resources: JobResources!

	"List of authentication and authorization for the job."
	authIntegrations: [JobAuthIntegrations!]!

	"Optional schedule for the job. Jobs with no schedule are run once."
	schedule: JobSchedule

	"The job runs."
	runs(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): JobRunConnection!

	"The job manifest."
	manifest: JobManifest!

	"""
	If set, when the job was marked for deletion.
	"""
	deletionStartedAt: Time

	"""
	Activity log associated with the job.
	"""
	activityLog(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor

		"""
		Filter items.
		"""
		filter: ActivityLogFilter
	): ActivityLogEntryConnection!
}

type JobManifest implements WorkloadManifest {
	"The manifest content, serialized as a YAML document."
	content: String!
}

type JobSchedule {
	"The cron expression for the job."
	expression: String!

	"The time zone for the job. Defaults to UTC."
	timeZone: String!
}

union JobAuthIntegrations = EntraIDAuthIntegration | MaskinportenAuthIntegration

type JobResources implements WorkloadResources {
	limits: WorkloadResourceQuantity!
	requests: WorkloadResourceQuantity!
}

enum JobRunTriggerType {
	# Triggered by a cron job or schedule
	AUTOMATIC
	# Triggered by a user
	MANUAL
}

type JobRunTrigger {
	"The type of trigger that started the job."
	type: JobRunTriggerType!

	"The actor/user who triggered the job run manually, if applicable."
	actor: String
}

type JobRun implements Node {
	"The globally unique ID of the job run."
	id: ID!

	"The name of the job run."
	name: String!

	"The start time of the job."
	startTime: Time

	"The completion time of the job."
	completionTime: Time

	"The status of the job run."
	status: JobRunStatus!

	"The container image of the job run."
	image: ContainerImage!

	"Duration of the job in seconds."
	duration: Int!

	"Job run instances."
	instances(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): JobRunInstanceConnection!

	trigger: JobRunTrigger!
}

type JobRunInstance implements Node {
	"The globally unique ID of the job run instance."
	id: ID!

	"The name of the job run instance."
	name: String!
}

type JobRunStatus {
	"The state of the job run."
	state: JobRunState!

	"Human readable job run status."
	message: String!
}

enum JobRunState {
	"Job run is pending."
	PENDING

	"Job run is running."
	RUNNING

	"Job run is succeeded."
	SUCCEEDED

	"Job run is failed."
	FAILED

	"Job run is unknown."
	UNKNOWN
}

type JobConnection {
	"Pagination information."
	pageInfo: PageInfo!

	"List of nodes."
	nodes: [Job!]!

	"List of edges."
	edges: [JobEdge!]!
}

type JobRunInstanceConnection {
	"Pagination information."
	pageInfo: PageInfo!

	"List of nodes."
	nodes: [JobRunInstance!]!

	"List of edges."
	edges: [JobRunInstanceEdge!]!
}

type JobRunConnection {
	"Pagination information."
	pageInfo: PageInfo!

	"List of nodes."
	nodes: [JobRun!]!

	"List of edges."
	edges: [JobRunEdge!]!
}

type JobEdge {
	"Cursor for this edge that can be used for pagination."
	cursor: Cursor!

	"The job."
	node: Job!
}

type JobRunEdge {
	"Cursor for this edge that can be used for pagination."
	cursor: Cursor!

	"The job run."
	node: JobRun!
}

type JobRunInstanceEdge {
	"Cursor for this edge that can be used for pagination."
	cursor: Cursor!

	"The instance."
	node: JobRunInstance!
}

type TeamInventoryCountJobs {
	"Total number of jobs."
	total: Int!

	"Number of jobs considered not nais."
	notNais: Int!
}

input JobOrder {
	"The field to order items by."
	field: JobOrderField!

	"The direction to order items by."
	direction: OrderDirection!
}

enum JobOrderField {
	"Order jobs by name."
	NAME

	"Order jobs by the name of the environment."
	ENVIRONMENT
}

extend union SearchNode = Job
extend enum SearchType {
	JOB
}

input DeleteJobInput {
	"Name of the job."
	name: String!

	"Slug of the team that owns the job."
	teamSlug: Slug!

	"Name of the environment where the job runs."
	environmentName: String!
}

type DeleteJobPayload {
	"The team that owned the deleted job."
	team: Team

	"Whether or not the job was deleted."
	success: Boolean
}

input TriggerJobInput {
	"Name of the job."
	name: String!

	"Slug of the team that owns the job."
	teamSlug: Slug!

	"Name of the environment where the job runs."
	environmentName: String!

	"Name of the new run. Must be unique within the team."
	runName: String!
}

type TriggerJobPayload {
	"The job that was triggered."
	job: Job

	"The new job run."
	jobRun: JobRun
}

type JobDeletedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}

type JobTriggeredActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}

extend enum ActivityLogActivityType {
	"Activity log entries related to job deletion."
	JOB_DELETED

	"Activity log entries related to job triggering."
	JOB_TRIGGERED
}
