extend type Team {
	"Valkey instances owned by the team."
	valkeys(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Ordering options for items returned from the connection."
		orderBy: ValkeyOrder
	): ValkeyConnection!
}

extend type TeamEnvironment {
	"Valkey instance in the team environment."
	valkey(name: String!): Valkey!
}

extend interface Workload {
	"Valkey instances referenced by the workload. This does not currently support pagination, but will return all available Valkey instances."
	valkeys(
		"Ordering options for items returned from the connection."
		orderBy: ValkeyOrder
	): ValkeyConnection!
}

extend type Application {
	"Valkey instances referenced by the application. This does not currently support pagination, but will return all available Valkey instances."
	valkeys(
		"Ordering options for items returned from the connection."
		orderBy: ValkeyOrder
	): ValkeyConnection!
}

extend type Job {
	"Valkey instances referenced by the job. This does not currently support pagination, but will return all available Valkey instances."
	valkeys(
		"Ordering options for items returned from the connection."
		orderBy: ValkeyOrder
	): ValkeyConnection!
}

extend type TeamInventoryCounts {
	valkeys: TeamInventoryCountValkeys!
}

type TeamInventoryCountValkeys {
	"Total number of Valkey instances."
	total: Int!
}

type Valkey implements Persistence & Node {
	id: ID!
	name: String!
	terminationProtection: Boolean!
	team: Team!
	environment: TeamEnvironment! @deprecated(reason: "Use the `teamEnvironment` field instead.")
	teamEnvironment: TeamEnvironment!
	access(
		first: Int
		after: Cursor
		last: Int
		before: Cursor
		orderBy: ValkeyAccessOrder
	): ValkeyAccessConnection!
	workload: Workload
	status: ValkeyStatus!
}

type ValkeyAccess {
	workload: Workload!
	access: String!
}

type ValkeyStatus {
	state: String!
}

type ValkeyAccessConnection {
	pageInfo: PageInfo!
	nodes: [ValkeyAccess!]!
	edges: [ValkeyAccessEdge!]!
}

type ValkeyConnection {
	pageInfo: PageInfo!
	nodes: [Valkey!]!
	edges: [ValkeyEdge!]!
}

type ValkeyAccessEdge {
	cursor: Cursor!
	node: ValkeyAccess!
}

type ValkeyEdge {
	cursor: Cursor!
	node: Valkey!
}

input ValkeyAccessOrder {
	field: ValkeyAccessOrderField!
	direction: OrderDirection!
}

input ValkeyOrder {
	field: ValkeyOrderField!
	direction: OrderDirection!
}

enum ValkeyAccessOrderField {
	ACCESS
	WORKLOAD
}

enum ValkeyOrderField {
	NAME
	ENVIRONMENT
}

extend union SearchNode = Valkey

extend enum SearchType {
	VALKEY
}

enum ValkeyTier {
	SINGLE_NODE
	HIGH_AVAILABILITY
}

enum ValkeySize {
	RAM_1GB
	RAM_4GB
	RAM_8GB
	RAM_14GB
	RAM_28GB
	RAM_56GB
	RAM_112GB
	RAM_200GB
}

# TODO(thokra): Double check descriptions
enum ValkeyMaxMemoryPolicy {
	"Evict keys using the least frequently used algorithm."
	ALLKEYS_LFU

	"Evict keys using the least recently used algorithm."
	ALLKEYS_LRU

	"Evict keys randomly."
	ALLKEYS_RANDOM

	"No eviction policy, will return an error when memory limit is reached."
	NO_EVICTION

	"Evict volatile keys using the least frequently used algorithm."
	VOLATILE_LFU

	"Evict volatile keys using the least recently used algorithm."
	VOLATILE_LRU

	"Evict volatile keys randomly."
	VOLATILE_RANDOM

	"Evict volatile keys based on their time to live."
	VOLATILE_TTL
}

input CreateValkeyInput {
	"Name of the Valkey instance."
	name: String!
	"The environment name that the entry belongs to."
	environmentName: String!
	"The team that owns the Valkey instance."
	teamSlug: Slug!
	"Tier of the Valkey instance."
	tier: ValkeyTier!
	"Size of the Valkey instance."
	size: ValkeySize!
	"Maximum memory policy for the Valkey instance."
	maxMemoryPolicy: ValkeyMaxMemoryPolicy
}

type CreateValkeyPayload {
	"Valkey instance that was created."
	valkey: Valkey!
}

input UpdateValkeyInput {
	"Name of the Valkey instance."
	name: String!
	"The environment name that the entry belongs to."
	environmentName: String!
	"The team that owns the Valkey instance."
	teamSlug: Slug!
	"Tier of the Valkey instance."
	tier: ValkeyTier!
	"Size of the Valkey instance."
	size: ValkeySize!
	"Maximum memory policy for the Valkey instance."
	maxMemoryPolicy: ValkeyMaxMemoryPolicy
}

type UpdateValkeyPayload {
	"Valkey instance that was updated."
	valkey: Valkey!
}

extend type Mutation {
	"Create a new Valkey instance."
	createValkey(input: CreateValkeyInput!): CreateValkeyPayload!
	"Update an existing Valkey instance."
	updateValkey(input: UpdateValkeyInput!): UpdateValkeyPayload!
}
