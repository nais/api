extend type Mutation {
  suppressFinding(
    "The analysis state of the finding."
    analysisState: String!

    "The a comment for suppressing the finding."
    comment: String!

    "The component id of the finding to suppress."
    componentId: String!
    "The project id of the image."
    projectId: String!

    "The id of the finding to suppress."
    vulnerabilityId: String!

    "Suppressed by user."
    suppressedBy: String!

    "Should the finding be suppressed."
    suppress: Boolean!
  ): AnalysisTrail!
}

type Image {
  id: ID!
  projectId: String!
  name: String!
  version: String!
  digest: String!
  rekorId: String!
  summary: ImageVulnerabilitySummary!
  hasSbom: Boolean!
  findings(
    "Returns the first n entries from the list."
    offset: Int

    "Limit the number of entries returned."
    limit: Int

    "Order findings by"
    orderBy: OrderBy
  ): FindingList!
  workloadReferences: [WorkloadReference!]!
}

type ImageVulnerabilitySummary {
  id: ID!
  total: Int!
  riskScore: Int!
  critical: Int!
  high: Int!
  medium: Int!
  low: Int!
  unassigned: Int!
  bomCount: Int!
}

type WorkloadReference {
  id: ID!
  name: String!
  team: String!
  workloadType: String!
  environment: String!
  deployInfo: DeployInfo!
}

type ImageList {
  nodes: [Image!]!
  pageInfo: PageInfo!
}

type Finding {
  id: ID!
  parentId: String!
  vulnerabilityId: String!
  vulnId: String!
  source: String!
  componentId: String!
  severity: String!
  description: String!
  packageUrl: String!
  aliases: [Alias!]!
  isSuppressed: Boolean!
  state: String!
  analysisTrail: AnalysisTrail!
}

type Alias {
  name: String!
  source: String!
}

extend enum OrderByField {
  "Order by severity."
  SEVERITY
  "Order by packageUrl"
  PACKAGE_URL
  "Order by state."
  STATE
}

type FindingList {
  nodes: [Finding!]!
  pageInfo: PageInfo!
}

extend type Query {
  "Get image by dependency track project id."
  dependencyTrackProject(projectId: String!): Image!
}

type AnalysisTrail {
  id: ID!
  state: String!
  comments: [Comment]!
  isSuppressed: Boolean!
}

type Comment {
  comment: String!
  timestamp: Time!
  onBehalfOf: String!
}
