extend type Mutation {
  """
  Enable a reconciler

  A reconciler must be fully configured before it can be enabled.
  """
  enableReconciler(
    "The name of the reconciler to enable."
    name: String!
  ): Reconciler! @admin

  """
  Disable a reconciler

  The reconciler configuration will be left intact.
  """
  disableReconciler(
    "The name of the reconciler to disable."
    name: String!
  ): Reconciler! @admin

  "Configure a reconciler."
  configureReconciler(
    "The name of the reconciler to configure."
    name: String!

    "List of reconciler config inputs."
    config: [ReconcilerConfigInput!]!
  ): Reconciler! @admin

  "Reset all reconciler configuration options to their initial state and disable the reconciler if it is currently enabled."
  resetReconciler(
    "The name of the reconciler to reset."
    name: String!
  ): Reconciler! @admin
}

extend type Query {
  "Get a collection of reconcilers."
  reconcilers(offset: Int, limit: Int): ReconcilerList! @auth
}

"Paginated reconcilers type."
type ReconcilerList {
  "The list of reconcilers."
  nodes: [Reconciler!]!

  "Pagination information."
  pageInfo: PageInfo!
}

"Reconciler type."
type Reconciler {
  "The name of the reconciler."
  name: String!

  "The human-friendly name of the reconciler."
  displayName: String!

  "Description of what the reconciler is responsible for."
  description: String!

  "Whether or not the reconciler is enabled."
  enabled: Boolean!

  "Whether or not the reconciler uses team memberships when syncing."
  memberAware: Boolean!

  "Reconciler configuration keys and descriptions."
  config: [ReconcilerConfig!]! @admin

  "Whether or not the reconciler is fully configured and ready to be enabled."
  configured: Boolean! @admin

  "Audit logs for this reconciler."
  auditLogs(offset: Int, limit: Int): AuditLogList! @admin

  "Potential errors that have occurred during the reconciler's operation."
  errors(offset: Int, limit: Int): ReconcilerErrorList! @admin
}

type ReconcilerErrorList {
  nodes: [ReconcilerError!]!
  pageInfo: PageInfo!
}

type ReconcilerError {
  id: ID!
  correlationId: ID!
  createdAt: Time!
  message: String!
  team: Team!
}

"Reconciler configuration type."
type ReconcilerConfig {
  "Configuration key."
  key: String!

  "The human-friendly name of the configuration key."
  displayName: String!

  "Configuration description."
  description: String!

  "Whether or not the configuration key has a value."
  configured: Boolean!

  "Whether or not the configuration value is considered a secret. Secret values will not be exposed through the API."
  secret: Boolean!

  "Configuration value. This will be set to null if the value is considered a secret."
  value: String
}

"Reconciler configuration input."
input ReconcilerConfigInput {
  "Configuration key."
  key: String!

  "Configuration value."
  value: String!
}
