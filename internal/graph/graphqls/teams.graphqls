extend type Query {
  "Get a collection of teams. Default limit is 20"
  teams(
    "Offset to start listing teams from. Default is 0."
    offset: Int

    "Limit the number of teams to return. Default is 20."
    limit: Int

    "Filter teams."
    filter: TeamsFilter
  ): TeamList! @auth

  "Get a specific team."
  team("Slug of the team." slug: Slug!): Team! @auth

  "Get a team delete key."
  teamDeleteKey("The key to get." key: String!): TeamDeleteKey! @auth

  "Get the resource utilization of all teams"
  teamsUtilization(resourceType: UsageResourceType!): [TeamUtilizationData!]! @auth
}

extend type Mutation {
  """
  Create a new team

  The user creating the team will be granted team ownership, unless the user is a service account, in which case the
  team will not get an initial owner. To add one or more owners to the team, refer to the `addTeamOwners` mutation.

  The new team will be returned on success.
  """
  createTeam(
    "Input for creation of the new team."
    input: CreateTeamInput!
  ): Team! @auth

  """
  Update an existing team

  This mutation can be used to update the team purpose. It is not possible to update the team slug.

  The updated team will be returned on success.
  """
  updateTeam(
    "Slug of the team to update."
    slug: Slug!

    "Input for updating the team."
    input: UpdateTeamInput!
  ): Team! @auth

  """
  Update an existing team's Slack alerts channel

  The updated team will be returned on success.
  """
  updateTeamSlackAlertsChannel(
    "Slug of the team to update."
    slug: Slug!

    "Input for updating the team."
    input: UpdateTeamSlackAlertsChannelInput!
  ): Team! @auth

  """
  Remove a user from a team

  The updated team will be returned on success.
  """
  removeUserFromTeam(
    "Team slug that the user should be removed from."
    slug: Slug!

    "ID of the user that will be removed from the team."
    userId: ID!
  ): Team! @auth

  """
  Manually synchronize a team

  This action will trigger a full synchronization of the team against the configured third party systems. The action
  is asynchronous.

  The team will be returned.
  """
  synchronizeTeam(
    "The slug of the team to synchronize."
    slug: Slug!
  ): TeamSync! @auth

  """
  Manually synchronize all teams

  This action will trigger a full synchronization of all teams against the configured third party systems. The action
  is asynchronous. The operation can take a while, depending on the amount of teams currently managed.
  """
  synchronizeAllTeams: TeamSync! @auth

  """
  Add a user to a team

  If the user is already a member or an owner of the team, the mutation will fail.

  The updated team will be returned on success.
  """
  addTeamMember(
    "Slug of the team that should receive a new member."
    slug: Slug!

    "The new team member."
    member: TeamMemberInput!
  ): Team! @auth

  """
  Set the member role of a user in a team

  The user must already exist in the team for this mutation to succeed.

  The team will be returned on success.
  """
  setTeamMemberRole(
    "The slug of the team."
    slug: Slug!

    "The ID of the user."
    userId: ID!

    "The team role to set."
    role: TeamRole!
  ): Team! @auth

  """
  Request a key that can be used to trigger a team deletion process

  Deleting a team is a two step process. First an owner of the team (or an admin) must request a team deletion key, and
  then a second owner of the team (or an admin) must confirm the deletion using the confirmTeamDeletion mutation.

  Note: Service accounts are not allowed to request team delete keys.
  """
  requestTeamDeletion(
    "The slug of the team that the deletion key will be assigned to."
    slug: Slug!
  ): TeamDeleteKey! @auth

  """
  Confirm a team deletion

  This will start the actual team deletion process, which will be done in an asynchronous manner. All external
  entities controlled by NAIS will also be deleted.

  WARNING: There is no going back after starting this process.

  Note: Service accounts are not allowed to confirm a team deletion.
  """
  confirmTeamDeletion(
    "Deletion key, acquired using the requestTeamDeletion mutation."
    key: String!
  ): Boolean! @auth

  "Update the deploy key of a team. Returns the updated deploy key."
  changeDeployKey(
    "The name of the team to update the deploy key for."
    team: Slug!
  ): DeploymentKey!

  "Add a team repository."
  addRepository(
    "The slug of the team that adds the repository."
    teamSlug: Slug!

    "Name of the repository, with the org prefix, for instance 'org/repo'."
    repoName: String!
  ): String! @auth

  "Remove a team repository."
  removeRepository(
    "The slug of the team that removes the repository."
    teamSlug: Slug!

    "Name of the repository, with the org prefix, for instance 'org/repo'."
    repoName: String!
  ): String! @auth
}

"Team deletion key type."
type TeamDeleteKey {
  "The unique key used to confirm the deletion of a team."
  key: String!

  "The creation timestamp of the key."
  createdAt: Time!

  "Expiration timestamp of the key."
  expires: Time!

  "The user who created the key."
  createdBy: User!

  "The team the delete key is for."
  team: Team!
}

"Team sync type."
type TeamSync {
  "The correlation ID for the sync."
  correlationID: ID!
}

"Paginated teams type."
type TeamList {
  "The list of teams."
  nodes: [Team!]!

  "Pagination information."
  pageInfo: PageInfo!
}

"Team type."
type Team {
  id: ID!

  "Unique slug of the team."
  slug: Slug!

  "Purpose of the team."
  purpose: String!

  "The ID of the Azure AD group for the team. This value is managed by the Azure AD reconciler."
  azureGroupID: ID

  "The slug of the GitHub team. This value is managed by the GitHub reconciler."
  gitHubTeamSlug: String

  "The email address of the Google group for the team. This value is managed by the Google Workspace reconciler."
  googleGroupEmail: String

  "The Google artifact registry for the team."
  googleArtifactRegistry: String

  "The CDN bucket for the team."
  cdnBucket: String

  "Audit logs for this team."
  auditLogs(
    "Offset to start listing audit log entries from. Default is 0."
    offset: Int

    "Limit the number of audit log entries to return. Default is 20."
    limit: Int
  ): AuditLogList!

  "Audit events for this team."
  auditEvents(
    "Offset to start listing audit events from. Default is 0."
    offset: Int

    "Limit the number of audit events to return. Default is 20."
    limit: Int

    "Filter audit events."
    filter: AuditEventsFilter
  ): AuditEventList!

  "Team members."
  members(
    "Offset to start listing team members from. Default is 0."
    offset: Int

    "Limit the number of team members to return. Default is 20."
    limit: Int
  ): TeamMemberList!

  "Single team member"
  member("The ID of the user." userId: ID!): TeamMember!

  "Possible issues related to synchronization of the team to configured external systems. If there are no entries the team can be considered fully synchronized."
  syncErrors: [SyncError!]!

  "Timestamp of the last successful synchronization of the team."
  lastSuccessfulSync: Time

  "The GitHub repositories that the team has access to."
  githubRepositories(
    "Offset to start listing repositories from. Default is 0."
    offset: Int

    "Limit the number of repositories to return. Default is 20."
    limit: Int

    "Filter the repositories."
    filter: GitHubRepositoriesFilter
  ): GitHubRepositoryList!

  "Slack channel for the team."
  slackChannel: String!

  "Whether or not the team is currently being deleted."
  deletionInProgress: Boolean!

  "Whether or not the viewer is an owner of the team."
  viewerIsOwner: Boolean!

  "Whether or not the viewer is a member of the team."
  viewerIsMember: Boolean!

  "The status of the team."
  status: TeamStatus!

  "Get an SQL instance by name and env."
  sqlInstance(
    "The name of the instance."
    name: String!

    "The environment the instance runs in."
    env: String!
  ): SqlInstance!

  sqlInstances(
    "Returns the first n entries from the list."
    offset: Int

    "Returns the last n entries from the list."
    limit: Int

    "Order entries by"
    orderBy: OrderBy
  ): SqlInstancesList!

  "Get a Bucket by name and env."
  bucket(
    "The name of the bucket."
    name: String!

    "The environment the bucket exists in."
    env: String!
  ): Bucket!

  buckets(
    "Returns the first n entries from the list."
    offset: Int

    "Returns the last n entries from the list."
    limit: Int

    "Order entries by"
    orderBy: OrderBy
  ): BucketsList!

  "Get a Redis instance by name and env."
  redisInstance(
    "The name of the Redis instance."
    name: String!

    "The environment the instance exists in."
    env: String!
  ): Redis!

  redis(
    "Returns the first n entries from the list."
    offset: Int

    "Returns the last n entries from the list."
    limit: Int

    "Order entries by"
    orderBy: OrderBy
  ): RedisList!

  "Get a OpenSearch instance by name and env."
  openSearchInstance(
    "The name of the OpenSearch instance."
    name: String!

    "The environment the instance exists in."
    env: String!
  ): OpenSearch!

  openSearch(
    "Returns the first n entries from the list."
    offset: Int

    "Returns the last n entries from the list."
    limit: Int

    "Order entries by"
    orderBy: OrderBy
  ): OpenSearchList!

  "Get a Kafka topic by name and env."
  kafkaTopic(
    "The name of the topic."
    name: String!

    "The environment the topic exists in."
    env: String!
  ): KafkaTopic!

  kafkaTopics(
    "Returns the first n entries from the list."
    offset: Int

    "Returns the last n entries from the list."
    limit: Int

    "Order entries by"
    orderBy: OrderBy
  ): KafkaTopicList!

  bigQuery(
    "Returns the first n entries from the list."
    offset: Int

    "Returns the last n entries from the list."
    limit: Int

    "Order entries by"
    orderBy: OrderBy
  ): BigQueryDatasetList!

  "Get a BigQueryDataset by name and env."
  bigQueryDataset(
    "The name of the dataset."
    name: String!

    "The environment the dataset exists in."
    env: String!
  ): BigQueryDataset!

  "The NAIS applications owned by the team."
  apps(
    "Returns the first n entries from the list."
    offset: Int

    "Returns the last n entries from the list."
    limit: Int

    "Order entries by"
    orderBy: OrderBy
  ): AppList!

  "The deploy key of the team."
  deployKey: DeploymentKey! @auth

  "The NAIS jobs owned by the team."
  naisjobs(
    "Returns the first n entries from the list."
    offset: Int

    "Returns the last n entries from the list."
    limit: Int

    "Order entries by"
    orderBy: OrderBy
  ): NaisJobList!

  "The deployments of the team's applications."
  deployments(
    "Returns the first n entries from the list."
    offset: Int

    "Limit the number of entries returned."
    limit: Int
  ): DeploymentList!

  vulnerabilitiesSummary: VulnerabilitySummaryForTeam!

  "Get all secrets for the team."
  secrets: [Secret!]! @auth

  "Get the team's secret by name, and env."
  secret(
    "The name of the secret."
    name: String!

    "The environment the secret is deployed to."
    env: String!
  ): Secret! @auth

  "The environments available for the team."
  environments: [Env!]!

  unleash: Unleash!

  repositories(
    "Offset to start listing repositories from. Default is 0."
    offset: Int

    "Limit the number of repositories to return. Default is 20."
    limit: Int
  ): RepositoryList!

  "Gets the utilization data for all applications"
  appsUtilization(resourceType: UsageResourceType!): [AppUtilizationData!]!
}

type TeamUtilizationData {
  "The team."
  team: Team!

  "The requested amount of resources"
  requested: Float! 

  "The current resource usage."
  used: Float!

  "The environment for the utilization data."
  environment: String!
}

"Utilization data type."
type AppUtilizationData {
  "The app."
  app: App!

  "The requested amount of resources"
  requested: Float! 

  "The current resource usage."
  used: Float!
}

type RepositoryList {
  "The list of repositories."
  nodes: [String!]!

  "Pagination information."
  pageInfo: PageInfo!
}

type SqlInstancesStatus {
  total: Int!
  failing: Int!
  otherConditions: Int!
}

"Slack alerts channel type."
type SlackAlertsChannel {
  "The environment for the alerts sent to the channel."
  environment: String!

  "The name of the Slack channel."
  channelName: String!
}

"GCP project type."
type GcpProject {
  "The environment for the project."
  environment: String!

  "The display name of the project."
  projectName: String!

  "The GCP project ID."
  projectId: String!
}

"NAIS namespace type."
type NaisNamespace {
  "The environment for the namespace."
  environment: String!

  "The namespace."
  namespace: Slug!
}

"Sync error type."
type SyncError {
  "Creation time of the error."
  createdAt: Time!

  "The name of the reconciler."
  reconciler: String!

  "Error message."
  error: String!
}

"Team member."
type TeamMember {
  "Team instance."
  team: Team!

  "User instance."
  user: User!

  "The role that the user has in the team."
  role: TeamRole!

  "Reconcilers for this member in this team."
  reconcilers: [TeamMemberReconciler!]!
}

"Team member reconcilers."
type TeamMemberReconciler {
  "The reconciler."
  reconciler: Reconciler!

  "Whether or not the reconciler is enabled for the team member."
  enabled: Boolean!
}

"Team status."
type TeamStatus {
  apps: AppsStatus!
  jobs: JobsStatus!
  sqlInstances: SqlInstancesStatus!
}

"Team status for apps."
type AppsStatus {
  total: Int!
  failing: Int!
}

"Team status for jobs."
type JobsStatus {
  total: Int!
  failing: Int!
}

"Deployment key type."
type DeploymentKey {
  "The unique identifier of the deployment key."
  id: ID!

  "The actual key."
  key: String!

  "The date the deployment key was created."
  created: Time!

  "The date the deployment key expires."
  expires: Time!
}

"Input for filtering teams."
input TeamsFilter {
  github: TeamsFilterGitHub
}

input TeamsFilterGitHub {
  "Filter repostiories by repo name"
  repoName: String!

  "Filter repostiories by permission name"
  permissionName: String!
}

"Input for creating a new team."
input CreateTeamInput {
  "Team slug. After creation, this value can not be changed."
  slug: Slug!

  "Team purpose."
  purpose: String!

  "Specify the Slack channel for the team."
  slackChannel: String!
}

"Input for updating an existing team."
input UpdateTeamInput {
  "Specify team purpose to update the existing value."
  purpose: String

  "Specify the Slack channel to update the existing value."
  slackChannel: String
}


"Slack alerts channel input."
input UpdateTeamSlackAlertsChannelInput {
  "The environment for the alerts sent to the channel."
  environment: String!

  "The name of the Slack channel."
  channelName: String
}

"Team member input."
input TeamMemberInput {
  "The ID of user."
  userId: ID!

  "The role that the user will receive."
  role: TeamRole!

  "Reconcilers to opt the team member out of."
  reconcilerOptOuts: [String!]
}

"Available team roles."
enum TeamRole {
  "Regular member, read only access."
  MEMBER

  "Team owner, full access to the team."
  OWNER
}
