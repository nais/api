extend type Query {
  "Get a collection of teams. Default limit is 20"
  teams(
    "Offset to start listing teams from. Default is 0."
    offset: Int

    "Limit the number of teams to return. Default is 20."
    limit: Int

    "Filter teams."
    filter: TeamsFilter
  ): TeamList! @auth

  "Get a specific team."
  team("Slug of the team." slug: Slug!): Team! @auth

  "Get the resource utilization of all teams"
  teamsUtilization(resourceType: UsageResourceType!): [TeamUtilizationData!]! @auth
}

extend type Mutation {
  """
  Update an existing team's Slack alerts channel

  The updated team will be returned on success.
  """
  updateTeamSlackAlertsChannel(
    "Slug of the team to update."
    slug: Slug!

    "Input for updating the team."
    input: UpdateTeamSlackAlertsChannelInput!
  ): Team! @auth

  """
  Manually synchronize a team

  This action will trigger a full synchronization of the team against the configured third party systems. The action
  is asynchronous.

  The team will be returned.
  """
  synchronizeTeam(
    "The slug of the team to synchronize."
    slug: Slug!
  ): TeamSync! @auth

  """
  Manually synchronize all teams

  This action will trigger a full synchronization of all teams against the configured third party systems. The action
  is asynchronous. The operation can take a while, depending on the amount of teams currently managed.
  """
  synchronizeAllTeams: TeamSync! @auth

  "Update the deploy key of a team. Returns the updated deploy key."
  changeDeployKey(
    "The name of the team to update the deploy key for."
    team: Slug!
  ): DeploymentKey!
}

"Team sync type."
type TeamSync {
  "The correlation ID for the sync."
  correlationID: ID!
}

"Paginated teams type."
type TeamList {
  "The list of teams."
  nodes: [Team!]!

  "Pagination information."
  pageInfo: PageInfo!
}

"Team type."
type Team {
  id: ID!

  "Unique slug of the team."
  slug: Slug!

  "Purpose of the team."
  purpose: String!

  "The ID of the Azure AD group for the team. This value is managed by the Azure AD reconciler."
  azureGroupID: ID

  "The slug of the GitHub team. This value is managed by the GitHub reconciler."
  gitHubTeamSlug: String

  "The email address of the Google group for the team. This value is managed by the Google Workspace reconciler."
  googleGroupEmail: String

  "The Google artifact registry for the team."
  googleArtifactRegistry: String

  "The CDN bucket for the team."
  cdnBucket: String

  "Audit logs for this team."
  auditLogs(
    "Offset to start listing audit log entries from. Default is 0."
    offset: Int

    "Limit the number of audit log entries to return. Default is 20."
    limit: Int
  ): AuditLogList!

  "Audit events for this team."
  auditEvents(
    "Offset to start listing audit events from. Default is 0."
    offset: Int

    "Limit the number of audit events to return. Default is 20."
    limit: Int

    "Filter audit events."
    filter: AuditEventsFilter
  ): AuditEventList!

  "Team members."
  members(
    "Offset to start listing team members from. Default is 0."
    offset: Int

    "Limit the number of team members to return. Default is 20."
    limit: Int
  ): TeamMemberList!

  "Single team member"
  member("The ID of the user." userId: ID!): TeamMember!

  "Possible issues related to synchronization of the team to configured external systems. If there are no entries the team can be considered fully synchronized."
  syncErrors: [SyncError!]!

  "Timestamp of the last successful synchronization of the team."
  lastSuccessfulSync: Time

  "The GitHub repositories that the team has access to."
  githubRepositories(
    "Offset to start listing repositories from. Default is 0."
    offset: Int

    "Limit the number of repositories to return. Default is 20."
    limit: Int

    "Filter the repositories."
    filter: GitHubRepositoriesFilter
  ): GitHubRepositoryList!

  "Slack channel for the team."
  slackChannel: String!

  "Whether or not the team is currently being deleted."
  deletionInProgress: Boolean!

  "Whether or not the viewer is an owner of the team."
  viewerIsOwner: Boolean!

  "Whether or not the viewer is a member of the team."
  viewerIsMember: Boolean!

  "The status of the team."
  status: TeamStatus!

  "The teams resources"
  resourceInventory: ResourceInventory!

  "The NAIS applications owned by the team."
  apps(
    "Returns the first n entries from the list."
    offset: Int

    "Returns the last n entries from the list."
    limit: Int

    "Order entries by"
    orderBy: OrderBy
  ): AppList!

  "The deploy key of the team."
  deployKey: DeploymentKey! @auth

  "The NAIS jobs owned by the team."
  naisjobs(
    "Returns the first n entries from the list."
    offset: Int

    "Returns the last n entries from the list."
    limit: Int

    "Order entries by"
    orderBy: OrderBy
  ): NaisJobList!

  "The deployments of the team's applications."
  deployments(
    "Returns the first n entries from the list."
    offset: Int

    "Limit the number of entries returned."
    limit: Int
  ): DeploymentList!

  "The vulnerabilities for the team's applications."
  vulnerabilities(
    "Returns the first n entries from the list."
    offset: Int

    "Returns the last n entries from the list."
    limit: Int

    "Order entries by"
    orderBy: OrderBy

    filter: VulnerabilityFilter
  ): VulnerabilityList!

  "The vulnerabilities summary for the team's applications."
  vulnerabilitiesSummary(
    filter: VulnerabilityFilter
  ): VulnerabilitySummaryForTeam!

  "Get all secrets for the team."
  secrets: [Secret!]! @auth

  "Get the team's secret by name, and env."
  secret(
    "The name of the secret."
    name: String!

    "The environment the secret is deployed to."
    env: String!
  ): Secret! @auth

  "The environments available for the team."
  environments: [Env!]!

  unleash: Unleash!

  repositories(
    "Offset to start listing repositories from. Default is 0."
    offset: Int

    "Limit the number of repositories to return. Default is 20."
    limit: Int
  ): RepositoryList!

  "Gets the utilization data for all applications"
  appsUtilization(resourceType: UsageResourceType!): [AppUtilizationData!]!
}

type TeamUtilizationData {
  "The team."
  team: Team!

  "The requested amount of resources"
  requested: Float!

  "The current resource usage."
  used: Float!

  "The environment for the utilization data."
  environment: String!
}

"Utilization data type."
type AppUtilizationData {
  "The app."
  app: App!

  "The requested amount of resources"
  requested: Float!

  "The current resource usage."
  used: Float!
}

type RepositoryList {
  "The list of repositories."
  nodes: [String!]!

  "Pagination information."
  pageInfo: PageInfo!
}

"Slack alerts channel type."
type SlackAlertsChannel {
  "The environment for the alerts sent to the channel."
  environment: String!

  "The name of the Slack channel."
  channelName: String!
}

"GCP project type."
type GcpProject {
  "The environment for the project."
  environment: String!

  "The display name of the project."
  projectName: String!

  "The GCP project ID."
  projectId: String!
}

"NAIS namespace type."
type NaisNamespace {
  "The environment for the namespace."
  environment: String!

  "The namespace."
  namespace: Slug!
}

"Sync error type."
type SyncError {
  "Creation time of the error."
  createdAt: Time!

  "The name of the reconciler."
  reconciler: String!

  "Error message."
  error: String!
}

"Team member."
type TeamMember {
  "Team instance."
  team: Team!

  "User instance."
  user: User!

  "The role that the user has in the team."
  role: TeamRole!
}

"Team status."
type TeamStatus {
  state: State!
  apps: AppsStatus!
  jobs: JobsStatus!
}

"Team status for apps."
type AppsStatus {
  failing: Int!
  notNais: Int!
  vulnerabilities: Int!
}

"Team status for jobs."
type JobsStatus {
  failing: Int!
  notNais: Int!
  vulnerabilities: Int!
}

"A teams inventory of resources."
type ResourceInventory {
  totalJobs: Int!
  totalApps: Int!
  isEmpty: Boolean!
}

"Deployment key type."
type DeploymentKey {
  "The unique identifier of the deployment key."
  id: ID!

  "The actual key."
  key: String!

  "The date the deployment key was created."
  created: Time!

  "The date the deployment key expires."
  expires: Time!
}

"Input for filtering teams."
input TeamsFilter {
  github: TeamsFilterGitHub
}

input TeamsFilterGitHub {
  "Filter repositories by repo name"
  repoName: String!

  "Filter repositories by permission name"
  permissionName: String!
}

"Slack alerts channel input."
input UpdateTeamSlackAlertsChannelInput {
  "The environment for the alerts sent to the channel."
  environment: String!

  "The name of the Slack channel."
  channelName: String
}

"Available team roles."
enum TeamRole {
  "Regular member, read only access."
  MEMBER

  "Team owner, full access to the team."
  OWNER
}
