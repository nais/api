extend type Query {
  "Get an SQL instance by name, team and env."
  sqlInstance(
    "The name of the instance."
    name: String!

    "The name of the team who owns the instance."
    team: Slug!

    "The environment the instance runs in."
    env: String!
  ): SqlInstance!
}

interface Persistence {
  name: String!
  id: ID!
}

type InfluxDb implements Persistence {
  name: String!
  id: ID!
}

type Redis implements Persistence {
  id: ID!
  name: String!
  access: String!
  team: Team!
  env: Env!
  workload: Workload
}

type BigQueryDataset implements Persistence {
  cascadingDelete: Boolean!
  description: String!
  name: String!
  permission: String!
  id: ID!
}

type Bucket implements Persistence {
  id: ID!
  cascadingDelete: Boolean!
  name: String!
  # publicAccessPrevention: Boolean!
  # retentionPeriodDays: Int!
  # uniformBucketLevelAccess: Boolean!

  projectId: String!
  team: Team!
  env: Env!
  workload: Workload
}

type Kafka implements Persistence {
  """
  The kafka pool name
  """
  name: String!
  streams: Boolean!
  topics: [Topic!]!
  id: ID!
}

type Topic {
  name: String!
  acl: [Acl!]!
}

type Acl {
  access: String!
  application: String!
  team: Slug!
}

type OpenSearch implements Persistence {
  """
  The opensearch instance name
  """
  name: String!
  access: String!
  id: ID!
}

type Flag {
  name: String!
  value: String!
}

type Insights {
  enabled: Boolean!
  queryStringLength: Int!
  recordApplicationTags: Boolean!
  recordClientAddress: Boolean!
}

type MaintenanceWindow {
  day: Int!
  hour: Int!
}

type SqlDatabase implements Persistence{
  name: String!
  charset: String!
  collation: String!
  deletionPolicy: String!
  healthy: Boolean!
  conditions: [Condition!]!
  id: ID!
}

type SqlInstancesList {
  nodes: [SqlInstance!]!
  pageInfo: PageInfo!
  metrics: SqlInstancesMetrics!
}

type BucketsList {
  nodes: [Bucket!]!
  pageInfo: PageInfo!
}

type RedisList {
  nodes: [Redis!]!
  pageInfo: PageInfo!
}

type BigQueryDatasetList {
  nodes: [BigQueryDataset!]!
  pageInfo: PageInfo!
}

type SqlInstance implements Persistence {
  id: ID!
  backupConfiguration: BackupConfiguration!
  cascadingDelete: Boolean!
  connectionName: String!
  database: SqlDatabase
  diskAutoresize: Boolean!
  diskAutoresizeLimit: Int!
  env: Env!
  flags: [Flag!]!
  highAvailability: Boolean!
  isHealthy: Boolean!
  maintenanceWindow: MaintenanceWindow
  maintenanceVersion: String
  metrics: SqlInstanceMetrics!
  name: String!
  projectId: String!
  team: Team!
  tier: String!
  type: String!
  status: SqlInstanceStatus!
  state: SqlInstanceState!
  users: [SqlUser!]!
  workload: Workload
}

enum SqlInstanceState {
  SQL_INSTANCE_STATE_UNSPECIFIED
  RUNNABLE
  SUSPENDED
  PENDING_DELETE
  PENDING_CREATE
  MAINTENANCE
  FAILED
}

type SqlUser {
  name: String!
  authentication: String!
}

type BackupConfiguration {
  enabled: Boolean!
  startTime: String!
  retainedBackups: Int!
  pointInTimeRecovery: Boolean!
  transactionLogRetentionDays: Int!
}

type SqlInstanceMetrics {
  cost: Float!
  cpu: SqlInstanceCpu!
  memory: SqlInstanceMemory!
  disk: SqlInstanceDisk!
}

type SqlInstancesMetrics {
  cost: Float!
  cpu: SqlInstanceCpu!
  memory: SqlInstanceMemory!
  disk: SqlInstanceDisk!
}

type SqlInstanceCpu {
  cores: Float!
  utilization: Float!
}

type SqlInstanceMemory {
  quotaBytes: Int!
  utilization: Float!
}

type SqlInstanceDisk {
  quotaBytes: Int!
  utilization: Float!
}

type SqlInstanceStatus {
  conditions: [Condition!]!
  publicIpAddress: String
  privateIpAddress: String
}

type Condition {
  message: String!
  reason: String!
  status: String!
  type: String!
  lastTransitionTime: String!
}

extend enum OrderByField {
  "Order by PostgreSQL version"
  VERSION

  "Order by cost"
  COST

  "Order by CPU utilization"
  CPU

  "Order by memory utilization"
  MEMORY

  "Order by disk utilization"
  DISK
}