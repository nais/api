extend type Query {
  "Get a secret by name, team and env."
  secret(
    "The name of the secret."
    name: String!

    "The name of the team who owns the secret."
    team: Slug!

    "The environment the secret is deployed to."
    env: String!
  ): Secret!
}

extend type Mutation {
  createSecret(name: String!, data: [SecretTupleInput]): Secret!

  updateSecret(name: String!, data: [SecretTupleInput]): Secret!

  deleteSecret(name: String!): Secret
}

input SecretTupleInput {
  key: String!
  value: String!
}

type SecretTuple {
  key: String!
  value: String!
}

type Secret {
  id: ID!
  name: String!
  env: Env!
  data: [SecretTuple]!
}
