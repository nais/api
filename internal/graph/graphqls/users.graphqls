extend type Query {
  "Get a collection of users, sorted by name."
  users(
    offset: Int
    limit: Int
  ): UserList! @auth

  "Get a specific user."
  user(
    "ID of the user."
    id: ID

    "Email of the user."
    email: String
  ): User! @auth

  "Get user sync status and logs."
  usersyncRuns(
    limit: Int
    offset: Int
  ): UsersyncRunList! @auth
}

"User sync run type."
type UsersyncRun {
  "The ID of the sync run."
  id: ID!

  "Timestamp of when the run started."
  startedAt: Time!

  "Timestamp of when the run finished."
  finishedAt: Time!

  "The status of the sync run."
  status: UsersyncRunStatus!

  "Optional error."
  error: String
}

"User sync run status."
enum UsersyncRunStatus {
  "Successful user sync run."
  SUCCESS

  "Failed user sync run."
  FAILURE
}

"User type."
type User {
  "Unique ID of the user."
  id: ID!

  "The email address of the user."
  email: String!

  "The name of the user."
  name: String!

  "Roles attached to the user."
  roles: [Role!]!

  "The external ID of the user."
  externalId: String!

  "This field will only be populated via the me query"
  isAdmin: Boolean
}

type UsersyncRunList {
  nodes: [UsersyncRun!]!
  pageInfo: PageInfo!
}

type UserList {
  nodes: [User!]!
  pageInfo: PageInfo!
}
