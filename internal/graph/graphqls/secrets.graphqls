extend type Query {
  "Get all secrets for a team."
  secrets(
    "The name of the team who owns the secrets."
    team: Slug!
  ): [EnvSecret!]! @auth

  "Get a secret by name, team and env."
  secret(
    "The name of the secret."
    name: String!

    "The name of the team who owns the secret."
    team: Slug!

    "The environment the secret is deployed to."
    env: String!
  ): Secret! @auth
}

type EnvSecret {
  env: Env!
  secrets: [Secret!]!
}

extend type Mutation {
  "Create a new secret for a team and env."
  createSecret(
    "The name of the secret."
    name: String!

    "The name of the team who owns the secret."
    team: Slug!

    "The environment the secret is deployed to."
    env: String!

    "The secret data."
    data: [SecretTupleInput!]!
  ): Secret! @auth

  "Update an existing secret for a team and env."
  updateSecret(
    "The name of the secret."
    name: String!

    "The name of the team who owns the secret."
    team: Slug!

    "The environment the secret is deployed to."
    env: String!

    "The secret data."
    data: [SecretTupleInput!]!
  ): Secret! @auth

  "Delete an existing secret for a team and env."
  deleteSecret(
    "The name of the secret."
    name: String!

    "The name of the team who owns the secret."
    team: Slug!

    "The environment the secret is deployed to."
    env: String!
  ): Boolean! @auth
}

input SecretTupleInput {
  key: String!
  value: String!
}

type SecretTuple {
  key: String!
  value: String!
}

type Secret {
  id: ID!
  name: String!
  env: Env!
  data: [SecretTuple!]!
}
