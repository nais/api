extend type Mutation {
	deleteApp(
		"The name of the application."
		name: String!

		"The name of the team who owns the application."
		team: Slug!

		"The environment the application is deployed to."
		env: String!
	): DeleteAppResult!
	restartApp(
		"The name of the application."
		name: String!

		"The name of the team who owns the application."
		team: Slug!

		"The environment the application is deployed to."
		env: String!
	): RestartAppResult!
}

type DeleteAppResult {
	"Whether the app was deleted or not."
	deleted: Boolean!
	error: String
}
type RestartAppResult {
	error: String
}

extend type Query {
	"Get an app by name, team and env."
	app(
		"The name of the application."
		name: String!

		"The name of the team who owns the application."
		team: Slug!

		"The environment the application is deployed to."
		env: String!
	): App!
}

type App implements Workload {
  id: ID!
  name: String!
  image: String!
  deployInfo: DeployInfo!
  env: Env!
  accessPolicy: AccessPolicy!
  status: WorkloadStatus!
  authz: [Authz!]!
  variables: [Variable!]!
  persistence: [Persistence!]!
  resources: Resources!
  type: WorkloadType!
  utilization: AppUtilization!
  imageDetails: ImageDetails!
  ingresses: [String!]!
  instances: [Instance!]!
  manifest: String!
  team: Team!
  secrets: [Secret!]!
}

type AppUtilization {
  "Get the current usage for the requested resource type."
  used(resourceType: UsageResourceType!): Float!

  "Gets the requested amount of resources for the requested resource type."
  requested(resourceType: UsageResourceType!): Float!

  "Usage between start and end with step size for given resource type."
  usedRange(
    "Fetch resource usage from this timestamp."
    start: Time!

    "Fetch resource usage until this timestamp."
    end: Time!

    "Step size in seconds for the data points."
    step: Int!

    "Resource type."
    resourceType: UsageResourceType!
  ): [UsageDataPoint!]!
}

"Resource utilization type."
type UsageDataPoint {
  "Timestamp of the value."
  timestamp: Time!

  "Value of the used resource at the given timestamp."
  value: Float!
}

"Resource type."
enum UsageResourceType {
  CPU
  MEMORY
}

type WorkloadStatus {
	state: State!
	errors: [StateError!]!
}

type DeprecatedRegistryError implements StateError {
	revision: String!
	level: ErrorLevel!
	registry: String!
	repository: String!
	name: String!
	tag: String!
}

type DeprecatedIngressError implements StateError {
	revision: String!
	level: ErrorLevel!
	ingress: String!
}

type NoRunningInstancesError implements StateError {
	revision: String!
	level: ErrorLevel!
}

type NewInstancesFailingError implements StateError {
	revision: String!
	level: ErrorLevel!
	failingInstances: [String!]!
}

type InvalidNaisYamlError implements StateError {
	revision: String!
	level: ErrorLevel!
	detail: String!
}

type SynchronizationFailingError implements StateError {
	revision: String!
	level: ErrorLevel!
	detail: String!
}

type InboundAccessError implements StateError {
	revision: String!
	level: ErrorLevel!
	rule: Rule!
}

type OutboundAccessError implements StateError {
	revision: String!
	level: ErrorLevel!
	rule: Rule!
}

type VulnerableError implements StateError {
  revision: String!
  level: ErrorLevel!
  summary: ImageVulnerabilitySummary
}

type MissingSbomError implements StateError {
  revision: String!
  level: ErrorLevel!
}

type Instance {
	id: ID!
	name: String!
	state: InstanceState!
	message: String!
	image: String!
	restarts: Int!
	created: Time!
}

interface StateError {
	revision: String!
	level: ErrorLevel!
}

enum InstanceState {
	RUNNING
	FAILING
	UNKNOWN
}

enum ErrorLevel {
	TODO
	WARNING
	ERROR
}

enum State {
	NAIS
	NOTNAIS
	FAILING
	UNKNOWN
}

type AppList {
	nodes: [App!]!
	pageInfo: PageInfo!
}
