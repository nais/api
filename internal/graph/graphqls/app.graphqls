extend type Query {
	"Get an app by name, team and env."
	app(
		"The name of the application."
		name: String!

		"The name of the team who owns the application."
		team: Slug!

		"The environment the application is deployed to."
		env: String!
	): App!
}

type App implements Workload {
  id: ID!
  name: String!
  image: String!
  env: Env!
  status: WorkloadStatus!
  ingresses: [String!]!
  instances: [Instance!]!
  manifest: String!
  team: Team!
}

type WorkloadStatus {
	state: State!
	errors: [StateError!]!
}

type DeprecatedRegistryError implements StateError {
	revision: String!
	level: ErrorLevel!
	registry: String!
	repository: String!
	name: String!
	tag: String!
}

type DeprecatedIngressError implements StateError {
	revision: String!
	level: ErrorLevel!
	ingress: String!
}

type NoRunningInstancesError implements StateError {
	revision: String!
	level: ErrorLevel!
}

type NewInstancesFailingError implements StateError {
	revision: String!
	level: ErrorLevel!
	failingInstances: [String!]!
}

type InvalidNaisYamlError implements StateError {
	revision: String!
	level: ErrorLevel!
	detail: String!
}

type SynchronizationFailingError implements StateError {
	revision: String!
	level: ErrorLevel!
	detail: String!
}

type InboundAccessError implements StateError {
	revision: String!
	level: ErrorLevel!
}

type OutboundAccessError implements StateError {
	revision: String!
	level: ErrorLevel!
}

type MissingSbomError implements StateError {
  revision: String!
  level: ErrorLevel!
}

type Instance {
	id: ID!
	name: String!
	state: InstanceState!
	message: String!
	image: String!
	restarts: Int!
	created: Time!
}

interface StateError {
	revision: String!
	level: ErrorLevel!
}

enum InstanceState {
	RUNNING
	FAILING
	UNKNOWN
}

enum ErrorLevel {
	TODO
	WARNING
	ERROR
}

enum State {
	NAIS
	NOTNAIS
	FAILING
	UNKNOWN
}
