extend type Mutation {
  deleteApp(
    "The name of the application."
    name: String!

    "The name of the team who owns the application."
    team: Slug!

    "The environment the application is deployed to."
    env: String!
  ): DeleteAppResult!
  restartApp(
    "The name of the application."
    name: String!

    "The name of the team who owns the application."
    team: Slug!

    "The environment the application is deployed to."
    env: String!
  ): RestartAppResult!
}

type DeleteAppResult {
  "Whether the app was deleted or not."
  deleted: Boolean!
  error: String
}
type RestartAppResult {
  error: String
}

extend type Query {
  "Get an app by name, team and env."
  app(
    "The name of the application."
    name: String!

    "The name of the team who owns the application."
    team: Slug!

    "The environment the application is deployed to."
    env: String!
  ): App!
}

type App implements Workload {
  id: ID!
  name: String!
  deployInfo: DeployInfo!
  env: Env!
  accessPolicy: AccessPolicy!
  status: WorkloadStatus!
  authz: [Authz!]!
  variables: [Variable!]!
  resources: Resources!
  type: WorkloadType!

  ingresses: [String!]!
  instances: [Instance!]!
  autoScaling: AutoScaling!
  persistence: [Persistence!]!
  image: Image!
  authz: [Authz!]!
  manifest: String!
  team: Team!
  vulnerabilities: Vulnerability
  secrets: [Secret!]!
}

type WorkloadStatus {
  state: State!
  errors: [StateError!]!
}

type AutoScaling {
  disabled: Boolean!
  """
  CPU threshold in percent
  """
  cpuThreshold: Int!
  max: Int!
  min: Int!
}

type DeprecatedRegistryError implements StateError {
  revision: String!
  level: ErrorLevel!
  registry: String!
  repository: String!
  name: String!
  tag: String!
}

type DeprecatedIngressError implements StateError {
  revision: String!
  level: ErrorLevel!
  ingress: String!
}

type NoRunningInstancesError implements StateError {
  revision: String!
  level: ErrorLevel!
}

type NewInstancesFailingError implements StateError {
  revision: String!
  level: ErrorLevel!
  failingInstances: [String!]!
}

type InvalidNaisYamlError implements StateError {
  revision: String!
  level: ErrorLevel!
  detail: String!
}

type SynchronizationFailingError implements StateError {
  revision: String!
  level: ErrorLevel!
  detail: String!
}

type InboundAccessError implements StateError {
  revision: String!
  level: ErrorLevel!
  rule: Rule!
}

type OutboundAccessError implements StateError {
  revision: String!
  level: ErrorLevel!
  rule: Rule!
}

type Instance {
  id: ID!
  name: String!
  state: InstanceState!
  message: String!
  image: String!
  restarts: Int!
  created: Time!
}

interface StateError {
  revision: String!
  level: ErrorLevel!
}

enum InstanceState {
  RUNNING
  FAILING
  UNKNOWN
}

enum ErrorLevel {
  TODO
  WARNING
  ERROR
}

enum State {
  NAIS
  NOTNAIS
  FAILING
  UNKNOWN
}

type AppList {
  nodes: [App!]!
  pageInfo: PageInfo!
}
