// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gengql

import (
	"bytes"
	"context"
	"errors"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/nais/api/internal/activitylog"
	"github.com/nais/api/internal/alerts"
	"github.com/nais/api/internal/cost"
	"github.com/nais/api/internal/deployment"
	"github.com/nais/api/internal/environment"
	"github.com/nais/api/internal/github/repository"
	"github.com/nais/api/internal/graph/ident"
	"github.com/nais/api/internal/graph/pagination"
	"github.com/nais/api/internal/graph/scalar"
	"github.com/nais/api/internal/issue"
	"github.com/nais/api/internal/loki"
	"github.com/nais/api/internal/persistence/bigquery"
	"github.com/nais/api/internal/persistence/bucket"
	"github.com/nais/api/internal/persistence/kafkatopic"
	"github.com/nais/api/internal/persistence/opensearch"
	"github.com/nais/api/internal/persistence/sqlinstance"
	"github.com/nais/api/internal/persistence/valkey"
	"github.com/nais/api/internal/reconciler"
	"github.com/nais/api/internal/search"
	"github.com/nais/api/internal/serviceaccount"
	"github.com/nais/api/internal/servicemaintenance"
	"github.com/nais/api/internal/slug"
	"github.com/nais/api/internal/team"
	"github.com/nais/api/internal/unleash"
	"github.com/nais/api/internal/user"
	"github.com/nais/api/internal/utilization"
	"github.com/nais/api/internal/vulnerability"
	"github.com/nais/api/internal/workload"
	"github.com/nais/api/internal/workload/application"
	"github.com/nais/api/internal/workload/job"
	"github.com/nais/api/internal/workload/podlog"
	"github.com/nais/api/internal/workload/secret"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Application() ApplicationResolver
	ApplicationInstance() ApplicationInstanceResolver
	BigQueryDataset() BigQueryDatasetResolver
	Bucket() BucketResolver
	ContainerImage() ContainerImageResolver
	ContainerImageWorkloadReference() ContainerImageWorkloadReferenceResolver
	CurrentUnitPrices() CurrentUnitPricesResolver
	DeleteApplicationPayload() DeleteApplicationPayloadResolver
	DeleteJobPayload() DeleteJobPayloadResolver
	Deployment() DeploymentResolver
	DeprecatedIngressIssue() DeprecatedIngressIssueResolver
	DeprecatedRegistryIssue() DeprecatedRegistryIssueResolver
	Environment() EnvironmentResolver
	FailedJobRunsIssue() FailedJobRunsIssueResolver
	FailedSynchronizationIssue() FailedSynchronizationIssueResolver
	Ingress() IngressResolver
	IngressMetrics() IngressMetricsResolver
	InvalidSpecIssue() InvalidSpecIssueResolver
	Job() JobResolver
	JobRun() JobRunResolver
	KafkaTopic() KafkaTopicResolver
	KafkaTopicAcl() KafkaTopicAclResolver
	MissingSbomIssue() MissingSbomIssueResolver
	Mutation() MutationResolver
	NetworkPolicyRule() NetworkPolicyRuleResolver
	NoRunningInstancesIssue() NoRunningInstancesIssueResolver
	OpenSearch() OpenSearchResolver
	OpenSearchAccess() OpenSearchAccessResolver
	OpenSearchIssue() OpenSearchIssueResolver
	OpenSearchMaintenance() OpenSearchMaintenanceResolver
	PrometheusAlert() PrometheusAlertResolver
	Query() QueryResolver
	Reconciler() ReconcilerResolver
	ReconcilerError() ReconcilerErrorResolver
	RemoveTeamMemberPayload() RemoveTeamMemberPayloadResolver
	Repository() RepositoryResolver
	RestartApplicationPayload() RestartApplicationPayloadResolver
	Secret() SecretResolver
	ServiceAccount() ServiceAccountResolver
	SqlDatabase() SqlDatabaseResolver
	SqlInstance() SqlInstanceResolver
	SqlInstanceMetrics() SqlInstanceMetricsResolver
	SqlInstanceStateIssue() SqlInstanceStateIssueResolver
	SqlInstanceVersionIssue() SqlInstanceVersionIssueResolver
	Subscription() SubscriptionResolver
	Team() TeamResolver
	TeamCost() TeamCostResolver
	TeamDeleteKey() TeamDeleteKeyResolver
	TeamEnvironment() TeamEnvironmentResolver
	TeamEnvironmentCost() TeamEnvironmentCostResolver
	TeamInventoryCounts() TeamInventoryCountsResolver
	TeamMember() TeamMemberResolver
	TeamServiceUtilization() TeamServiceUtilizationResolver
	TeamServiceUtilizationSqlInstances() TeamServiceUtilizationSqlInstancesResolver
	TeamUtilizationData() TeamUtilizationDataResolver
	TeamVulnerabilitySummary() TeamVulnerabilitySummaryResolver
	TriggerJobPayload() TriggerJobPayloadResolver
	UnleashInstance() UnleashInstanceResolver
	UnleashInstanceMetrics() UnleashInstanceMetricsResolver
	UpdateTeamEnvironmentPayload() UpdateTeamEnvironmentPayloadResolver
	User() UserResolver
	Valkey() ValkeyResolver
	ValkeyAccess() ValkeyAccessResolver
	ValkeyIssue() ValkeyIssueResolver
	ValkeyMaintenance() ValkeyMaintenanceResolver
	VulnerableImageIssue() VulnerableImageIssueResolver
	WorkloadCost() WorkloadCostResolver
	WorkloadCostSample() WorkloadCostSampleResolver
	WorkloadUtilization() WorkloadUtilizationResolver
	WorkloadUtilizationData() WorkloadUtilizationDataResolver
	WorkloadVulnerabilitySummary() WorkloadVulnerabilitySummaryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	ActivityLogEntryConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ActivityLogEntryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AddRepositoryToTeamPayload struct {
		Repository func(childComplexity int) int
	}

	AddSecretValuePayload struct {
		Secret func(childComplexity int) int
	}

	AddTeamMemberPayload struct {
		Member func(childComplexity int) int
	}

	AlertConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	AlertEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AllowTeamAccessToUnleashPayload struct {
		Unleash func(childComplexity int) int
	}

	Application struct {
		ActivityLog               func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, filter *activitylog.ActivityLogFilter) int
		AuthIntegrations          func(childComplexity int) int
		BigQueryDatasets          func(childComplexity int, orderBy *bigquery.BigQueryDatasetOrder) int
		Buckets                   func(childComplexity int, orderBy *bucket.BucketOrder) int
		Cost                      func(childComplexity int) int
		DeletionStartedAt         func(childComplexity int) int
		Deployments               func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int
		Environment               func(childComplexity int) int
		ID                        func(childComplexity int) int
		Image                     func(childComplexity int) int
		ImageVulnerabilityHistory func(childComplexity int, from scalar.Date) int
		Ingresses                 func(childComplexity int) int
		Instances                 func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int
		Issues                    func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *issue.IssueOrder, filter *issue.ResourceIssueFilter) int
		KafkaTopicAcls            func(childComplexity int, orderBy *kafkatopic.KafkaTopicACLOrder) int
		LogDestinations           func(childComplexity int) int
		Manifest                  func(childComplexity int) int
		Name                      func(childComplexity int) int
		NetworkPolicy             func(childComplexity int) int
		OpenSearch                func(childComplexity int) int
		Resources                 func(childComplexity int) int
		SQLInstances              func(childComplexity int, orderBy *sqlinstance.SQLInstanceOrder) int
		Secrets                   func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int
		State                     func(childComplexity int) int
		Team                      func(childComplexity int) int
		TeamEnvironment           func(childComplexity int) int
		Utilization               func(childComplexity int) int
		Valkeys                   func(childComplexity int, orderBy *valkey.ValkeyOrder) int
		VulnerabilityFixHistory   func(childComplexity int, from scalar.Date) int
	}

	ApplicationConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ApplicationDeletedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	ApplicationEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ApplicationInstance struct {
		Created             func(childComplexity int) int
		ID                  func(childComplexity int) int
		Image               func(childComplexity int) int
		InstanceUtilization func(childComplexity int, resourceType utilization.UtilizationResourceType) int
		Name                func(childComplexity int) int
		Restarts            func(childComplexity int) int
		Status              func(childComplexity int) int
	}

	ApplicationInstanceConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ApplicationInstanceEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ApplicationInstanceStatus struct {
		Message func(childComplexity int) int
		State   func(childComplexity int) int
	}

	ApplicationInstanceUtilization struct {
		Current func(childComplexity int) int
	}

	ApplicationManifest struct {
		Content func(childComplexity int) int
	}

	ApplicationResources struct {
		Limits   func(childComplexity int) int
		Requests func(childComplexity int) int
		Scaling  func(childComplexity int) int
	}

	ApplicationRestartedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	ApplicationScaledActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Data            func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	ApplicationScaledActivityLogEntryData struct {
		Direction func(childComplexity int) int
		NewSize   func(childComplexity int) int
	}

	ApplicationScaling struct {
		MaxInstances func(childComplexity int) int
		MinInstances func(childComplexity int) int
		Strategies   func(childComplexity int) int
	}

	AssignRoleToServiceAccountPayload struct {
		ServiceAccount func(childComplexity int) int
	}

	BigQueryDataset struct {
		Access          func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *bigquery.BigQueryDatasetAccessOrder) int
		CascadingDelete func(childComplexity int) int
		Cost            func(childComplexity int) int
		Description     func(childComplexity int) int
		Environment     func(childComplexity int) int
		ID              func(childComplexity int) int
		Name            func(childComplexity int) int
		Status          func(childComplexity int) int
		Team            func(childComplexity int) int
		TeamEnvironment func(childComplexity int) int
		Workload        func(childComplexity int) int
	}

	BigQueryDatasetAccess struct {
		Email func(childComplexity int) int
		Role  func(childComplexity int) int
	}

	BigQueryDatasetAccessConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	BigQueryDatasetAccessEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	BigQueryDatasetConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	BigQueryDatasetCost struct {
		Sum func(childComplexity int) int
	}

	BigQueryDatasetEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	BigQueryDatasetStatus struct {
		CreationTime     func(childComplexity int) int
		LastModifiedTime func(childComplexity int) int
	}

	Bucket struct {
		CascadingDelete          func(childComplexity int) int
		Environment              func(childComplexity int) int
		ID                       func(childComplexity int) int
		Name                     func(childComplexity int) int
		PublicAccessPrevention   func(childComplexity int) int
		Team                     func(childComplexity int) int
		TeamEnvironment          func(childComplexity int) int
		UniformBucketLevelAccess func(childComplexity int) int
		Workload                 func(childComplexity int) int
	}

	BucketConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	BucketEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CPUScalingStrategy struct {
		Threshold func(childComplexity int) int
	}

	ChangeDeploymentKeyPayload struct {
		DeploymentKey func(childComplexity int) int
	}

	ClusterAuditActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Data            func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	ClusterAuditActivityLogEntryData struct {
		Action       func(childComplexity int) int
		ResourceKind func(childComplexity int) int
	}

	ConfirmTeamDeletionPayload struct {
		DeletionStarted func(childComplexity int) int
	}

	ContainerImage struct {
		ActivityLog          func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, filter *activitylog.ActivityLogFilter) int
		HasSbom              func(childComplexity int) int
		ID                   func(childComplexity int) int
		Name                 func(childComplexity int) int
		Tag                  func(childComplexity int) int
		Vulnerabilities      func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, filter *vulnerability.ImageVulnerabilityFilter, orderBy *vulnerability.ImageVulnerabilityOrder) int
		VulnerabilitySummary func(childComplexity int) int
		WorkloadReferences   func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int
	}

	ContainerImageWorkloadReference struct {
		Workload func(childComplexity int) int
	}

	ContainerImageWorkloadReferenceConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ContainerImageWorkloadReferenceEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CostMonthlySummary struct {
		Series func(childComplexity int) int
	}

	CreateOpenSearchPayload struct {
		OpenSearch func(childComplexity int) int
	}

	CreateSecretPayload struct {
		Secret func(childComplexity int) int
	}

	CreateServiceAccountPayload struct {
		ServiceAccount func(childComplexity int) int
	}

	CreateServiceAccountTokenPayload struct {
		Secret              func(childComplexity int) int
		ServiceAccount      func(childComplexity int) int
		ServiceAccountToken func(childComplexity int) int
	}

	CreateTeamPayload struct {
		Team func(childComplexity int) int
	}

	CreateUnleashForTeamPayload struct {
		Unleash func(childComplexity int) int
	}

	CreateValkeyPayload struct {
		Valkey func(childComplexity int) int
	}

	CurrentUnitPrices struct {
		CPU    func(childComplexity int) int
		Memory func(childComplexity int) int
	}

	DeleteApplicationPayload struct {
		Success func(childComplexity int) int
		Team    func(childComplexity int) int
	}

	DeleteJobPayload struct {
		Success func(childComplexity int) int
		Team    func(childComplexity int) int
	}

	DeleteOpenSearchPayload struct {
		OpenSearchDeleted func(childComplexity int) int
	}

	DeleteSecretPayload struct {
		SecretDeleted func(childComplexity int) int
	}

	DeleteServiceAccountPayload struct {
		ServiceAccountDeleted func(childComplexity int) int
	}

	DeleteServiceAccountTokenPayload struct {
		ServiceAccount             func(childComplexity int) int
		ServiceAccountTokenDeleted func(childComplexity int) int
	}

	DeleteValkeyPayload struct {
		ValkeyDeleted func(childComplexity int) int
	}

	Deployment struct {
		CommitSha        func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		DeployerUsername func(childComplexity int) int
		EnvironmentName  func(childComplexity int) int
		ID               func(childComplexity int) int
		Repository       func(childComplexity int) int
		Resources        func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int
		Statuses         func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int
		TeamSlug         func(childComplexity int) int
		TriggerUrl       func(childComplexity int) int
	}

	DeploymentActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Data            func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	DeploymentActivityLogEntryData struct {
		TriggerURL func(childComplexity int) int
	}

	DeploymentConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	DeploymentEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DeploymentKey struct {
		Created func(childComplexity int) int
		Expires func(childComplexity int) int
		ID      func(childComplexity int) int
		Key     func(childComplexity int) int
	}

	DeploymentResource struct {
		ID   func(childComplexity int) int
		Kind func(childComplexity int) int
		Name func(childComplexity int) int
	}

	DeploymentResourceConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	DeploymentResourceEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DeploymentStatus struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Message   func(childComplexity int) int
		State     func(childComplexity int) int
	}

	DeploymentStatusConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	DeploymentStatusEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DeprecatedIngressIssue struct {
		Application     func(childComplexity int) int
		ID              func(childComplexity int) int
		Ingresses       func(childComplexity int) int
		Message         func(childComplexity int) int
		Severity        func(childComplexity int) int
		TeamEnvironment func(childComplexity int) int
	}

	DeprecatedRegistryIssue struct {
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		Severity        func(childComplexity int) int
		TeamEnvironment func(childComplexity int) int
		Workload        func(childComplexity int) int
	}

	EntraIDAuthIntegration struct {
		Name func(childComplexity int) int
	}

	Environment struct {
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Workloads func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *workload.EnvironmentWorkloadOrder) int
	}

	EnvironmentConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	EnvironmentEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ExternalNetworkPolicyHost struct {
		Ports  func(childComplexity int) int
		Target func(childComplexity int) int
	}

	ExternalNetworkPolicyIpv4 struct {
		Ports  func(childComplexity int) int
		Target func(childComplexity int) int
	}

	FailedJobRunsIssue struct {
		ID              func(childComplexity int) int
		Job             func(childComplexity int) int
		Message         func(childComplexity int) int
		Severity        func(childComplexity int) int
		TeamEnvironment func(childComplexity int) int
	}

	FailedSynchronizationIssue struct {
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		Severity        func(childComplexity int) int
		TeamEnvironment func(childComplexity int) int
		Workload        func(childComplexity int) int
	}

	FeatureKafka struct {
		Enabled func(childComplexity int) int
		ID      func(childComplexity int) int
	}

	FeatureOpenSearch struct {
		Enabled func(childComplexity int) int
		ID      func(childComplexity int) int
	}

	FeatureUnleash struct {
		Enabled func(childComplexity int) int
		ID      func(childComplexity int) int
	}

	FeatureValkey struct {
		Enabled func(childComplexity int) int
		ID      func(childComplexity int) int
	}

	Features struct {
		ID         func(childComplexity int) int
		Kafka      func(childComplexity int) int
		OpenSearch func(childComplexity int) int
		Unleash    func(childComplexity int) int
		Valkey     func(childComplexity int) int
	}

	IDPortenAuthIntegration struct {
		Name func(childComplexity int) int
	}

	ImageVulnerability struct {
		Description              func(childComplexity int) int
		ID                       func(childComplexity int) int
		Identifier               func(childComplexity int) int
		Package                  func(childComplexity int) int
		Severity                 func(childComplexity int) int
		SeveritySince            func(childComplexity int) int
		Suppression              func(childComplexity int) int
		VulnerabilityDetailsLink func(childComplexity int) int
	}

	ImageVulnerabilityConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ImageVulnerabilityEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ImageVulnerabilityHistory struct {
		Samples func(childComplexity int) int
	}

	ImageVulnerabilitySample struct {
		Date    func(childComplexity int) int
		Summary func(childComplexity int) int
	}

	ImageVulnerabilitySummary struct {
		Critical    func(childComplexity int) int
		High        func(childComplexity int) int
		LastUpdated func(childComplexity int) int
		Low         func(childComplexity int) int
		Medium      func(childComplexity int) int
		RiskScore   func(childComplexity int) int
		Total       func(childComplexity int) int
		Unassigned  func(childComplexity int) int
	}

	ImageVulnerabilitySuppression struct {
		Reason func(childComplexity int) int
		State  func(childComplexity int) int
	}

	InboundNetworkPolicy struct {
		Rules func(childComplexity int) int
	}

	Ingress struct {
		Metrics func(childComplexity int) int
		Type    func(childComplexity int) int
		URL     func(childComplexity int) int
	}

	IngressMetricSample struct {
		Timestamp func(childComplexity int) int
		Value     func(childComplexity int) int
	}

	IngressMetrics struct {
		ErrorsPerSecond   func(childComplexity int) int
		RequestsPerSecond func(childComplexity int) int
		Series            func(childComplexity int, input application.IngressMetricsInput) int
	}

	InvalidSpecIssue struct {
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		Severity        func(childComplexity int) int
		TeamEnvironment func(childComplexity int) int
		Workload        func(childComplexity int) int
	}

	IssueConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	IssueEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Job struct {
		ActivityLog               func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, filter *activitylog.ActivityLogFilter) int
		AuthIntegrations          func(childComplexity int) int
		BigQueryDatasets          func(childComplexity int, orderBy *bigquery.BigQueryDatasetOrder) int
		Buckets                   func(childComplexity int, orderBy *bucket.BucketOrder) int
		Cost                      func(childComplexity int) int
		DeletionStartedAt         func(childComplexity int) int
		Deployments               func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int
		Environment               func(childComplexity int) int
		ID                        func(childComplexity int) int
		Image                     func(childComplexity int) int
		ImageVulnerabilityHistory func(childComplexity int, from scalar.Date) int
		Issues                    func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *issue.IssueOrder, filter *issue.ResourceIssueFilter) int
		KafkaTopicAcls            func(childComplexity int, orderBy *kafkatopic.KafkaTopicACLOrder) int
		LogDestinations           func(childComplexity int) int
		Manifest                  func(childComplexity int) int
		Name                      func(childComplexity int) int
		NetworkPolicy             func(childComplexity int) int
		OpenSearch                func(childComplexity int) int
		Resources                 func(childComplexity int) int
		Runs                      func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int
		SQLInstances              func(childComplexity int, orderBy *sqlinstance.SQLInstanceOrder) int
		Schedule                  func(childComplexity int) int
		Secrets                   func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int
		State                     func(childComplexity int) int
		Team                      func(childComplexity int) int
		TeamEnvironment           func(childComplexity int) int
		Valkeys                   func(childComplexity int, orderBy *valkey.ValkeyOrder) int
		VulnerabilityFixHistory   func(childComplexity int, from scalar.Date) int
	}

	JobConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	JobDeletedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	JobEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	JobManifest struct {
		Content func(childComplexity int) int
	}

	JobResources struct {
		Limits   func(childComplexity int) int
		Requests func(childComplexity int) int
	}

	JobRun struct {
		CompletionTime func(childComplexity int) int
		Duration       func(childComplexity int) int
		ID             func(childComplexity int) int
		Image          func(childComplexity int) int
		Instances      func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int
		Name           func(childComplexity int) int
		StartTime      func(childComplexity int) int
		Status         func(childComplexity int) int
		Trigger        func(childComplexity int) int
	}

	JobRunConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	JobRunEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	JobRunInstance struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	JobRunInstanceConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	JobRunInstanceEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	JobRunStatus struct {
		Message func(childComplexity int) int
		State   func(childComplexity int) int
	}

	JobRunTrigger struct {
		Actor func(childComplexity int) int
		Type  func(childComplexity int) int
	}

	JobSchedule struct {
		Expression func(childComplexity int) int
		TimeZone   func(childComplexity int) int
	}

	JobTriggeredActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	KafkaLagScalingStrategy struct {
		ConsumerGroup func(childComplexity int) int
		Threshold     func(childComplexity int) int
		TopicName     func(childComplexity int) int
	}

	KafkaTopic struct {
		ACL             func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, filter *kafkatopic.KafkaTopicACLFilter, orderBy *kafkatopic.KafkaTopicACLOrder) int
		Configuration   func(childComplexity int) int
		Environment     func(childComplexity int) int
		ID              func(childComplexity int) int
		Name            func(childComplexity int) int
		Pool            func(childComplexity int) int
		Team            func(childComplexity int) int
		TeamEnvironment func(childComplexity int) int
	}

	KafkaTopicAcl struct {
		Access       func(childComplexity int) int
		Team         func(childComplexity int) int
		TeamName     func(childComplexity int) int
		Topic        func(childComplexity int) int
		Workload     func(childComplexity int) int
		WorkloadName func(childComplexity int) int
	}

	KafkaTopicAclConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	KafkaTopicAclEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	KafkaTopicConfiguration struct {
		CleanupPolicy         func(childComplexity int) int
		MaxMessageBytes       func(childComplexity int) int
		MinimumInSyncReplicas func(childComplexity int) int
		Partitions            func(childComplexity int) int
		Replication           func(childComplexity int) int
		RetentionBytes        func(childComplexity int) int
		RetentionHours        func(childComplexity int) int
		SegmentHours          func(childComplexity int) int
	}

	KafkaTopicConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	KafkaTopicEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	LogDestinationLoki struct {
		GrafanaURL func(childComplexity int) int
		ID         func(childComplexity int) int
	}

	LogDestinationSecureLogs struct {
		ID func(childComplexity int) int
	}

	LogLine struct {
		Labels  func(childComplexity int) int
		Message func(childComplexity int) int
		Time    func(childComplexity int) int
	}

	LogLineLabel struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	MaintenanceWindow struct {
		DayOfWeek func(childComplexity int) int
		TimeOfDay func(childComplexity int) int
	}

	MaskinportenAuthIntegration struct {
		Name func(childComplexity int) int
	}

	MissingSbomIssue struct {
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		Severity        func(childComplexity int) int
		TeamEnvironment func(childComplexity int) int
		Workload        func(childComplexity int) int
	}

	Mutation struct {
		AddRepositoryToTeam          func(childComplexity int, input repository.AddRepositoryToTeamInput) int
		AddSecretValue               func(childComplexity int, input secret.AddSecretValueInput) int
		AddTeamMember                func(childComplexity int, input team.AddTeamMemberInput) int
		AllowTeamAccessToUnleash     func(childComplexity int, input unleash.AllowTeamAccessToUnleashInput) int
		AssignRoleToServiceAccount   func(childComplexity int, input serviceaccount.AssignRoleToServiceAccountInput) int
		ChangeDeploymentKey          func(childComplexity int, input deployment.ChangeDeploymentKeyInput) int
		ConfigureReconciler          func(childComplexity int, input reconciler.ConfigureReconcilerInput) int
		ConfirmTeamDeletion          func(childComplexity int, input team.ConfirmTeamDeletionInput) int
		CreateOpenSearch             func(childComplexity int, input opensearch.CreateOpenSearchInput) int
		CreateSecret                 func(childComplexity int, input secret.CreateSecretInput) int
		CreateServiceAccount         func(childComplexity int, input serviceaccount.CreateServiceAccountInput) int
		CreateServiceAccountToken    func(childComplexity int, input serviceaccount.CreateServiceAccountTokenInput) int
		CreateTeam                   func(childComplexity int, input team.CreateTeamInput) int
		CreateUnleashForTeam         func(childComplexity int, input unleash.CreateUnleashForTeamInput) int
		CreateValkey                 func(childComplexity int, input valkey.CreateValkeyInput) int
		DeleteApplication            func(childComplexity int, input application.DeleteApplicationInput) int
		DeleteJob                    func(childComplexity int, input job.DeleteJobInput) int
		DeleteOpenSearch             func(childComplexity int, input opensearch.DeleteOpenSearchInput) int
		DeleteSecret                 func(childComplexity int, input secret.DeleteSecretInput) int
		DeleteServiceAccount         func(childComplexity int, input serviceaccount.DeleteServiceAccountInput) int
		DeleteServiceAccountToken    func(childComplexity int, input serviceaccount.DeleteServiceAccountTokenInput) int
		DeleteValkey                 func(childComplexity int, input valkey.DeleteValkeyInput) int
		DisableReconciler            func(childComplexity int, input reconciler.DisableReconcilerInput) int
		EnableReconciler             func(childComplexity int, input reconciler.EnableReconcilerInput) int
		RemoveRepositoryFromTeam     func(childComplexity int, input repository.RemoveRepositoryFromTeamInput) int
		RemoveSecretValue            func(childComplexity int, input secret.RemoveSecretValueInput) int
		RemoveTeamMember             func(childComplexity int, input team.RemoveTeamMemberInput) int
		RequestTeamDeletion          func(childComplexity int, input team.RequestTeamDeletionInput) int
		RestartApplication           func(childComplexity int, input application.RestartApplicationInput) int
		RevokeRoleFromServiceAccount func(childComplexity int, input serviceaccount.RevokeRoleFromServiceAccountInput) int
		RevokeTeamAccessToUnleash    func(childComplexity int, input unleash.RevokeTeamAccessToUnleashInput) int
		SetTeamMemberRole            func(childComplexity int, input team.SetTeamMemberRoleInput) int
		StartOpenSearchMaintenance   func(childComplexity int, input servicemaintenance.StartOpenSearchMaintenanceInput) int
		StartValkeyMaintenance       func(childComplexity int, input servicemaintenance.StartValkeyMaintenanceInput) int
		TriggerJob                   func(childComplexity int, input job.TriggerJobInput) int
		UpdateImageVulnerability     func(childComplexity int, input vulnerability.UpdateImageVulnerabilityInput) int
		UpdateOpenSearch             func(childComplexity int, input opensearch.UpdateOpenSearchInput) int
		UpdateSecretValue            func(childComplexity int, input secret.UpdateSecretValueInput) int
		UpdateServiceAccount         func(childComplexity int, input serviceaccount.UpdateServiceAccountInput) int
		UpdateServiceAccountToken    func(childComplexity int, input serviceaccount.UpdateServiceAccountTokenInput) int
		UpdateTeam                   func(childComplexity int, input team.UpdateTeamInput) int
		UpdateTeamEnvironment        func(childComplexity int, input team.UpdateTeamEnvironmentInput) int
		UpdateValkey                 func(childComplexity int, input valkey.UpdateValkeyInput) int
	}

	NetworkPolicy struct {
		Inbound  func(childComplexity int) int
		Outbound func(childComplexity int) int
	}

	NetworkPolicyRule struct {
		Mutual             func(childComplexity int) int
		TargetTeam         func(childComplexity int) int
		TargetTeamSlug     func(childComplexity int) int
		TargetWorkload     func(childComplexity int) int
		TargetWorkloadName func(childComplexity int) int
	}

	NoRunningInstancesIssue struct {
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		Severity        func(childComplexity int) int
		TeamEnvironment func(childComplexity int) int
		Workload        func(childComplexity int) int
	}

	OpenSearch struct {
		Access                func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *opensearch.OpenSearchAccessOrder) int
		ActivityLog           func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, filter *activitylog.ActivityLogFilter) int
		Cost                  func(childComplexity int) int
		Environment           func(childComplexity int) int
		ID                    func(childComplexity int) int
		Issues                func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *issue.IssueOrder, filter *issue.ResourceIssueFilter) int
		Maintenance           func(childComplexity int) int
		Memory                func(childComplexity int) int
		Name                  func(childComplexity int) int
		State                 func(childComplexity int) int
		StorageGB             func(childComplexity int) int
		Team                  func(childComplexity int) int
		TeamEnvironment       func(childComplexity int) int
		TerminationProtection func(childComplexity int) int
		Tier                  func(childComplexity int) int
		Version               func(childComplexity int) int
		Workload              func(childComplexity int) int
	}

	OpenSearchAccess struct {
		Access   func(childComplexity int) int
		Workload func(childComplexity int) int
	}

	OpenSearchAccessConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	OpenSearchAccessEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OpenSearchConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	OpenSearchCost struct {
		Sum func(childComplexity int) int
	}

	OpenSearchCreatedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	OpenSearchDeletedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	OpenSearchEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OpenSearchIssue struct {
		Event           func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		OpenSearch      func(childComplexity int) int
		Severity        func(childComplexity int) int
		TeamEnvironment func(childComplexity int) int
	}

	OpenSearchMaintenance struct {
		Updates func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int
		Window  func(childComplexity int) int
	}

	OpenSearchMaintenanceUpdate struct {
		Deadline    func(childComplexity int) int
		Description func(childComplexity int) int
		StartAt     func(childComplexity int) int
		Title       func(childComplexity int) int
	}

	OpenSearchMaintenanceUpdateConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	OpenSearchMaintenanceUpdateEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OpenSearchUpdatedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Data            func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	OpenSearchUpdatedActivityLogEntryData struct {
		UpdatedFields func(childComplexity int) int
	}

	OpenSearchUpdatedActivityLogEntryDataUpdatedField struct {
		Field    func(childComplexity int) int
		NewValue func(childComplexity int) int
		OldValue func(childComplexity int) int
	}

	OpenSearchVersion struct {
		Actual       func(childComplexity int) int
		DesiredMajor func(childComplexity int) int
	}

	OutboundNetworkPolicy struct {
		External func(childComplexity int) int
		Rules    func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		PageEnd         func(childComplexity int) int
		PageStart       func(childComplexity int) int
		StartCursor     func(childComplexity int) int
		TotalCount      func(childComplexity int) int
	}

	Price struct {
		Value func(childComplexity int) int
	}

	PrometheusAlarm struct {
		Action      func(childComplexity int) int
		Consequence func(childComplexity int) int
		Since       func(childComplexity int) int
		State       func(childComplexity int) int
		Summary     func(childComplexity int) int
		Value       func(childComplexity int) int
	}

	PrometheusAlert struct {
		Alarms          func(childComplexity int) int
		Duration        func(childComplexity int) int
		ID              func(childComplexity int) int
		Name            func(childComplexity int) int
		Query           func(childComplexity int) int
		RuleGroup       func(childComplexity int) int
		State           func(childComplexity int) int
		Team            func(childComplexity int) int
		TeamEnvironment func(childComplexity int) int
	}

	Query struct {
		CostMonthlySummary        func(childComplexity int, from scalar.Date, to scalar.Date) int
		CurrentUnitPrices         func(childComplexity int) int
		Environment               func(childComplexity int, name string) int
		Environments              func(childComplexity int, orderBy *environment.EnvironmentOrder) int
		Features                  func(childComplexity int) int
		ImageVulnerabilityHistory func(childComplexity int, from scalar.Date) int
		Me                        func(childComplexity int) int
		Node                      func(childComplexity int, id ident.Ident) int
		Reconcilers               func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int
		Roles                     func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int
		Search                    func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, filter search.SearchFilter) int
		ServiceAccount            func(childComplexity int, id ident.Ident) int
		ServiceAccounts           func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int
		Team                      func(childComplexity int, slug slug.Slug) int
		Teams                     func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *team.TeamOrder, filter *team.TeamFilter) int
		TeamsUtilization          func(childComplexity int, resourceType utilization.UtilizationResourceType) int
		User                      func(childComplexity int, email *string) int
		UserSyncLog               func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int
		Users                     func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *user.UserOrder) int
		VulnerabilityFixHistory   func(childComplexity int, from scalar.Date) int
		VulnerabilitySummary      func(childComplexity int) int
	}

	Reconciler struct {
		ActivityLog func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, filter *activitylog.ActivityLogFilter) int
		Config      func(childComplexity int) int
		Configured  func(childComplexity int) int
		Description func(childComplexity int) int
		DisplayName func(childComplexity int) int
		Enabled     func(childComplexity int) int
		Errors      func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
	}

	ReconcilerConfig struct {
		Configured  func(childComplexity int) int
		Description func(childComplexity int) int
		DisplayName func(childComplexity int) int
		Key         func(childComplexity int) int
		Secret      func(childComplexity int) int
		Value       func(childComplexity int) int
	}

	ReconcilerConfiguredActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Data            func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	ReconcilerConfiguredActivityLogEntryData struct {
		UpdatedKeys func(childComplexity int) int
	}

	ReconcilerConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ReconcilerDisabledActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	ReconcilerEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ReconcilerEnabledActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	ReconcilerError struct {
		CorrelationID func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		ID            func(childComplexity int) int
		Message       func(childComplexity int) int
		Team          func(childComplexity int) int
	}

	ReconcilerErrorConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ReconcilerErrorEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	RemoveRepositoryFromTeamPayload struct {
		Success func(childComplexity int) int
	}

	RemoveSecretValuePayload struct {
		Secret func(childComplexity int) int
	}

	RemoveTeamMemberPayload struct {
		Team func(childComplexity int) int
		User func(childComplexity int) int
	}

	Repository struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
		Team func(childComplexity int) int
	}

	RepositoryAddedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	RepositoryConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	RepositoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	RepositoryRemovedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	RequestTeamDeletionPayload struct {
		Key func(childComplexity int) int
	}

	RestartApplicationPayload struct {
		Application func(childComplexity int) int
	}

	RevokeRoleFromServiceAccountPayload struct {
		ServiceAccount func(childComplexity int) int
	}

	RevokeTeamAccessToUnleashPayload struct {
		Unleash func(childComplexity int) int
	}

	Role struct {
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
	}

	RoleAssignedToServiceAccountActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Data            func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	RoleAssignedToServiceAccountActivityLogEntryData struct {
		RoleName func(childComplexity int) int
	}

	RoleAssignedUserSyncLogEntry struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Message   func(childComplexity int) int
		RoleName  func(childComplexity int) int
		UserEmail func(childComplexity int) int
		UserID    func(childComplexity int) int
		UserName  func(childComplexity int) int
	}

	RoleConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	RoleEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	RoleRevokedFromServiceAccountActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Data            func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	RoleRevokedFromServiceAccountActivityLogEntryData struct {
		RoleName func(childComplexity int) int
	}

	RoleRevokedUserSyncLogEntry struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Message   func(childComplexity int) int
		RoleName  func(childComplexity int) int
		UserEmail func(childComplexity int) int
		UserID    func(childComplexity int) int
		UserName  func(childComplexity int) int
	}

	SearchNodeConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	SearchNodeEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Secret struct {
		Applications    func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int
		Environment     func(childComplexity int) int
		ID              func(childComplexity int) int
		Jobs            func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int
		LastModifiedAt  func(childComplexity int) int
		LastModifiedBy  func(childComplexity int) int
		Name            func(childComplexity int) int
		Team            func(childComplexity int) int
		TeamEnvironment func(childComplexity int) int
		Values          func(childComplexity int) int
		Workloads       func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int
	}

	SecretConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	SecretCreatedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	SecretDeletedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	SecretEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SecretValue struct {
		Name  func(childComplexity int) int
		Value func(childComplexity int) int
	}

	SecretValueAddedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Data            func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	SecretValueAddedActivityLogEntryData struct {
		ValueName func(childComplexity int) int
	}

	SecretValueRemovedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Data            func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	SecretValueRemovedActivityLogEntryData struct {
		ValueName func(childComplexity int) int
	}

	SecretValueUpdatedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Data            func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	SecretValueUpdatedActivityLogEntryData struct {
		ValueName func(childComplexity int) int
	}

	ServiceAccount struct {
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		LastUsedAt  func(childComplexity int) int
		Name        func(childComplexity int) int
		Roles       func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int
		Team        func(childComplexity int) int
		Tokens      func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int
		UpdatedAt   func(childComplexity int) int
	}

	ServiceAccountConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ServiceAccountCreatedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	ServiceAccountDeletedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	ServiceAccountEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ServiceAccountToken struct {
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		ExpiresAt   func(childComplexity int) int
		ID          func(childComplexity int) int
		LastUsedAt  func(childComplexity int) int
		Name        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	ServiceAccountTokenConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ServiceAccountTokenCreatedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Data            func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	ServiceAccountTokenCreatedActivityLogEntryData struct {
		TokenName func(childComplexity int) int
	}

	ServiceAccountTokenDeletedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Data            func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	ServiceAccountTokenDeletedActivityLogEntryData struct {
		TokenName func(childComplexity int) int
	}

	ServiceAccountTokenEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ServiceAccountTokenUpdatedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Data            func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	ServiceAccountTokenUpdatedActivityLogEntryData struct {
		UpdatedFields func(childComplexity int) int
	}

	ServiceAccountTokenUpdatedActivityLogEntryDataUpdatedField struct {
		Field    func(childComplexity int) int
		NewValue func(childComplexity int) int
		OldValue func(childComplexity int) int
	}

	ServiceAccountUpdatedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Data            func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	ServiceAccountUpdatedActivityLogEntryData struct {
		UpdatedFields func(childComplexity int) int
	}

	ServiceAccountUpdatedActivityLogEntryDataUpdatedField struct {
		Field    func(childComplexity int) int
		NewValue func(childComplexity int) int
		OldValue func(childComplexity int) int
	}

	ServiceCostSample struct {
		Cost    func(childComplexity int) int
		Service func(childComplexity int) int
	}

	ServiceCostSeries struct {
		Date     func(childComplexity int) int
		Services func(childComplexity int) int
		Sum      func(childComplexity int) int
	}

	ServiceMaintenanceActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	SetTeamMemberRolePayload struct {
		Member func(childComplexity int) int
	}

	SqlDatabase struct {
		Charset         func(childComplexity int) int
		Collation       func(childComplexity int) int
		DeletionPolicy  func(childComplexity int) int
		Environment     func(childComplexity int) int
		Healthy         func(childComplexity int) int
		ID              func(childComplexity int) int
		Name            func(childComplexity int) int
		Team            func(childComplexity int) int
		TeamEnvironment func(childComplexity int) int
	}

	SqlInstance struct {
		BackupConfiguration func(childComplexity int) int
		CascadingDelete     func(childComplexity int) int
		ConnectionName      func(childComplexity int) int
		Cost                func(childComplexity int) int
		Database            func(childComplexity int) int
		DiskAutoresize      func(childComplexity int) int
		DiskAutoresizeLimit func(childComplexity int) int
		Environment         func(childComplexity int) int
		Flags               func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int
		Healthy             func(childComplexity int) int
		HighAvailability    func(childComplexity int) int
		ID                  func(childComplexity int) int
		Issues              func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *issue.IssueOrder, filter *issue.ResourceIssueFilter) int
		MaintenanceVersion  func(childComplexity int) int
		MaintenanceWindow   func(childComplexity int) int
		Metrics             func(childComplexity int) int
		Name                func(childComplexity int) int
		ProjectID           func(childComplexity int) int
		State               func(childComplexity int) int
		Status              func(childComplexity int) int
		Team                func(childComplexity int) int
		TeamEnvironment     func(childComplexity int) int
		Tier                func(childComplexity int) int
		Users               func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *sqlinstance.SQLInstanceUserOrder) int
		Version             func(childComplexity int) int
		Workload            func(childComplexity int) int
	}

	SqlInstanceBackupConfiguration struct {
		Enabled                     func(childComplexity int) int
		PointInTimeRecovery         func(childComplexity int) int
		RetainedBackups             func(childComplexity int) int
		StartTime                   func(childComplexity int) int
		TransactionLogRetentionDays func(childComplexity int) int
	}

	SqlInstanceConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	SqlInstanceCost struct {
		Sum func(childComplexity int) int
	}

	SqlInstanceCpu struct {
		Cores       func(childComplexity int) int
		Utilization func(childComplexity int) int
	}

	SqlInstanceDisk struct {
		QuotaBytes  func(childComplexity int) int
		Utilization func(childComplexity int) int
	}

	SqlInstanceEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SqlInstanceFlag struct {
		Name  func(childComplexity int) int
		Value func(childComplexity int) int
	}

	SqlInstanceFlagConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	SqlInstanceFlagEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SqlInstanceMaintenanceWindow struct {
		Day  func(childComplexity int) int
		Hour func(childComplexity int) int
	}

	SqlInstanceMemory struct {
		QuotaBytes  func(childComplexity int) int
		Utilization func(childComplexity int) int
	}

	SqlInstanceMetrics struct {
		CPU    func(childComplexity int) int
		Disk   func(childComplexity int) int
		Memory func(childComplexity int) int
	}

	SqlInstanceStateIssue struct {
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		SQLInstance     func(childComplexity int) int
		Severity        func(childComplexity int) int
		State           func(childComplexity int) int
		TeamEnvironment func(childComplexity int) int
	}

	SqlInstanceStatus struct {
		PrivateIPAddress func(childComplexity int) int
		PublicIPAddress  func(childComplexity int) int
	}

	SqlInstanceUser struct {
		Authentication func(childComplexity int) int
		Name           func(childComplexity int) int
	}

	SqlInstanceUserConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	SqlInstanceUserEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SqlInstanceVersionIssue struct {
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		SQLInstance     func(childComplexity int) int
		Severity        func(childComplexity int) int
		TeamEnvironment func(childComplexity int) int
	}

	StartOpenSearchMaintenancePayload struct {
		Error func(childComplexity int) int
	}

	StartValkeyMaintenancePayload struct {
		Error func(childComplexity int) int
	}

	Subscription struct {
		Log         func(childComplexity int, filter loki.LogSubscriptionFilter) int
		WorkloadLog func(childComplexity int, filter podlog.WorkloadLogSubscriptionFilter) int
	}

	Team struct {
		ActivityLog               func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, filter *activitylog.ActivityLogFilter) int
		Alerts                    func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *alerts.AlertOrder, filter *alerts.TeamAlertsFilter) int
		Applications              func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *application.ApplicationOrder, filter *application.TeamApplicationsFilter) int
		BigQueryDatasets          func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *bigquery.BigQueryDatasetOrder) int
		Buckets                   func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *bucket.BucketOrder) int
		Cost                      func(childComplexity int) int
		DeleteKey                 func(childComplexity int, key string) int
		DeletionInProgress        func(childComplexity int) int
		DeploymentKey             func(childComplexity int) int
		Deployments               func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int
		Environment               func(childComplexity int, name string) int
		Environments              func(childComplexity int) int
		ExternalResources         func(childComplexity int) int
		ID                        func(childComplexity int) int
		ImageVulnerabilityHistory func(childComplexity int, from scalar.Date) int
		InventoryCounts           func(childComplexity int) int
		Issues                    func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *issue.IssueOrder, filter *issue.IssueFilter) int
		Jobs                      func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *job.JobOrder, filter *job.TeamJobsFilter) int
		KafkaTopics               func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *kafkatopic.KafkaTopicOrder) int
		LastSuccessfulSync        func(childComplexity int) int
		Member                    func(childComplexity int, email string) int
		Members                   func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *team.TeamMemberOrder) int
		OpenSearches              func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *opensearch.OpenSearchOrder) int
		Purpose                   func(childComplexity int) int
		Repositories              func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *repository.RepositoryOrder, filter *repository.TeamRepositoryFilter) int
		SQLInstances              func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *sqlinstance.SQLInstanceOrder) int
		Secrets                   func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *secret.SecretOrder, filter *secret.SecretFilter) int
		ServiceUtilization        func(childComplexity int) int
		SlackChannel              func(childComplexity int) int
		Slug                      func(childComplexity int) int
		Unleash                   func(childComplexity int) int
		Valkeys                   func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *valkey.ValkeyOrder) int
		ViewerIsMember            func(childComplexity int) int
		ViewerIsOwner             func(childComplexity int) int
		VulnerabilityFixHistory   func(childComplexity int, from scalar.Date) int
		VulnerabilitySummaries    func(childComplexity int, filter *vulnerability.TeamVulnerabilitySummaryFilter, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *vulnerability.VulnerabilitySummaryOrder) int
		VulnerabilitySummary      func(childComplexity int, filter *vulnerability.TeamVulnerabilitySummaryFilter) int
		WorkloadUtilization       func(childComplexity int, resourceType utilization.UtilizationResourceType) int
		Workloads                 func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *workload.WorkloadOrder, filter *workload.TeamWorkloadsFilter) int
	}

	TeamCDN struct {
		Bucket func(childComplexity int) int
	}

	TeamConfirmDeleteKeyActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	TeamConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	TeamCost struct {
		Daily          func(childComplexity int, from scalar.Date, to scalar.Date, filter *cost.TeamCostDailyFilter) int
		MonthlySummary func(childComplexity int) int
	}

	TeamCostMonthlySample struct {
		Cost func(childComplexity int) int
		Date func(childComplexity int) int
	}

	TeamCostMonthlySummary struct {
		Series func(childComplexity int) int
		Sum    func(childComplexity int) int
	}

	TeamCostPeriod struct {
		Series func(childComplexity int) int
		Sum    func(childComplexity int) int
	}

	TeamCreateDeleteKeyActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	TeamCreatedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	TeamDeleteKey struct {
		CreatedAt func(childComplexity int) int
		CreatedBy func(childComplexity int) int
		Expires   func(childComplexity int) int
		Key       func(childComplexity int) int
		Team      func(childComplexity int) int
	}

	TeamDeployKeyUpdatedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	TeamEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TeamEntraIDGroup struct {
		GroupID func(childComplexity int) int
	}

	TeamEnvironment struct {
		Alerts             func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *alerts.AlertOrder, filter *alerts.TeamAlertsFilter) int
		Application        func(childComplexity int, name string) int
		BigQueryDataset    func(childComplexity int, name string) int
		Bucket             func(childComplexity int, name string) int
		Cost               func(childComplexity int) int
		Environment        func(childComplexity int) int
		GCPProjectID       func(childComplexity int) int
		ID                 func(childComplexity int) int
		Job                func(childComplexity int, name string) int
		KafkaTopic         func(childComplexity int, name string) int
		Name               func(childComplexity int) int
		OpenSearch         func(childComplexity int, name string) int
		SQLInstance        func(childComplexity int, name string) int
		Secret             func(childComplexity int, name string) int
		SlackAlertsChannel func(childComplexity int) int
		Team               func(childComplexity int) int
		Valkey             func(childComplexity int, name string) int
		Workload           func(childComplexity int, name string) int
	}

	TeamEnvironmentCost struct {
		Daily func(childComplexity int, from scalar.Date, to scalar.Date) int
	}

	TeamEnvironmentCostPeriod struct {
		Series func(childComplexity int) int
		Sum    func(childComplexity int) int
	}

	TeamEnvironmentUpdatedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Data            func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	TeamEnvironmentUpdatedActivityLogEntryData struct {
		UpdatedFields func(childComplexity int) int
	}

	TeamEnvironmentUpdatedActivityLogEntryDataUpdatedField struct {
		Field    func(childComplexity int) int
		NewValue func(childComplexity int) int
		OldValue func(childComplexity int) int
	}

	TeamExternalResources struct {
		CDN                    func(childComplexity int) int
		EntraIDGroup           func(childComplexity int) int
		GitHubTeam             func(childComplexity int) int
		GoogleArtifactRegistry func(childComplexity int) int
		GoogleGroup            func(childComplexity int) int
	}

	TeamGitHubTeam struct {
		Slug func(childComplexity int) int
	}

	TeamGoogleArtifactRegistry struct {
		Repository func(childComplexity int) int
	}

	TeamGoogleGroup struct {
		Email func(childComplexity int) int
	}

	TeamInventoryCountApplications struct {
		Total func(childComplexity int) int
	}

	TeamInventoryCountBigQueryDatasets struct {
		Total func(childComplexity int) int
	}

	TeamInventoryCountBuckets struct {
		Total func(childComplexity int) int
	}

	TeamInventoryCountJobs struct {
		Total func(childComplexity int) int
	}

	TeamInventoryCountKafkaTopics struct {
		Total func(childComplexity int) int
	}

	TeamInventoryCountOpenSearches struct {
		Total func(childComplexity int) int
	}

	TeamInventoryCountSqlInstances struct {
		Total func(childComplexity int) int
	}

	TeamInventoryCountValkeys struct {
		Total func(childComplexity int) int
	}

	TeamInventoryCounts struct {
		Applications     func(childComplexity int) int
		BigQueryDatasets func(childComplexity int) int
		Buckets          func(childComplexity int) int
		Jobs             func(childComplexity int) int
		KafkaTopics      func(childComplexity int) int
		OpenSearches     func(childComplexity int) int
		SQLInstances     func(childComplexity int) int
		Valkeys          func(childComplexity int) int
	}

	TeamMember struct {
		Role func(childComplexity int) int
		Team func(childComplexity int) int
		User func(childComplexity int) int
	}

	TeamMemberAddedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Data            func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	TeamMemberAddedActivityLogEntryData struct {
		Role      func(childComplexity int) int
		UserEmail func(childComplexity int) int
		UserID    func(childComplexity int) int
	}

	TeamMemberConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	TeamMemberEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TeamMemberRemovedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Data            func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	TeamMemberRemovedActivityLogEntryData struct {
		UserEmail func(childComplexity int) int
		UserID    func(childComplexity int) int
	}

	TeamMemberSetRoleActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Data            func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	TeamMemberSetRoleActivityLogEntryData struct {
		Role      func(childComplexity int) int
		UserEmail func(childComplexity int) int
		UserID    func(childComplexity int) int
	}

	TeamServiceUtilization struct {
		SQLInstances func(childComplexity int) int
	}

	TeamServiceUtilizationSqlInstances struct {
		CPU    func(childComplexity int) int
		Disk   func(childComplexity int) int
		Memory func(childComplexity int) int
	}

	TeamServiceUtilizationSqlInstancesCPU struct {
		Requested   func(childComplexity int) int
		Used        func(childComplexity int) int
		Utilization func(childComplexity int) int
	}

	TeamServiceUtilizationSqlInstancesDisk struct {
		Requested   func(childComplexity int) int
		Used        func(childComplexity int) int
		Utilization func(childComplexity int) int
	}

	TeamServiceUtilizationSqlInstancesMemory struct {
		Requested   func(childComplexity int) int
		Used        func(childComplexity int) int
		Utilization func(childComplexity int) int
	}

	TeamUpdatedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Data            func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	TeamUpdatedActivityLogEntryData struct {
		UpdatedFields func(childComplexity int) int
	}

	TeamUpdatedActivityLogEntryDataUpdatedField struct {
		Field    func(childComplexity int) int
		NewValue func(childComplexity int) int
		OldValue func(childComplexity int) int
	}

	TeamUtilizationData struct {
		Environment     func(childComplexity int) int
		Requested       func(childComplexity int) int
		Team            func(childComplexity int) int
		TeamEnvironment func(childComplexity int) int
		Used            func(childComplexity int) int
	}

	TeamVulnerabilitySummary struct {
		Coverage       func(childComplexity int) int
		Critical       func(childComplexity int) int
		High           func(childComplexity int) int
		LastUpdated    func(childComplexity int) int
		Low            func(childComplexity int) int
		Medium         func(childComplexity int) int
		RiskScore      func(childComplexity int) int
		RiskScoreTrend func(childComplexity int) int
		SBOMCount      func(childComplexity int) int
		Unassigned     func(childComplexity int) int
	}

	TenantVulnerabilitySummary struct {
		Coverage    func(childComplexity int) int
		Critical    func(childComplexity int) int
		High        func(childComplexity int) int
		LastUpdated func(childComplexity int) int
		Low         func(childComplexity int) int
		Medium      func(childComplexity int) int
		RiskScore   func(childComplexity int) int
		SbomCount   func(childComplexity int) int
		Unassigned  func(childComplexity int) int
	}

	TokenXAuthIntegration struct {
		Name func(childComplexity int) int
	}

	TriggerJobPayload struct {
		Job    func(childComplexity int) int
		JobRun func(childComplexity int) int
	}

	UnleashInstance struct {
		APIIngress   func(childComplexity int) int
		AllowedTeams func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int
		ID           func(childComplexity int) int
		Metrics      func(childComplexity int) int
		Name         func(childComplexity int) int
		Ready        func(childComplexity int) int
		Version      func(childComplexity int) int
		WebIngress   func(childComplexity int) int
	}

	UnleashInstanceCreatedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	UnleashInstanceMetrics struct {
		APITokens         func(childComplexity int) int
		CPURequests       func(childComplexity int) int
		CPUUtilization    func(childComplexity int) int
		MemoryRequests    func(childComplexity int) int
		MemoryUtilization func(childComplexity int) int
		Toggles           func(childComplexity int) int
	}

	UnleashInstanceUpdatedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Data            func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	UnleashInstanceUpdatedActivityLogEntryData struct {
		AllowedTeamSlug func(childComplexity int) int
		RevokedTeamSlug func(childComplexity int) int
	}

	UpdateImageVulnerabilityPayload struct {
		Vulnerability func(childComplexity int) int
	}

	UpdateOpenSearchPayload struct {
		OpenSearch func(childComplexity int) int
	}

	UpdateSecretValuePayload struct {
		Secret func(childComplexity int) int
	}

	UpdateServiceAccountPayload struct {
		ServiceAccount func(childComplexity int) int
	}

	UpdateServiceAccountTokenPayload struct {
		ServiceAccount      func(childComplexity int) int
		ServiceAccountToken func(childComplexity int) int
	}

	UpdateTeamEnvironmentPayload struct {
		Environment     func(childComplexity int) int
		TeamEnvironment func(childComplexity int) int
	}

	UpdateTeamPayload struct {
		Team func(childComplexity int) int
	}

	UpdateValkeyPayload struct {
		Valkey func(childComplexity int) int
	}

	User struct {
		Email      func(childComplexity int) int
		ExternalID func(childComplexity int) int
		ID         func(childComplexity int) int
		IsAdmin    func(childComplexity int) int
		Name       func(childComplexity int) int
		Teams      func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *team.UserTeamOrder) int
	}

	UserConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	UserCreatedUserSyncLogEntry struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Message   func(childComplexity int) int
		UserEmail func(childComplexity int) int
		UserID    func(childComplexity int) int
		UserName  func(childComplexity int) int
	}

	UserDeletedUserSyncLogEntry struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Message   func(childComplexity int) int
		UserEmail func(childComplexity int) int
		UserID    func(childComplexity int) int
		UserName  func(childComplexity int) int
	}

	UserEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	UserSyncLogEntryConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	UserSyncLogEntryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	UserUpdatedUserSyncLogEntry struct {
		CreatedAt    func(childComplexity int) int
		ID           func(childComplexity int) int
		Message      func(childComplexity int) int
		OldUserEmail func(childComplexity int) int
		OldUserName  func(childComplexity int) int
		UserEmail    func(childComplexity int) int
		UserID       func(childComplexity int) int
		UserName     func(childComplexity int) int
	}

	UtilizationSample struct {
		Instance  func(childComplexity int) int
		Timestamp func(childComplexity int) int
		Value     func(childComplexity int) int
	}

	Valkey struct {
		Access                func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *valkey.ValkeyAccessOrder) int
		ActivityLog           func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, filter *activitylog.ActivityLogFilter) int
		Cost                  func(childComplexity int) int
		Environment           func(childComplexity int) int
		ID                    func(childComplexity int) int
		Issues                func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *issue.IssueOrder, filter *issue.ResourceIssueFilter) int
		Maintenance           func(childComplexity int) int
		MaxMemoryPolicy       func(childComplexity int) int
		Memory                func(childComplexity int) int
		Name                  func(childComplexity int) int
		State                 func(childComplexity int) int
		Team                  func(childComplexity int) int
		TeamEnvironment       func(childComplexity int) int
		TerminationProtection func(childComplexity int) int
		Tier                  func(childComplexity int) int
		Workload              func(childComplexity int) int
	}

	ValkeyAccess struct {
		Access   func(childComplexity int) int
		Workload func(childComplexity int) int
	}

	ValkeyAccessConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ValkeyAccessEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ValkeyConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ValkeyCost struct {
		Sum func(childComplexity int) int
	}

	ValkeyCreatedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	ValkeyDeletedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	ValkeyEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ValkeyIssue struct {
		Event           func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		Severity        func(childComplexity int) int
		TeamEnvironment func(childComplexity int) int
		Valkey          func(childComplexity int) int
	}

	ValkeyMaintenance struct {
		Updates func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int
		Window  func(childComplexity int) int
	}

	ValkeyMaintenanceUpdate struct {
		Deadline    func(childComplexity int) int
		Description func(childComplexity int) int
		StartAt     func(childComplexity int) int
		Title       func(childComplexity int) int
	}

	ValkeyMaintenanceUpdateConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ValkeyMaintenanceUpdateEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ValkeyUpdatedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Data            func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	ValkeyUpdatedActivityLogEntryData struct {
		UpdatedFields func(childComplexity int) int
	}

	ValkeyUpdatedActivityLogEntryDataUpdatedField struct {
		Field    func(childComplexity int) int
		NewValue func(childComplexity int) int
		OldValue func(childComplexity int) int
	}

	VulnerabilityActivityLogEntryData struct {
		Identifier          func(childComplexity int) int
		NewSuppression      func(childComplexity int) int
		Package             func(childComplexity int) int
		PreviousSuppression func(childComplexity int) int
		Severity            func(childComplexity int) int
	}

	VulnerabilityFixHistory struct {
		Samples func(childComplexity int) int
	}

	VulnerabilityFixSample struct {
		Date           func(childComplexity int) int
		Days           func(childComplexity int) int
		FirstFixedAt   func(childComplexity int) int
		FixedCount     func(childComplexity int) int
		LastFixedAt    func(childComplexity int) int
		Severity       func(childComplexity int) int
		TotalWorkloads func(childComplexity int) int
	}

	VulnerabilityUpdatedActivityLogEntry struct {
		Actor           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Data            func(childComplexity int) int
		EnvironmentName func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		ResourceName    func(childComplexity int) int
		ResourceType    func(childComplexity int) int
		TeamSlug        func(childComplexity int) int
	}

	VulnerableImageIssue struct {
		Critical        func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		RiskScore       func(childComplexity int) int
		Severity        func(childComplexity int) int
		TeamEnvironment func(childComplexity int) int
		Workload        func(childComplexity int) int
	}

	WorkloadConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	WorkloadCost struct {
		Daily   func(childComplexity int, from scalar.Date, to scalar.Date) int
		Monthly func(childComplexity int) int
	}

	WorkloadCostPeriod struct {
		Series func(childComplexity int) int
		Sum    func(childComplexity int) int
	}

	WorkloadCostSample struct {
		Cost         func(childComplexity int) int
		Workload     func(childComplexity int) int
		WorkloadName func(childComplexity int) int
	}

	WorkloadCostSeries struct {
		Date      func(childComplexity int) int
		Sum       func(childComplexity int) int
		Workloads func(childComplexity int) int
	}

	WorkloadEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	WorkloadLogLine struct {
		Instance func(childComplexity int) int
		Message  func(childComplexity int) int
		Time     func(childComplexity int) int
	}

	WorkloadResourceQuantity struct {
		CPU    func(childComplexity int) int
		Memory func(childComplexity int) int
	}

	WorkloadUtilization struct {
		Current         func(childComplexity int, resourceType utilization.UtilizationResourceType) int
		Limit           func(childComplexity int, resourceType utilization.UtilizationResourceType) int
		LimitSeries     func(childComplexity int, input utilization.WorkloadUtilizationSeriesInput) int
		Recommendations func(childComplexity int) int
		Requested       func(childComplexity int, resourceType utilization.UtilizationResourceType) int
		RequestedSeries func(childComplexity int, input utilization.WorkloadUtilizationSeriesInput) int
		Series          func(childComplexity int, input utilization.WorkloadUtilizationSeriesInput) int
	}

	WorkloadUtilizationData struct {
		Requested func(childComplexity int) int
		Used      func(childComplexity int) int
		Workload  func(childComplexity int) int
	}

	WorkloadUtilizationRecommendations struct {
		CPURequestCores    func(childComplexity int) int
		MemoryLimitBytes   func(childComplexity int) int
		MemoryRequestBytes func(childComplexity int) int
	}

	WorkloadVulnerabilitySummary struct {
		HasSbom  func(childComplexity int) int
		ID       func(childComplexity int) int
		Summary  func(childComplexity int) int
		Workload func(childComplexity int) int
	}

	WorkloadVulnerabilitySummaryConnection struct {
		Edges    func(childComplexity int) int
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	WorkloadVulnerabilitySummaryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(ctx context.Context, typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "ActivityLogEntryConnection.edges":
		if e.complexity.ActivityLogEntryConnection.Edges == nil {
			break
		}

		return e.complexity.ActivityLogEntryConnection.Edges(childComplexity), true

	case "ActivityLogEntryConnection.nodes":
		if e.complexity.ActivityLogEntryConnection.Nodes == nil {
			break
		}

		return e.complexity.ActivityLogEntryConnection.Nodes(childComplexity), true

	case "ActivityLogEntryConnection.pageInfo":
		if e.complexity.ActivityLogEntryConnection.PageInfo == nil {
			break
		}

		return e.complexity.ActivityLogEntryConnection.PageInfo(childComplexity), true

	case "ActivityLogEntryEdge.cursor":
		if e.complexity.ActivityLogEntryEdge.Cursor == nil {
			break
		}

		return e.complexity.ActivityLogEntryEdge.Cursor(childComplexity), true

	case "ActivityLogEntryEdge.node":
		if e.complexity.ActivityLogEntryEdge.Node == nil {
			break
		}

		return e.complexity.ActivityLogEntryEdge.Node(childComplexity), true

	case "AddRepositoryToTeamPayload.repository":
		if e.complexity.AddRepositoryToTeamPayload.Repository == nil {
			break
		}

		return e.complexity.AddRepositoryToTeamPayload.Repository(childComplexity), true

	case "AddSecretValuePayload.secret":
		if e.complexity.AddSecretValuePayload.Secret == nil {
			break
		}

		return e.complexity.AddSecretValuePayload.Secret(childComplexity), true

	case "AddTeamMemberPayload.member":
		if e.complexity.AddTeamMemberPayload.Member == nil {
			break
		}

		return e.complexity.AddTeamMemberPayload.Member(childComplexity), true

	case "AlertConnection.edges":
		if e.complexity.AlertConnection.Edges == nil {
			break
		}

		return e.complexity.AlertConnection.Edges(childComplexity), true

	case "AlertConnection.nodes":
		if e.complexity.AlertConnection.Nodes == nil {
			break
		}

		return e.complexity.AlertConnection.Nodes(childComplexity), true

	case "AlertConnection.pageInfo":
		if e.complexity.AlertConnection.PageInfo == nil {
			break
		}

		return e.complexity.AlertConnection.PageInfo(childComplexity), true

	case "AlertEdge.cursor":
		if e.complexity.AlertEdge.Cursor == nil {
			break
		}

		return e.complexity.AlertEdge.Cursor(childComplexity), true

	case "AlertEdge.node":
		if e.complexity.AlertEdge.Node == nil {
			break
		}

		return e.complexity.AlertEdge.Node(childComplexity), true

	case "AllowTeamAccessToUnleashPayload.unleash":
		if e.complexity.AllowTeamAccessToUnleashPayload.Unleash == nil {
			break
		}

		return e.complexity.AllowTeamAccessToUnleashPayload.Unleash(childComplexity), true

	case "Application.activityLog":
		if e.complexity.Application.ActivityLog == nil {
			break
		}

		args, err := ec.field_Application_activityLog_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Application.ActivityLog(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["filter"].(*activitylog.ActivityLogFilter)), true

	case "Application.authIntegrations":
		if e.complexity.Application.AuthIntegrations == nil {
			break
		}

		return e.complexity.Application.AuthIntegrations(childComplexity), true

	case "Application.bigQueryDatasets":
		if e.complexity.Application.BigQueryDatasets == nil {
			break
		}

		args, err := ec.field_Application_bigQueryDatasets_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Application.BigQueryDatasets(childComplexity, args["orderBy"].(*bigquery.BigQueryDatasetOrder)), true

	case "Application.buckets":
		if e.complexity.Application.Buckets == nil {
			break
		}

		args, err := ec.field_Application_buckets_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Application.Buckets(childComplexity, args["orderBy"].(*bucket.BucketOrder)), true

	case "Application.cost":
		if e.complexity.Application.Cost == nil {
			break
		}

		return e.complexity.Application.Cost(childComplexity), true

	case "Application.deletionStartedAt":
		if e.complexity.Application.DeletionStartedAt == nil {
			break
		}

		return e.complexity.Application.DeletionStartedAt(childComplexity), true

	case "Application.deployments":
		if e.complexity.Application.Deployments == nil {
			break
		}

		args, err := ec.field_Application_deployments_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Application.Deployments(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor)), true

	case "Application.environment":
		if e.complexity.Application.Environment == nil {
			break
		}

		return e.complexity.Application.Environment(childComplexity), true

	case "Application.id":
		if e.complexity.Application.ID == nil {
			break
		}

		return e.complexity.Application.ID(childComplexity), true

	case "Application.image":
		if e.complexity.Application.Image == nil {
			break
		}

		return e.complexity.Application.Image(childComplexity), true

	case "Application.imageVulnerabilityHistory":
		if e.complexity.Application.ImageVulnerabilityHistory == nil {
			break
		}

		args, err := ec.field_Application_imageVulnerabilityHistory_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Application.ImageVulnerabilityHistory(childComplexity, args["from"].(scalar.Date)), true

	case "Application.ingresses":
		if e.complexity.Application.Ingresses == nil {
			break
		}

		return e.complexity.Application.Ingresses(childComplexity), true

	case "Application.instances":
		if e.complexity.Application.Instances == nil {
			break
		}

		args, err := ec.field_Application_instances_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Application.Instances(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor)), true

	case "Application.issues":
		if e.complexity.Application.Issues == nil {
			break
		}

		args, err := ec.field_Application_issues_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Application.Issues(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["orderBy"].(*issue.IssueOrder), args["filter"].(*issue.ResourceIssueFilter)), true

	case "Application.kafkaTopicAcls":
		if e.complexity.Application.KafkaTopicAcls == nil {
			break
		}

		args, err := ec.field_Application_kafkaTopicAcls_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Application.KafkaTopicAcls(childComplexity, args["orderBy"].(*kafkatopic.KafkaTopicACLOrder)), true

	case "Application.logDestinations":
		if e.complexity.Application.LogDestinations == nil {
			break
		}

		return e.complexity.Application.LogDestinations(childComplexity), true

	case "Application.manifest":
		if e.complexity.Application.Manifest == nil {
			break
		}

		return e.complexity.Application.Manifest(childComplexity), true

	case "Application.name":
		if e.complexity.Application.Name == nil {
			break
		}

		return e.complexity.Application.Name(childComplexity), true

	case "Application.networkPolicy":
		if e.complexity.Application.NetworkPolicy == nil {
			break
		}

		return e.complexity.Application.NetworkPolicy(childComplexity), true

	case "Application.openSearch":
		if e.complexity.Application.OpenSearch == nil {
			break
		}

		return e.complexity.Application.OpenSearch(childComplexity), true

	case "Application.resources":
		if e.complexity.Application.Resources == nil {
			break
		}

		return e.complexity.Application.Resources(childComplexity), true

	case "Application.sqlInstances":
		if e.complexity.Application.SQLInstances == nil {
			break
		}

		args, err := ec.field_Application_sqlInstances_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Application.SQLInstances(childComplexity, args["orderBy"].(*sqlinstance.SQLInstanceOrder)), true

	case "Application.secrets":
		if e.complexity.Application.Secrets == nil {
			break
		}

		args, err := ec.field_Application_secrets_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Application.Secrets(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor)), true

	case "Application.state":
		if e.complexity.Application.State == nil {
			break
		}

		return e.complexity.Application.State(childComplexity), true

	case "Application.team":
		if e.complexity.Application.Team == nil {
			break
		}

		return e.complexity.Application.Team(childComplexity), true

	case "Application.teamEnvironment":
		if e.complexity.Application.TeamEnvironment == nil {
			break
		}

		return e.complexity.Application.TeamEnvironment(childComplexity), true

	case "Application.utilization":
		if e.complexity.Application.Utilization == nil {
			break
		}

		return e.complexity.Application.Utilization(childComplexity), true

	case "Application.valkeys":
		if e.complexity.Application.Valkeys == nil {
			break
		}

		args, err := ec.field_Application_valkeys_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Application.Valkeys(childComplexity, args["orderBy"].(*valkey.ValkeyOrder)), true

	case "Application.vulnerabilityFixHistory":
		if e.complexity.Application.VulnerabilityFixHistory == nil {
			break
		}

		args, err := ec.field_Application_vulnerabilityFixHistory_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Application.VulnerabilityFixHistory(childComplexity, args["from"].(scalar.Date)), true

	case "ApplicationConnection.edges":
		if e.complexity.ApplicationConnection.Edges == nil {
			break
		}

		return e.complexity.ApplicationConnection.Edges(childComplexity), true

	case "ApplicationConnection.nodes":
		if e.complexity.ApplicationConnection.Nodes == nil {
			break
		}

		return e.complexity.ApplicationConnection.Nodes(childComplexity), true

	case "ApplicationConnection.pageInfo":
		if e.complexity.ApplicationConnection.PageInfo == nil {
			break
		}

		return e.complexity.ApplicationConnection.PageInfo(childComplexity), true

	case "ApplicationDeletedActivityLogEntry.actor":
		if e.complexity.ApplicationDeletedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.ApplicationDeletedActivityLogEntry.Actor(childComplexity), true

	case "ApplicationDeletedActivityLogEntry.createdAt":
		if e.complexity.ApplicationDeletedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.ApplicationDeletedActivityLogEntry.CreatedAt(childComplexity), true

	case "ApplicationDeletedActivityLogEntry.environmentName":
		if e.complexity.ApplicationDeletedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.ApplicationDeletedActivityLogEntry.EnvironmentName(childComplexity), true

	case "ApplicationDeletedActivityLogEntry.id":
		if e.complexity.ApplicationDeletedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.ApplicationDeletedActivityLogEntry.ID(childComplexity), true

	case "ApplicationDeletedActivityLogEntry.message":
		if e.complexity.ApplicationDeletedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.ApplicationDeletedActivityLogEntry.Message(childComplexity), true

	case "ApplicationDeletedActivityLogEntry.resourceName":
		if e.complexity.ApplicationDeletedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.ApplicationDeletedActivityLogEntry.ResourceName(childComplexity), true

	case "ApplicationDeletedActivityLogEntry.resourceType":
		if e.complexity.ApplicationDeletedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.ApplicationDeletedActivityLogEntry.ResourceType(childComplexity), true

	case "ApplicationDeletedActivityLogEntry.teamSlug":
		if e.complexity.ApplicationDeletedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.ApplicationDeletedActivityLogEntry.TeamSlug(childComplexity), true

	case "ApplicationEdge.cursor":
		if e.complexity.ApplicationEdge.Cursor == nil {
			break
		}

		return e.complexity.ApplicationEdge.Cursor(childComplexity), true

	case "ApplicationEdge.node":
		if e.complexity.ApplicationEdge.Node == nil {
			break
		}

		return e.complexity.ApplicationEdge.Node(childComplexity), true

	case "ApplicationInstance.created":
		if e.complexity.ApplicationInstance.Created == nil {
			break
		}

		return e.complexity.ApplicationInstance.Created(childComplexity), true

	case "ApplicationInstance.id":
		if e.complexity.ApplicationInstance.ID == nil {
			break
		}

		return e.complexity.ApplicationInstance.ID(childComplexity), true

	case "ApplicationInstance.image":
		if e.complexity.ApplicationInstance.Image == nil {
			break
		}

		return e.complexity.ApplicationInstance.Image(childComplexity), true

	case "ApplicationInstance.instanceUtilization":
		if e.complexity.ApplicationInstance.InstanceUtilization == nil {
			break
		}

		args, err := ec.field_ApplicationInstance_instanceUtilization_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ApplicationInstance.InstanceUtilization(childComplexity, args["resourceType"].(utilization.UtilizationResourceType)), true

	case "ApplicationInstance.name":
		if e.complexity.ApplicationInstance.Name == nil {
			break
		}

		return e.complexity.ApplicationInstance.Name(childComplexity), true

	case "ApplicationInstance.restarts":
		if e.complexity.ApplicationInstance.Restarts == nil {
			break
		}

		return e.complexity.ApplicationInstance.Restarts(childComplexity), true

	case "ApplicationInstance.status":
		if e.complexity.ApplicationInstance.Status == nil {
			break
		}

		return e.complexity.ApplicationInstance.Status(childComplexity), true

	case "ApplicationInstanceConnection.edges":
		if e.complexity.ApplicationInstanceConnection.Edges == nil {
			break
		}

		return e.complexity.ApplicationInstanceConnection.Edges(childComplexity), true

	case "ApplicationInstanceConnection.nodes":
		if e.complexity.ApplicationInstanceConnection.Nodes == nil {
			break
		}

		return e.complexity.ApplicationInstanceConnection.Nodes(childComplexity), true

	case "ApplicationInstanceConnection.pageInfo":
		if e.complexity.ApplicationInstanceConnection.PageInfo == nil {
			break
		}

		return e.complexity.ApplicationInstanceConnection.PageInfo(childComplexity), true

	case "ApplicationInstanceEdge.cursor":
		if e.complexity.ApplicationInstanceEdge.Cursor == nil {
			break
		}

		return e.complexity.ApplicationInstanceEdge.Cursor(childComplexity), true

	case "ApplicationInstanceEdge.node":
		if e.complexity.ApplicationInstanceEdge.Node == nil {
			break
		}

		return e.complexity.ApplicationInstanceEdge.Node(childComplexity), true

	case "ApplicationInstanceStatus.message":
		if e.complexity.ApplicationInstanceStatus.Message == nil {
			break
		}

		return e.complexity.ApplicationInstanceStatus.Message(childComplexity), true

	case "ApplicationInstanceStatus.state":
		if e.complexity.ApplicationInstanceStatus.State == nil {
			break
		}

		return e.complexity.ApplicationInstanceStatus.State(childComplexity), true

	case "ApplicationInstanceUtilization.current":
		if e.complexity.ApplicationInstanceUtilization.Current == nil {
			break
		}

		return e.complexity.ApplicationInstanceUtilization.Current(childComplexity), true

	case "ApplicationManifest.content":
		if e.complexity.ApplicationManifest.Content == nil {
			break
		}

		return e.complexity.ApplicationManifest.Content(childComplexity), true

	case "ApplicationResources.limits":
		if e.complexity.ApplicationResources.Limits == nil {
			break
		}

		return e.complexity.ApplicationResources.Limits(childComplexity), true

	case "ApplicationResources.requests":
		if e.complexity.ApplicationResources.Requests == nil {
			break
		}

		return e.complexity.ApplicationResources.Requests(childComplexity), true

	case "ApplicationResources.scaling":
		if e.complexity.ApplicationResources.Scaling == nil {
			break
		}

		return e.complexity.ApplicationResources.Scaling(childComplexity), true

	case "ApplicationRestartedActivityLogEntry.actor":
		if e.complexity.ApplicationRestartedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.ApplicationRestartedActivityLogEntry.Actor(childComplexity), true

	case "ApplicationRestartedActivityLogEntry.createdAt":
		if e.complexity.ApplicationRestartedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.ApplicationRestartedActivityLogEntry.CreatedAt(childComplexity), true

	case "ApplicationRestartedActivityLogEntry.environmentName":
		if e.complexity.ApplicationRestartedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.ApplicationRestartedActivityLogEntry.EnvironmentName(childComplexity), true

	case "ApplicationRestartedActivityLogEntry.id":
		if e.complexity.ApplicationRestartedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.ApplicationRestartedActivityLogEntry.ID(childComplexity), true

	case "ApplicationRestartedActivityLogEntry.message":
		if e.complexity.ApplicationRestartedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.ApplicationRestartedActivityLogEntry.Message(childComplexity), true

	case "ApplicationRestartedActivityLogEntry.resourceName":
		if e.complexity.ApplicationRestartedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.ApplicationRestartedActivityLogEntry.ResourceName(childComplexity), true

	case "ApplicationRestartedActivityLogEntry.resourceType":
		if e.complexity.ApplicationRestartedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.ApplicationRestartedActivityLogEntry.ResourceType(childComplexity), true

	case "ApplicationRestartedActivityLogEntry.teamSlug":
		if e.complexity.ApplicationRestartedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.ApplicationRestartedActivityLogEntry.TeamSlug(childComplexity), true

	case "ApplicationScaledActivityLogEntry.actor":
		if e.complexity.ApplicationScaledActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.ApplicationScaledActivityLogEntry.Actor(childComplexity), true

	case "ApplicationScaledActivityLogEntry.createdAt":
		if e.complexity.ApplicationScaledActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.ApplicationScaledActivityLogEntry.CreatedAt(childComplexity), true

	case "ApplicationScaledActivityLogEntry.data":
		if e.complexity.ApplicationScaledActivityLogEntry.Data == nil {
			break
		}

		return e.complexity.ApplicationScaledActivityLogEntry.Data(childComplexity), true

	case "ApplicationScaledActivityLogEntry.environmentName":
		if e.complexity.ApplicationScaledActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.ApplicationScaledActivityLogEntry.EnvironmentName(childComplexity), true

	case "ApplicationScaledActivityLogEntry.id":
		if e.complexity.ApplicationScaledActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.ApplicationScaledActivityLogEntry.ID(childComplexity), true

	case "ApplicationScaledActivityLogEntry.message":
		if e.complexity.ApplicationScaledActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.ApplicationScaledActivityLogEntry.Message(childComplexity), true

	case "ApplicationScaledActivityLogEntry.resourceName":
		if e.complexity.ApplicationScaledActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.ApplicationScaledActivityLogEntry.ResourceName(childComplexity), true

	case "ApplicationScaledActivityLogEntry.resourceType":
		if e.complexity.ApplicationScaledActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.ApplicationScaledActivityLogEntry.ResourceType(childComplexity), true

	case "ApplicationScaledActivityLogEntry.teamSlug":
		if e.complexity.ApplicationScaledActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.ApplicationScaledActivityLogEntry.TeamSlug(childComplexity), true

	case "ApplicationScaledActivityLogEntryData.direction":
		if e.complexity.ApplicationScaledActivityLogEntryData.Direction == nil {
			break
		}

		return e.complexity.ApplicationScaledActivityLogEntryData.Direction(childComplexity), true

	case "ApplicationScaledActivityLogEntryData.newSize":
		if e.complexity.ApplicationScaledActivityLogEntryData.NewSize == nil {
			break
		}

		return e.complexity.ApplicationScaledActivityLogEntryData.NewSize(childComplexity), true

	case "ApplicationScaling.maxInstances":
		if e.complexity.ApplicationScaling.MaxInstances == nil {
			break
		}

		return e.complexity.ApplicationScaling.MaxInstances(childComplexity), true

	case "ApplicationScaling.minInstances":
		if e.complexity.ApplicationScaling.MinInstances == nil {
			break
		}

		return e.complexity.ApplicationScaling.MinInstances(childComplexity), true

	case "ApplicationScaling.strategies":
		if e.complexity.ApplicationScaling.Strategies == nil {
			break
		}

		return e.complexity.ApplicationScaling.Strategies(childComplexity), true

	case "AssignRoleToServiceAccountPayload.serviceAccount":
		if e.complexity.AssignRoleToServiceAccountPayload.ServiceAccount == nil {
			break
		}

		return e.complexity.AssignRoleToServiceAccountPayload.ServiceAccount(childComplexity), true

	case "BigQueryDataset.access":
		if e.complexity.BigQueryDataset.Access == nil {
			break
		}

		args, err := ec.field_BigQueryDataset_access_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.BigQueryDataset.Access(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["orderBy"].(*bigquery.BigQueryDatasetAccessOrder)), true

	case "BigQueryDataset.cascadingDelete":
		if e.complexity.BigQueryDataset.CascadingDelete == nil {
			break
		}

		return e.complexity.BigQueryDataset.CascadingDelete(childComplexity), true

	case "BigQueryDataset.cost":
		if e.complexity.BigQueryDataset.Cost == nil {
			break
		}

		return e.complexity.BigQueryDataset.Cost(childComplexity), true

	case "BigQueryDataset.description":
		if e.complexity.BigQueryDataset.Description == nil {
			break
		}

		return e.complexity.BigQueryDataset.Description(childComplexity), true

	case "BigQueryDataset.environment":
		if e.complexity.BigQueryDataset.Environment == nil {
			break
		}

		return e.complexity.BigQueryDataset.Environment(childComplexity), true

	case "BigQueryDataset.id":
		if e.complexity.BigQueryDataset.ID == nil {
			break
		}

		return e.complexity.BigQueryDataset.ID(childComplexity), true

	case "BigQueryDataset.name":
		if e.complexity.BigQueryDataset.Name == nil {
			break
		}

		return e.complexity.BigQueryDataset.Name(childComplexity), true

	case "BigQueryDataset.status":
		if e.complexity.BigQueryDataset.Status == nil {
			break
		}

		return e.complexity.BigQueryDataset.Status(childComplexity), true

	case "BigQueryDataset.team":
		if e.complexity.BigQueryDataset.Team == nil {
			break
		}

		return e.complexity.BigQueryDataset.Team(childComplexity), true

	case "BigQueryDataset.teamEnvironment":
		if e.complexity.BigQueryDataset.TeamEnvironment == nil {
			break
		}

		return e.complexity.BigQueryDataset.TeamEnvironment(childComplexity), true

	case "BigQueryDataset.workload":
		if e.complexity.BigQueryDataset.Workload == nil {
			break
		}

		return e.complexity.BigQueryDataset.Workload(childComplexity), true

	case "BigQueryDatasetAccess.email":
		if e.complexity.BigQueryDatasetAccess.Email == nil {
			break
		}

		return e.complexity.BigQueryDatasetAccess.Email(childComplexity), true

	case "BigQueryDatasetAccess.role":
		if e.complexity.BigQueryDatasetAccess.Role == nil {
			break
		}

		return e.complexity.BigQueryDatasetAccess.Role(childComplexity), true

	case "BigQueryDatasetAccessConnection.edges":
		if e.complexity.BigQueryDatasetAccessConnection.Edges == nil {
			break
		}

		return e.complexity.BigQueryDatasetAccessConnection.Edges(childComplexity), true

	case "BigQueryDatasetAccessConnection.nodes":
		if e.complexity.BigQueryDatasetAccessConnection.Nodes == nil {
			break
		}

		return e.complexity.BigQueryDatasetAccessConnection.Nodes(childComplexity), true

	case "BigQueryDatasetAccessConnection.pageInfo":
		if e.complexity.BigQueryDatasetAccessConnection.PageInfo == nil {
			break
		}

		return e.complexity.BigQueryDatasetAccessConnection.PageInfo(childComplexity), true

	case "BigQueryDatasetAccessEdge.cursor":
		if e.complexity.BigQueryDatasetAccessEdge.Cursor == nil {
			break
		}

		return e.complexity.BigQueryDatasetAccessEdge.Cursor(childComplexity), true

	case "BigQueryDatasetAccessEdge.node":
		if e.complexity.BigQueryDatasetAccessEdge.Node == nil {
			break
		}

		return e.complexity.BigQueryDatasetAccessEdge.Node(childComplexity), true

	case "BigQueryDatasetConnection.edges":
		if e.complexity.BigQueryDatasetConnection.Edges == nil {
			break
		}

		return e.complexity.BigQueryDatasetConnection.Edges(childComplexity), true

	case "BigQueryDatasetConnection.nodes":
		if e.complexity.BigQueryDatasetConnection.Nodes == nil {
			break
		}

		return e.complexity.BigQueryDatasetConnection.Nodes(childComplexity), true

	case "BigQueryDatasetConnection.pageInfo":
		if e.complexity.BigQueryDatasetConnection.PageInfo == nil {
			break
		}

		return e.complexity.BigQueryDatasetConnection.PageInfo(childComplexity), true

	case "BigQueryDatasetCost.sum":
		if e.complexity.BigQueryDatasetCost.Sum == nil {
			break
		}

		return e.complexity.BigQueryDatasetCost.Sum(childComplexity), true

	case "BigQueryDatasetEdge.cursor":
		if e.complexity.BigQueryDatasetEdge.Cursor == nil {
			break
		}

		return e.complexity.BigQueryDatasetEdge.Cursor(childComplexity), true

	case "BigQueryDatasetEdge.node":
		if e.complexity.BigQueryDatasetEdge.Node == nil {
			break
		}

		return e.complexity.BigQueryDatasetEdge.Node(childComplexity), true

	case "BigQueryDatasetStatus.creationTime":
		if e.complexity.BigQueryDatasetStatus.CreationTime == nil {
			break
		}

		return e.complexity.BigQueryDatasetStatus.CreationTime(childComplexity), true

	case "BigQueryDatasetStatus.lastModifiedTime":
		if e.complexity.BigQueryDatasetStatus.LastModifiedTime == nil {
			break
		}

		return e.complexity.BigQueryDatasetStatus.LastModifiedTime(childComplexity), true

	case "Bucket.cascadingDelete":
		if e.complexity.Bucket.CascadingDelete == nil {
			break
		}

		return e.complexity.Bucket.CascadingDelete(childComplexity), true

	case "Bucket.environment":
		if e.complexity.Bucket.Environment == nil {
			break
		}

		return e.complexity.Bucket.Environment(childComplexity), true

	case "Bucket.id":
		if e.complexity.Bucket.ID == nil {
			break
		}

		return e.complexity.Bucket.ID(childComplexity), true

	case "Bucket.name":
		if e.complexity.Bucket.Name == nil {
			break
		}

		return e.complexity.Bucket.Name(childComplexity), true

	case "Bucket.publicAccessPrevention":
		if e.complexity.Bucket.PublicAccessPrevention == nil {
			break
		}

		return e.complexity.Bucket.PublicAccessPrevention(childComplexity), true

	case "Bucket.team":
		if e.complexity.Bucket.Team == nil {
			break
		}

		return e.complexity.Bucket.Team(childComplexity), true

	case "Bucket.teamEnvironment":
		if e.complexity.Bucket.TeamEnvironment == nil {
			break
		}

		return e.complexity.Bucket.TeamEnvironment(childComplexity), true

	case "Bucket.uniformBucketLevelAccess":
		if e.complexity.Bucket.UniformBucketLevelAccess == nil {
			break
		}

		return e.complexity.Bucket.UniformBucketLevelAccess(childComplexity), true

	case "Bucket.workload":
		if e.complexity.Bucket.Workload == nil {
			break
		}

		return e.complexity.Bucket.Workload(childComplexity), true

	case "BucketConnection.edges":
		if e.complexity.BucketConnection.Edges == nil {
			break
		}

		return e.complexity.BucketConnection.Edges(childComplexity), true

	case "BucketConnection.nodes":
		if e.complexity.BucketConnection.Nodes == nil {
			break
		}

		return e.complexity.BucketConnection.Nodes(childComplexity), true

	case "BucketConnection.pageInfo":
		if e.complexity.BucketConnection.PageInfo == nil {
			break
		}

		return e.complexity.BucketConnection.PageInfo(childComplexity), true

	case "BucketEdge.cursor":
		if e.complexity.BucketEdge.Cursor == nil {
			break
		}

		return e.complexity.BucketEdge.Cursor(childComplexity), true

	case "BucketEdge.node":
		if e.complexity.BucketEdge.Node == nil {
			break
		}

		return e.complexity.BucketEdge.Node(childComplexity), true

	case "CPUScalingStrategy.threshold":
		if e.complexity.CPUScalingStrategy.Threshold == nil {
			break
		}

		return e.complexity.CPUScalingStrategy.Threshold(childComplexity), true

	case "ChangeDeploymentKeyPayload.deploymentKey":
		if e.complexity.ChangeDeploymentKeyPayload.DeploymentKey == nil {
			break
		}

		return e.complexity.ChangeDeploymentKeyPayload.DeploymentKey(childComplexity), true

	case "ClusterAuditActivityLogEntry.actor":
		if e.complexity.ClusterAuditActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.ClusterAuditActivityLogEntry.Actor(childComplexity), true

	case "ClusterAuditActivityLogEntry.createdAt":
		if e.complexity.ClusterAuditActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.ClusterAuditActivityLogEntry.CreatedAt(childComplexity), true

	case "ClusterAuditActivityLogEntry.data":
		if e.complexity.ClusterAuditActivityLogEntry.Data == nil {
			break
		}

		return e.complexity.ClusterAuditActivityLogEntry.Data(childComplexity), true

	case "ClusterAuditActivityLogEntry.environmentName":
		if e.complexity.ClusterAuditActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.ClusterAuditActivityLogEntry.EnvironmentName(childComplexity), true

	case "ClusterAuditActivityLogEntry.id":
		if e.complexity.ClusterAuditActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.ClusterAuditActivityLogEntry.ID(childComplexity), true

	case "ClusterAuditActivityLogEntry.message":
		if e.complexity.ClusterAuditActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.ClusterAuditActivityLogEntry.Message(childComplexity), true

	case "ClusterAuditActivityLogEntry.resourceName":
		if e.complexity.ClusterAuditActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.ClusterAuditActivityLogEntry.ResourceName(childComplexity), true

	case "ClusterAuditActivityLogEntry.resourceType":
		if e.complexity.ClusterAuditActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.ClusterAuditActivityLogEntry.ResourceType(childComplexity), true

	case "ClusterAuditActivityLogEntry.teamSlug":
		if e.complexity.ClusterAuditActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.ClusterAuditActivityLogEntry.TeamSlug(childComplexity), true

	case "ClusterAuditActivityLogEntryData.action":
		if e.complexity.ClusterAuditActivityLogEntryData.Action == nil {
			break
		}

		return e.complexity.ClusterAuditActivityLogEntryData.Action(childComplexity), true

	case "ClusterAuditActivityLogEntryData.resourceKind":
		if e.complexity.ClusterAuditActivityLogEntryData.ResourceKind == nil {
			break
		}

		return e.complexity.ClusterAuditActivityLogEntryData.ResourceKind(childComplexity), true

	case "ConfirmTeamDeletionPayload.deletionStarted":
		if e.complexity.ConfirmTeamDeletionPayload.DeletionStarted == nil {
			break
		}

		return e.complexity.ConfirmTeamDeletionPayload.DeletionStarted(childComplexity), true

	case "ContainerImage.activityLog":
		if e.complexity.ContainerImage.ActivityLog == nil {
			break
		}

		args, err := ec.field_ContainerImage_activityLog_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ContainerImage.ActivityLog(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["filter"].(*activitylog.ActivityLogFilter)), true

	case "ContainerImage.hasSBOM":
		if e.complexity.ContainerImage.HasSbom == nil {
			break
		}

		return e.complexity.ContainerImage.HasSbom(childComplexity), true

	case "ContainerImage.id":
		if e.complexity.ContainerImage.ID == nil {
			break
		}

		return e.complexity.ContainerImage.ID(childComplexity), true

	case "ContainerImage.name":
		if e.complexity.ContainerImage.Name == nil {
			break
		}

		return e.complexity.ContainerImage.Name(childComplexity), true

	case "ContainerImage.tag":
		if e.complexity.ContainerImage.Tag == nil {
			break
		}

		return e.complexity.ContainerImage.Tag(childComplexity), true

	case "ContainerImage.vulnerabilities":
		if e.complexity.ContainerImage.Vulnerabilities == nil {
			break
		}

		args, err := ec.field_ContainerImage_vulnerabilities_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ContainerImage.Vulnerabilities(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["filter"].(*vulnerability.ImageVulnerabilityFilter), args["orderBy"].(*vulnerability.ImageVulnerabilityOrder)), true

	case "ContainerImage.vulnerabilitySummary":
		if e.complexity.ContainerImage.VulnerabilitySummary == nil {
			break
		}

		return e.complexity.ContainerImage.VulnerabilitySummary(childComplexity), true

	case "ContainerImage.workloadReferences":
		if e.complexity.ContainerImage.WorkloadReferences == nil {
			break
		}

		args, err := ec.field_ContainerImage_workloadReferences_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ContainerImage.WorkloadReferences(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor)), true

	case "ContainerImageWorkloadReference.workload":
		if e.complexity.ContainerImageWorkloadReference.Workload == nil {
			break
		}

		return e.complexity.ContainerImageWorkloadReference.Workload(childComplexity), true

	case "ContainerImageWorkloadReferenceConnection.edges":
		if e.complexity.ContainerImageWorkloadReferenceConnection.Edges == nil {
			break
		}

		return e.complexity.ContainerImageWorkloadReferenceConnection.Edges(childComplexity), true

	case "ContainerImageWorkloadReferenceConnection.nodes":
		if e.complexity.ContainerImageWorkloadReferenceConnection.Nodes == nil {
			break
		}

		return e.complexity.ContainerImageWorkloadReferenceConnection.Nodes(childComplexity), true

	case "ContainerImageWorkloadReferenceConnection.pageInfo":
		if e.complexity.ContainerImageWorkloadReferenceConnection.PageInfo == nil {
			break
		}

		return e.complexity.ContainerImageWorkloadReferenceConnection.PageInfo(childComplexity), true

	case "ContainerImageWorkloadReferenceEdge.cursor":
		if e.complexity.ContainerImageWorkloadReferenceEdge.Cursor == nil {
			break
		}

		return e.complexity.ContainerImageWorkloadReferenceEdge.Cursor(childComplexity), true

	case "ContainerImageWorkloadReferenceEdge.node":
		if e.complexity.ContainerImageWorkloadReferenceEdge.Node == nil {
			break
		}

		return e.complexity.ContainerImageWorkloadReferenceEdge.Node(childComplexity), true

	case "CostMonthlySummary.series":
		if e.complexity.CostMonthlySummary.Series == nil {
			break
		}

		return e.complexity.CostMonthlySummary.Series(childComplexity), true

	case "CreateOpenSearchPayload.openSearch":
		if e.complexity.CreateOpenSearchPayload.OpenSearch == nil {
			break
		}

		return e.complexity.CreateOpenSearchPayload.OpenSearch(childComplexity), true

	case "CreateSecretPayload.secret":
		if e.complexity.CreateSecretPayload.Secret == nil {
			break
		}

		return e.complexity.CreateSecretPayload.Secret(childComplexity), true

	case "CreateServiceAccountPayload.serviceAccount":
		if e.complexity.CreateServiceAccountPayload.ServiceAccount == nil {
			break
		}

		return e.complexity.CreateServiceAccountPayload.ServiceAccount(childComplexity), true

	case "CreateServiceAccountTokenPayload.secret":
		if e.complexity.CreateServiceAccountTokenPayload.Secret == nil {
			break
		}

		return e.complexity.CreateServiceAccountTokenPayload.Secret(childComplexity), true

	case "CreateServiceAccountTokenPayload.serviceAccount":
		if e.complexity.CreateServiceAccountTokenPayload.ServiceAccount == nil {
			break
		}

		return e.complexity.CreateServiceAccountTokenPayload.ServiceAccount(childComplexity), true

	case "CreateServiceAccountTokenPayload.serviceAccountToken":
		if e.complexity.CreateServiceAccountTokenPayload.ServiceAccountToken == nil {
			break
		}

		return e.complexity.CreateServiceAccountTokenPayload.ServiceAccountToken(childComplexity), true

	case "CreateTeamPayload.team":
		if e.complexity.CreateTeamPayload.Team == nil {
			break
		}

		return e.complexity.CreateTeamPayload.Team(childComplexity), true

	case "CreateUnleashForTeamPayload.unleash":
		if e.complexity.CreateUnleashForTeamPayload.Unleash == nil {
			break
		}

		return e.complexity.CreateUnleashForTeamPayload.Unleash(childComplexity), true

	case "CreateValkeyPayload.valkey":
		if e.complexity.CreateValkeyPayload.Valkey == nil {
			break
		}

		return e.complexity.CreateValkeyPayload.Valkey(childComplexity), true

	case "CurrentUnitPrices.cpu":
		if e.complexity.CurrentUnitPrices.CPU == nil {
			break
		}

		return e.complexity.CurrentUnitPrices.CPU(childComplexity), true

	case "CurrentUnitPrices.memory":
		if e.complexity.CurrentUnitPrices.Memory == nil {
			break
		}

		return e.complexity.CurrentUnitPrices.Memory(childComplexity), true

	case "DeleteApplicationPayload.success":
		if e.complexity.DeleteApplicationPayload.Success == nil {
			break
		}

		return e.complexity.DeleteApplicationPayload.Success(childComplexity), true

	case "DeleteApplicationPayload.team":
		if e.complexity.DeleteApplicationPayload.Team == nil {
			break
		}

		return e.complexity.DeleteApplicationPayload.Team(childComplexity), true

	case "DeleteJobPayload.success":
		if e.complexity.DeleteJobPayload.Success == nil {
			break
		}

		return e.complexity.DeleteJobPayload.Success(childComplexity), true

	case "DeleteJobPayload.team":
		if e.complexity.DeleteJobPayload.Team == nil {
			break
		}

		return e.complexity.DeleteJobPayload.Team(childComplexity), true

	case "DeleteOpenSearchPayload.openSearchDeleted":
		if e.complexity.DeleteOpenSearchPayload.OpenSearchDeleted == nil {
			break
		}

		return e.complexity.DeleteOpenSearchPayload.OpenSearchDeleted(childComplexity), true

	case "DeleteSecretPayload.secretDeleted":
		if e.complexity.DeleteSecretPayload.SecretDeleted == nil {
			break
		}

		return e.complexity.DeleteSecretPayload.SecretDeleted(childComplexity), true

	case "DeleteServiceAccountPayload.serviceAccountDeleted":
		if e.complexity.DeleteServiceAccountPayload.ServiceAccountDeleted == nil {
			break
		}

		return e.complexity.DeleteServiceAccountPayload.ServiceAccountDeleted(childComplexity), true

	case "DeleteServiceAccountTokenPayload.serviceAccount":
		if e.complexity.DeleteServiceAccountTokenPayload.ServiceAccount == nil {
			break
		}

		return e.complexity.DeleteServiceAccountTokenPayload.ServiceAccount(childComplexity), true

	case "DeleteServiceAccountTokenPayload.serviceAccountTokenDeleted":
		if e.complexity.DeleteServiceAccountTokenPayload.ServiceAccountTokenDeleted == nil {
			break
		}

		return e.complexity.DeleteServiceAccountTokenPayload.ServiceAccountTokenDeleted(childComplexity), true

	case "DeleteValkeyPayload.valkeyDeleted":
		if e.complexity.DeleteValkeyPayload.ValkeyDeleted == nil {
			break
		}

		return e.complexity.DeleteValkeyPayload.ValkeyDeleted(childComplexity), true

	case "Deployment.commitSha":
		if e.complexity.Deployment.CommitSha == nil {
			break
		}

		return e.complexity.Deployment.CommitSha(childComplexity), true

	case "Deployment.createdAt":
		if e.complexity.Deployment.CreatedAt == nil {
			break
		}

		return e.complexity.Deployment.CreatedAt(childComplexity), true

	case "Deployment.deployerUsername":
		if e.complexity.Deployment.DeployerUsername == nil {
			break
		}

		return e.complexity.Deployment.DeployerUsername(childComplexity), true

	case "Deployment.environmentName":
		if e.complexity.Deployment.EnvironmentName == nil {
			break
		}

		return e.complexity.Deployment.EnvironmentName(childComplexity), true

	case "Deployment.id":
		if e.complexity.Deployment.ID == nil {
			break
		}

		return e.complexity.Deployment.ID(childComplexity), true

	case "Deployment.repository":
		if e.complexity.Deployment.Repository == nil {
			break
		}

		return e.complexity.Deployment.Repository(childComplexity), true

	case "Deployment.resources":
		if e.complexity.Deployment.Resources == nil {
			break
		}

		args, err := ec.field_Deployment_resources_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Deployment.Resources(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor)), true

	case "Deployment.statuses":
		if e.complexity.Deployment.Statuses == nil {
			break
		}

		args, err := ec.field_Deployment_statuses_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Deployment.Statuses(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor)), true

	case "Deployment.teamSlug":
		if e.complexity.Deployment.TeamSlug == nil {
			break
		}

		return e.complexity.Deployment.TeamSlug(childComplexity), true

	case "Deployment.triggerUrl":
		if e.complexity.Deployment.TriggerUrl == nil {
			break
		}

		return e.complexity.Deployment.TriggerUrl(childComplexity), true

	case "DeploymentActivityLogEntry.actor":
		if e.complexity.DeploymentActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.DeploymentActivityLogEntry.Actor(childComplexity), true

	case "DeploymentActivityLogEntry.createdAt":
		if e.complexity.DeploymentActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.DeploymentActivityLogEntry.CreatedAt(childComplexity), true

	case "DeploymentActivityLogEntry.data":
		if e.complexity.DeploymentActivityLogEntry.Data == nil {
			break
		}

		return e.complexity.DeploymentActivityLogEntry.Data(childComplexity), true

	case "DeploymentActivityLogEntry.environmentName":
		if e.complexity.DeploymentActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.DeploymentActivityLogEntry.EnvironmentName(childComplexity), true

	case "DeploymentActivityLogEntry.id":
		if e.complexity.DeploymentActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.DeploymentActivityLogEntry.ID(childComplexity), true

	case "DeploymentActivityLogEntry.message":
		if e.complexity.DeploymentActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.DeploymentActivityLogEntry.Message(childComplexity), true

	case "DeploymentActivityLogEntry.resourceName":
		if e.complexity.DeploymentActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.DeploymentActivityLogEntry.ResourceName(childComplexity), true

	case "DeploymentActivityLogEntry.resourceType":
		if e.complexity.DeploymentActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.DeploymentActivityLogEntry.ResourceType(childComplexity), true

	case "DeploymentActivityLogEntry.teamSlug":
		if e.complexity.DeploymentActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.DeploymentActivityLogEntry.TeamSlug(childComplexity), true

	case "DeploymentActivityLogEntryData.triggerURL":
		if e.complexity.DeploymentActivityLogEntryData.TriggerURL == nil {
			break
		}

		return e.complexity.DeploymentActivityLogEntryData.TriggerURL(childComplexity), true

	case "DeploymentConnection.edges":
		if e.complexity.DeploymentConnection.Edges == nil {
			break
		}

		return e.complexity.DeploymentConnection.Edges(childComplexity), true

	case "DeploymentConnection.nodes":
		if e.complexity.DeploymentConnection.Nodes == nil {
			break
		}

		return e.complexity.DeploymentConnection.Nodes(childComplexity), true

	case "DeploymentConnection.pageInfo":
		if e.complexity.DeploymentConnection.PageInfo == nil {
			break
		}

		return e.complexity.DeploymentConnection.PageInfo(childComplexity), true

	case "DeploymentEdge.cursor":
		if e.complexity.DeploymentEdge.Cursor == nil {
			break
		}

		return e.complexity.DeploymentEdge.Cursor(childComplexity), true

	case "DeploymentEdge.node":
		if e.complexity.DeploymentEdge.Node == nil {
			break
		}

		return e.complexity.DeploymentEdge.Node(childComplexity), true

	case "DeploymentKey.created":
		if e.complexity.DeploymentKey.Created == nil {
			break
		}

		return e.complexity.DeploymentKey.Created(childComplexity), true

	case "DeploymentKey.expires":
		if e.complexity.DeploymentKey.Expires == nil {
			break
		}

		return e.complexity.DeploymentKey.Expires(childComplexity), true

	case "DeploymentKey.id":
		if e.complexity.DeploymentKey.ID == nil {
			break
		}

		return e.complexity.DeploymentKey.ID(childComplexity), true

	case "DeploymentKey.key":
		if e.complexity.DeploymentKey.Key == nil {
			break
		}

		return e.complexity.DeploymentKey.Key(childComplexity), true

	case "DeploymentResource.id":
		if e.complexity.DeploymentResource.ID == nil {
			break
		}

		return e.complexity.DeploymentResource.ID(childComplexity), true

	case "DeploymentResource.kind":
		if e.complexity.DeploymentResource.Kind == nil {
			break
		}

		return e.complexity.DeploymentResource.Kind(childComplexity), true

	case "DeploymentResource.name":
		if e.complexity.DeploymentResource.Name == nil {
			break
		}

		return e.complexity.DeploymentResource.Name(childComplexity), true

	case "DeploymentResourceConnection.edges":
		if e.complexity.DeploymentResourceConnection.Edges == nil {
			break
		}

		return e.complexity.DeploymentResourceConnection.Edges(childComplexity), true

	case "DeploymentResourceConnection.nodes":
		if e.complexity.DeploymentResourceConnection.Nodes == nil {
			break
		}

		return e.complexity.DeploymentResourceConnection.Nodes(childComplexity), true

	case "DeploymentResourceConnection.pageInfo":
		if e.complexity.DeploymentResourceConnection.PageInfo == nil {
			break
		}

		return e.complexity.DeploymentResourceConnection.PageInfo(childComplexity), true

	case "DeploymentResourceEdge.cursor":
		if e.complexity.DeploymentResourceEdge.Cursor == nil {
			break
		}

		return e.complexity.DeploymentResourceEdge.Cursor(childComplexity), true

	case "DeploymentResourceEdge.node":
		if e.complexity.DeploymentResourceEdge.Node == nil {
			break
		}

		return e.complexity.DeploymentResourceEdge.Node(childComplexity), true

	case "DeploymentStatus.createdAt":
		if e.complexity.DeploymentStatus.CreatedAt == nil {
			break
		}

		return e.complexity.DeploymentStatus.CreatedAt(childComplexity), true

	case "DeploymentStatus.id":
		if e.complexity.DeploymentStatus.ID == nil {
			break
		}

		return e.complexity.DeploymentStatus.ID(childComplexity), true

	case "DeploymentStatus.message":
		if e.complexity.DeploymentStatus.Message == nil {
			break
		}

		return e.complexity.DeploymentStatus.Message(childComplexity), true

	case "DeploymentStatus.state":
		if e.complexity.DeploymentStatus.State == nil {
			break
		}

		return e.complexity.DeploymentStatus.State(childComplexity), true

	case "DeploymentStatusConnection.edges":
		if e.complexity.DeploymentStatusConnection.Edges == nil {
			break
		}

		return e.complexity.DeploymentStatusConnection.Edges(childComplexity), true

	case "DeploymentStatusConnection.nodes":
		if e.complexity.DeploymentStatusConnection.Nodes == nil {
			break
		}

		return e.complexity.DeploymentStatusConnection.Nodes(childComplexity), true

	case "DeploymentStatusConnection.pageInfo":
		if e.complexity.DeploymentStatusConnection.PageInfo == nil {
			break
		}

		return e.complexity.DeploymentStatusConnection.PageInfo(childComplexity), true

	case "DeploymentStatusEdge.cursor":
		if e.complexity.DeploymentStatusEdge.Cursor == nil {
			break
		}

		return e.complexity.DeploymentStatusEdge.Cursor(childComplexity), true

	case "DeploymentStatusEdge.node":
		if e.complexity.DeploymentStatusEdge.Node == nil {
			break
		}

		return e.complexity.DeploymentStatusEdge.Node(childComplexity), true

	case "DeprecatedIngressIssue.application":
		if e.complexity.DeprecatedIngressIssue.Application == nil {
			break
		}

		return e.complexity.DeprecatedIngressIssue.Application(childComplexity), true

	case "DeprecatedIngressIssue.id":
		if e.complexity.DeprecatedIngressIssue.ID == nil {
			break
		}

		return e.complexity.DeprecatedIngressIssue.ID(childComplexity), true

	case "DeprecatedIngressIssue.ingresses":
		if e.complexity.DeprecatedIngressIssue.Ingresses == nil {
			break
		}

		return e.complexity.DeprecatedIngressIssue.Ingresses(childComplexity), true

	case "DeprecatedIngressIssue.message":
		if e.complexity.DeprecatedIngressIssue.Message == nil {
			break
		}

		return e.complexity.DeprecatedIngressIssue.Message(childComplexity), true

	case "DeprecatedIngressIssue.severity":
		if e.complexity.DeprecatedIngressIssue.Severity == nil {
			break
		}

		return e.complexity.DeprecatedIngressIssue.Severity(childComplexity), true

	case "DeprecatedIngressIssue.teamEnvironment":
		if e.complexity.DeprecatedIngressIssue.TeamEnvironment == nil {
			break
		}

		return e.complexity.DeprecatedIngressIssue.TeamEnvironment(childComplexity), true

	case "DeprecatedRegistryIssue.id":
		if e.complexity.DeprecatedRegistryIssue.ID == nil {
			break
		}

		return e.complexity.DeprecatedRegistryIssue.ID(childComplexity), true

	case "DeprecatedRegistryIssue.message":
		if e.complexity.DeprecatedRegistryIssue.Message == nil {
			break
		}

		return e.complexity.DeprecatedRegistryIssue.Message(childComplexity), true

	case "DeprecatedRegistryIssue.severity":
		if e.complexity.DeprecatedRegistryIssue.Severity == nil {
			break
		}

		return e.complexity.DeprecatedRegistryIssue.Severity(childComplexity), true

	case "DeprecatedRegistryIssue.teamEnvironment":
		if e.complexity.DeprecatedRegistryIssue.TeamEnvironment == nil {
			break
		}

		return e.complexity.DeprecatedRegistryIssue.TeamEnvironment(childComplexity), true

	case "DeprecatedRegistryIssue.workload":
		if e.complexity.DeprecatedRegistryIssue.Workload == nil {
			break
		}

		return e.complexity.DeprecatedRegistryIssue.Workload(childComplexity), true

	case "EntraIDAuthIntegration.name":
		if e.complexity.EntraIDAuthIntegration.Name == nil {
			break
		}

		return e.complexity.EntraIDAuthIntegration.Name(childComplexity), true

	case "Environment.id":
		if e.complexity.Environment.ID == nil {
			break
		}

		return e.complexity.Environment.ID(childComplexity), true

	case "Environment.name":
		if e.complexity.Environment.Name == nil {
			break
		}

		return e.complexity.Environment.Name(childComplexity), true

	case "Environment.workloads":
		if e.complexity.Environment.Workloads == nil {
			break
		}

		args, err := ec.field_Environment_workloads_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Environment.Workloads(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["orderBy"].(*workload.EnvironmentWorkloadOrder)), true

	case "EnvironmentConnection.edges":
		if e.complexity.EnvironmentConnection.Edges == nil {
			break
		}

		return e.complexity.EnvironmentConnection.Edges(childComplexity), true

	case "EnvironmentConnection.nodes":
		if e.complexity.EnvironmentConnection.Nodes == nil {
			break
		}

		return e.complexity.EnvironmentConnection.Nodes(childComplexity), true

	case "EnvironmentConnection.pageInfo":
		if e.complexity.EnvironmentConnection.PageInfo == nil {
			break
		}

		return e.complexity.EnvironmentConnection.PageInfo(childComplexity), true

	case "EnvironmentEdge.cursor":
		if e.complexity.EnvironmentEdge.Cursor == nil {
			break
		}

		return e.complexity.EnvironmentEdge.Cursor(childComplexity), true

	case "EnvironmentEdge.node":
		if e.complexity.EnvironmentEdge.Node == nil {
			break
		}

		return e.complexity.EnvironmentEdge.Node(childComplexity), true

	case "ExternalNetworkPolicyHost.ports":
		if e.complexity.ExternalNetworkPolicyHost.Ports == nil {
			break
		}

		return e.complexity.ExternalNetworkPolicyHost.Ports(childComplexity), true

	case "ExternalNetworkPolicyHost.target":
		if e.complexity.ExternalNetworkPolicyHost.Target == nil {
			break
		}

		return e.complexity.ExternalNetworkPolicyHost.Target(childComplexity), true

	case "ExternalNetworkPolicyIpv4.ports":
		if e.complexity.ExternalNetworkPolicyIpv4.Ports == nil {
			break
		}

		return e.complexity.ExternalNetworkPolicyIpv4.Ports(childComplexity), true

	case "ExternalNetworkPolicyIpv4.target":
		if e.complexity.ExternalNetworkPolicyIpv4.Target == nil {
			break
		}

		return e.complexity.ExternalNetworkPolicyIpv4.Target(childComplexity), true

	case "FailedJobRunsIssue.id":
		if e.complexity.FailedJobRunsIssue.ID == nil {
			break
		}

		return e.complexity.FailedJobRunsIssue.ID(childComplexity), true

	case "FailedJobRunsIssue.job":
		if e.complexity.FailedJobRunsIssue.Job == nil {
			break
		}

		return e.complexity.FailedJobRunsIssue.Job(childComplexity), true

	case "FailedJobRunsIssue.message":
		if e.complexity.FailedJobRunsIssue.Message == nil {
			break
		}

		return e.complexity.FailedJobRunsIssue.Message(childComplexity), true

	case "FailedJobRunsIssue.severity":
		if e.complexity.FailedJobRunsIssue.Severity == nil {
			break
		}

		return e.complexity.FailedJobRunsIssue.Severity(childComplexity), true

	case "FailedJobRunsIssue.teamEnvironment":
		if e.complexity.FailedJobRunsIssue.TeamEnvironment == nil {
			break
		}

		return e.complexity.FailedJobRunsIssue.TeamEnvironment(childComplexity), true

	case "FailedSynchronizationIssue.id":
		if e.complexity.FailedSynchronizationIssue.ID == nil {
			break
		}

		return e.complexity.FailedSynchronizationIssue.ID(childComplexity), true

	case "FailedSynchronizationIssue.message":
		if e.complexity.FailedSynchronizationIssue.Message == nil {
			break
		}

		return e.complexity.FailedSynchronizationIssue.Message(childComplexity), true

	case "FailedSynchronizationIssue.severity":
		if e.complexity.FailedSynchronizationIssue.Severity == nil {
			break
		}

		return e.complexity.FailedSynchronizationIssue.Severity(childComplexity), true

	case "FailedSynchronizationIssue.teamEnvironment":
		if e.complexity.FailedSynchronizationIssue.TeamEnvironment == nil {
			break
		}

		return e.complexity.FailedSynchronizationIssue.TeamEnvironment(childComplexity), true

	case "FailedSynchronizationIssue.workload":
		if e.complexity.FailedSynchronizationIssue.Workload == nil {
			break
		}

		return e.complexity.FailedSynchronizationIssue.Workload(childComplexity), true

	case "FeatureKafka.enabled":
		if e.complexity.FeatureKafka.Enabled == nil {
			break
		}

		return e.complexity.FeatureKafka.Enabled(childComplexity), true

	case "FeatureKafka.id":
		if e.complexity.FeatureKafka.ID == nil {
			break
		}

		return e.complexity.FeatureKafka.ID(childComplexity), true

	case "FeatureOpenSearch.enabled":
		if e.complexity.FeatureOpenSearch.Enabled == nil {
			break
		}

		return e.complexity.FeatureOpenSearch.Enabled(childComplexity), true

	case "FeatureOpenSearch.id":
		if e.complexity.FeatureOpenSearch.ID == nil {
			break
		}

		return e.complexity.FeatureOpenSearch.ID(childComplexity), true

	case "FeatureUnleash.enabled":
		if e.complexity.FeatureUnleash.Enabled == nil {
			break
		}

		return e.complexity.FeatureUnleash.Enabled(childComplexity), true

	case "FeatureUnleash.id":
		if e.complexity.FeatureUnleash.ID == nil {
			break
		}

		return e.complexity.FeatureUnleash.ID(childComplexity), true

	case "FeatureValkey.enabled":
		if e.complexity.FeatureValkey.Enabled == nil {
			break
		}

		return e.complexity.FeatureValkey.Enabled(childComplexity), true

	case "FeatureValkey.id":
		if e.complexity.FeatureValkey.ID == nil {
			break
		}

		return e.complexity.FeatureValkey.ID(childComplexity), true

	case "Features.id":
		if e.complexity.Features.ID == nil {
			break
		}

		return e.complexity.Features.ID(childComplexity), true

	case "Features.kafka":
		if e.complexity.Features.Kafka == nil {
			break
		}

		return e.complexity.Features.Kafka(childComplexity), true

	case "Features.openSearch":
		if e.complexity.Features.OpenSearch == nil {
			break
		}

		return e.complexity.Features.OpenSearch(childComplexity), true

	case "Features.unleash":
		if e.complexity.Features.Unleash == nil {
			break
		}

		return e.complexity.Features.Unleash(childComplexity), true

	case "Features.valkey":
		if e.complexity.Features.Valkey == nil {
			break
		}

		return e.complexity.Features.Valkey(childComplexity), true

	case "IDPortenAuthIntegration.name":
		if e.complexity.IDPortenAuthIntegration.Name == nil {
			break
		}

		return e.complexity.IDPortenAuthIntegration.Name(childComplexity), true

	case "ImageVulnerability.description":
		if e.complexity.ImageVulnerability.Description == nil {
			break
		}

		return e.complexity.ImageVulnerability.Description(childComplexity), true

	case "ImageVulnerability.id":
		if e.complexity.ImageVulnerability.ID == nil {
			break
		}

		return e.complexity.ImageVulnerability.ID(childComplexity), true

	case "ImageVulnerability.identifier":
		if e.complexity.ImageVulnerability.Identifier == nil {
			break
		}

		return e.complexity.ImageVulnerability.Identifier(childComplexity), true

	case "ImageVulnerability.package":
		if e.complexity.ImageVulnerability.Package == nil {
			break
		}

		return e.complexity.ImageVulnerability.Package(childComplexity), true

	case "ImageVulnerability.severity":
		if e.complexity.ImageVulnerability.Severity == nil {
			break
		}

		return e.complexity.ImageVulnerability.Severity(childComplexity), true

	case "ImageVulnerability.severitySince":
		if e.complexity.ImageVulnerability.SeveritySince == nil {
			break
		}

		return e.complexity.ImageVulnerability.SeveritySince(childComplexity), true

	case "ImageVulnerability.suppression":
		if e.complexity.ImageVulnerability.Suppression == nil {
			break
		}

		return e.complexity.ImageVulnerability.Suppression(childComplexity), true

	case "ImageVulnerability.vulnerabilityDetailsLink":
		if e.complexity.ImageVulnerability.VulnerabilityDetailsLink == nil {
			break
		}

		return e.complexity.ImageVulnerability.VulnerabilityDetailsLink(childComplexity), true

	case "ImageVulnerabilityConnection.edges":
		if e.complexity.ImageVulnerabilityConnection.Edges == nil {
			break
		}

		return e.complexity.ImageVulnerabilityConnection.Edges(childComplexity), true

	case "ImageVulnerabilityConnection.nodes":
		if e.complexity.ImageVulnerabilityConnection.Nodes == nil {
			break
		}

		return e.complexity.ImageVulnerabilityConnection.Nodes(childComplexity), true

	case "ImageVulnerabilityConnection.pageInfo":
		if e.complexity.ImageVulnerabilityConnection.PageInfo == nil {
			break
		}

		return e.complexity.ImageVulnerabilityConnection.PageInfo(childComplexity), true

	case "ImageVulnerabilityEdge.cursor":
		if e.complexity.ImageVulnerabilityEdge.Cursor == nil {
			break
		}

		return e.complexity.ImageVulnerabilityEdge.Cursor(childComplexity), true

	case "ImageVulnerabilityEdge.node":
		if e.complexity.ImageVulnerabilityEdge.Node == nil {
			break
		}

		return e.complexity.ImageVulnerabilityEdge.Node(childComplexity), true

	case "ImageVulnerabilityHistory.samples":
		if e.complexity.ImageVulnerabilityHistory.Samples == nil {
			break
		}

		return e.complexity.ImageVulnerabilityHistory.Samples(childComplexity), true

	case "ImageVulnerabilitySample.date":
		if e.complexity.ImageVulnerabilitySample.Date == nil {
			break
		}

		return e.complexity.ImageVulnerabilitySample.Date(childComplexity), true

	case "ImageVulnerabilitySample.summary":
		if e.complexity.ImageVulnerabilitySample.Summary == nil {
			break
		}

		return e.complexity.ImageVulnerabilitySample.Summary(childComplexity), true

	case "ImageVulnerabilitySummary.critical":
		if e.complexity.ImageVulnerabilitySummary.Critical == nil {
			break
		}

		return e.complexity.ImageVulnerabilitySummary.Critical(childComplexity), true

	case "ImageVulnerabilitySummary.high":
		if e.complexity.ImageVulnerabilitySummary.High == nil {
			break
		}

		return e.complexity.ImageVulnerabilitySummary.High(childComplexity), true

	case "ImageVulnerabilitySummary.lastUpdated":
		if e.complexity.ImageVulnerabilitySummary.LastUpdated == nil {
			break
		}

		return e.complexity.ImageVulnerabilitySummary.LastUpdated(childComplexity), true

	case "ImageVulnerabilitySummary.low":
		if e.complexity.ImageVulnerabilitySummary.Low == nil {
			break
		}

		return e.complexity.ImageVulnerabilitySummary.Low(childComplexity), true

	case "ImageVulnerabilitySummary.medium":
		if e.complexity.ImageVulnerabilitySummary.Medium == nil {
			break
		}

		return e.complexity.ImageVulnerabilitySummary.Medium(childComplexity), true

	case "ImageVulnerabilitySummary.riskScore":
		if e.complexity.ImageVulnerabilitySummary.RiskScore == nil {
			break
		}

		return e.complexity.ImageVulnerabilitySummary.RiskScore(childComplexity), true

	case "ImageVulnerabilitySummary.total":
		if e.complexity.ImageVulnerabilitySummary.Total == nil {
			break
		}

		return e.complexity.ImageVulnerabilitySummary.Total(childComplexity), true

	case "ImageVulnerabilitySummary.unassigned":
		if e.complexity.ImageVulnerabilitySummary.Unassigned == nil {
			break
		}

		return e.complexity.ImageVulnerabilitySummary.Unassigned(childComplexity), true

	case "ImageVulnerabilitySuppression.reason":
		if e.complexity.ImageVulnerabilitySuppression.Reason == nil {
			break
		}

		return e.complexity.ImageVulnerabilitySuppression.Reason(childComplexity), true

	case "ImageVulnerabilitySuppression.state":
		if e.complexity.ImageVulnerabilitySuppression.State == nil {
			break
		}

		return e.complexity.ImageVulnerabilitySuppression.State(childComplexity), true

	case "InboundNetworkPolicy.rules":
		if e.complexity.InboundNetworkPolicy.Rules == nil {
			break
		}

		return e.complexity.InboundNetworkPolicy.Rules(childComplexity), true

	case "Ingress.metrics":
		if e.complexity.Ingress.Metrics == nil {
			break
		}

		return e.complexity.Ingress.Metrics(childComplexity), true

	case "Ingress.type":
		if e.complexity.Ingress.Type == nil {
			break
		}

		return e.complexity.Ingress.Type(childComplexity), true

	case "Ingress.url":
		if e.complexity.Ingress.URL == nil {
			break
		}

		return e.complexity.Ingress.URL(childComplexity), true

	case "IngressMetricSample.timestamp":
		if e.complexity.IngressMetricSample.Timestamp == nil {
			break
		}

		return e.complexity.IngressMetricSample.Timestamp(childComplexity), true

	case "IngressMetricSample.value":
		if e.complexity.IngressMetricSample.Value == nil {
			break
		}

		return e.complexity.IngressMetricSample.Value(childComplexity), true

	case "IngressMetrics.errorsPerSecond":
		if e.complexity.IngressMetrics.ErrorsPerSecond == nil {
			break
		}

		return e.complexity.IngressMetrics.ErrorsPerSecond(childComplexity), true

	case "IngressMetrics.requestsPerSecond":
		if e.complexity.IngressMetrics.RequestsPerSecond == nil {
			break
		}

		return e.complexity.IngressMetrics.RequestsPerSecond(childComplexity), true

	case "IngressMetrics.series":
		if e.complexity.IngressMetrics.Series == nil {
			break
		}

		args, err := ec.field_IngressMetrics_series_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.IngressMetrics.Series(childComplexity, args["input"].(application.IngressMetricsInput)), true

	case "InvalidSpecIssue.id":
		if e.complexity.InvalidSpecIssue.ID == nil {
			break
		}

		return e.complexity.InvalidSpecIssue.ID(childComplexity), true

	case "InvalidSpecIssue.message":
		if e.complexity.InvalidSpecIssue.Message == nil {
			break
		}

		return e.complexity.InvalidSpecIssue.Message(childComplexity), true

	case "InvalidSpecIssue.severity":
		if e.complexity.InvalidSpecIssue.Severity == nil {
			break
		}

		return e.complexity.InvalidSpecIssue.Severity(childComplexity), true

	case "InvalidSpecIssue.teamEnvironment":
		if e.complexity.InvalidSpecIssue.TeamEnvironment == nil {
			break
		}

		return e.complexity.InvalidSpecIssue.TeamEnvironment(childComplexity), true

	case "InvalidSpecIssue.workload":
		if e.complexity.InvalidSpecIssue.Workload == nil {
			break
		}

		return e.complexity.InvalidSpecIssue.Workload(childComplexity), true

	case "IssueConnection.edges":
		if e.complexity.IssueConnection.Edges == nil {
			break
		}

		return e.complexity.IssueConnection.Edges(childComplexity), true

	case "IssueConnection.nodes":
		if e.complexity.IssueConnection.Nodes == nil {
			break
		}

		return e.complexity.IssueConnection.Nodes(childComplexity), true

	case "IssueConnection.pageInfo":
		if e.complexity.IssueConnection.PageInfo == nil {
			break
		}

		return e.complexity.IssueConnection.PageInfo(childComplexity), true

	case "IssueEdge.cursor":
		if e.complexity.IssueEdge.Cursor == nil {
			break
		}

		return e.complexity.IssueEdge.Cursor(childComplexity), true

	case "IssueEdge.node":
		if e.complexity.IssueEdge.Node == nil {
			break
		}

		return e.complexity.IssueEdge.Node(childComplexity), true

	case "Job.activityLog":
		if e.complexity.Job.ActivityLog == nil {
			break
		}

		args, err := ec.field_Job_activityLog_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Job.ActivityLog(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["filter"].(*activitylog.ActivityLogFilter)), true

	case "Job.authIntegrations":
		if e.complexity.Job.AuthIntegrations == nil {
			break
		}

		return e.complexity.Job.AuthIntegrations(childComplexity), true

	case "Job.bigQueryDatasets":
		if e.complexity.Job.BigQueryDatasets == nil {
			break
		}

		args, err := ec.field_Job_bigQueryDatasets_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Job.BigQueryDatasets(childComplexity, args["orderBy"].(*bigquery.BigQueryDatasetOrder)), true

	case "Job.buckets":
		if e.complexity.Job.Buckets == nil {
			break
		}

		args, err := ec.field_Job_buckets_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Job.Buckets(childComplexity, args["orderBy"].(*bucket.BucketOrder)), true

	case "Job.cost":
		if e.complexity.Job.Cost == nil {
			break
		}

		return e.complexity.Job.Cost(childComplexity), true

	case "Job.deletionStartedAt":
		if e.complexity.Job.DeletionStartedAt == nil {
			break
		}

		return e.complexity.Job.DeletionStartedAt(childComplexity), true

	case "Job.deployments":
		if e.complexity.Job.Deployments == nil {
			break
		}

		args, err := ec.field_Job_deployments_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Job.Deployments(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor)), true

	case "Job.environment":
		if e.complexity.Job.Environment == nil {
			break
		}

		return e.complexity.Job.Environment(childComplexity), true

	case "Job.id":
		if e.complexity.Job.ID == nil {
			break
		}

		return e.complexity.Job.ID(childComplexity), true

	case "Job.image":
		if e.complexity.Job.Image == nil {
			break
		}

		return e.complexity.Job.Image(childComplexity), true

	case "Job.imageVulnerabilityHistory":
		if e.complexity.Job.ImageVulnerabilityHistory == nil {
			break
		}

		args, err := ec.field_Job_imageVulnerabilityHistory_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Job.ImageVulnerabilityHistory(childComplexity, args["from"].(scalar.Date)), true

	case "Job.issues":
		if e.complexity.Job.Issues == nil {
			break
		}

		args, err := ec.field_Job_issues_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Job.Issues(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["orderBy"].(*issue.IssueOrder), args["filter"].(*issue.ResourceIssueFilter)), true

	case "Job.kafkaTopicAcls":
		if e.complexity.Job.KafkaTopicAcls == nil {
			break
		}

		args, err := ec.field_Job_kafkaTopicAcls_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Job.KafkaTopicAcls(childComplexity, args["orderBy"].(*kafkatopic.KafkaTopicACLOrder)), true

	case "Job.logDestinations":
		if e.complexity.Job.LogDestinations == nil {
			break
		}

		return e.complexity.Job.LogDestinations(childComplexity), true

	case "Job.manifest":
		if e.complexity.Job.Manifest == nil {
			break
		}

		return e.complexity.Job.Manifest(childComplexity), true

	case "Job.name":
		if e.complexity.Job.Name == nil {
			break
		}

		return e.complexity.Job.Name(childComplexity), true

	case "Job.networkPolicy":
		if e.complexity.Job.NetworkPolicy == nil {
			break
		}

		return e.complexity.Job.NetworkPolicy(childComplexity), true

	case "Job.openSearch":
		if e.complexity.Job.OpenSearch == nil {
			break
		}

		return e.complexity.Job.OpenSearch(childComplexity), true

	case "Job.resources":
		if e.complexity.Job.Resources == nil {
			break
		}

		return e.complexity.Job.Resources(childComplexity), true

	case "Job.runs":
		if e.complexity.Job.Runs == nil {
			break
		}

		args, err := ec.field_Job_runs_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Job.Runs(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor)), true

	case "Job.sqlInstances":
		if e.complexity.Job.SQLInstances == nil {
			break
		}

		args, err := ec.field_Job_sqlInstances_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Job.SQLInstances(childComplexity, args["orderBy"].(*sqlinstance.SQLInstanceOrder)), true

	case "Job.schedule":
		if e.complexity.Job.Schedule == nil {
			break
		}

		return e.complexity.Job.Schedule(childComplexity), true

	case "Job.secrets":
		if e.complexity.Job.Secrets == nil {
			break
		}

		args, err := ec.field_Job_secrets_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Job.Secrets(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor)), true

	case "Job.state":
		if e.complexity.Job.State == nil {
			break
		}

		return e.complexity.Job.State(childComplexity), true

	case "Job.team":
		if e.complexity.Job.Team == nil {
			break
		}

		return e.complexity.Job.Team(childComplexity), true

	case "Job.teamEnvironment":
		if e.complexity.Job.TeamEnvironment == nil {
			break
		}

		return e.complexity.Job.TeamEnvironment(childComplexity), true

	case "Job.valkeys":
		if e.complexity.Job.Valkeys == nil {
			break
		}

		args, err := ec.field_Job_valkeys_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Job.Valkeys(childComplexity, args["orderBy"].(*valkey.ValkeyOrder)), true

	case "Job.vulnerabilityFixHistory":
		if e.complexity.Job.VulnerabilityFixHistory == nil {
			break
		}

		args, err := ec.field_Job_vulnerabilityFixHistory_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Job.VulnerabilityFixHistory(childComplexity, args["from"].(scalar.Date)), true

	case "JobConnection.edges":
		if e.complexity.JobConnection.Edges == nil {
			break
		}

		return e.complexity.JobConnection.Edges(childComplexity), true

	case "JobConnection.nodes":
		if e.complexity.JobConnection.Nodes == nil {
			break
		}

		return e.complexity.JobConnection.Nodes(childComplexity), true

	case "JobConnection.pageInfo":
		if e.complexity.JobConnection.PageInfo == nil {
			break
		}

		return e.complexity.JobConnection.PageInfo(childComplexity), true

	case "JobDeletedActivityLogEntry.actor":
		if e.complexity.JobDeletedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.JobDeletedActivityLogEntry.Actor(childComplexity), true

	case "JobDeletedActivityLogEntry.createdAt":
		if e.complexity.JobDeletedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.JobDeletedActivityLogEntry.CreatedAt(childComplexity), true

	case "JobDeletedActivityLogEntry.environmentName":
		if e.complexity.JobDeletedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.JobDeletedActivityLogEntry.EnvironmentName(childComplexity), true

	case "JobDeletedActivityLogEntry.id":
		if e.complexity.JobDeletedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.JobDeletedActivityLogEntry.ID(childComplexity), true

	case "JobDeletedActivityLogEntry.message":
		if e.complexity.JobDeletedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.JobDeletedActivityLogEntry.Message(childComplexity), true

	case "JobDeletedActivityLogEntry.resourceName":
		if e.complexity.JobDeletedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.JobDeletedActivityLogEntry.ResourceName(childComplexity), true

	case "JobDeletedActivityLogEntry.resourceType":
		if e.complexity.JobDeletedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.JobDeletedActivityLogEntry.ResourceType(childComplexity), true

	case "JobDeletedActivityLogEntry.teamSlug":
		if e.complexity.JobDeletedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.JobDeletedActivityLogEntry.TeamSlug(childComplexity), true

	case "JobEdge.cursor":
		if e.complexity.JobEdge.Cursor == nil {
			break
		}

		return e.complexity.JobEdge.Cursor(childComplexity), true

	case "JobEdge.node":
		if e.complexity.JobEdge.Node == nil {
			break
		}

		return e.complexity.JobEdge.Node(childComplexity), true

	case "JobManifest.content":
		if e.complexity.JobManifest.Content == nil {
			break
		}

		return e.complexity.JobManifest.Content(childComplexity), true

	case "JobResources.limits":
		if e.complexity.JobResources.Limits == nil {
			break
		}

		return e.complexity.JobResources.Limits(childComplexity), true

	case "JobResources.requests":
		if e.complexity.JobResources.Requests == nil {
			break
		}

		return e.complexity.JobResources.Requests(childComplexity), true

	case "JobRun.completionTime":
		if e.complexity.JobRun.CompletionTime == nil {
			break
		}

		return e.complexity.JobRun.CompletionTime(childComplexity), true

	case "JobRun.duration":
		if e.complexity.JobRun.Duration == nil {
			break
		}

		return e.complexity.JobRun.Duration(childComplexity), true

	case "JobRun.id":
		if e.complexity.JobRun.ID == nil {
			break
		}

		return e.complexity.JobRun.ID(childComplexity), true

	case "JobRun.image":
		if e.complexity.JobRun.Image == nil {
			break
		}

		return e.complexity.JobRun.Image(childComplexity), true

	case "JobRun.instances":
		if e.complexity.JobRun.Instances == nil {
			break
		}

		args, err := ec.field_JobRun_instances_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.JobRun.Instances(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor)), true

	case "JobRun.name":
		if e.complexity.JobRun.Name == nil {
			break
		}

		return e.complexity.JobRun.Name(childComplexity), true

	case "JobRun.startTime":
		if e.complexity.JobRun.StartTime == nil {
			break
		}

		return e.complexity.JobRun.StartTime(childComplexity), true

	case "JobRun.status":
		if e.complexity.JobRun.Status == nil {
			break
		}

		return e.complexity.JobRun.Status(childComplexity), true

	case "JobRun.trigger":
		if e.complexity.JobRun.Trigger == nil {
			break
		}

		return e.complexity.JobRun.Trigger(childComplexity), true

	case "JobRunConnection.edges":
		if e.complexity.JobRunConnection.Edges == nil {
			break
		}

		return e.complexity.JobRunConnection.Edges(childComplexity), true

	case "JobRunConnection.nodes":
		if e.complexity.JobRunConnection.Nodes == nil {
			break
		}

		return e.complexity.JobRunConnection.Nodes(childComplexity), true

	case "JobRunConnection.pageInfo":
		if e.complexity.JobRunConnection.PageInfo == nil {
			break
		}

		return e.complexity.JobRunConnection.PageInfo(childComplexity), true

	case "JobRunEdge.cursor":
		if e.complexity.JobRunEdge.Cursor == nil {
			break
		}

		return e.complexity.JobRunEdge.Cursor(childComplexity), true

	case "JobRunEdge.node":
		if e.complexity.JobRunEdge.Node == nil {
			break
		}

		return e.complexity.JobRunEdge.Node(childComplexity), true

	case "JobRunInstance.id":
		if e.complexity.JobRunInstance.ID == nil {
			break
		}

		return e.complexity.JobRunInstance.ID(childComplexity), true

	case "JobRunInstance.name":
		if e.complexity.JobRunInstance.Name == nil {
			break
		}

		return e.complexity.JobRunInstance.Name(childComplexity), true

	case "JobRunInstanceConnection.edges":
		if e.complexity.JobRunInstanceConnection.Edges == nil {
			break
		}

		return e.complexity.JobRunInstanceConnection.Edges(childComplexity), true

	case "JobRunInstanceConnection.nodes":
		if e.complexity.JobRunInstanceConnection.Nodes == nil {
			break
		}

		return e.complexity.JobRunInstanceConnection.Nodes(childComplexity), true

	case "JobRunInstanceConnection.pageInfo":
		if e.complexity.JobRunInstanceConnection.PageInfo == nil {
			break
		}

		return e.complexity.JobRunInstanceConnection.PageInfo(childComplexity), true

	case "JobRunInstanceEdge.cursor":
		if e.complexity.JobRunInstanceEdge.Cursor == nil {
			break
		}

		return e.complexity.JobRunInstanceEdge.Cursor(childComplexity), true

	case "JobRunInstanceEdge.node":
		if e.complexity.JobRunInstanceEdge.Node == nil {
			break
		}

		return e.complexity.JobRunInstanceEdge.Node(childComplexity), true

	case "JobRunStatus.message":
		if e.complexity.JobRunStatus.Message == nil {
			break
		}

		return e.complexity.JobRunStatus.Message(childComplexity), true

	case "JobRunStatus.state":
		if e.complexity.JobRunStatus.State == nil {
			break
		}

		return e.complexity.JobRunStatus.State(childComplexity), true

	case "JobRunTrigger.actor":
		if e.complexity.JobRunTrigger.Actor == nil {
			break
		}

		return e.complexity.JobRunTrigger.Actor(childComplexity), true

	case "JobRunTrigger.type":
		if e.complexity.JobRunTrigger.Type == nil {
			break
		}

		return e.complexity.JobRunTrigger.Type(childComplexity), true

	case "JobSchedule.expression":
		if e.complexity.JobSchedule.Expression == nil {
			break
		}

		return e.complexity.JobSchedule.Expression(childComplexity), true

	case "JobSchedule.timeZone":
		if e.complexity.JobSchedule.TimeZone == nil {
			break
		}

		return e.complexity.JobSchedule.TimeZone(childComplexity), true

	case "JobTriggeredActivityLogEntry.actor":
		if e.complexity.JobTriggeredActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.JobTriggeredActivityLogEntry.Actor(childComplexity), true

	case "JobTriggeredActivityLogEntry.createdAt":
		if e.complexity.JobTriggeredActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.JobTriggeredActivityLogEntry.CreatedAt(childComplexity), true

	case "JobTriggeredActivityLogEntry.environmentName":
		if e.complexity.JobTriggeredActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.JobTriggeredActivityLogEntry.EnvironmentName(childComplexity), true

	case "JobTriggeredActivityLogEntry.id":
		if e.complexity.JobTriggeredActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.JobTriggeredActivityLogEntry.ID(childComplexity), true

	case "JobTriggeredActivityLogEntry.message":
		if e.complexity.JobTriggeredActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.JobTriggeredActivityLogEntry.Message(childComplexity), true

	case "JobTriggeredActivityLogEntry.resourceName":
		if e.complexity.JobTriggeredActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.JobTriggeredActivityLogEntry.ResourceName(childComplexity), true

	case "JobTriggeredActivityLogEntry.resourceType":
		if e.complexity.JobTriggeredActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.JobTriggeredActivityLogEntry.ResourceType(childComplexity), true

	case "JobTriggeredActivityLogEntry.teamSlug":
		if e.complexity.JobTriggeredActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.JobTriggeredActivityLogEntry.TeamSlug(childComplexity), true

	case "KafkaLagScalingStrategy.consumerGroup":
		if e.complexity.KafkaLagScalingStrategy.ConsumerGroup == nil {
			break
		}

		return e.complexity.KafkaLagScalingStrategy.ConsumerGroup(childComplexity), true

	case "KafkaLagScalingStrategy.threshold":
		if e.complexity.KafkaLagScalingStrategy.Threshold == nil {
			break
		}

		return e.complexity.KafkaLagScalingStrategy.Threshold(childComplexity), true

	case "KafkaLagScalingStrategy.topicName":
		if e.complexity.KafkaLagScalingStrategy.TopicName == nil {
			break
		}

		return e.complexity.KafkaLagScalingStrategy.TopicName(childComplexity), true

	case "KafkaTopic.acl":
		if e.complexity.KafkaTopic.ACL == nil {
			break
		}

		args, err := ec.field_KafkaTopic_acl_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.KafkaTopic.ACL(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["filter"].(*kafkatopic.KafkaTopicACLFilter), args["orderBy"].(*kafkatopic.KafkaTopicACLOrder)), true

	case "KafkaTopic.configuration":
		if e.complexity.KafkaTopic.Configuration == nil {
			break
		}

		return e.complexity.KafkaTopic.Configuration(childComplexity), true

	case "KafkaTopic.environment":
		if e.complexity.KafkaTopic.Environment == nil {
			break
		}

		return e.complexity.KafkaTopic.Environment(childComplexity), true

	case "KafkaTopic.id":
		if e.complexity.KafkaTopic.ID == nil {
			break
		}

		return e.complexity.KafkaTopic.ID(childComplexity), true

	case "KafkaTopic.name":
		if e.complexity.KafkaTopic.Name == nil {
			break
		}

		return e.complexity.KafkaTopic.Name(childComplexity), true

	case "KafkaTopic.pool":
		if e.complexity.KafkaTopic.Pool == nil {
			break
		}

		return e.complexity.KafkaTopic.Pool(childComplexity), true

	case "KafkaTopic.team":
		if e.complexity.KafkaTopic.Team == nil {
			break
		}

		return e.complexity.KafkaTopic.Team(childComplexity), true

	case "KafkaTopic.teamEnvironment":
		if e.complexity.KafkaTopic.TeamEnvironment == nil {
			break
		}

		return e.complexity.KafkaTopic.TeamEnvironment(childComplexity), true

	case "KafkaTopicAcl.access":
		if e.complexity.KafkaTopicAcl.Access == nil {
			break
		}

		return e.complexity.KafkaTopicAcl.Access(childComplexity), true

	case "KafkaTopicAcl.team":
		if e.complexity.KafkaTopicAcl.Team == nil {
			break
		}

		return e.complexity.KafkaTopicAcl.Team(childComplexity), true

	case "KafkaTopicAcl.teamName":
		if e.complexity.KafkaTopicAcl.TeamName == nil {
			break
		}

		return e.complexity.KafkaTopicAcl.TeamName(childComplexity), true

	case "KafkaTopicAcl.topic":
		if e.complexity.KafkaTopicAcl.Topic == nil {
			break
		}

		return e.complexity.KafkaTopicAcl.Topic(childComplexity), true

	case "KafkaTopicAcl.workload":
		if e.complexity.KafkaTopicAcl.Workload == nil {
			break
		}

		return e.complexity.KafkaTopicAcl.Workload(childComplexity), true

	case "KafkaTopicAcl.workloadName":
		if e.complexity.KafkaTopicAcl.WorkloadName == nil {
			break
		}

		return e.complexity.KafkaTopicAcl.WorkloadName(childComplexity), true

	case "KafkaTopicAclConnection.edges":
		if e.complexity.KafkaTopicAclConnection.Edges == nil {
			break
		}

		return e.complexity.KafkaTopicAclConnection.Edges(childComplexity), true

	case "KafkaTopicAclConnection.nodes":
		if e.complexity.KafkaTopicAclConnection.Nodes == nil {
			break
		}

		return e.complexity.KafkaTopicAclConnection.Nodes(childComplexity), true

	case "KafkaTopicAclConnection.pageInfo":
		if e.complexity.KafkaTopicAclConnection.PageInfo == nil {
			break
		}

		return e.complexity.KafkaTopicAclConnection.PageInfo(childComplexity), true

	case "KafkaTopicAclEdge.cursor":
		if e.complexity.KafkaTopicAclEdge.Cursor == nil {
			break
		}

		return e.complexity.KafkaTopicAclEdge.Cursor(childComplexity), true

	case "KafkaTopicAclEdge.node":
		if e.complexity.KafkaTopicAclEdge.Node == nil {
			break
		}

		return e.complexity.KafkaTopicAclEdge.Node(childComplexity), true

	case "KafkaTopicConfiguration.cleanupPolicy":
		if e.complexity.KafkaTopicConfiguration.CleanupPolicy == nil {
			break
		}

		return e.complexity.KafkaTopicConfiguration.CleanupPolicy(childComplexity), true

	case "KafkaTopicConfiguration.maxMessageBytes":
		if e.complexity.KafkaTopicConfiguration.MaxMessageBytes == nil {
			break
		}

		return e.complexity.KafkaTopicConfiguration.MaxMessageBytes(childComplexity), true

	case "KafkaTopicConfiguration.minimumInSyncReplicas":
		if e.complexity.KafkaTopicConfiguration.MinimumInSyncReplicas == nil {
			break
		}

		return e.complexity.KafkaTopicConfiguration.MinimumInSyncReplicas(childComplexity), true

	case "KafkaTopicConfiguration.partitions":
		if e.complexity.KafkaTopicConfiguration.Partitions == nil {
			break
		}

		return e.complexity.KafkaTopicConfiguration.Partitions(childComplexity), true

	case "KafkaTopicConfiguration.replication":
		if e.complexity.KafkaTopicConfiguration.Replication == nil {
			break
		}

		return e.complexity.KafkaTopicConfiguration.Replication(childComplexity), true

	case "KafkaTopicConfiguration.retentionBytes":
		if e.complexity.KafkaTopicConfiguration.RetentionBytes == nil {
			break
		}

		return e.complexity.KafkaTopicConfiguration.RetentionBytes(childComplexity), true

	case "KafkaTopicConfiguration.retentionHours":
		if e.complexity.KafkaTopicConfiguration.RetentionHours == nil {
			break
		}

		return e.complexity.KafkaTopicConfiguration.RetentionHours(childComplexity), true

	case "KafkaTopicConfiguration.segmentHours":
		if e.complexity.KafkaTopicConfiguration.SegmentHours == nil {
			break
		}

		return e.complexity.KafkaTopicConfiguration.SegmentHours(childComplexity), true

	case "KafkaTopicConnection.edges":
		if e.complexity.KafkaTopicConnection.Edges == nil {
			break
		}

		return e.complexity.KafkaTopicConnection.Edges(childComplexity), true

	case "KafkaTopicConnection.nodes":
		if e.complexity.KafkaTopicConnection.Nodes == nil {
			break
		}

		return e.complexity.KafkaTopicConnection.Nodes(childComplexity), true

	case "KafkaTopicConnection.pageInfo":
		if e.complexity.KafkaTopicConnection.PageInfo == nil {
			break
		}

		return e.complexity.KafkaTopicConnection.PageInfo(childComplexity), true

	case "KafkaTopicEdge.cursor":
		if e.complexity.KafkaTopicEdge.Cursor == nil {
			break
		}

		return e.complexity.KafkaTopicEdge.Cursor(childComplexity), true

	case "KafkaTopicEdge.node":
		if e.complexity.KafkaTopicEdge.Node == nil {
			break
		}

		return e.complexity.KafkaTopicEdge.Node(childComplexity), true

	case "LogDestinationLoki.grafanaURL":
		if e.complexity.LogDestinationLoki.GrafanaURL == nil {
			break
		}

		return e.complexity.LogDestinationLoki.GrafanaURL(childComplexity), true

	case "LogDestinationLoki.id":
		if e.complexity.LogDestinationLoki.ID == nil {
			break
		}

		return e.complexity.LogDestinationLoki.ID(childComplexity), true

	case "LogDestinationSecureLogs.id":
		if e.complexity.LogDestinationSecureLogs.ID == nil {
			break
		}

		return e.complexity.LogDestinationSecureLogs.ID(childComplexity), true

	case "LogLine.labels":
		if e.complexity.LogLine.Labels == nil {
			break
		}

		return e.complexity.LogLine.Labels(childComplexity), true

	case "LogLine.message":
		if e.complexity.LogLine.Message == nil {
			break
		}

		return e.complexity.LogLine.Message(childComplexity), true

	case "LogLine.time":
		if e.complexity.LogLine.Time == nil {
			break
		}

		return e.complexity.LogLine.Time(childComplexity), true

	case "LogLineLabel.key":
		if e.complexity.LogLineLabel.Key == nil {
			break
		}

		return e.complexity.LogLineLabel.Key(childComplexity), true

	case "LogLineLabel.value":
		if e.complexity.LogLineLabel.Value == nil {
			break
		}

		return e.complexity.LogLineLabel.Value(childComplexity), true

	case "MaintenanceWindow.dayOfWeek":
		if e.complexity.MaintenanceWindow.DayOfWeek == nil {
			break
		}

		return e.complexity.MaintenanceWindow.DayOfWeek(childComplexity), true

	case "MaintenanceWindow.timeOfDay":
		if e.complexity.MaintenanceWindow.TimeOfDay == nil {
			break
		}

		return e.complexity.MaintenanceWindow.TimeOfDay(childComplexity), true

	case "MaskinportenAuthIntegration.name":
		if e.complexity.MaskinportenAuthIntegration.Name == nil {
			break
		}

		return e.complexity.MaskinportenAuthIntegration.Name(childComplexity), true

	case "MissingSbomIssue.id":
		if e.complexity.MissingSbomIssue.ID == nil {
			break
		}

		return e.complexity.MissingSbomIssue.ID(childComplexity), true

	case "MissingSbomIssue.message":
		if e.complexity.MissingSbomIssue.Message == nil {
			break
		}

		return e.complexity.MissingSbomIssue.Message(childComplexity), true

	case "MissingSbomIssue.severity":
		if e.complexity.MissingSbomIssue.Severity == nil {
			break
		}

		return e.complexity.MissingSbomIssue.Severity(childComplexity), true

	case "MissingSbomIssue.teamEnvironment":
		if e.complexity.MissingSbomIssue.TeamEnvironment == nil {
			break
		}

		return e.complexity.MissingSbomIssue.TeamEnvironment(childComplexity), true

	case "MissingSbomIssue.workload":
		if e.complexity.MissingSbomIssue.Workload == nil {
			break
		}

		return e.complexity.MissingSbomIssue.Workload(childComplexity), true

	case "Mutation.addRepositoryToTeam":
		if e.complexity.Mutation.AddRepositoryToTeam == nil {
			break
		}

		args, err := ec.field_Mutation_addRepositoryToTeam_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddRepositoryToTeam(childComplexity, args["input"].(repository.AddRepositoryToTeamInput)), true

	case "Mutation.addSecretValue":
		if e.complexity.Mutation.AddSecretValue == nil {
			break
		}

		args, err := ec.field_Mutation_addSecretValue_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddSecretValue(childComplexity, args["input"].(secret.AddSecretValueInput)), true

	case "Mutation.addTeamMember":
		if e.complexity.Mutation.AddTeamMember == nil {
			break
		}

		args, err := ec.field_Mutation_addTeamMember_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddTeamMember(childComplexity, args["input"].(team.AddTeamMemberInput)), true

	case "Mutation.allowTeamAccessToUnleash":
		if e.complexity.Mutation.AllowTeamAccessToUnleash == nil {
			break
		}

		args, err := ec.field_Mutation_allowTeamAccessToUnleash_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AllowTeamAccessToUnleash(childComplexity, args["input"].(unleash.AllowTeamAccessToUnleashInput)), true

	case "Mutation.assignRoleToServiceAccount":
		if e.complexity.Mutation.AssignRoleToServiceAccount == nil {
			break
		}

		args, err := ec.field_Mutation_assignRoleToServiceAccount_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AssignRoleToServiceAccount(childComplexity, args["input"].(serviceaccount.AssignRoleToServiceAccountInput)), true

	case "Mutation.changeDeploymentKey":
		if e.complexity.Mutation.ChangeDeploymentKey == nil {
			break
		}

		args, err := ec.field_Mutation_changeDeploymentKey_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ChangeDeploymentKey(childComplexity, args["input"].(deployment.ChangeDeploymentKeyInput)), true

	case "Mutation.configureReconciler":
		if e.complexity.Mutation.ConfigureReconciler == nil {
			break
		}

		args, err := ec.field_Mutation_configureReconciler_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConfigureReconciler(childComplexity, args["input"].(reconciler.ConfigureReconcilerInput)), true

	case "Mutation.confirmTeamDeletion":
		if e.complexity.Mutation.ConfirmTeamDeletion == nil {
			break
		}

		args, err := ec.field_Mutation_confirmTeamDeletion_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConfirmTeamDeletion(childComplexity, args["input"].(team.ConfirmTeamDeletionInput)), true

	case "Mutation.createOpenSearch":
		if e.complexity.Mutation.CreateOpenSearch == nil {
			break
		}

		args, err := ec.field_Mutation_createOpenSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOpenSearch(childComplexity, args["input"].(opensearch.CreateOpenSearchInput)), true

	case "Mutation.createSecret":
		if e.complexity.Mutation.CreateSecret == nil {
			break
		}

		args, err := ec.field_Mutation_createSecret_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSecret(childComplexity, args["input"].(secret.CreateSecretInput)), true

	case "Mutation.createServiceAccount":
		if e.complexity.Mutation.CreateServiceAccount == nil {
			break
		}

		args, err := ec.field_Mutation_createServiceAccount_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateServiceAccount(childComplexity, args["input"].(serviceaccount.CreateServiceAccountInput)), true

	case "Mutation.createServiceAccountToken":
		if e.complexity.Mutation.CreateServiceAccountToken == nil {
			break
		}

		args, err := ec.field_Mutation_createServiceAccountToken_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateServiceAccountToken(childComplexity, args["input"].(serviceaccount.CreateServiceAccountTokenInput)), true

	case "Mutation.createTeam":
		if e.complexity.Mutation.CreateTeam == nil {
			break
		}

		args, err := ec.field_Mutation_createTeam_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTeam(childComplexity, args["input"].(team.CreateTeamInput)), true

	case "Mutation.createUnleashForTeam":
		if e.complexity.Mutation.CreateUnleashForTeam == nil {
			break
		}

		args, err := ec.field_Mutation_createUnleashForTeam_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUnleashForTeam(childComplexity, args["input"].(unleash.CreateUnleashForTeamInput)), true

	case "Mutation.createValkey":
		if e.complexity.Mutation.CreateValkey == nil {
			break
		}

		args, err := ec.field_Mutation_createValkey_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateValkey(childComplexity, args["input"].(valkey.CreateValkeyInput)), true

	case "Mutation.deleteApplication":
		if e.complexity.Mutation.DeleteApplication == nil {
			break
		}

		args, err := ec.field_Mutation_deleteApplication_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteApplication(childComplexity, args["input"].(application.DeleteApplicationInput)), true

	case "Mutation.deleteJob":
		if e.complexity.Mutation.DeleteJob == nil {
			break
		}

		args, err := ec.field_Mutation_deleteJob_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteJob(childComplexity, args["input"].(job.DeleteJobInput)), true

	case "Mutation.deleteOpenSearch":
		if e.complexity.Mutation.DeleteOpenSearch == nil {
			break
		}

		args, err := ec.field_Mutation_deleteOpenSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOpenSearch(childComplexity, args["input"].(opensearch.DeleteOpenSearchInput)), true

	case "Mutation.deleteSecret":
		if e.complexity.Mutation.DeleteSecret == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSecret_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSecret(childComplexity, args["input"].(secret.DeleteSecretInput)), true

	case "Mutation.deleteServiceAccount":
		if e.complexity.Mutation.DeleteServiceAccount == nil {
			break
		}

		args, err := ec.field_Mutation_deleteServiceAccount_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteServiceAccount(childComplexity, args["input"].(serviceaccount.DeleteServiceAccountInput)), true

	case "Mutation.deleteServiceAccountToken":
		if e.complexity.Mutation.DeleteServiceAccountToken == nil {
			break
		}

		args, err := ec.field_Mutation_deleteServiceAccountToken_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteServiceAccountToken(childComplexity, args["input"].(serviceaccount.DeleteServiceAccountTokenInput)), true

	case "Mutation.deleteValkey":
		if e.complexity.Mutation.DeleteValkey == nil {
			break
		}

		args, err := ec.field_Mutation_deleteValkey_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteValkey(childComplexity, args["input"].(valkey.DeleteValkeyInput)), true

	case "Mutation.disableReconciler":
		if e.complexity.Mutation.DisableReconciler == nil {
			break
		}

		args, err := ec.field_Mutation_disableReconciler_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DisableReconciler(childComplexity, args["input"].(reconciler.DisableReconcilerInput)), true

	case "Mutation.enableReconciler":
		if e.complexity.Mutation.EnableReconciler == nil {
			break
		}

		args, err := ec.field_Mutation_enableReconciler_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EnableReconciler(childComplexity, args["input"].(reconciler.EnableReconcilerInput)), true

	case "Mutation.removeRepositoryFromTeam":
		if e.complexity.Mutation.RemoveRepositoryFromTeam == nil {
			break
		}

		args, err := ec.field_Mutation_removeRepositoryFromTeam_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveRepositoryFromTeam(childComplexity, args["input"].(repository.RemoveRepositoryFromTeamInput)), true

	case "Mutation.removeSecretValue":
		if e.complexity.Mutation.RemoveSecretValue == nil {
			break
		}

		args, err := ec.field_Mutation_removeSecretValue_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveSecretValue(childComplexity, args["input"].(secret.RemoveSecretValueInput)), true

	case "Mutation.removeTeamMember":
		if e.complexity.Mutation.RemoveTeamMember == nil {
			break
		}

		args, err := ec.field_Mutation_removeTeamMember_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveTeamMember(childComplexity, args["input"].(team.RemoveTeamMemberInput)), true

	case "Mutation.requestTeamDeletion":
		if e.complexity.Mutation.RequestTeamDeletion == nil {
			break
		}

		args, err := ec.field_Mutation_requestTeamDeletion_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RequestTeamDeletion(childComplexity, args["input"].(team.RequestTeamDeletionInput)), true

	case "Mutation.restartApplication":
		if e.complexity.Mutation.RestartApplication == nil {
			break
		}

		args, err := ec.field_Mutation_restartApplication_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RestartApplication(childComplexity, args["input"].(application.RestartApplicationInput)), true

	case "Mutation.revokeRoleFromServiceAccount":
		if e.complexity.Mutation.RevokeRoleFromServiceAccount == nil {
			break
		}

		args, err := ec.field_Mutation_revokeRoleFromServiceAccount_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RevokeRoleFromServiceAccount(childComplexity, args["input"].(serviceaccount.RevokeRoleFromServiceAccountInput)), true

	case "Mutation.revokeTeamAccessToUnleash":
		if e.complexity.Mutation.RevokeTeamAccessToUnleash == nil {
			break
		}

		args, err := ec.field_Mutation_revokeTeamAccessToUnleash_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RevokeTeamAccessToUnleash(childComplexity, args["input"].(unleash.RevokeTeamAccessToUnleashInput)), true

	case "Mutation.setTeamMemberRole":
		if e.complexity.Mutation.SetTeamMemberRole == nil {
			break
		}

		args, err := ec.field_Mutation_setTeamMemberRole_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetTeamMemberRole(childComplexity, args["input"].(team.SetTeamMemberRoleInput)), true

	case "Mutation.startOpenSearchMaintenance":
		if e.complexity.Mutation.StartOpenSearchMaintenance == nil {
			break
		}

		args, err := ec.field_Mutation_startOpenSearchMaintenance_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StartOpenSearchMaintenance(childComplexity, args["input"].(servicemaintenance.StartOpenSearchMaintenanceInput)), true

	case "Mutation.startValkeyMaintenance":
		if e.complexity.Mutation.StartValkeyMaintenance == nil {
			break
		}

		args, err := ec.field_Mutation_startValkeyMaintenance_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StartValkeyMaintenance(childComplexity, args["input"].(servicemaintenance.StartValkeyMaintenanceInput)), true

	case "Mutation.triggerJob":
		if e.complexity.Mutation.TriggerJob == nil {
			break
		}

		args, err := ec.field_Mutation_triggerJob_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TriggerJob(childComplexity, args["input"].(job.TriggerJobInput)), true

	case "Mutation.updateImageVulnerability":
		if e.complexity.Mutation.UpdateImageVulnerability == nil {
			break
		}

		args, err := ec.field_Mutation_updateImageVulnerability_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateImageVulnerability(childComplexity, args["input"].(vulnerability.UpdateImageVulnerabilityInput)), true

	case "Mutation.updateOpenSearch":
		if e.complexity.Mutation.UpdateOpenSearch == nil {
			break
		}

		args, err := ec.field_Mutation_updateOpenSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOpenSearch(childComplexity, args["input"].(opensearch.UpdateOpenSearchInput)), true

	case "Mutation.updateSecretValue":
		if e.complexity.Mutation.UpdateSecretValue == nil {
			break
		}

		args, err := ec.field_Mutation_updateSecretValue_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSecretValue(childComplexity, args["input"].(secret.UpdateSecretValueInput)), true

	case "Mutation.updateServiceAccount":
		if e.complexity.Mutation.UpdateServiceAccount == nil {
			break
		}

		args, err := ec.field_Mutation_updateServiceAccount_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateServiceAccount(childComplexity, args["input"].(serviceaccount.UpdateServiceAccountInput)), true

	case "Mutation.updateServiceAccountToken":
		if e.complexity.Mutation.UpdateServiceAccountToken == nil {
			break
		}

		args, err := ec.field_Mutation_updateServiceAccountToken_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateServiceAccountToken(childComplexity, args["input"].(serviceaccount.UpdateServiceAccountTokenInput)), true

	case "Mutation.updateTeam":
		if e.complexity.Mutation.UpdateTeam == nil {
			break
		}

		args, err := ec.field_Mutation_updateTeam_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTeam(childComplexity, args["input"].(team.UpdateTeamInput)), true

	case "Mutation.updateTeamEnvironment":
		if e.complexity.Mutation.UpdateTeamEnvironment == nil {
			break
		}

		args, err := ec.field_Mutation_updateTeamEnvironment_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTeamEnvironment(childComplexity, args["input"].(team.UpdateTeamEnvironmentInput)), true

	case "Mutation.updateValkey":
		if e.complexity.Mutation.UpdateValkey == nil {
			break
		}

		args, err := ec.field_Mutation_updateValkey_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateValkey(childComplexity, args["input"].(valkey.UpdateValkeyInput)), true

	case "NetworkPolicy.inbound":
		if e.complexity.NetworkPolicy.Inbound == nil {
			break
		}

		return e.complexity.NetworkPolicy.Inbound(childComplexity), true

	case "NetworkPolicy.outbound":
		if e.complexity.NetworkPolicy.Outbound == nil {
			break
		}

		return e.complexity.NetworkPolicy.Outbound(childComplexity), true

	case "NetworkPolicyRule.mutual":
		if e.complexity.NetworkPolicyRule.Mutual == nil {
			break
		}

		return e.complexity.NetworkPolicyRule.Mutual(childComplexity), true

	case "NetworkPolicyRule.targetTeam":
		if e.complexity.NetworkPolicyRule.TargetTeam == nil {
			break
		}

		return e.complexity.NetworkPolicyRule.TargetTeam(childComplexity), true

	case "NetworkPolicyRule.targetTeamSlug":
		if e.complexity.NetworkPolicyRule.TargetTeamSlug == nil {
			break
		}

		return e.complexity.NetworkPolicyRule.TargetTeamSlug(childComplexity), true

	case "NetworkPolicyRule.targetWorkload":
		if e.complexity.NetworkPolicyRule.TargetWorkload == nil {
			break
		}

		return e.complexity.NetworkPolicyRule.TargetWorkload(childComplexity), true

	case "NetworkPolicyRule.targetWorkloadName":
		if e.complexity.NetworkPolicyRule.TargetWorkloadName == nil {
			break
		}

		return e.complexity.NetworkPolicyRule.TargetWorkloadName(childComplexity), true

	case "NoRunningInstancesIssue.id":
		if e.complexity.NoRunningInstancesIssue.ID == nil {
			break
		}

		return e.complexity.NoRunningInstancesIssue.ID(childComplexity), true

	case "NoRunningInstancesIssue.message":
		if e.complexity.NoRunningInstancesIssue.Message == nil {
			break
		}

		return e.complexity.NoRunningInstancesIssue.Message(childComplexity), true

	case "NoRunningInstancesIssue.severity":
		if e.complexity.NoRunningInstancesIssue.Severity == nil {
			break
		}

		return e.complexity.NoRunningInstancesIssue.Severity(childComplexity), true

	case "NoRunningInstancesIssue.teamEnvironment":
		if e.complexity.NoRunningInstancesIssue.TeamEnvironment == nil {
			break
		}

		return e.complexity.NoRunningInstancesIssue.TeamEnvironment(childComplexity), true

	case "NoRunningInstancesIssue.workload":
		if e.complexity.NoRunningInstancesIssue.Workload == nil {
			break
		}

		return e.complexity.NoRunningInstancesIssue.Workload(childComplexity), true

	case "OpenSearch.access":
		if e.complexity.OpenSearch.Access == nil {
			break
		}

		args, err := ec.field_OpenSearch_access_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.OpenSearch.Access(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["orderBy"].(*opensearch.OpenSearchAccessOrder)), true

	case "OpenSearch.activityLog":
		if e.complexity.OpenSearch.ActivityLog == nil {
			break
		}

		args, err := ec.field_OpenSearch_activityLog_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.OpenSearch.ActivityLog(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["filter"].(*activitylog.ActivityLogFilter)), true

	case "OpenSearch.cost":
		if e.complexity.OpenSearch.Cost == nil {
			break
		}

		return e.complexity.OpenSearch.Cost(childComplexity), true

	case "OpenSearch.environment":
		if e.complexity.OpenSearch.Environment == nil {
			break
		}

		return e.complexity.OpenSearch.Environment(childComplexity), true

	case "OpenSearch.id":
		if e.complexity.OpenSearch.ID == nil {
			break
		}

		return e.complexity.OpenSearch.ID(childComplexity), true

	case "OpenSearch.issues":
		if e.complexity.OpenSearch.Issues == nil {
			break
		}

		args, err := ec.field_OpenSearch_issues_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.OpenSearch.Issues(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["orderBy"].(*issue.IssueOrder), args["filter"].(*issue.ResourceIssueFilter)), true

	case "OpenSearch.maintenance":
		if e.complexity.OpenSearch.Maintenance == nil {
			break
		}

		return e.complexity.OpenSearch.Maintenance(childComplexity), true

	case "OpenSearch.memory":
		if e.complexity.OpenSearch.Memory == nil {
			break
		}

		return e.complexity.OpenSearch.Memory(childComplexity), true

	case "OpenSearch.name":
		if e.complexity.OpenSearch.Name == nil {
			break
		}

		return e.complexity.OpenSearch.Name(childComplexity), true

	case "OpenSearch.state":
		if e.complexity.OpenSearch.State == nil {
			break
		}

		return e.complexity.OpenSearch.State(childComplexity), true

	case "OpenSearch.storageGB":
		if e.complexity.OpenSearch.StorageGB == nil {
			break
		}

		return e.complexity.OpenSearch.StorageGB(childComplexity), true

	case "OpenSearch.team":
		if e.complexity.OpenSearch.Team == nil {
			break
		}

		return e.complexity.OpenSearch.Team(childComplexity), true

	case "OpenSearch.teamEnvironment":
		if e.complexity.OpenSearch.TeamEnvironment == nil {
			break
		}

		return e.complexity.OpenSearch.TeamEnvironment(childComplexity), true

	case "OpenSearch.terminationProtection":
		if e.complexity.OpenSearch.TerminationProtection == nil {
			break
		}

		return e.complexity.OpenSearch.TerminationProtection(childComplexity), true

	case "OpenSearch.tier":
		if e.complexity.OpenSearch.Tier == nil {
			break
		}

		return e.complexity.OpenSearch.Tier(childComplexity), true

	case "OpenSearch.version":
		if e.complexity.OpenSearch.Version == nil {
			break
		}

		return e.complexity.OpenSearch.Version(childComplexity), true

	case "OpenSearch.workload":
		if e.complexity.OpenSearch.Workload == nil {
			break
		}

		return e.complexity.OpenSearch.Workload(childComplexity), true

	case "OpenSearchAccess.access":
		if e.complexity.OpenSearchAccess.Access == nil {
			break
		}

		return e.complexity.OpenSearchAccess.Access(childComplexity), true

	case "OpenSearchAccess.workload":
		if e.complexity.OpenSearchAccess.Workload == nil {
			break
		}

		return e.complexity.OpenSearchAccess.Workload(childComplexity), true

	case "OpenSearchAccessConnection.edges":
		if e.complexity.OpenSearchAccessConnection.Edges == nil {
			break
		}

		return e.complexity.OpenSearchAccessConnection.Edges(childComplexity), true

	case "OpenSearchAccessConnection.nodes":
		if e.complexity.OpenSearchAccessConnection.Nodes == nil {
			break
		}

		return e.complexity.OpenSearchAccessConnection.Nodes(childComplexity), true

	case "OpenSearchAccessConnection.pageInfo":
		if e.complexity.OpenSearchAccessConnection.PageInfo == nil {
			break
		}

		return e.complexity.OpenSearchAccessConnection.PageInfo(childComplexity), true

	case "OpenSearchAccessEdge.cursor":
		if e.complexity.OpenSearchAccessEdge.Cursor == nil {
			break
		}

		return e.complexity.OpenSearchAccessEdge.Cursor(childComplexity), true

	case "OpenSearchAccessEdge.node":
		if e.complexity.OpenSearchAccessEdge.Node == nil {
			break
		}

		return e.complexity.OpenSearchAccessEdge.Node(childComplexity), true

	case "OpenSearchConnection.edges":
		if e.complexity.OpenSearchConnection.Edges == nil {
			break
		}

		return e.complexity.OpenSearchConnection.Edges(childComplexity), true

	case "OpenSearchConnection.nodes":
		if e.complexity.OpenSearchConnection.Nodes == nil {
			break
		}

		return e.complexity.OpenSearchConnection.Nodes(childComplexity), true

	case "OpenSearchConnection.pageInfo":
		if e.complexity.OpenSearchConnection.PageInfo == nil {
			break
		}

		return e.complexity.OpenSearchConnection.PageInfo(childComplexity), true

	case "OpenSearchCost.sum":
		if e.complexity.OpenSearchCost.Sum == nil {
			break
		}

		return e.complexity.OpenSearchCost.Sum(childComplexity), true

	case "OpenSearchCreatedActivityLogEntry.actor":
		if e.complexity.OpenSearchCreatedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.OpenSearchCreatedActivityLogEntry.Actor(childComplexity), true

	case "OpenSearchCreatedActivityLogEntry.createdAt":
		if e.complexity.OpenSearchCreatedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.OpenSearchCreatedActivityLogEntry.CreatedAt(childComplexity), true

	case "OpenSearchCreatedActivityLogEntry.environmentName":
		if e.complexity.OpenSearchCreatedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.OpenSearchCreatedActivityLogEntry.EnvironmentName(childComplexity), true

	case "OpenSearchCreatedActivityLogEntry.id":
		if e.complexity.OpenSearchCreatedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.OpenSearchCreatedActivityLogEntry.ID(childComplexity), true

	case "OpenSearchCreatedActivityLogEntry.message":
		if e.complexity.OpenSearchCreatedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.OpenSearchCreatedActivityLogEntry.Message(childComplexity), true

	case "OpenSearchCreatedActivityLogEntry.resourceName":
		if e.complexity.OpenSearchCreatedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.OpenSearchCreatedActivityLogEntry.ResourceName(childComplexity), true

	case "OpenSearchCreatedActivityLogEntry.resourceType":
		if e.complexity.OpenSearchCreatedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.OpenSearchCreatedActivityLogEntry.ResourceType(childComplexity), true

	case "OpenSearchCreatedActivityLogEntry.teamSlug":
		if e.complexity.OpenSearchCreatedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.OpenSearchCreatedActivityLogEntry.TeamSlug(childComplexity), true

	case "OpenSearchDeletedActivityLogEntry.actor":
		if e.complexity.OpenSearchDeletedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.OpenSearchDeletedActivityLogEntry.Actor(childComplexity), true

	case "OpenSearchDeletedActivityLogEntry.createdAt":
		if e.complexity.OpenSearchDeletedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.OpenSearchDeletedActivityLogEntry.CreatedAt(childComplexity), true

	case "OpenSearchDeletedActivityLogEntry.environmentName":
		if e.complexity.OpenSearchDeletedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.OpenSearchDeletedActivityLogEntry.EnvironmentName(childComplexity), true

	case "OpenSearchDeletedActivityLogEntry.id":
		if e.complexity.OpenSearchDeletedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.OpenSearchDeletedActivityLogEntry.ID(childComplexity), true

	case "OpenSearchDeletedActivityLogEntry.message":
		if e.complexity.OpenSearchDeletedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.OpenSearchDeletedActivityLogEntry.Message(childComplexity), true

	case "OpenSearchDeletedActivityLogEntry.resourceName":
		if e.complexity.OpenSearchDeletedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.OpenSearchDeletedActivityLogEntry.ResourceName(childComplexity), true

	case "OpenSearchDeletedActivityLogEntry.resourceType":
		if e.complexity.OpenSearchDeletedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.OpenSearchDeletedActivityLogEntry.ResourceType(childComplexity), true

	case "OpenSearchDeletedActivityLogEntry.teamSlug":
		if e.complexity.OpenSearchDeletedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.OpenSearchDeletedActivityLogEntry.TeamSlug(childComplexity), true

	case "OpenSearchEdge.cursor":
		if e.complexity.OpenSearchEdge.Cursor == nil {
			break
		}

		return e.complexity.OpenSearchEdge.Cursor(childComplexity), true

	case "OpenSearchEdge.node":
		if e.complexity.OpenSearchEdge.Node == nil {
			break
		}

		return e.complexity.OpenSearchEdge.Node(childComplexity), true

	case "OpenSearchIssue.event":
		if e.complexity.OpenSearchIssue.Event == nil {
			break
		}

		return e.complexity.OpenSearchIssue.Event(childComplexity), true

	case "OpenSearchIssue.id":
		if e.complexity.OpenSearchIssue.ID == nil {
			break
		}

		return e.complexity.OpenSearchIssue.ID(childComplexity), true

	case "OpenSearchIssue.message":
		if e.complexity.OpenSearchIssue.Message == nil {
			break
		}

		return e.complexity.OpenSearchIssue.Message(childComplexity), true

	case "OpenSearchIssue.openSearch":
		if e.complexity.OpenSearchIssue.OpenSearch == nil {
			break
		}

		return e.complexity.OpenSearchIssue.OpenSearch(childComplexity), true

	case "OpenSearchIssue.severity":
		if e.complexity.OpenSearchIssue.Severity == nil {
			break
		}

		return e.complexity.OpenSearchIssue.Severity(childComplexity), true

	case "OpenSearchIssue.teamEnvironment":
		if e.complexity.OpenSearchIssue.TeamEnvironment == nil {
			break
		}

		return e.complexity.OpenSearchIssue.TeamEnvironment(childComplexity), true

	case "OpenSearchMaintenance.updates":
		if e.complexity.OpenSearchMaintenance.Updates == nil {
			break
		}

		args, err := ec.field_OpenSearchMaintenance_updates_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.OpenSearchMaintenance.Updates(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor)), true

	case "OpenSearchMaintenance.window":
		if e.complexity.OpenSearchMaintenance.Window == nil {
			break
		}

		return e.complexity.OpenSearchMaintenance.Window(childComplexity), true

	case "OpenSearchMaintenanceUpdate.deadline":
		if e.complexity.OpenSearchMaintenanceUpdate.Deadline == nil {
			break
		}

		return e.complexity.OpenSearchMaintenanceUpdate.Deadline(childComplexity), true

	case "OpenSearchMaintenanceUpdate.description":
		if e.complexity.OpenSearchMaintenanceUpdate.Description == nil {
			break
		}

		return e.complexity.OpenSearchMaintenanceUpdate.Description(childComplexity), true

	case "OpenSearchMaintenanceUpdate.startAt":
		if e.complexity.OpenSearchMaintenanceUpdate.StartAt == nil {
			break
		}

		return e.complexity.OpenSearchMaintenanceUpdate.StartAt(childComplexity), true

	case "OpenSearchMaintenanceUpdate.title":
		if e.complexity.OpenSearchMaintenanceUpdate.Title == nil {
			break
		}

		return e.complexity.OpenSearchMaintenanceUpdate.Title(childComplexity), true

	case "OpenSearchMaintenanceUpdateConnection.edges":
		if e.complexity.OpenSearchMaintenanceUpdateConnection.Edges == nil {
			break
		}

		return e.complexity.OpenSearchMaintenanceUpdateConnection.Edges(childComplexity), true

	case "OpenSearchMaintenanceUpdateConnection.nodes":
		if e.complexity.OpenSearchMaintenanceUpdateConnection.Nodes == nil {
			break
		}

		return e.complexity.OpenSearchMaintenanceUpdateConnection.Nodes(childComplexity), true

	case "OpenSearchMaintenanceUpdateConnection.pageInfo":
		if e.complexity.OpenSearchMaintenanceUpdateConnection.PageInfo == nil {
			break
		}

		return e.complexity.OpenSearchMaintenanceUpdateConnection.PageInfo(childComplexity), true

	case "OpenSearchMaintenanceUpdateEdge.cursor":
		if e.complexity.OpenSearchMaintenanceUpdateEdge.Cursor == nil {
			break
		}

		return e.complexity.OpenSearchMaintenanceUpdateEdge.Cursor(childComplexity), true

	case "OpenSearchMaintenanceUpdateEdge.node":
		if e.complexity.OpenSearchMaintenanceUpdateEdge.Node == nil {
			break
		}

		return e.complexity.OpenSearchMaintenanceUpdateEdge.Node(childComplexity), true

	case "OpenSearchUpdatedActivityLogEntry.actor":
		if e.complexity.OpenSearchUpdatedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.OpenSearchUpdatedActivityLogEntry.Actor(childComplexity), true

	case "OpenSearchUpdatedActivityLogEntry.createdAt":
		if e.complexity.OpenSearchUpdatedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.OpenSearchUpdatedActivityLogEntry.CreatedAt(childComplexity), true

	case "OpenSearchUpdatedActivityLogEntry.data":
		if e.complexity.OpenSearchUpdatedActivityLogEntry.Data == nil {
			break
		}

		return e.complexity.OpenSearchUpdatedActivityLogEntry.Data(childComplexity), true

	case "OpenSearchUpdatedActivityLogEntry.environmentName":
		if e.complexity.OpenSearchUpdatedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.OpenSearchUpdatedActivityLogEntry.EnvironmentName(childComplexity), true

	case "OpenSearchUpdatedActivityLogEntry.id":
		if e.complexity.OpenSearchUpdatedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.OpenSearchUpdatedActivityLogEntry.ID(childComplexity), true

	case "OpenSearchUpdatedActivityLogEntry.message":
		if e.complexity.OpenSearchUpdatedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.OpenSearchUpdatedActivityLogEntry.Message(childComplexity), true

	case "OpenSearchUpdatedActivityLogEntry.resourceName":
		if e.complexity.OpenSearchUpdatedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.OpenSearchUpdatedActivityLogEntry.ResourceName(childComplexity), true

	case "OpenSearchUpdatedActivityLogEntry.resourceType":
		if e.complexity.OpenSearchUpdatedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.OpenSearchUpdatedActivityLogEntry.ResourceType(childComplexity), true

	case "OpenSearchUpdatedActivityLogEntry.teamSlug":
		if e.complexity.OpenSearchUpdatedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.OpenSearchUpdatedActivityLogEntry.TeamSlug(childComplexity), true

	case "OpenSearchUpdatedActivityLogEntryData.updatedFields":
		if e.complexity.OpenSearchUpdatedActivityLogEntryData.UpdatedFields == nil {
			break
		}

		return e.complexity.OpenSearchUpdatedActivityLogEntryData.UpdatedFields(childComplexity), true

	case "OpenSearchUpdatedActivityLogEntryDataUpdatedField.field":
		if e.complexity.OpenSearchUpdatedActivityLogEntryDataUpdatedField.Field == nil {
			break
		}

		return e.complexity.OpenSearchUpdatedActivityLogEntryDataUpdatedField.Field(childComplexity), true

	case "OpenSearchUpdatedActivityLogEntryDataUpdatedField.newValue":
		if e.complexity.OpenSearchUpdatedActivityLogEntryDataUpdatedField.NewValue == nil {
			break
		}

		return e.complexity.OpenSearchUpdatedActivityLogEntryDataUpdatedField.NewValue(childComplexity), true

	case "OpenSearchUpdatedActivityLogEntryDataUpdatedField.oldValue":
		if e.complexity.OpenSearchUpdatedActivityLogEntryDataUpdatedField.OldValue == nil {
			break
		}

		return e.complexity.OpenSearchUpdatedActivityLogEntryDataUpdatedField.OldValue(childComplexity), true

	case "OpenSearchVersion.actual":
		if e.complexity.OpenSearchVersion.Actual == nil {
			break
		}

		return e.complexity.OpenSearchVersion.Actual(childComplexity), true

	case "OpenSearchVersion.desiredMajor":
		if e.complexity.OpenSearchVersion.DesiredMajor == nil {
			break
		}

		return e.complexity.OpenSearchVersion.DesiredMajor(childComplexity), true

	case "OutboundNetworkPolicy.external":
		if e.complexity.OutboundNetworkPolicy.External == nil {
			break
		}

		return e.complexity.OutboundNetworkPolicy.External(childComplexity), true

	case "OutboundNetworkPolicy.rules":
		if e.complexity.OutboundNetworkPolicy.Rules == nil {
			break
		}

		return e.complexity.OutboundNetworkPolicy.Rules(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.pageEnd":
		if e.complexity.PageInfo.PageEnd == nil {
			break
		}

		return e.complexity.PageInfo.PageEnd(childComplexity), true

	case "PageInfo.pageStart":
		if e.complexity.PageInfo.PageStart == nil {
			break
		}

		return e.complexity.PageInfo.PageStart(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "PageInfo.totalCount":
		if e.complexity.PageInfo.TotalCount == nil {
			break
		}

		return e.complexity.PageInfo.TotalCount(childComplexity), true

	case "Price.value":
		if e.complexity.Price.Value == nil {
			break
		}

		return e.complexity.Price.Value(childComplexity), true

	case "PrometheusAlarm.action":
		if e.complexity.PrometheusAlarm.Action == nil {
			break
		}

		return e.complexity.PrometheusAlarm.Action(childComplexity), true

	case "PrometheusAlarm.consequence":
		if e.complexity.PrometheusAlarm.Consequence == nil {
			break
		}

		return e.complexity.PrometheusAlarm.Consequence(childComplexity), true

	case "PrometheusAlarm.since":
		if e.complexity.PrometheusAlarm.Since == nil {
			break
		}

		return e.complexity.PrometheusAlarm.Since(childComplexity), true

	case "PrometheusAlarm.state":
		if e.complexity.PrometheusAlarm.State == nil {
			break
		}

		return e.complexity.PrometheusAlarm.State(childComplexity), true

	case "PrometheusAlarm.summary":
		if e.complexity.PrometheusAlarm.Summary == nil {
			break
		}

		return e.complexity.PrometheusAlarm.Summary(childComplexity), true

	case "PrometheusAlarm.value":
		if e.complexity.PrometheusAlarm.Value == nil {
			break
		}

		return e.complexity.PrometheusAlarm.Value(childComplexity), true

	case "PrometheusAlert.alarms":
		if e.complexity.PrometheusAlert.Alarms == nil {
			break
		}

		return e.complexity.PrometheusAlert.Alarms(childComplexity), true

	case "PrometheusAlert.duration":
		if e.complexity.PrometheusAlert.Duration == nil {
			break
		}

		return e.complexity.PrometheusAlert.Duration(childComplexity), true

	case "PrometheusAlert.id":
		if e.complexity.PrometheusAlert.ID == nil {
			break
		}

		return e.complexity.PrometheusAlert.ID(childComplexity), true

	case "PrometheusAlert.name":
		if e.complexity.PrometheusAlert.Name == nil {
			break
		}

		return e.complexity.PrometheusAlert.Name(childComplexity), true

	case "PrometheusAlert.query":
		if e.complexity.PrometheusAlert.Query == nil {
			break
		}

		return e.complexity.PrometheusAlert.Query(childComplexity), true

	case "PrometheusAlert.ruleGroup":
		if e.complexity.PrometheusAlert.RuleGroup == nil {
			break
		}

		return e.complexity.PrometheusAlert.RuleGroup(childComplexity), true

	case "PrometheusAlert.state":
		if e.complexity.PrometheusAlert.State == nil {
			break
		}

		return e.complexity.PrometheusAlert.State(childComplexity), true

	case "PrometheusAlert.team":
		if e.complexity.PrometheusAlert.Team == nil {
			break
		}

		return e.complexity.PrometheusAlert.Team(childComplexity), true

	case "PrometheusAlert.teamEnvironment":
		if e.complexity.PrometheusAlert.TeamEnvironment == nil {
			break
		}

		return e.complexity.PrometheusAlert.TeamEnvironment(childComplexity), true

	case "Query.costMonthlySummary":
		if e.complexity.Query.CostMonthlySummary == nil {
			break
		}

		args, err := ec.field_Query_costMonthlySummary_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CostMonthlySummary(childComplexity, args["from"].(scalar.Date), args["to"].(scalar.Date)), true

	case "Query.currentUnitPrices":
		if e.complexity.Query.CurrentUnitPrices == nil {
			break
		}

		return e.complexity.Query.CurrentUnitPrices(childComplexity), true

	case "Query.environment":
		if e.complexity.Query.Environment == nil {
			break
		}

		args, err := ec.field_Query_environment_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Environment(childComplexity, args["name"].(string)), true

	case "Query.environments":
		if e.complexity.Query.Environments == nil {
			break
		}

		args, err := ec.field_Query_environments_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Environments(childComplexity, args["orderBy"].(*environment.EnvironmentOrder)), true

	case "Query.features":
		if e.complexity.Query.Features == nil {
			break
		}

		return e.complexity.Query.Features(childComplexity), true

	case "Query.imageVulnerabilityHistory":
		if e.complexity.Query.ImageVulnerabilityHistory == nil {
			break
		}

		args, err := ec.field_Query_imageVulnerabilityHistory_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ImageVulnerabilityHistory(childComplexity, args["from"].(scalar.Date)), true

	case "Query.me":
		if e.complexity.Query.Me == nil {
			break
		}

		return e.complexity.Query.Me(childComplexity), true

	case "Query.node":
		if e.complexity.Query.Node == nil {
			break
		}

		args, err := ec.field_Query_node_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Node(childComplexity, args["id"].(ident.Ident)), true

	case "Query.reconcilers":
		if e.complexity.Query.Reconcilers == nil {
			break
		}

		args, err := ec.field_Query_reconcilers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Reconcilers(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor)), true

	case "Query.roles":
		if e.complexity.Query.Roles == nil {
			break
		}

		args, err := ec.field_Query_roles_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Roles(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor)), true

	case "Query.search":
		if e.complexity.Query.Search == nil {
			break
		}

		args, err := ec.field_Query_search_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Search(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["filter"].(search.SearchFilter)), true

	case "Query.serviceAccount":
		if e.complexity.Query.ServiceAccount == nil {
			break
		}

		args, err := ec.field_Query_serviceAccount_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ServiceAccount(childComplexity, args["id"].(ident.Ident)), true

	case "Query.serviceAccounts":
		if e.complexity.Query.ServiceAccounts == nil {
			break
		}

		args, err := ec.field_Query_serviceAccounts_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ServiceAccounts(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor)), true

	case "Query.team":
		if e.complexity.Query.Team == nil {
			break
		}

		args, err := ec.field_Query_team_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Team(childComplexity, args["slug"].(slug.Slug)), true

	case "Query.teams":
		if e.complexity.Query.Teams == nil {
			break
		}

		args, err := ec.field_Query_teams_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Teams(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["orderBy"].(*team.TeamOrder), args["filter"].(*team.TeamFilter)), true

	case "Query.teamsUtilization":
		if e.complexity.Query.TeamsUtilization == nil {
			break
		}

		args, err := ec.field_Query_teamsUtilization_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TeamsUtilization(childComplexity, args["resourceType"].(utilization.UtilizationResourceType)), true

	case "Query.user":
		if e.complexity.Query.User == nil {
			break
		}

		args, err := ec.field_Query_user_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.User(childComplexity, args["email"].(*string)), true

	case "Query.userSyncLog":
		if e.complexity.Query.UserSyncLog == nil {
			break
		}

		args, err := ec.field_Query_userSyncLog_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserSyncLog(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		args, err := ec.field_Query_users_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Users(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["orderBy"].(*user.UserOrder)), true

	case "Query.vulnerabilityFixHistory":
		if e.complexity.Query.VulnerabilityFixHistory == nil {
			break
		}

		args, err := ec.field_Query_vulnerabilityFixHistory_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VulnerabilityFixHistory(childComplexity, args["from"].(scalar.Date)), true

	case "Query.vulnerabilitySummary":
		if e.complexity.Query.VulnerabilitySummary == nil {
			break
		}

		return e.complexity.Query.VulnerabilitySummary(childComplexity), true

	case "Reconciler.activityLog":
		if e.complexity.Reconciler.ActivityLog == nil {
			break
		}

		args, err := ec.field_Reconciler_activityLog_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Reconciler.ActivityLog(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["filter"].(*activitylog.ActivityLogFilter)), true

	case "Reconciler.config":
		if e.complexity.Reconciler.Config == nil {
			break
		}

		return e.complexity.Reconciler.Config(childComplexity), true

	case "Reconciler.configured":
		if e.complexity.Reconciler.Configured == nil {
			break
		}

		return e.complexity.Reconciler.Configured(childComplexity), true

	case "Reconciler.description":
		if e.complexity.Reconciler.Description == nil {
			break
		}

		return e.complexity.Reconciler.Description(childComplexity), true

	case "Reconciler.displayName":
		if e.complexity.Reconciler.DisplayName == nil {
			break
		}

		return e.complexity.Reconciler.DisplayName(childComplexity), true

	case "Reconciler.enabled":
		if e.complexity.Reconciler.Enabled == nil {
			break
		}

		return e.complexity.Reconciler.Enabled(childComplexity), true

	case "Reconciler.errors":
		if e.complexity.Reconciler.Errors == nil {
			break
		}

		args, err := ec.field_Reconciler_errors_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Reconciler.Errors(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor)), true

	case "Reconciler.id":
		if e.complexity.Reconciler.ID == nil {
			break
		}

		return e.complexity.Reconciler.ID(childComplexity), true

	case "Reconciler.name":
		if e.complexity.Reconciler.Name == nil {
			break
		}

		return e.complexity.Reconciler.Name(childComplexity), true

	case "ReconcilerConfig.configured":
		if e.complexity.ReconcilerConfig.Configured == nil {
			break
		}

		return e.complexity.ReconcilerConfig.Configured(childComplexity), true

	case "ReconcilerConfig.description":
		if e.complexity.ReconcilerConfig.Description == nil {
			break
		}

		return e.complexity.ReconcilerConfig.Description(childComplexity), true

	case "ReconcilerConfig.displayName":
		if e.complexity.ReconcilerConfig.DisplayName == nil {
			break
		}

		return e.complexity.ReconcilerConfig.DisplayName(childComplexity), true

	case "ReconcilerConfig.key":
		if e.complexity.ReconcilerConfig.Key == nil {
			break
		}

		return e.complexity.ReconcilerConfig.Key(childComplexity), true

	case "ReconcilerConfig.secret":
		if e.complexity.ReconcilerConfig.Secret == nil {
			break
		}

		return e.complexity.ReconcilerConfig.Secret(childComplexity), true

	case "ReconcilerConfig.value":
		if e.complexity.ReconcilerConfig.Value == nil {
			break
		}

		return e.complexity.ReconcilerConfig.Value(childComplexity), true

	case "ReconcilerConfiguredActivityLogEntry.actor":
		if e.complexity.ReconcilerConfiguredActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.ReconcilerConfiguredActivityLogEntry.Actor(childComplexity), true

	case "ReconcilerConfiguredActivityLogEntry.createdAt":
		if e.complexity.ReconcilerConfiguredActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.ReconcilerConfiguredActivityLogEntry.CreatedAt(childComplexity), true

	case "ReconcilerConfiguredActivityLogEntry.data":
		if e.complexity.ReconcilerConfiguredActivityLogEntry.Data == nil {
			break
		}

		return e.complexity.ReconcilerConfiguredActivityLogEntry.Data(childComplexity), true

	case "ReconcilerConfiguredActivityLogEntry.environmentName":
		if e.complexity.ReconcilerConfiguredActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.ReconcilerConfiguredActivityLogEntry.EnvironmentName(childComplexity), true

	case "ReconcilerConfiguredActivityLogEntry.id":
		if e.complexity.ReconcilerConfiguredActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.ReconcilerConfiguredActivityLogEntry.ID(childComplexity), true

	case "ReconcilerConfiguredActivityLogEntry.message":
		if e.complexity.ReconcilerConfiguredActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.ReconcilerConfiguredActivityLogEntry.Message(childComplexity), true

	case "ReconcilerConfiguredActivityLogEntry.resourceName":
		if e.complexity.ReconcilerConfiguredActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.ReconcilerConfiguredActivityLogEntry.ResourceName(childComplexity), true

	case "ReconcilerConfiguredActivityLogEntry.resourceType":
		if e.complexity.ReconcilerConfiguredActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.ReconcilerConfiguredActivityLogEntry.ResourceType(childComplexity), true

	case "ReconcilerConfiguredActivityLogEntry.teamSlug":
		if e.complexity.ReconcilerConfiguredActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.ReconcilerConfiguredActivityLogEntry.TeamSlug(childComplexity), true

	case "ReconcilerConfiguredActivityLogEntryData.updatedKeys":
		if e.complexity.ReconcilerConfiguredActivityLogEntryData.UpdatedKeys == nil {
			break
		}

		return e.complexity.ReconcilerConfiguredActivityLogEntryData.UpdatedKeys(childComplexity), true

	case "ReconcilerConnection.edges":
		if e.complexity.ReconcilerConnection.Edges == nil {
			break
		}

		return e.complexity.ReconcilerConnection.Edges(childComplexity), true

	case "ReconcilerConnection.nodes":
		if e.complexity.ReconcilerConnection.Nodes == nil {
			break
		}

		return e.complexity.ReconcilerConnection.Nodes(childComplexity), true

	case "ReconcilerConnection.pageInfo":
		if e.complexity.ReconcilerConnection.PageInfo == nil {
			break
		}

		return e.complexity.ReconcilerConnection.PageInfo(childComplexity), true

	case "ReconcilerDisabledActivityLogEntry.actor":
		if e.complexity.ReconcilerDisabledActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.ReconcilerDisabledActivityLogEntry.Actor(childComplexity), true

	case "ReconcilerDisabledActivityLogEntry.createdAt":
		if e.complexity.ReconcilerDisabledActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.ReconcilerDisabledActivityLogEntry.CreatedAt(childComplexity), true

	case "ReconcilerDisabledActivityLogEntry.environmentName":
		if e.complexity.ReconcilerDisabledActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.ReconcilerDisabledActivityLogEntry.EnvironmentName(childComplexity), true

	case "ReconcilerDisabledActivityLogEntry.id":
		if e.complexity.ReconcilerDisabledActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.ReconcilerDisabledActivityLogEntry.ID(childComplexity), true

	case "ReconcilerDisabledActivityLogEntry.message":
		if e.complexity.ReconcilerDisabledActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.ReconcilerDisabledActivityLogEntry.Message(childComplexity), true

	case "ReconcilerDisabledActivityLogEntry.resourceName":
		if e.complexity.ReconcilerDisabledActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.ReconcilerDisabledActivityLogEntry.ResourceName(childComplexity), true

	case "ReconcilerDisabledActivityLogEntry.resourceType":
		if e.complexity.ReconcilerDisabledActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.ReconcilerDisabledActivityLogEntry.ResourceType(childComplexity), true

	case "ReconcilerDisabledActivityLogEntry.teamSlug":
		if e.complexity.ReconcilerDisabledActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.ReconcilerDisabledActivityLogEntry.TeamSlug(childComplexity), true

	case "ReconcilerEdge.cursor":
		if e.complexity.ReconcilerEdge.Cursor == nil {
			break
		}

		return e.complexity.ReconcilerEdge.Cursor(childComplexity), true

	case "ReconcilerEdge.node":
		if e.complexity.ReconcilerEdge.Node == nil {
			break
		}

		return e.complexity.ReconcilerEdge.Node(childComplexity), true

	case "ReconcilerEnabledActivityLogEntry.actor":
		if e.complexity.ReconcilerEnabledActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.ReconcilerEnabledActivityLogEntry.Actor(childComplexity), true

	case "ReconcilerEnabledActivityLogEntry.createdAt":
		if e.complexity.ReconcilerEnabledActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.ReconcilerEnabledActivityLogEntry.CreatedAt(childComplexity), true

	case "ReconcilerEnabledActivityLogEntry.environmentName":
		if e.complexity.ReconcilerEnabledActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.ReconcilerEnabledActivityLogEntry.EnvironmentName(childComplexity), true

	case "ReconcilerEnabledActivityLogEntry.id":
		if e.complexity.ReconcilerEnabledActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.ReconcilerEnabledActivityLogEntry.ID(childComplexity), true

	case "ReconcilerEnabledActivityLogEntry.message":
		if e.complexity.ReconcilerEnabledActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.ReconcilerEnabledActivityLogEntry.Message(childComplexity), true

	case "ReconcilerEnabledActivityLogEntry.resourceName":
		if e.complexity.ReconcilerEnabledActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.ReconcilerEnabledActivityLogEntry.ResourceName(childComplexity), true

	case "ReconcilerEnabledActivityLogEntry.resourceType":
		if e.complexity.ReconcilerEnabledActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.ReconcilerEnabledActivityLogEntry.ResourceType(childComplexity), true

	case "ReconcilerEnabledActivityLogEntry.teamSlug":
		if e.complexity.ReconcilerEnabledActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.ReconcilerEnabledActivityLogEntry.TeamSlug(childComplexity), true

	case "ReconcilerError.correlationID":
		if e.complexity.ReconcilerError.CorrelationID == nil {
			break
		}

		return e.complexity.ReconcilerError.CorrelationID(childComplexity), true

	case "ReconcilerError.createdAt":
		if e.complexity.ReconcilerError.CreatedAt == nil {
			break
		}

		return e.complexity.ReconcilerError.CreatedAt(childComplexity), true

	case "ReconcilerError.id":
		if e.complexity.ReconcilerError.ID == nil {
			break
		}

		return e.complexity.ReconcilerError.ID(childComplexity), true

	case "ReconcilerError.message":
		if e.complexity.ReconcilerError.Message == nil {
			break
		}

		return e.complexity.ReconcilerError.Message(childComplexity), true

	case "ReconcilerError.team":
		if e.complexity.ReconcilerError.Team == nil {
			break
		}

		return e.complexity.ReconcilerError.Team(childComplexity), true

	case "ReconcilerErrorConnection.edges":
		if e.complexity.ReconcilerErrorConnection.Edges == nil {
			break
		}

		return e.complexity.ReconcilerErrorConnection.Edges(childComplexity), true

	case "ReconcilerErrorConnection.nodes":
		if e.complexity.ReconcilerErrorConnection.Nodes == nil {
			break
		}

		return e.complexity.ReconcilerErrorConnection.Nodes(childComplexity), true

	case "ReconcilerErrorConnection.pageInfo":
		if e.complexity.ReconcilerErrorConnection.PageInfo == nil {
			break
		}

		return e.complexity.ReconcilerErrorConnection.PageInfo(childComplexity), true

	case "ReconcilerErrorEdge.cursor":
		if e.complexity.ReconcilerErrorEdge.Cursor == nil {
			break
		}

		return e.complexity.ReconcilerErrorEdge.Cursor(childComplexity), true

	case "ReconcilerErrorEdge.node":
		if e.complexity.ReconcilerErrorEdge.Node == nil {
			break
		}

		return e.complexity.ReconcilerErrorEdge.Node(childComplexity), true

	case "RemoveRepositoryFromTeamPayload.success":
		if e.complexity.RemoveRepositoryFromTeamPayload.Success == nil {
			break
		}

		return e.complexity.RemoveRepositoryFromTeamPayload.Success(childComplexity), true

	case "RemoveSecretValuePayload.secret":
		if e.complexity.RemoveSecretValuePayload.Secret == nil {
			break
		}

		return e.complexity.RemoveSecretValuePayload.Secret(childComplexity), true

	case "RemoveTeamMemberPayload.team":
		if e.complexity.RemoveTeamMemberPayload.Team == nil {
			break
		}

		return e.complexity.RemoveTeamMemberPayload.Team(childComplexity), true

	case "RemoveTeamMemberPayload.user":
		if e.complexity.RemoveTeamMemberPayload.User == nil {
			break
		}

		return e.complexity.RemoveTeamMemberPayload.User(childComplexity), true

	case "Repository.id":
		if e.complexity.Repository.ID == nil {
			break
		}

		return e.complexity.Repository.ID(childComplexity), true

	case "Repository.name":
		if e.complexity.Repository.Name == nil {
			break
		}

		return e.complexity.Repository.Name(childComplexity), true

	case "Repository.team":
		if e.complexity.Repository.Team == nil {
			break
		}

		return e.complexity.Repository.Team(childComplexity), true

	case "RepositoryAddedActivityLogEntry.actor":
		if e.complexity.RepositoryAddedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.RepositoryAddedActivityLogEntry.Actor(childComplexity), true

	case "RepositoryAddedActivityLogEntry.createdAt":
		if e.complexity.RepositoryAddedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.RepositoryAddedActivityLogEntry.CreatedAt(childComplexity), true

	case "RepositoryAddedActivityLogEntry.environmentName":
		if e.complexity.RepositoryAddedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.RepositoryAddedActivityLogEntry.EnvironmentName(childComplexity), true

	case "RepositoryAddedActivityLogEntry.id":
		if e.complexity.RepositoryAddedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.RepositoryAddedActivityLogEntry.ID(childComplexity), true

	case "RepositoryAddedActivityLogEntry.message":
		if e.complexity.RepositoryAddedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.RepositoryAddedActivityLogEntry.Message(childComplexity), true

	case "RepositoryAddedActivityLogEntry.resourceName":
		if e.complexity.RepositoryAddedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.RepositoryAddedActivityLogEntry.ResourceName(childComplexity), true

	case "RepositoryAddedActivityLogEntry.resourceType":
		if e.complexity.RepositoryAddedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.RepositoryAddedActivityLogEntry.ResourceType(childComplexity), true

	case "RepositoryAddedActivityLogEntry.teamSlug":
		if e.complexity.RepositoryAddedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.RepositoryAddedActivityLogEntry.TeamSlug(childComplexity), true

	case "RepositoryConnection.edges":
		if e.complexity.RepositoryConnection.Edges == nil {
			break
		}

		return e.complexity.RepositoryConnection.Edges(childComplexity), true

	case "RepositoryConnection.nodes":
		if e.complexity.RepositoryConnection.Nodes == nil {
			break
		}

		return e.complexity.RepositoryConnection.Nodes(childComplexity), true

	case "RepositoryConnection.pageInfo":
		if e.complexity.RepositoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.RepositoryConnection.PageInfo(childComplexity), true

	case "RepositoryEdge.cursor":
		if e.complexity.RepositoryEdge.Cursor == nil {
			break
		}

		return e.complexity.RepositoryEdge.Cursor(childComplexity), true

	case "RepositoryEdge.node":
		if e.complexity.RepositoryEdge.Node == nil {
			break
		}

		return e.complexity.RepositoryEdge.Node(childComplexity), true

	case "RepositoryRemovedActivityLogEntry.actor":
		if e.complexity.RepositoryRemovedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.RepositoryRemovedActivityLogEntry.Actor(childComplexity), true

	case "RepositoryRemovedActivityLogEntry.createdAt":
		if e.complexity.RepositoryRemovedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.RepositoryRemovedActivityLogEntry.CreatedAt(childComplexity), true

	case "RepositoryRemovedActivityLogEntry.environmentName":
		if e.complexity.RepositoryRemovedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.RepositoryRemovedActivityLogEntry.EnvironmentName(childComplexity), true

	case "RepositoryRemovedActivityLogEntry.id":
		if e.complexity.RepositoryRemovedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.RepositoryRemovedActivityLogEntry.ID(childComplexity), true

	case "RepositoryRemovedActivityLogEntry.message":
		if e.complexity.RepositoryRemovedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.RepositoryRemovedActivityLogEntry.Message(childComplexity), true

	case "RepositoryRemovedActivityLogEntry.resourceName":
		if e.complexity.RepositoryRemovedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.RepositoryRemovedActivityLogEntry.ResourceName(childComplexity), true

	case "RepositoryRemovedActivityLogEntry.resourceType":
		if e.complexity.RepositoryRemovedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.RepositoryRemovedActivityLogEntry.ResourceType(childComplexity), true

	case "RepositoryRemovedActivityLogEntry.teamSlug":
		if e.complexity.RepositoryRemovedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.RepositoryRemovedActivityLogEntry.TeamSlug(childComplexity), true

	case "RequestTeamDeletionPayload.key":
		if e.complexity.RequestTeamDeletionPayload.Key == nil {
			break
		}

		return e.complexity.RequestTeamDeletionPayload.Key(childComplexity), true

	case "RestartApplicationPayload.application":
		if e.complexity.RestartApplicationPayload.Application == nil {
			break
		}

		return e.complexity.RestartApplicationPayload.Application(childComplexity), true

	case "RevokeRoleFromServiceAccountPayload.serviceAccount":
		if e.complexity.RevokeRoleFromServiceAccountPayload.ServiceAccount == nil {
			break
		}

		return e.complexity.RevokeRoleFromServiceAccountPayload.ServiceAccount(childComplexity), true

	case "RevokeTeamAccessToUnleashPayload.unleash":
		if e.complexity.RevokeTeamAccessToUnleashPayload.Unleash == nil {
			break
		}

		return e.complexity.RevokeTeamAccessToUnleashPayload.Unleash(childComplexity), true

	case "Role.description":
		if e.complexity.Role.Description == nil {
			break
		}

		return e.complexity.Role.Description(childComplexity), true

	case "Role.id":
		if e.complexity.Role.ID == nil {
			break
		}

		return e.complexity.Role.ID(childComplexity), true

	case "Role.name":
		if e.complexity.Role.Name == nil {
			break
		}

		return e.complexity.Role.Name(childComplexity), true

	case "RoleAssignedToServiceAccountActivityLogEntry.actor":
		if e.complexity.RoleAssignedToServiceAccountActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.RoleAssignedToServiceAccountActivityLogEntry.Actor(childComplexity), true

	case "RoleAssignedToServiceAccountActivityLogEntry.createdAt":
		if e.complexity.RoleAssignedToServiceAccountActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.RoleAssignedToServiceAccountActivityLogEntry.CreatedAt(childComplexity), true

	case "RoleAssignedToServiceAccountActivityLogEntry.data":
		if e.complexity.RoleAssignedToServiceAccountActivityLogEntry.Data == nil {
			break
		}

		return e.complexity.RoleAssignedToServiceAccountActivityLogEntry.Data(childComplexity), true

	case "RoleAssignedToServiceAccountActivityLogEntry.environmentName":
		if e.complexity.RoleAssignedToServiceAccountActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.RoleAssignedToServiceAccountActivityLogEntry.EnvironmentName(childComplexity), true

	case "RoleAssignedToServiceAccountActivityLogEntry.id":
		if e.complexity.RoleAssignedToServiceAccountActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.RoleAssignedToServiceAccountActivityLogEntry.ID(childComplexity), true

	case "RoleAssignedToServiceAccountActivityLogEntry.message":
		if e.complexity.RoleAssignedToServiceAccountActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.RoleAssignedToServiceAccountActivityLogEntry.Message(childComplexity), true

	case "RoleAssignedToServiceAccountActivityLogEntry.resourceName":
		if e.complexity.RoleAssignedToServiceAccountActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.RoleAssignedToServiceAccountActivityLogEntry.ResourceName(childComplexity), true

	case "RoleAssignedToServiceAccountActivityLogEntry.resourceType":
		if e.complexity.RoleAssignedToServiceAccountActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.RoleAssignedToServiceAccountActivityLogEntry.ResourceType(childComplexity), true

	case "RoleAssignedToServiceAccountActivityLogEntry.teamSlug":
		if e.complexity.RoleAssignedToServiceAccountActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.RoleAssignedToServiceAccountActivityLogEntry.TeamSlug(childComplexity), true

	case "RoleAssignedToServiceAccountActivityLogEntryData.roleName":
		if e.complexity.RoleAssignedToServiceAccountActivityLogEntryData.RoleName == nil {
			break
		}

		return e.complexity.RoleAssignedToServiceAccountActivityLogEntryData.RoleName(childComplexity), true

	case "RoleAssignedUserSyncLogEntry.createdAt":
		if e.complexity.RoleAssignedUserSyncLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.RoleAssignedUserSyncLogEntry.CreatedAt(childComplexity), true

	case "RoleAssignedUserSyncLogEntry.id":
		if e.complexity.RoleAssignedUserSyncLogEntry.ID == nil {
			break
		}

		return e.complexity.RoleAssignedUserSyncLogEntry.ID(childComplexity), true

	case "RoleAssignedUserSyncLogEntry.message":
		if e.complexity.RoleAssignedUserSyncLogEntry.Message == nil {
			break
		}

		return e.complexity.RoleAssignedUserSyncLogEntry.Message(childComplexity), true

	case "RoleAssignedUserSyncLogEntry.roleName":
		if e.complexity.RoleAssignedUserSyncLogEntry.RoleName == nil {
			break
		}

		return e.complexity.RoleAssignedUserSyncLogEntry.RoleName(childComplexity), true

	case "RoleAssignedUserSyncLogEntry.userEmail":
		if e.complexity.RoleAssignedUserSyncLogEntry.UserEmail == nil {
			break
		}

		return e.complexity.RoleAssignedUserSyncLogEntry.UserEmail(childComplexity), true

	case "RoleAssignedUserSyncLogEntry.userID":
		if e.complexity.RoleAssignedUserSyncLogEntry.UserID == nil {
			break
		}

		return e.complexity.RoleAssignedUserSyncLogEntry.UserID(childComplexity), true

	case "RoleAssignedUserSyncLogEntry.userName":
		if e.complexity.RoleAssignedUserSyncLogEntry.UserName == nil {
			break
		}

		return e.complexity.RoleAssignedUserSyncLogEntry.UserName(childComplexity), true

	case "RoleConnection.edges":
		if e.complexity.RoleConnection.Edges == nil {
			break
		}

		return e.complexity.RoleConnection.Edges(childComplexity), true

	case "RoleConnection.nodes":
		if e.complexity.RoleConnection.Nodes == nil {
			break
		}

		return e.complexity.RoleConnection.Nodes(childComplexity), true

	case "RoleConnection.pageInfo":
		if e.complexity.RoleConnection.PageInfo == nil {
			break
		}

		return e.complexity.RoleConnection.PageInfo(childComplexity), true

	case "RoleEdge.cursor":
		if e.complexity.RoleEdge.Cursor == nil {
			break
		}

		return e.complexity.RoleEdge.Cursor(childComplexity), true

	case "RoleEdge.node":
		if e.complexity.RoleEdge.Node == nil {
			break
		}

		return e.complexity.RoleEdge.Node(childComplexity), true

	case "RoleRevokedFromServiceAccountActivityLogEntry.actor":
		if e.complexity.RoleRevokedFromServiceAccountActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.RoleRevokedFromServiceAccountActivityLogEntry.Actor(childComplexity), true

	case "RoleRevokedFromServiceAccountActivityLogEntry.createdAt":
		if e.complexity.RoleRevokedFromServiceAccountActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.RoleRevokedFromServiceAccountActivityLogEntry.CreatedAt(childComplexity), true

	case "RoleRevokedFromServiceAccountActivityLogEntry.data":
		if e.complexity.RoleRevokedFromServiceAccountActivityLogEntry.Data == nil {
			break
		}

		return e.complexity.RoleRevokedFromServiceAccountActivityLogEntry.Data(childComplexity), true

	case "RoleRevokedFromServiceAccountActivityLogEntry.environmentName":
		if e.complexity.RoleRevokedFromServiceAccountActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.RoleRevokedFromServiceAccountActivityLogEntry.EnvironmentName(childComplexity), true

	case "RoleRevokedFromServiceAccountActivityLogEntry.id":
		if e.complexity.RoleRevokedFromServiceAccountActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.RoleRevokedFromServiceAccountActivityLogEntry.ID(childComplexity), true

	case "RoleRevokedFromServiceAccountActivityLogEntry.message":
		if e.complexity.RoleRevokedFromServiceAccountActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.RoleRevokedFromServiceAccountActivityLogEntry.Message(childComplexity), true

	case "RoleRevokedFromServiceAccountActivityLogEntry.resourceName":
		if e.complexity.RoleRevokedFromServiceAccountActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.RoleRevokedFromServiceAccountActivityLogEntry.ResourceName(childComplexity), true

	case "RoleRevokedFromServiceAccountActivityLogEntry.resourceType":
		if e.complexity.RoleRevokedFromServiceAccountActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.RoleRevokedFromServiceAccountActivityLogEntry.ResourceType(childComplexity), true

	case "RoleRevokedFromServiceAccountActivityLogEntry.teamSlug":
		if e.complexity.RoleRevokedFromServiceAccountActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.RoleRevokedFromServiceAccountActivityLogEntry.TeamSlug(childComplexity), true

	case "RoleRevokedFromServiceAccountActivityLogEntryData.roleName":
		if e.complexity.RoleRevokedFromServiceAccountActivityLogEntryData.RoleName == nil {
			break
		}

		return e.complexity.RoleRevokedFromServiceAccountActivityLogEntryData.RoleName(childComplexity), true

	case "RoleRevokedUserSyncLogEntry.createdAt":
		if e.complexity.RoleRevokedUserSyncLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.RoleRevokedUserSyncLogEntry.CreatedAt(childComplexity), true

	case "RoleRevokedUserSyncLogEntry.id":
		if e.complexity.RoleRevokedUserSyncLogEntry.ID == nil {
			break
		}

		return e.complexity.RoleRevokedUserSyncLogEntry.ID(childComplexity), true

	case "RoleRevokedUserSyncLogEntry.message":
		if e.complexity.RoleRevokedUserSyncLogEntry.Message == nil {
			break
		}

		return e.complexity.RoleRevokedUserSyncLogEntry.Message(childComplexity), true

	case "RoleRevokedUserSyncLogEntry.roleName":
		if e.complexity.RoleRevokedUserSyncLogEntry.RoleName == nil {
			break
		}

		return e.complexity.RoleRevokedUserSyncLogEntry.RoleName(childComplexity), true

	case "RoleRevokedUserSyncLogEntry.userEmail":
		if e.complexity.RoleRevokedUserSyncLogEntry.UserEmail == nil {
			break
		}

		return e.complexity.RoleRevokedUserSyncLogEntry.UserEmail(childComplexity), true

	case "RoleRevokedUserSyncLogEntry.userID":
		if e.complexity.RoleRevokedUserSyncLogEntry.UserID == nil {
			break
		}

		return e.complexity.RoleRevokedUserSyncLogEntry.UserID(childComplexity), true

	case "RoleRevokedUserSyncLogEntry.userName":
		if e.complexity.RoleRevokedUserSyncLogEntry.UserName == nil {
			break
		}

		return e.complexity.RoleRevokedUserSyncLogEntry.UserName(childComplexity), true

	case "SearchNodeConnection.edges":
		if e.complexity.SearchNodeConnection.Edges == nil {
			break
		}

		return e.complexity.SearchNodeConnection.Edges(childComplexity), true

	case "SearchNodeConnection.nodes":
		if e.complexity.SearchNodeConnection.Nodes == nil {
			break
		}

		return e.complexity.SearchNodeConnection.Nodes(childComplexity), true

	case "SearchNodeConnection.pageInfo":
		if e.complexity.SearchNodeConnection.PageInfo == nil {
			break
		}

		return e.complexity.SearchNodeConnection.PageInfo(childComplexity), true

	case "SearchNodeEdge.cursor":
		if e.complexity.SearchNodeEdge.Cursor == nil {
			break
		}

		return e.complexity.SearchNodeEdge.Cursor(childComplexity), true

	case "SearchNodeEdge.node":
		if e.complexity.SearchNodeEdge.Node == nil {
			break
		}

		return e.complexity.SearchNodeEdge.Node(childComplexity), true

	case "Secret.applications":
		if e.complexity.Secret.Applications == nil {
			break
		}

		args, err := ec.field_Secret_applications_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Secret.Applications(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor)), true

	case "Secret.environment":
		if e.complexity.Secret.Environment == nil {
			break
		}

		return e.complexity.Secret.Environment(childComplexity), true

	case "Secret.id":
		if e.complexity.Secret.ID == nil {
			break
		}

		return e.complexity.Secret.ID(childComplexity), true

	case "Secret.jobs":
		if e.complexity.Secret.Jobs == nil {
			break
		}

		args, err := ec.field_Secret_jobs_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Secret.Jobs(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor)), true

	case "Secret.lastModifiedAt":
		if e.complexity.Secret.LastModifiedAt == nil {
			break
		}

		return e.complexity.Secret.LastModifiedAt(childComplexity), true

	case "Secret.lastModifiedBy":
		if e.complexity.Secret.LastModifiedBy == nil {
			break
		}

		return e.complexity.Secret.LastModifiedBy(childComplexity), true

	case "Secret.name":
		if e.complexity.Secret.Name == nil {
			break
		}

		return e.complexity.Secret.Name(childComplexity), true

	case "Secret.team":
		if e.complexity.Secret.Team == nil {
			break
		}

		return e.complexity.Secret.Team(childComplexity), true

	case "Secret.teamEnvironment":
		if e.complexity.Secret.TeamEnvironment == nil {
			break
		}

		return e.complexity.Secret.TeamEnvironment(childComplexity), true

	case "Secret.values":
		if e.complexity.Secret.Values == nil {
			break
		}

		return e.complexity.Secret.Values(childComplexity), true

	case "Secret.workloads":
		if e.complexity.Secret.Workloads == nil {
			break
		}

		args, err := ec.field_Secret_workloads_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Secret.Workloads(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor)), true

	case "SecretConnection.edges":
		if e.complexity.SecretConnection.Edges == nil {
			break
		}

		return e.complexity.SecretConnection.Edges(childComplexity), true

	case "SecretConnection.nodes":
		if e.complexity.SecretConnection.Nodes == nil {
			break
		}

		return e.complexity.SecretConnection.Nodes(childComplexity), true

	case "SecretConnection.pageInfo":
		if e.complexity.SecretConnection.PageInfo == nil {
			break
		}

		return e.complexity.SecretConnection.PageInfo(childComplexity), true

	case "SecretCreatedActivityLogEntry.actor":
		if e.complexity.SecretCreatedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.SecretCreatedActivityLogEntry.Actor(childComplexity), true

	case "SecretCreatedActivityLogEntry.createdAt":
		if e.complexity.SecretCreatedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.SecretCreatedActivityLogEntry.CreatedAt(childComplexity), true

	case "SecretCreatedActivityLogEntry.environmentName":
		if e.complexity.SecretCreatedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.SecretCreatedActivityLogEntry.EnvironmentName(childComplexity), true

	case "SecretCreatedActivityLogEntry.id":
		if e.complexity.SecretCreatedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.SecretCreatedActivityLogEntry.ID(childComplexity), true

	case "SecretCreatedActivityLogEntry.message":
		if e.complexity.SecretCreatedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.SecretCreatedActivityLogEntry.Message(childComplexity), true

	case "SecretCreatedActivityLogEntry.resourceName":
		if e.complexity.SecretCreatedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.SecretCreatedActivityLogEntry.ResourceName(childComplexity), true

	case "SecretCreatedActivityLogEntry.resourceType":
		if e.complexity.SecretCreatedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.SecretCreatedActivityLogEntry.ResourceType(childComplexity), true

	case "SecretCreatedActivityLogEntry.teamSlug":
		if e.complexity.SecretCreatedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.SecretCreatedActivityLogEntry.TeamSlug(childComplexity), true

	case "SecretDeletedActivityLogEntry.actor":
		if e.complexity.SecretDeletedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.SecretDeletedActivityLogEntry.Actor(childComplexity), true

	case "SecretDeletedActivityLogEntry.createdAt":
		if e.complexity.SecretDeletedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.SecretDeletedActivityLogEntry.CreatedAt(childComplexity), true

	case "SecretDeletedActivityLogEntry.environmentName":
		if e.complexity.SecretDeletedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.SecretDeletedActivityLogEntry.EnvironmentName(childComplexity), true

	case "SecretDeletedActivityLogEntry.id":
		if e.complexity.SecretDeletedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.SecretDeletedActivityLogEntry.ID(childComplexity), true

	case "SecretDeletedActivityLogEntry.message":
		if e.complexity.SecretDeletedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.SecretDeletedActivityLogEntry.Message(childComplexity), true

	case "SecretDeletedActivityLogEntry.resourceName":
		if e.complexity.SecretDeletedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.SecretDeletedActivityLogEntry.ResourceName(childComplexity), true

	case "SecretDeletedActivityLogEntry.resourceType":
		if e.complexity.SecretDeletedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.SecretDeletedActivityLogEntry.ResourceType(childComplexity), true

	case "SecretDeletedActivityLogEntry.teamSlug":
		if e.complexity.SecretDeletedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.SecretDeletedActivityLogEntry.TeamSlug(childComplexity), true

	case "SecretEdge.cursor":
		if e.complexity.SecretEdge.Cursor == nil {
			break
		}

		return e.complexity.SecretEdge.Cursor(childComplexity), true

	case "SecretEdge.node":
		if e.complexity.SecretEdge.Node == nil {
			break
		}

		return e.complexity.SecretEdge.Node(childComplexity), true

	case "SecretValue.name":
		if e.complexity.SecretValue.Name == nil {
			break
		}

		return e.complexity.SecretValue.Name(childComplexity), true

	case "SecretValue.value":
		if e.complexity.SecretValue.Value == nil {
			break
		}

		return e.complexity.SecretValue.Value(childComplexity), true

	case "SecretValueAddedActivityLogEntry.actor":
		if e.complexity.SecretValueAddedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.SecretValueAddedActivityLogEntry.Actor(childComplexity), true

	case "SecretValueAddedActivityLogEntry.createdAt":
		if e.complexity.SecretValueAddedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.SecretValueAddedActivityLogEntry.CreatedAt(childComplexity), true

	case "SecretValueAddedActivityLogEntry.data":
		if e.complexity.SecretValueAddedActivityLogEntry.Data == nil {
			break
		}

		return e.complexity.SecretValueAddedActivityLogEntry.Data(childComplexity), true

	case "SecretValueAddedActivityLogEntry.environmentName":
		if e.complexity.SecretValueAddedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.SecretValueAddedActivityLogEntry.EnvironmentName(childComplexity), true

	case "SecretValueAddedActivityLogEntry.id":
		if e.complexity.SecretValueAddedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.SecretValueAddedActivityLogEntry.ID(childComplexity), true

	case "SecretValueAddedActivityLogEntry.message":
		if e.complexity.SecretValueAddedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.SecretValueAddedActivityLogEntry.Message(childComplexity), true

	case "SecretValueAddedActivityLogEntry.resourceName":
		if e.complexity.SecretValueAddedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.SecretValueAddedActivityLogEntry.ResourceName(childComplexity), true

	case "SecretValueAddedActivityLogEntry.resourceType":
		if e.complexity.SecretValueAddedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.SecretValueAddedActivityLogEntry.ResourceType(childComplexity), true

	case "SecretValueAddedActivityLogEntry.teamSlug":
		if e.complexity.SecretValueAddedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.SecretValueAddedActivityLogEntry.TeamSlug(childComplexity), true

	case "SecretValueAddedActivityLogEntryData.valueName":
		if e.complexity.SecretValueAddedActivityLogEntryData.ValueName == nil {
			break
		}

		return e.complexity.SecretValueAddedActivityLogEntryData.ValueName(childComplexity), true

	case "SecretValueRemovedActivityLogEntry.actor":
		if e.complexity.SecretValueRemovedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.SecretValueRemovedActivityLogEntry.Actor(childComplexity), true

	case "SecretValueRemovedActivityLogEntry.createdAt":
		if e.complexity.SecretValueRemovedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.SecretValueRemovedActivityLogEntry.CreatedAt(childComplexity), true

	case "SecretValueRemovedActivityLogEntry.data":
		if e.complexity.SecretValueRemovedActivityLogEntry.Data == nil {
			break
		}

		return e.complexity.SecretValueRemovedActivityLogEntry.Data(childComplexity), true

	case "SecretValueRemovedActivityLogEntry.environmentName":
		if e.complexity.SecretValueRemovedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.SecretValueRemovedActivityLogEntry.EnvironmentName(childComplexity), true

	case "SecretValueRemovedActivityLogEntry.id":
		if e.complexity.SecretValueRemovedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.SecretValueRemovedActivityLogEntry.ID(childComplexity), true

	case "SecretValueRemovedActivityLogEntry.message":
		if e.complexity.SecretValueRemovedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.SecretValueRemovedActivityLogEntry.Message(childComplexity), true

	case "SecretValueRemovedActivityLogEntry.resourceName":
		if e.complexity.SecretValueRemovedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.SecretValueRemovedActivityLogEntry.ResourceName(childComplexity), true

	case "SecretValueRemovedActivityLogEntry.resourceType":
		if e.complexity.SecretValueRemovedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.SecretValueRemovedActivityLogEntry.ResourceType(childComplexity), true

	case "SecretValueRemovedActivityLogEntry.teamSlug":
		if e.complexity.SecretValueRemovedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.SecretValueRemovedActivityLogEntry.TeamSlug(childComplexity), true

	case "SecretValueRemovedActivityLogEntryData.valueName":
		if e.complexity.SecretValueRemovedActivityLogEntryData.ValueName == nil {
			break
		}

		return e.complexity.SecretValueRemovedActivityLogEntryData.ValueName(childComplexity), true

	case "SecretValueUpdatedActivityLogEntry.actor":
		if e.complexity.SecretValueUpdatedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.SecretValueUpdatedActivityLogEntry.Actor(childComplexity), true

	case "SecretValueUpdatedActivityLogEntry.createdAt":
		if e.complexity.SecretValueUpdatedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.SecretValueUpdatedActivityLogEntry.CreatedAt(childComplexity), true

	case "SecretValueUpdatedActivityLogEntry.data":
		if e.complexity.SecretValueUpdatedActivityLogEntry.Data == nil {
			break
		}

		return e.complexity.SecretValueUpdatedActivityLogEntry.Data(childComplexity), true

	case "SecretValueUpdatedActivityLogEntry.environmentName":
		if e.complexity.SecretValueUpdatedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.SecretValueUpdatedActivityLogEntry.EnvironmentName(childComplexity), true

	case "SecretValueUpdatedActivityLogEntry.id":
		if e.complexity.SecretValueUpdatedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.SecretValueUpdatedActivityLogEntry.ID(childComplexity), true

	case "SecretValueUpdatedActivityLogEntry.message":
		if e.complexity.SecretValueUpdatedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.SecretValueUpdatedActivityLogEntry.Message(childComplexity), true

	case "SecretValueUpdatedActivityLogEntry.resourceName":
		if e.complexity.SecretValueUpdatedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.SecretValueUpdatedActivityLogEntry.ResourceName(childComplexity), true

	case "SecretValueUpdatedActivityLogEntry.resourceType":
		if e.complexity.SecretValueUpdatedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.SecretValueUpdatedActivityLogEntry.ResourceType(childComplexity), true

	case "SecretValueUpdatedActivityLogEntry.teamSlug":
		if e.complexity.SecretValueUpdatedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.SecretValueUpdatedActivityLogEntry.TeamSlug(childComplexity), true

	case "SecretValueUpdatedActivityLogEntryData.valueName":
		if e.complexity.SecretValueUpdatedActivityLogEntryData.ValueName == nil {
			break
		}

		return e.complexity.SecretValueUpdatedActivityLogEntryData.ValueName(childComplexity), true

	case "ServiceAccount.createdAt":
		if e.complexity.ServiceAccount.CreatedAt == nil {
			break
		}

		return e.complexity.ServiceAccount.CreatedAt(childComplexity), true

	case "ServiceAccount.description":
		if e.complexity.ServiceAccount.Description == nil {
			break
		}

		return e.complexity.ServiceAccount.Description(childComplexity), true

	case "ServiceAccount.id":
		if e.complexity.ServiceAccount.ID == nil {
			break
		}

		return e.complexity.ServiceAccount.ID(childComplexity), true

	case "ServiceAccount.lastUsedAt":
		if e.complexity.ServiceAccount.LastUsedAt == nil {
			break
		}

		return e.complexity.ServiceAccount.LastUsedAt(childComplexity), true

	case "ServiceAccount.name":
		if e.complexity.ServiceAccount.Name == nil {
			break
		}

		return e.complexity.ServiceAccount.Name(childComplexity), true

	case "ServiceAccount.roles":
		if e.complexity.ServiceAccount.Roles == nil {
			break
		}

		args, err := ec.field_ServiceAccount_roles_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ServiceAccount.Roles(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor)), true

	case "ServiceAccount.team":
		if e.complexity.ServiceAccount.Team == nil {
			break
		}

		return e.complexity.ServiceAccount.Team(childComplexity), true

	case "ServiceAccount.tokens":
		if e.complexity.ServiceAccount.Tokens == nil {
			break
		}

		args, err := ec.field_ServiceAccount_tokens_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ServiceAccount.Tokens(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor)), true

	case "ServiceAccount.updatedAt":
		if e.complexity.ServiceAccount.UpdatedAt == nil {
			break
		}

		return e.complexity.ServiceAccount.UpdatedAt(childComplexity), true

	case "ServiceAccountConnection.edges":
		if e.complexity.ServiceAccountConnection.Edges == nil {
			break
		}

		return e.complexity.ServiceAccountConnection.Edges(childComplexity), true

	case "ServiceAccountConnection.nodes":
		if e.complexity.ServiceAccountConnection.Nodes == nil {
			break
		}

		return e.complexity.ServiceAccountConnection.Nodes(childComplexity), true

	case "ServiceAccountConnection.pageInfo":
		if e.complexity.ServiceAccountConnection.PageInfo == nil {
			break
		}

		return e.complexity.ServiceAccountConnection.PageInfo(childComplexity), true

	case "ServiceAccountCreatedActivityLogEntry.actor":
		if e.complexity.ServiceAccountCreatedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.ServiceAccountCreatedActivityLogEntry.Actor(childComplexity), true

	case "ServiceAccountCreatedActivityLogEntry.createdAt":
		if e.complexity.ServiceAccountCreatedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.ServiceAccountCreatedActivityLogEntry.CreatedAt(childComplexity), true

	case "ServiceAccountCreatedActivityLogEntry.environmentName":
		if e.complexity.ServiceAccountCreatedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.ServiceAccountCreatedActivityLogEntry.EnvironmentName(childComplexity), true

	case "ServiceAccountCreatedActivityLogEntry.id":
		if e.complexity.ServiceAccountCreatedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.ServiceAccountCreatedActivityLogEntry.ID(childComplexity), true

	case "ServiceAccountCreatedActivityLogEntry.message":
		if e.complexity.ServiceAccountCreatedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.ServiceAccountCreatedActivityLogEntry.Message(childComplexity), true

	case "ServiceAccountCreatedActivityLogEntry.resourceName":
		if e.complexity.ServiceAccountCreatedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.ServiceAccountCreatedActivityLogEntry.ResourceName(childComplexity), true

	case "ServiceAccountCreatedActivityLogEntry.resourceType":
		if e.complexity.ServiceAccountCreatedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.ServiceAccountCreatedActivityLogEntry.ResourceType(childComplexity), true

	case "ServiceAccountCreatedActivityLogEntry.teamSlug":
		if e.complexity.ServiceAccountCreatedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.ServiceAccountCreatedActivityLogEntry.TeamSlug(childComplexity), true

	case "ServiceAccountDeletedActivityLogEntry.actor":
		if e.complexity.ServiceAccountDeletedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.ServiceAccountDeletedActivityLogEntry.Actor(childComplexity), true

	case "ServiceAccountDeletedActivityLogEntry.createdAt":
		if e.complexity.ServiceAccountDeletedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.ServiceAccountDeletedActivityLogEntry.CreatedAt(childComplexity), true

	case "ServiceAccountDeletedActivityLogEntry.environmentName":
		if e.complexity.ServiceAccountDeletedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.ServiceAccountDeletedActivityLogEntry.EnvironmentName(childComplexity), true

	case "ServiceAccountDeletedActivityLogEntry.id":
		if e.complexity.ServiceAccountDeletedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.ServiceAccountDeletedActivityLogEntry.ID(childComplexity), true

	case "ServiceAccountDeletedActivityLogEntry.message":
		if e.complexity.ServiceAccountDeletedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.ServiceAccountDeletedActivityLogEntry.Message(childComplexity), true

	case "ServiceAccountDeletedActivityLogEntry.resourceName":
		if e.complexity.ServiceAccountDeletedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.ServiceAccountDeletedActivityLogEntry.ResourceName(childComplexity), true

	case "ServiceAccountDeletedActivityLogEntry.resourceType":
		if e.complexity.ServiceAccountDeletedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.ServiceAccountDeletedActivityLogEntry.ResourceType(childComplexity), true

	case "ServiceAccountDeletedActivityLogEntry.teamSlug":
		if e.complexity.ServiceAccountDeletedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.ServiceAccountDeletedActivityLogEntry.TeamSlug(childComplexity), true

	case "ServiceAccountEdge.cursor":
		if e.complexity.ServiceAccountEdge.Cursor == nil {
			break
		}

		return e.complexity.ServiceAccountEdge.Cursor(childComplexity), true

	case "ServiceAccountEdge.node":
		if e.complexity.ServiceAccountEdge.Node == nil {
			break
		}

		return e.complexity.ServiceAccountEdge.Node(childComplexity), true

	case "ServiceAccountToken.createdAt":
		if e.complexity.ServiceAccountToken.CreatedAt == nil {
			break
		}

		return e.complexity.ServiceAccountToken.CreatedAt(childComplexity), true

	case "ServiceAccountToken.description":
		if e.complexity.ServiceAccountToken.Description == nil {
			break
		}

		return e.complexity.ServiceAccountToken.Description(childComplexity), true

	case "ServiceAccountToken.expiresAt":
		if e.complexity.ServiceAccountToken.ExpiresAt == nil {
			break
		}

		return e.complexity.ServiceAccountToken.ExpiresAt(childComplexity), true

	case "ServiceAccountToken.id":
		if e.complexity.ServiceAccountToken.ID == nil {
			break
		}

		return e.complexity.ServiceAccountToken.ID(childComplexity), true

	case "ServiceAccountToken.lastUsedAt":
		if e.complexity.ServiceAccountToken.LastUsedAt == nil {
			break
		}

		return e.complexity.ServiceAccountToken.LastUsedAt(childComplexity), true

	case "ServiceAccountToken.name":
		if e.complexity.ServiceAccountToken.Name == nil {
			break
		}

		return e.complexity.ServiceAccountToken.Name(childComplexity), true

	case "ServiceAccountToken.updatedAt":
		if e.complexity.ServiceAccountToken.UpdatedAt == nil {
			break
		}

		return e.complexity.ServiceAccountToken.UpdatedAt(childComplexity), true

	case "ServiceAccountTokenConnection.edges":
		if e.complexity.ServiceAccountTokenConnection.Edges == nil {
			break
		}

		return e.complexity.ServiceAccountTokenConnection.Edges(childComplexity), true

	case "ServiceAccountTokenConnection.nodes":
		if e.complexity.ServiceAccountTokenConnection.Nodes == nil {
			break
		}

		return e.complexity.ServiceAccountTokenConnection.Nodes(childComplexity), true

	case "ServiceAccountTokenConnection.pageInfo":
		if e.complexity.ServiceAccountTokenConnection.PageInfo == nil {
			break
		}

		return e.complexity.ServiceAccountTokenConnection.PageInfo(childComplexity), true

	case "ServiceAccountTokenCreatedActivityLogEntry.actor":
		if e.complexity.ServiceAccountTokenCreatedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.ServiceAccountTokenCreatedActivityLogEntry.Actor(childComplexity), true

	case "ServiceAccountTokenCreatedActivityLogEntry.createdAt":
		if e.complexity.ServiceAccountTokenCreatedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.ServiceAccountTokenCreatedActivityLogEntry.CreatedAt(childComplexity), true

	case "ServiceAccountTokenCreatedActivityLogEntry.data":
		if e.complexity.ServiceAccountTokenCreatedActivityLogEntry.Data == nil {
			break
		}

		return e.complexity.ServiceAccountTokenCreatedActivityLogEntry.Data(childComplexity), true

	case "ServiceAccountTokenCreatedActivityLogEntry.environmentName":
		if e.complexity.ServiceAccountTokenCreatedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.ServiceAccountTokenCreatedActivityLogEntry.EnvironmentName(childComplexity), true

	case "ServiceAccountTokenCreatedActivityLogEntry.id":
		if e.complexity.ServiceAccountTokenCreatedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.ServiceAccountTokenCreatedActivityLogEntry.ID(childComplexity), true

	case "ServiceAccountTokenCreatedActivityLogEntry.message":
		if e.complexity.ServiceAccountTokenCreatedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.ServiceAccountTokenCreatedActivityLogEntry.Message(childComplexity), true

	case "ServiceAccountTokenCreatedActivityLogEntry.resourceName":
		if e.complexity.ServiceAccountTokenCreatedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.ServiceAccountTokenCreatedActivityLogEntry.ResourceName(childComplexity), true

	case "ServiceAccountTokenCreatedActivityLogEntry.resourceType":
		if e.complexity.ServiceAccountTokenCreatedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.ServiceAccountTokenCreatedActivityLogEntry.ResourceType(childComplexity), true

	case "ServiceAccountTokenCreatedActivityLogEntry.teamSlug":
		if e.complexity.ServiceAccountTokenCreatedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.ServiceAccountTokenCreatedActivityLogEntry.TeamSlug(childComplexity), true

	case "ServiceAccountTokenCreatedActivityLogEntryData.tokenName":
		if e.complexity.ServiceAccountTokenCreatedActivityLogEntryData.TokenName == nil {
			break
		}

		return e.complexity.ServiceAccountTokenCreatedActivityLogEntryData.TokenName(childComplexity), true

	case "ServiceAccountTokenDeletedActivityLogEntry.actor":
		if e.complexity.ServiceAccountTokenDeletedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.ServiceAccountTokenDeletedActivityLogEntry.Actor(childComplexity), true

	case "ServiceAccountTokenDeletedActivityLogEntry.createdAt":
		if e.complexity.ServiceAccountTokenDeletedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.ServiceAccountTokenDeletedActivityLogEntry.CreatedAt(childComplexity), true

	case "ServiceAccountTokenDeletedActivityLogEntry.data":
		if e.complexity.ServiceAccountTokenDeletedActivityLogEntry.Data == nil {
			break
		}

		return e.complexity.ServiceAccountTokenDeletedActivityLogEntry.Data(childComplexity), true

	case "ServiceAccountTokenDeletedActivityLogEntry.environmentName":
		if e.complexity.ServiceAccountTokenDeletedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.ServiceAccountTokenDeletedActivityLogEntry.EnvironmentName(childComplexity), true

	case "ServiceAccountTokenDeletedActivityLogEntry.id":
		if e.complexity.ServiceAccountTokenDeletedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.ServiceAccountTokenDeletedActivityLogEntry.ID(childComplexity), true

	case "ServiceAccountTokenDeletedActivityLogEntry.message":
		if e.complexity.ServiceAccountTokenDeletedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.ServiceAccountTokenDeletedActivityLogEntry.Message(childComplexity), true

	case "ServiceAccountTokenDeletedActivityLogEntry.resourceName":
		if e.complexity.ServiceAccountTokenDeletedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.ServiceAccountTokenDeletedActivityLogEntry.ResourceName(childComplexity), true

	case "ServiceAccountTokenDeletedActivityLogEntry.resourceType":
		if e.complexity.ServiceAccountTokenDeletedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.ServiceAccountTokenDeletedActivityLogEntry.ResourceType(childComplexity), true

	case "ServiceAccountTokenDeletedActivityLogEntry.teamSlug":
		if e.complexity.ServiceAccountTokenDeletedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.ServiceAccountTokenDeletedActivityLogEntry.TeamSlug(childComplexity), true

	case "ServiceAccountTokenDeletedActivityLogEntryData.tokenName":
		if e.complexity.ServiceAccountTokenDeletedActivityLogEntryData.TokenName == nil {
			break
		}

		return e.complexity.ServiceAccountTokenDeletedActivityLogEntryData.TokenName(childComplexity), true

	case "ServiceAccountTokenEdge.cursor":
		if e.complexity.ServiceAccountTokenEdge.Cursor == nil {
			break
		}

		return e.complexity.ServiceAccountTokenEdge.Cursor(childComplexity), true

	case "ServiceAccountTokenEdge.node":
		if e.complexity.ServiceAccountTokenEdge.Node == nil {
			break
		}

		return e.complexity.ServiceAccountTokenEdge.Node(childComplexity), true

	case "ServiceAccountTokenUpdatedActivityLogEntry.actor":
		if e.complexity.ServiceAccountTokenUpdatedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.ServiceAccountTokenUpdatedActivityLogEntry.Actor(childComplexity), true

	case "ServiceAccountTokenUpdatedActivityLogEntry.createdAt":
		if e.complexity.ServiceAccountTokenUpdatedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.ServiceAccountTokenUpdatedActivityLogEntry.CreatedAt(childComplexity), true

	case "ServiceAccountTokenUpdatedActivityLogEntry.data":
		if e.complexity.ServiceAccountTokenUpdatedActivityLogEntry.Data == nil {
			break
		}

		return e.complexity.ServiceAccountTokenUpdatedActivityLogEntry.Data(childComplexity), true

	case "ServiceAccountTokenUpdatedActivityLogEntry.environmentName":
		if e.complexity.ServiceAccountTokenUpdatedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.ServiceAccountTokenUpdatedActivityLogEntry.EnvironmentName(childComplexity), true

	case "ServiceAccountTokenUpdatedActivityLogEntry.id":
		if e.complexity.ServiceAccountTokenUpdatedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.ServiceAccountTokenUpdatedActivityLogEntry.ID(childComplexity), true

	case "ServiceAccountTokenUpdatedActivityLogEntry.message":
		if e.complexity.ServiceAccountTokenUpdatedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.ServiceAccountTokenUpdatedActivityLogEntry.Message(childComplexity), true

	case "ServiceAccountTokenUpdatedActivityLogEntry.resourceName":
		if e.complexity.ServiceAccountTokenUpdatedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.ServiceAccountTokenUpdatedActivityLogEntry.ResourceName(childComplexity), true

	case "ServiceAccountTokenUpdatedActivityLogEntry.resourceType":
		if e.complexity.ServiceAccountTokenUpdatedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.ServiceAccountTokenUpdatedActivityLogEntry.ResourceType(childComplexity), true

	case "ServiceAccountTokenUpdatedActivityLogEntry.teamSlug":
		if e.complexity.ServiceAccountTokenUpdatedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.ServiceAccountTokenUpdatedActivityLogEntry.TeamSlug(childComplexity), true

	case "ServiceAccountTokenUpdatedActivityLogEntryData.updatedFields":
		if e.complexity.ServiceAccountTokenUpdatedActivityLogEntryData.UpdatedFields == nil {
			break
		}

		return e.complexity.ServiceAccountTokenUpdatedActivityLogEntryData.UpdatedFields(childComplexity), true

	case "ServiceAccountTokenUpdatedActivityLogEntryDataUpdatedField.field":
		if e.complexity.ServiceAccountTokenUpdatedActivityLogEntryDataUpdatedField.Field == nil {
			break
		}

		return e.complexity.ServiceAccountTokenUpdatedActivityLogEntryDataUpdatedField.Field(childComplexity), true

	case "ServiceAccountTokenUpdatedActivityLogEntryDataUpdatedField.newValue":
		if e.complexity.ServiceAccountTokenUpdatedActivityLogEntryDataUpdatedField.NewValue == nil {
			break
		}

		return e.complexity.ServiceAccountTokenUpdatedActivityLogEntryDataUpdatedField.NewValue(childComplexity), true

	case "ServiceAccountTokenUpdatedActivityLogEntryDataUpdatedField.oldValue":
		if e.complexity.ServiceAccountTokenUpdatedActivityLogEntryDataUpdatedField.OldValue == nil {
			break
		}

		return e.complexity.ServiceAccountTokenUpdatedActivityLogEntryDataUpdatedField.OldValue(childComplexity), true

	case "ServiceAccountUpdatedActivityLogEntry.actor":
		if e.complexity.ServiceAccountUpdatedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.ServiceAccountUpdatedActivityLogEntry.Actor(childComplexity), true

	case "ServiceAccountUpdatedActivityLogEntry.createdAt":
		if e.complexity.ServiceAccountUpdatedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.ServiceAccountUpdatedActivityLogEntry.CreatedAt(childComplexity), true

	case "ServiceAccountUpdatedActivityLogEntry.data":
		if e.complexity.ServiceAccountUpdatedActivityLogEntry.Data == nil {
			break
		}

		return e.complexity.ServiceAccountUpdatedActivityLogEntry.Data(childComplexity), true

	case "ServiceAccountUpdatedActivityLogEntry.environmentName":
		if e.complexity.ServiceAccountUpdatedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.ServiceAccountUpdatedActivityLogEntry.EnvironmentName(childComplexity), true

	case "ServiceAccountUpdatedActivityLogEntry.id":
		if e.complexity.ServiceAccountUpdatedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.ServiceAccountUpdatedActivityLogEntry.ID(childComplexity), true

	case "ServiceAccountUpdatedActivityLogEntry.message":
		if e.complexity.ServiceAccountUpdatedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.ServiceAccountUpdatedActivityLogEntry.Message(childComplexity), true

	case "ServiceAccountUpdatedActivityLogEntry.resourceName":
		if e.complexity.ServiceAccountUpdatedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.ServiceAccountUpdatedActivityLogEntry.ResourceName(childComplexity), true

	case "ServiceAccountUpdatedActivityLogEntry.resourceType":
		if e.complexity.ServiceAccountUpdatedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.ServiceAccountUpdatedActivityLogEntry.ResourceType(childComplexity), true

	case "ServiceAccountUpdatedActivityLogEntry.teamSlug":
		if e.complexity.ServiceAccountUpdatedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.ServiceAccountUpdatedActivityLogEntry.TeamSlug(childComplexity), true

	case "ServiceAccountUpdatedActivityLogEntryData.updatedFields":
		if e.complexity.ServiceAccountUpdatedActivityLogEntryData.UpdatedFields == nil {
			break
		}

		return e.complexity.ServiceAccountUpdatedActivityLogEntryData.UpdatedFields(childComplexity), true

	case "ServiceAccountUpdatedActivityLogEntryDataUpdatedField.field":
		if e.complexity.ServiceAccountUpdatedActivityLogEntryDataUpdatedField.Field == nil {
			break
		}

		return e.complexity.ServiceAccountUpdatedActivityLogEntryDataUpdatedField.Field(childComplexity), true

	case "ServiceAccountUpdatedActivityLogEntryDataUpdatedField.newValue":
		if e.complexity.ServiceAccountUpdatedActivityLogEntryDataUpdatedField.NewValue == nil {
			break
		}

		return e.complexity.ServiceAccountUpdatedActivityLogEntryDataUpdatedField.NewValue(childComplexity), true

	case "ServiceAccountUpdatedActivityLogEntryDataUpdatedField.oldValue":
		if e.complexity.ServiceAccountUpdatedActivityLogEntryDataUpdatedField.OldValue == nil {
			break
		}

		return e.complexity.ServiceAccountUpdatedActivityLogEntryDataUpdatedField.OldValue(childComplexity), true

	case "ServiceCostSample.cost":
		if e.complexity.ServiceCostSample.Cost == nil {
			break
		}

		return e.complexity.ServiceCostSample.Cost(childComplexity), true

	case "ServiceCostSample.service":
		if e.complexity.ServiceCostSample.Service == nil {
			break
		}

		return e.complexity.ServiceCostSample.Service(childComplexity), true

	case "ServiceCostSeries.date":
		if e.complexity.ServiceCostSeries.Date == nil {
			break
		}

		return e.complexity.ServiceCostSeries.Date(childComplexity), true

	case "ServiceCostSeries.services":
		if e.complexity.ServiceCostSeries.Services == nil {
			break
		}

		return e.complexity.ServiceCostSeries.Services(childComplexity), true

	case "ServiceCostSeries.sum":
		if e.complexity.ServiceCostSeries.Sum == nil {
			break
		}

		return e.complexity.ServiceCostSeries.Sum(childComplexity), true

	case "ServiceMaintenanceActivityLogEntry.actor":
		if e.complexity.ServiceMaintenanceActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.ServiceMaintenanceActivityLogEntry.Actor(childComplexity), true

	case "ServiceMaintenanceActivityLogEntry.createdAt":
		if e.complexity.ServiceMaintenanceActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.ServiceMaintenanceActivityLogEntry.CreatedAt(childComplexity), true

	case "ServiceMaintenanceActivityLogEntry.environmentName":
		if e.complexity.ServiceMaintenanceActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.ServiceMaintenanceActivityLogEntry.EnvironmentName(childComplexity), true

	case "ServiceMaintenanceActivityLogEntry.id":
		if e.complexity.ServiceMaintenanceActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.ServiceMaintenanceActivityLogEntry.ID(childComplexity), true

	case "ServiceMaintenanceActivityLogEntry.message":
		if e.complexity.ServiceMaintenanceActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.ServiceMaintenanceActivityLogEntry.Message(childComplexity), true

	case "ServiceMaintenanceActivityLogEntry.resourceName":
		if e.complexity.ServiceMaintenanceActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.ServiceMaintenanceActivityLogEntry.ResourceName(childComplexity), true

	case "ServiceMaintenanceActivityLogEntry.resourceType":
		if e.complexity.ServiceMaintenanceActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.ServiceMaintenanceActivityLogEntry.ResourceType(childComplexity), true

	case "ServiceMaintenanceActivityLogEntry.teamSlug":
		if e.complexity.ServiceMaintenanceActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.ServiceMaintenanceActivityLogEntry.TeamSlug(childComplexity), true

	case "SetTeamMemberRolePayload.member":
		if e.complexity.SetTeamMemberRolePayload.Member == nil {
			break
		}

		return e.complexity.SetTeamMemberRolePayload.Member(childComplexity), true

	case "SqlDatabase.charset":
		if e.complexity.SqlDatabase.Charset == nil {
			break
		}

		return e.complexity.SqlDatabase.Charset(childComplexity), true

	case "SqlDatabase.collation":
		if e.complexity.SqlDatabase.Collation == nil {
			break
		}

		return e.complexity.SqlDatabase.Collation(childComplexity), true

	case "SqlDatabase.deletionPolicy":
		if e.complexity.SqlDatabase.DeletionPolicy == nil {
			break
		}

		return e.complexity.SqlDatabase.DeletionPolicy(childComplexity), true

	case "SqlDatabase.environment":
		if e.complexity.SqlDatabase.Environment == nil {
			break
		}

		return e.complexity.SqlDatabase.Environment(childComplexity), true

	case "SqlDatabase.healthy":
		if e.complexity.SqlDatabase.Healthy == nil {
			break
		}

		return e.complexity.SqlDatabase.Healthy(childComplexity), true

	case "SqlDatabase.id":
		if e.complexity.SqlDatabase.ID == nil {
			break
		}

		return e.complexity.SqlDatabase.ID(childComplexity), true

	case "SqlDatabase.name":
		if e.complexity.SqlDatabase.Name == nil {
			break
		}

		return e.complexity.SqlDatabase.Name(childComplexity), true

	case "SqlDatabase.team":
		if e.complexity.SqlDatabase.Team == nil {
			break
		}

		return e.complexity.SqlDatabase.Team(childComplexity), true

	case "SqlDatabase.teamEnvironment":
		if e.complexity.SqlDatabase.TeamEnvironment == nil {
			break
		}

		return e.complexity.SqlDatabase.TeamEnvironment(childComplexity), true

	case "SqlInstance.backupConfiguration":
		if e.complexity.SqlInstance.BackupConfiguration == nil {
			break
		}

		return e.complexity.SqlInstance.BackupConfiguration(childComplexity), true

	case "SqlInstance.cascadingDelete":
		if e.complexity.SqlInstance.CascadingDelete == nil {
			break
		}

		return e.complexity.SqlInstance.CascadingDelete(childComplexity), true

	case "SqlInstance.connectionName":
		if e.complexity.SqlInstance.ConnectionName == nil {
			break
		}

		return e.complexity.SqlInstance.ConnectionName(childComplexity), true

	case "SqlInstance.cost":
		if e.complexity.SqlInstance.Cost == nil {
			break
		}

		return e.complexity.SqlInstance.Cost(childComplexity), true

	case "SqlInstance.database":
		if e.complexity.SqlInstance.Database == nil {
			break
		}

		return e.complexity.SqlInstance.Database(childComplexity), true

	case "SqlInstance.diskAutoresize":
		if e.complexity.SqlInstance.DiskAutoresize == nil {
			break
		}

		return e.complexity.SqlInstance.DiskAutoresize(childComplexity), true

	case "SqlInstance.diskAutoresizeLimit":
		if e.complexity.SqlInstance.DiskAutoresizeLimit == nil {
			break
		}

		return e.complexity.SqlInstance.DiskAutoresizeLimit(childComplexity), true

	case "SqlInstance.environment":
		if e.complexity.SqlInstance.Environment == nil {
			break
		}

		return e.complexity.SqlInstance.Environment(childComplexity), true

	case "SqlInstance.flags":
		if e.complexity.SqlInstance.Flags == nil {
			break
		}

		args, err := ec.field_SqlInstance_flags_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SqlInstance.Flags(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor)), true

	case "SqlInstance.healthy":
		if e.complexity.SqlInstance.Healthy == nil {
			break
		}

		return e.complexity.SqlInstance.Healthy(childComplexity), true

	case "SqlInstance.highAvailability":
		if e.complexity.SqlInstance.HighAvailability == nil {
			break
		}

		return e.complexity.SqlInstance.HighAvailability(childComplexity), true

	case "SqlInstance.id":
		if e.complexity.SqlInstance.ID == nil {
			break
		}

		return e.complexity.SqlInstance.ID(childComplexity), true

	case "SqlInstance.issues":
		if e.complexity.SqlInstance.Issues == nil {
			break
		}

		args, err := ec.field_SqlInstance_issues_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SqlInstance.Issues(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["orderBy"].(*issue.IssueOrder), args["filter"].(*issue.ResourceIssueFilter)), true

	case "SqlInstance.maintenanceVersion":
		if e.complexity.SqlInstance.MaintenanceVersion == nil {
			break
		}

		return e.complexity.SqlInstance.MaintenanceVersion(childComplexity), true

	case "SqlInstance.maintenanceWindow":
		if e.complexity.SqlInstance.MaintenanceWindow == nil {
			break
		}

		return e.complexity.SqlInstance.MaintenanceWindow(childComplexity), true

	case "SqlInstance.metrics":
		if e.complexity.SqlInstance.Metrics == nil {
			break
		}

		return e.complexity.SqlInstance.Metrics(childComplexity), true

	case "SqlInstance.name":
		if e.complexity.SqlInstance.Name == nil {
			break
		}

		return e.complexity.SqlInstance.Name(childComplexity), true

	case "SqlInstance.projectID":
		if e.complexity.SqlInstance.ProjectID == nil {
			break
		}

		return e.complexity.SqlInstance.ProjectID(childComplexity), true

	case "SqlInstance.state":
		if e.complexity.SqlInstance.State == nil {
			break
		}

		return e.complexity.SqlInstance.State(childComplexity), true

	case "SqlInstance.status":
		if e.complexity.SqlInstance.Status == nil {
			break
		}

		return e.complexity.SqlInstance.Status(childComplexity), true

	case "SqlInstance.team":
		if e.complexity.SqlInstance.Team == nil {
			break
		}

		return e.complexity.SqlInstance.Team(childComplexity), true

	case "SqlInstance.teamEnvironment":
		if e.complexity.SqlInstance.TeamEnvironment == nil {
			break
		}

		return e.complexity.SqlInstance.TeamEnvironment(childComplexity), true

	case "SqlInstance.tier":
		if e.complexity.SqlInstance.Tier == nil {
			break
		}

		return e.complexity.SqlInstance.Tier(childComplexity), true

	case "SqlInstance.users":
		if e.complexity.SqlInstance.Users == nil {
			break
		}

		args, err := ec.field_SqlInstance_users_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SqlInstance.Users(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["orderBy"].(*sqlinstance.SQLInstanceUserOrder)), true

	case "SqlInstance.version":
		if e.complexity.SqlInstance.Version == nil {
			break
		}

		return e.complexity.SqlInstance.Version(childComplexity), true

	case "SqlInstance.workload":
		if e.complexity.SqlInstance.Workload == nil {
			break
		}

		return e.complexity.SqlInstance.Workload(childComplexity), true

	case "SqlInstanceBackupConfiguration.enabled":
		if e.complexity.SqlInstanceBackupConfiguration.Enabled == nil {
			break
		}

		return e.complexity.SqlInstanceBackupConfiguration.Enabled(childComplexity), true

	case "SqlInstanceBackupConfiguration.pointInTimeRecovery":
		if e.complexity.SqlInstanceBackupConfiguration.PointInTimeRecovery == nil {
			break
		}

		return e.complexity.SqlInstanceBackupConfiguration.PointInTimeRecovery(childComplexity), true

	case "SqlInstanceBackupConfiguration.retainedBackups":
		if e.complexity.SqlInstanceBackupConfiguration.RetainedBackups == nil {
			break
		}

		return e.complexity.SqlInstanceBackupConfiguration.RetainedBackups(childComplexity), true

	case "SqlInstanceBackupConfiguration.startTime":
		if e.complexity.SqlInstanceBackupConfiguration.StartTime == nil {
			break
		}

		return e.complexity.SqlInstanceBackupConfiguration.StartTime(childComplexity), true

	case "SqlInstanceBackupConfiguration.transactionLogRetentionDays":
		if e.complexity.SqlInstanceBackupConfiguration.TransactionLogRetentionDays == nil {
			break
		}

		return e.complexity.SqlInstanceBackupConfiguration.TransactionLogRetentionDays(childComplexity), true

	case "SqlInstanceConnection.edges":
		if e.complexity.SqlInstanceConnection.Edges == nil {
			break
		}

		return e.complexity.SqlInstanceConnection.Edges(childComplexity), true

	case "SqlInstanceConnection.nodes":
		if e.complexity.SqlInstanceConnection.Nodes == nil {
			break
		}

		return e.complexity.SqlInstanceConnection.Nodes(childComplexity), true

	case "SqlInstanceConnection.pageInfo":
		if e.complexity.SqlInstanceConnection.PageInfo == nil {
			break
		}

		return e.complexity.SqlInstanceConnection.PageInfo(childComplexity), true

	case "SqlInstanceCost.sum":
		if e.complexity.SqlInstanceCost.Sum == nil {
			break
		}

		return e.complexity.SqlInstanceCost.Sum(childComplexity), true

	case "SqlInstanceCpu.cores":
		if e.complexity.SqlInstanceCpu.Cores == nil {
			break
		}

		return e.complexity.SqlInstanceCpu.Cores(childComplexity), true

	case "SqlInstanceCpu.utilization":
		if e.complexity.SqlInstanceCpu.Utilization == nil {
			break
		}

		return e.complexity.SqlInstanceCpu.Utilization(childComplexity), true

	case "SqlInstanceDisk.quotaBytes":
		if e.complexity.SqlInstanceDisk.QuotaBytes == nil {
			break
		}

		return e.complexity.SqlInstanceDisk.QuotaBytes(childComplexity), true

	case "SqlInstanceDisk.utilization":
		if e.complexity.SqlInstanceDisk.Utilization == nil {
			break
		}

		return e.complexity.SqlInstanceDisk.Utilization(childComplexity), true

	case "SqlInstanceEdge.cursor":
		if e.complexity.SqlInstanceEdge.Cursor == nil {
			break
		}

		return e.complexity.SqlInstanceEdge.Cursor(childComplexity), true

	case "SqlInstanceEdge.node":
		if e.complexity.SqlInstanceEdge.Node == nil {
			break
		}

		return e.complexity.SqlInstanceEdge.Node(childComplexity), true

	case "SqlInstanceFlag.name":
		if e.complexity.SqlInstanceFlag.Name == nil {
			break
		}

		return e.complexity.SqlInstanceFlag.Name(childComplexity), true

	case "SqlInstanceFlag.value":
		if e.complexity.SqlInstanceFlag.Value == nil {
			break
		}

		return e.complexity.SqlInstanceFlag.Value(childComplexity), true

	case "SqlInstanceFlagConnection.edges":
		if e.complexity.SqlInstanceFlagConnection.Edges == nil {
			break
		}

		return e.complexity.SqlInstanceFlagConnection.Edges(childComplexity), true

	case "SqlInstanceFlagConnection.nodes":
		if e.complexity.SqlInstanceFlagConnection.Nodes == nil {
			break
		}

		return e.complexity.SqlInstanceFlagConnection.Nodes(childComplexity), true

	case "SqlInstanceFlagConnection.pageInfo":
		if e.complexity.SqlInstanceFlagConnection.PageInfo == nil {
			break
		}

		return e.complexity.SqlInstanceFlagConnection.PageInfo(childComplexity), true

	case "SqlInstanceFlagEdge.cursor":
		if e.complexity.SqlInstanceFlagEdge.Cursor == nil {
			break
		}

		return e.complexity.SqlInstanceFlagEdge.Cursor(childComplexity), true

	case "SqlInstanceFlagEdge.node":
		if e.complexity.SqlInstanceFlagEdge.Node == nil {
			break
		}

		return e.complexity.SqlInstanceFlagEdge.Node(childComplexity), true

	case "SqlInstanceMaintenanceWindow.day":
		if e.complexity.SqlInstanceMaintenanceWindow.Day == nil {
			break
		}

		return e.complexity.SqlInstanceMaintenanceWindow.Day(childComplexity), true

	case "SqlInstanceMaintenanceWindow.hour":
		if e.complexity.SqlInstanceMaintenanceWindow.Hour == nil {
			break
		}

		return e.complexity.SqlInstanceMaintenanceWindow.Hour(childComplexity), true

	case "SqlInstanceMemory.quotaBytes":
		if e.complexity.SqlInstanceMemory.QuotaBytes == nil {
			break
		}

		return e.complexity.SqlInstanceMemory.QuotaBytes(childComplexity), true

	case "SqlInstanceMemory.utilization":
		if e.complexity.SqlInstanceMemory.Utilization == nil {
			break
		}

		return e.complexity.SqlInstanceMemory.Utilization(childComplexity), true

	case "SqlInstanceMetrics.cpu":
		if e.complexity.SqlInstanceMetrics.CPU == nil {
			break
		}

		return e.complexity.SqlInstanceMetrics.CPU(childComplexity), true

	case "SqlInstanceMetrics.disk":
		if e.complexity.SqlInstanceMetrics.Disk == nil {
			break
		}

		return e.complexity.SqlInstanceMetrics.Disk(childComplexity), true

	case "SqlInstanceMetrics.memory":
		if e.complexity.SqlInstanceMetrics.Memory == nil {
			break
		}

		return e.complexity.SqlInstanceMetrics.Memory(childComplexity), true

	case "SqlInstanceStateIssue.id":
		if e.complexity.SqlInstanceStateIssue.ID == nil {
			break
		}

		return e.complexity.SqlInstanceStateIssue.ID(childComplexity), true

	case "SqlInstanceStateIssue.message":
		if e.complexity.SqlInstanceStateIssue.Message == nil {
			break
		}

		return e.complexity.SqlInstanceStateIssue.Message(childComplexity), true

	case "SqlInstanceStateIssue.sqlInstance":
		if e.complexity.SqlInstanceStateIssue.SQLInstance == nil {
			break
		}

		return e.complexity.SqlInstanceStateIssue.SQLInstance(childComplexity), true

	case "SqlInstanceStateIssue.severity":
		if e.complexity.SqlInstanceStateIssue.Severity == nil {
			break
		}

		return e.complexity.SqlInstanceStateIssue.Severity(childComplexity), true

	case "SqlInstanceStateIssue.state":
		if e.complexity.SqlInstanceStateIssue.State == nil {
			break
		}

		return e.complexity.SqlInstanceStateIssue.State(childComplexity), true

	case "SqlInstanceStateIssue.teamEnvironment":
		if e.complexity.SqlInstanceStateIssue.TeamEnvironment == nil {
			break
		}

		return e.complexity.SqlInstanceStateIssue.TeamEnvironment(childComplexity), true

	case "SqlInstanceStatus.privateIpAddress":
		if e.complexity.SqlInstanceStatus.PrivateIPAddress == nil {
			break
		}

		return e.complexity.SqlInstanceStatus.PrivateIPAddress(childComplexity), true

	case "SqlInstanceStatus.publicIpAddress":
		if e.complexity.SqlInstanceStatus.PublicIPAddress == nil {
			break
		}

		return e.complexity.SqlInstanceStatus.PublicIPAddress(childComplexity), true

	case "SqlInstanceUser.authentication":
		if e.complexity.SqlInstanceUser.Authentication == nil {
			break
		}

		return e.complexity.SqlInstanceUser.Authentication(childComplexity), true

	case "SqlInstanceUser.name":
		if e.complexity.SqlInstanceUser.Name == nil {
			break
		}

		return e.complexity.SqlInstanceUser.Name(childComplexity), true

	case "SqlInstanceUserConnection.edges":
		if e.complexity.SqlInstanceUserConnection.Edges == nil {
			break
		}

		return e.complexity.SqlInstanceUserConnection.Edges(childComplexity), true

	case "SqlInstanceUserConnection.nodes":
		if e.complexity.SqlInstanceUserConnection.Nodes == nil {
			break
		}

		return e.complexity.SqlInstanceUserConnection.Nodes(childComplexity), true

	case "SqlInstanceUserConnection.pageInfo":
		if e.complexity.SqlInstanceUserConnection.PageInfo == nil {
			break
		}

		return e.complexity.SqlInstanceUserConnection.PageInfo(childComplexity), true

	case "SqlInstanceUserEdge.cursor":
		if e.complexity.SqlInstanceUserEdge.Cursor == nil {
			break
		}

		return e.complexity.SqlInstanceUserEdge.Cursor(childComplexity), true

	case "SqlInstanceUserEdge.node":
		if e.complexity.SqlInstanceUserEdge.Node == nil {
			break
		}

		return e.complexity.SqlInstanceUserEdge.Node(childComplexity), true

	case "SqlInstanceVersionIssue.id":
		if e.complexity.SqlInstanceVersionIssue.ID == nil {
			break
		}

		return e.complexity.SqlInstanceVersionIssue.ID(childComplexity), true

	case "SqlInstanceVersionIssue.message":
		if e.complexity.SqlInstanceVersionIssue.Message == nil {
			break
		}

		return e.complexity.SqlInstanceVersionIssue.Message(childComplexity), true

	case "SqlInstanceVersionIssue.sqlInstance":
		if e.complexity.SqlInstanceVersionIssue.SQLInstance == nil {
			break
		}

		return e.complexity.SqlInstanceVersionIssue.SQLInstance(childComplexity), true

	case "SqlInstanceVersionIssue.severity":
		if e.complexity.SqlInstanceVersionIssue.Severity == nil {
			break
		}

		return e.complexity.SqlInstanceVersionIssue.Severity(childComplexity), true

	case "SqlInstanceVersionIssue.teamEnvironment":
		if e.complexity.SqlInstanceVersionIssue.TeamEnvironment == nil {
			break
		}

		return e.complexity.SqlInstanceVersionIssue.TeamEnvironment(childComplexity), true

	case "StartOpenSearchMaintenancePayload.error":
		if e.complexity.StartOpenSearchMaintenancePayload.Error == nil {
			break
		}

		return e.complexity.StartOpenSearchMaintenancePayload.Error(childComplexity), true

	case "StartValkeyMaintenancePayload.error":
		if e.complexity.StartValkeyMaintenancePayload.Error == nil {
			break
		}

		return e.complexity.StartValkeyMaintenancePayload.Error(childComplexity), true

	case "Subscription.log":
		if e.complexity.Subscription.Log == nil {
			break
		}

		args, err := ec.field_Subscription_log_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.Log(childComplexity, args["filter"].(loki.LogSubscriptionFilter)), true

	case "Subscription.workloadLog":
		if e.complexity.Subscription.WorkloadLog == nil {
			break
		}

		args, err := ec.field_Subscription_workloadLog_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.WorkloadLog(childComplexity, args["filter"].(podlog.WorkloadLogSubscriptionFilter)), true

	case "Team.activityLog":
		if e.complexity.Team.ActivityLog == nil {
			break
		}

		args, err := ec.field_Team_activityLog_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Team.ActivityLog(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["filter"].(*activitylog.ActivityLogFilter)), true

	case "Team.alerts":
		if e.complexity.Team.Alerts == nil {
			break
		}

		args, err := ec.field_Team_alerts_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Team.Alerts(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["orderBy"].(*alerts.AlertOrder), args["filter"].(*alerts.TeamAlertsFilter)), true

	case "Team.applications":
		if e.complexity.Team.Applications == nil {
			break
		}

		args, err := ec.field_Team_applications_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Team.Applications(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["orderBy"].(*application.ApplicationOrder), args["filter"].(*application.TeamApplicationsFilter)), true

	case "Team.bigQueryDatasets":
		if e.complexity.Team.BigQueryDatasets == nil {
			break
		}

		args, err := ec.field_Team_bigQueryDatasets_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Team.BigQueryDatasets(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["orderBy"].(*bigquery.BigQueryDatasetOrder)), true

	case "Team.buckets":
		if e.complexity.Team.Buckets == nil {
			break
		}

		args, err := ec.field_Team_buckets_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Team.Buckets(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["orderBy"].(*bucket.BucketOrder)), true

	case "Team.cost":
		if e.complexity.Team.Cost == nil {
			break
		}

		return e.complexity.Team.Cost(childComplexity), true

	case "Team.deleteKey":
		if e.complexity.Team.DeleteKey == nil {
			break
		}

		args, err := ec.field_Team_deleteKey_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Team.DeleteKey(childComplexity, args["key"].(string)), true

	case "Team.deletionInProgress":
		if e.complexity.Team.DeletionInProgress == nil {
			break
		}

		return e.complexity.Team.DeletionInProgress(childComplexity), true

	case "Team.deploymentKey":
		if e.complexity.Team.DeploymentKey == nil {
			break
		}

		return e.complexity.Team.DeploymentKey(childComplexity), true

	case "Team.deployments":
		if e.complexity.Team.Deployments == nil {
			break
		}

		args, err := ec.field_Team_deployments_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Team.Deployments(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor)), true

	case "Team.environment":
		if e.complexity.Team.Environment == nil {
			break
		}

		args, err := ec.field_Team_environment_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Team.Environment(childComplexity, args["name"].(string)), true

	case "Team.environments":
		if e.complexity.Team.Environments == nil {
			break
		}

		return e.complexity.Team.Environments(childComplexity), true

	case "Team.externalResources":
		if e.complexity.Team.ExternalResources == nil {
			break
		}

		return e.complexity.Team.ExternalResources(childComplexity), true

	case "Team.id":
		if e.complexity.Team.ID == nil {
			break
		}

		return e.complexity.Team.ID(childComplexity), true

	case "Team.imageVulnerabilityHistory":
		if e.complexity.Team.ImageVulnerabilityHistory == nil {
			break
		}

		args, err := ec.field_Team_imageVulnerabilityHistory_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Team.ImageVulnerabilityHistory(childComplexity, args["from"].(scalar.Date)), true

	case "Team.inventoryCounts":
		if e.complexity.Team.InventoryCounts == nil {
			break
		}

		return e.complexity.Team.InventoryCounts(childComplexity), true

	case "Team.issues":
		if e.complexity.Team.Issues == nil {
			break
		}

		args, err := ec.field_Team_issues_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Team.Issues(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["orderBy"].(*issue.IssueOrder), args["filter"].(*issue.IssueFilter)), true

	case "Team.jobs":
		if e.complexity.Team.Jobs == nil {
			break
		}

		args, err := ec.field_Team_jobs_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Team.Jobs(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["orderBy"].(*job.JobOrder), args["filter"].(*job.TeamJobsFilter)), true

	case "Team.kafkaTopics":
		if e.complexity.Team.KafkaTopics == nil {
			break
		}

		args, err := ec.field_Team_kafkaTopics_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Team.KafkaTopics(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["orderBy"].(*kafkatopic.KafkaTopicOrder)), true

	case "Team.lastSuccessfulSync":
		if e.complexity.Team.LastSuccessfulSync == nil {
			break
		}

		return e.complexity.Team.LastSuccessfulSync(childComplexity), true

	case "Team.member":
		if e.complexity.Team.Member == nil {
			break
		}

		args, err := ec.field_Team_member_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Team.Member(childComplexity, args["email"].(string)), true

	case "Team.members":
		if e.complexity.Team.Members == nil {
			break
		}

		args, err := ec.field_Team_members_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Team.Members(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["orderBy"].(*team.TeamMemberOrder)), true

	case "Team.openSearches":
		if e.complexity.Team.OpenSearches == nil {
			break
		}

		args, err := ec.field_Team_openSearches_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Team.OpenSearches(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["orderBy"].(*opensearch.OpenSearchOrder)), true

	case "Team.purpose":
		if e.complexity.Team.Purpose == nil {
			break
		}

		return e.complexity.Team.Purpose(childComplexity), true

	case "Team.repositories":
		if e.complexity.Team.Repositories == nil {
			break
		}

		args, err := ec.field_Team_repositories_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Team.Repositories(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["orderBy"].(*repository.RepositoryOrder), args["filter"].(*repository.TeamRepositoryFilter)), true

	case "Team.sqlInstances":
		if e.complexity.Team.SQLInstances == nil {
			break
		}

		args, err := ec.field_Team_sqlInstances_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Team.SQLInstances(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["orderBy"].(*sqlinstance.SQLInstanceOrder)), true

	case "Team.secrets":
		if e.complexity.Team.Secrets == nil {
			break
		}

		args, err := ec.field_Team_secrets_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Team.Secrets(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["orderBy"].(*secret.SecretOrder), args["filter"].(*secret.SecretFilter)), true

	case "Team.serviceUtilization":
		if e.complexity.Team.ServiceUtilization == nil {
			break
		}

		return e.complexity.Team.ServiceUtilization(childComplexity), true

	case "Team.slackChannel":
		if e.complexity.Team.SlackChannel == nil {
			break
		}

		return e.complexity.Team.SlackChannel(childComplexity), true

	case "Team.slug":
		if e.complexity.Team.Slug == nil {
			break
		}

		return e.complexity.Team.Slug(childComplexity), true

	case "Team.unleash":
		if e.complexity.Team.Unleash == nil {
			break
		}

		return e.complexity.Team.Unleash(childComplexity), true

	case "Team.valkeys":
		if e.complexity.Team.Valkeys == nil {
			break
		}

		args, err := ec.field_Team_valkeys_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Team.Valkeys(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["orderBy"].(*valkey.ValkeyOrder)), true

	case "Team.viewerIsMember":
		if e.complexity.Team.ViewerIsMember == nil {
			break
		}

		return e.complexity.Team.ViewerIsMember(childComplexity), true

	case "Team.viewerIsOwner":
		if e.complexity.Team.ViewerIsOwner == nil {
			break
		}

		return e.complexity.Team.ViewerIsOwner(childComplexity), true

	case "Team.vulnerabilityFixHistory":
		if e.complexity.Team.VulnerabilityFixHistory == nil {
			break
		}

		args, err := ec.field_Team_vulnerabilityFixHistory_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Team.VulnerabilityFixHistory(childComplexity, args["from"].(scalar.Date)), true

	case "Team.vulnerabilitySummaries":
		if e.complexity.Team.VulnerabilitySummaries == nil {
			break
		}

		args, err := ec.field_Team_vulnerabilitySummaries_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Team.VulnerabilitySummaries(childComplexity, args["filter"].(*vulnerability.TeamVulnerabilitySummaryFilter), args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["orderBy"].(*vulnerability.VulnerabilitySummaryOrder)), true

	case "Team.vulnerabilitySummary":
		if e.complexity.Team.VulnerabilitySummary == nil {
			break
		}

		args, err := ec.field_Team_vulnerabilitySummary_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Team.VulnerabilitySummary(childComplexity, args["filter"].(*vulnerability.TeamVulnerabilitySummaryFilter)), true

	case "Team.workloadUtilization":
		if e.complexity.Team.WorkloadUtilization == nil {
			break
		}

		args, err := ec.field_Team_workloadUtilization_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Team.WorkloadUtilization(childComplexity, args["resourceType"].(utilization.UtilizationResourceType)), true

	case "Team.workloads":
		if e.complexity.Team.Workloads == nil {
			break
		}

		args, err := ec.field_Team_workloads_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Team.Workloads(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["orderBy"].(*workload.WorkloadOrder), args["filter"].(*workload.TeamWorkloadsFilter)), true

	case "TeamCDN.bucket":
		if e.complexity.TeamCDN.Bucket == nil {
			break
		}

		return e.complexity.TeamCDN.Bucket(childComplexity), true

	case "TeamConfirmDeleteKeyActivityLogEntry.actor":
		if e.complexity.TeamConfirmDeleteKeyActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.TeamConfirmDeleteKeyActivityLogEntry.Actor(childComplexity), true

	case "TeamConfirmDeleteKeyActivityLogEntry.createdAt":
		if e.complexity.TeamConfirmDeleteKeyActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.TeamConfirmDeleteKeyActivityLogEntry.CreatedAt(childComplexity), true

	case "TeamConfirmDeleteKeyActivityLogEntry.environmentName":
		if e.complexity.TeamConfirmDeleteKeyActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.TeamConfirmDeleteKeyActivityLogEntry.EnvironmentName(childComplexity), true

	case "TeamConfirmDeleteKeyActivityLogEntry.id":
		if e.complexity.TeamConfirmDeleteKeyActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.TeamConfirmDeleteKeyActivityLogEntry.ID(childComplexity), true

	case "TeamConfirmDeleteKeyActivityLogEntry.message":
		if e.complexity.TeamConfirmDeleteKeyActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.TeamConfirmDeleteKeyActivityLogEntry.Message(childComplexity), true

	case "TeamConfirmDeleteKeyActivityLogEntry.resourceName":
		if e.complexity.TeamConfirmDeleteKeyActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.TeamConfirmDeleteKeyActivityLogEntry.ResourceName(childComplexity), true

	case "TeamConfirmDeleteKeyActivityLogEntry.resourceType":
		if e.complexity.TeamConfirmDeleteKeyActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.TeamConfirmDeleteKeyActivityLogEntry.ResourceType(childComplexity), true

	case "TeamConfirmDeleteKeyActivityLogEntry.teamSlug":
		if e.complexity.TeamConfirmDeleteKeyActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.TeamConfirmDeleteKeyActivityLogEntry.TeamSlug(childComplexity), true

	case "TeamConnection.edges":
		if e.complexity.TeamConnection.Edges == nil {
			break
		}

		return e.complexity.TeamConnection.Edges(childComplexity), true

	case "TeamConnection.nodes":
		if e.complexity.TeamConnection.Nodes == nil {
			break
		}

		return e.complexity.TeamConnection.Nodes(childComplexity), true

	case "TeamConnection.pageInfo":
		if e.complexity.TeamConnection.PageInfo == nil {
			break
		}

		return e.complexity.TeamConnection.PageInfo(childComplexity), true

	case "TeamCost.daily":
		if e.complexity.TeamCost.Daily == nil {
			break
		}

		args, err := ec.field_TeamCost_daily_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TeamCost.Daily(childComplexity, args["from"].(scalar.Date), args["to"].(scalar.Date), args["filter"].(*cost.TeamCostDailyFilter)), true

	case "TeamCost.monthlySummary":
		if e.complexity.TeamCost.MonthlySummary == nil {
			break
		}

		return e.complexity.TeamCost.MonthlySummary(childComplexity), true

	case "TeamCostMonthlySample.cost":
		if e.complexity.TeamCostMonthlySample.Cost == nil {
			break
		}

		return e.complexity.TeamCostMonthlySample.Cost(childComplexity), true

	case "TeamCostMonthlySample.date":
		if e.complexity.TeamCostMonthlySample.Date == nil {
			break
		}

		return e.complexity.TeamCostMonthlySample.Date(childComplexity), true

	case "TeamCostMonthlySummary.series":
		if e.complexity.TeamCostMonthlySummary.Series == nil {
			break
		}

		return e.complexity.TeamCostMonthlySummary.Series(childComplexity), true

	case "TeamCostMonthlySummary.sum":
		if e.complexity.TeamCostMonthlySummary.Sum == nil {
			break
		}

		return e.complexity.TeamCostMonthlySummary.Sum(childComplexity), true

	case "TeamCostPeriod.series":
		if e.complexity.TeamCostPeriod.Series == nil {
			break
		}

		return e.complexity.TeamCostPeriod.Series(childComplexity), true

	case "TeamCostPeriod.sum":
		if e.complexity.TeamCostPeriod.Sum == nil {
			break
		}

		return e.complexity.TeamCostPeriod.Sum(childComplexity), true

	case "TeamCreateDeleteKeyActivityLogEntry.actor":
		if e.complexity.TeamCreateDeleteKeyActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.TeamCreateDeleteKeyActivityLogEntry.Actor(childComplexity), true

	case "TeamCreateDeleteKeyActivityLogEntry.createdAt":
		if e.complexity.TeamCreateDeleteKeyActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.TeamCreateDeleteKeyActivityLogEntry.CreatedAt(childComplexity), true

	case "TeamCreateDeleteKeyActivityLogEntry.environmentName":
		if e.complexity.TeamCreateDeleteKeyActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.TeamCreateDeleteKeyActivityLogEntry.EnvironmentName(childComplexity), true

	case "TeamCreateDeleteKeyActivityLogEntry.id":
		if e.complexity.TeamCreateDeleteKeyActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.TeamCreateDeleteKeyActivityLogEntry.ID(childComplexity), true

	case "TeamCreateDeleteKeyActivityLogEntry.message":
		if e.complexity.TeamCreateDeleteKeyActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.TeamCreateDeleteKeyActivityLogEntry.Message(childComplexity), true

	case "TeamCreateDeleteKeyActivityLogEntry.resourceName":
		if e.complexity.TeamCreateDeleteKeyActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.TeamCreateDeleteKeyActivityLogEntry.ResourceName(childComplexity), true

	case "TeamCreateDeleteKeyActivityLogEntry.resourceType":
		if e.complexity.TeamCreateDeleteKeyActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.TeamCreateDeleteKeyActivityLogEntry.ResourceType(childComplexity), true

	case "TeamCreateDeleteKeyActivityLogEntry.teamSlug":
		if e.complexity.TeamCreateDeleteKeyActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.TeamCreateDeleteKeyActivityLogEntry.TeamSlug(childComplexity), true

	case "TeamCreatedActivityLogEntry.actor":
		if e.complexity.TeamCreatedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.TeamCreatedActivityLogEntry.Actor(childComplexity), true

	case "TeamCreatedActivityLogEntry.createdAt":
		if e.complexity.TeamCreatedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.TeamCreatedActivityLogEntry.CreatedAt(childComplexity), true

	case "TeamCreatedActivityLogEntry.environmentName":
		if e.complexity.TeamCreatedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.TeamCreatedActivityLogEntry.EnvironmentName(childComplexity), true

	case "TeamCreatedActivityLogEntry.id":
		if e.complexity.TeamCreatedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.TeamCreatedActivityLogEntry.ID(childComplexity), true

	case "TeamCreatedActivityLogEntry.message":
		if e.complexity.TeamCreatedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.TeamCreatedActivityLogEntry.Message(childComplexity), true

	case "TeamCreatedActivityLogEntry.resourceName":
		if e.complexity.TeamCreatedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.TeamCreatedActivityLogEntry.ResourceName(childComplexity), true

	case "TeamCreatedActivityLogEntry.resourceType":
		if e.complexity.TeamCreatedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.TeamCreatedActivityLogEntry.ResourceType(childComplexity), true

	case "TeamCreatedActivityLogEntry.teamSlug":
		if e.complexity.TeamCreatedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.TeamCreatedActivityLogEntry.TeamSlug(childComplexity), true

	case "TeamDeleteKey.createdAt":
		if e.complexity.TeamDeleteKey.CreatedAt == nil {
			break
		}

		return e.complexity.TeamDeleteKey.CreatedAt(childComplexity), true

	case "TeamDeleteKey.createdBy":
		if e.complexity.TeamDeleteKey.CreatedBy == nil {
			break
		}

		return e.complexity.TeamDeleteKey.CreatedBy(childComplexity), true

	case "TeamDeleteKey.expires":
		if e.complexity.TeamDeleteKey.Expires == nil {
			break
		}

		return e.complexity.TeamDeleteKey.Expires(childComplexity), true

	case "TeamDeleteKey.key":
		if e.complexity.TeamDeleteKey.Key == nil {
			break
		}

		return e.complexity.TeamDeleteKey.Key(childComplexity), true

	case "TeamDeleteKey.team":
		if e.complexity.TeamDeleteKey.Team == nil {
			break
		}

		return e.complexity.TeamDeleteKey.Team(childComplexity), true

	case "TeamDeployKeyUpdatedActivityLogEntry.actor":
		if e.complexity.TeamDeployKeyUpdatedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.TeamDeployKeyUpdatedActivityLogEntry.Actor(childComplexity), true

	case "TeamDeployKeyUpdatedActivityLogEntry.createdAt":
		if e.complexity.TeamDeployKeyUpdatedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.TeamDeployKeyUpdatedActivityLogEntry.CreatedAt(childComplexity), true

	case "TeamDeployKeyUpdatedActivityLogEntry.environmentName":
		if e.complexity.TeamDeployKeyUpdatedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.TeamDeployKeyUpdatedActivityLogEntry.EnvironmentName(childComplexity), true

	case "TeamDeployKeyUpdatedActivityLogEntry.id":
		if e.complexity.TeamDeployKeyUpdatedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.TeamDeployKeyUpdatedActivityLogEntry.ID(childComplexity), true

	case "TeamDeployKeyUpdatedActivityLogEntry.message":
		if e.complexity.TeamDeployKeyUpdatedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.TeamDeployKeyUpdatedActivityLogEntry.Message(childComplexity), true

	case "TeamDeployKeyUpdatedActivityLogEntry.resourceName":
		if e.complexity.TeamDeployKeyUpdatedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.TeamDeployKeyUpdatedActivityLogEntry.ResourceName(childComplexity), true

	case "TeamDeployKeyUpdatedActivityLogEntry.resourceType":
		if e.complexity.TeamDeployKeyUpdatedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.TeamDeployKeyUpdatedActivityLogEntry.ResourceType(childComplexity), true

	case "TeamDeployKeyUpdatedActivityLogEntry.teamSlug":
		if e.complexity.TeamDeployKeyUpdatedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.TeamDeployKeyUpdatedActivityLogEntry.TeamSlug(childComplexity), true

	case "TeamEdge.cursor":
		if e.complexity.TeamEdge.Cursor == nil {
			break
		}

		return e.complexity.TeamEdge.Cursor(childComplexity), true

	case "TeamEdge.node":
		if e.complexity.TeamEdge.Node == nil {
			break
		}

		return e.complexity.TeamEdge.Node(childComplexity), true

	case "TeamEntraIDGroup.groupID":
		if e.complexity.TeamEntraIDGroup.GroupID == nil {
			break
		}

		return e.complexity.TeamEntraIDGroup.GroupID(childComplexity), true

	case "TeamEnvironment.alerts":
		if e.complexity.TeamEnvironment.Alerts == nil {
			break
		}

		args, err := ec.field_TeamEnvironment_alerts_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TeamEnvironment.Alerts(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["orderBy"].(*alerts.AlertOrder), args["filter"].(*alerts.TeamAlertsFilter)), true

	case "TeamEnvironment.application":
		if e.complexity.TeamEnvironment.Application == nil {
			break
		}

		args, err := ec.field_TeamEnvironment_application_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TeamEnvironment.Application(childComplexity, args["name"].(string)), true

	case "TeamEnvironment.bigQueryDataset":
		if e.complexity.TeamEnvironment.BigQueryDataset == nil {
			break
		}

		args, err := ec.field_TeamEnvironment_bigQueryDataset_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TeamEnvironment.BigQueryDataset(childComplexity, args["name"].(string)), true

	case "TeamEnvironment.bucket":
		if e.complexity.TeamEnvironment.Bucket == nil {
			break
		}

		args, err := ec.field_TeamEnvironment_bucket_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TeamEnvironment.Bucket(childComplexity, args["name"].(string)), true

	case "TeamEnvironment.cost":
		if e.complexity.TeamEnvironment.Cost == nil {
			break
		}

		return e.complexity.TeamEnvironment.Cost(childComplexity), true

	case "TeamEnvironment.environment":
		if e.complexity.TeamEnvironment.Environment == nil {
			break
		}

		return e.complexity.TeamEnvironment.Environment(childComplexity), true

	case "TeamEnvironment.gcpProjectID":
		if e.complexity.TeamEnvironment.GCPProjectID == nil {
			break
		}

		return e.complexity.TeamEnvironment.GCPProjectID(childComplexity), true

	case "TeamEnvironment.id":
		if e.complexity.TeamEnvironment.ID == nil {
			break
		}

		return e.complexity.TeamEnvironment.ID(childComplexity), true

	case "TeamEnvironment.job":
		if e.complexity.TeamEnvironment.Job == nil {
			break
		}

		args, err := ec.field_TeamEnvironment_job_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TeamEnvironment.Job(childComplexity, args["name"].(string)), true

	case "TeamEnvironment.kafkaTopic":
		if e.complexity.TeamEnvironment.KafkaTopic == nil {
			break
		}

		args, err := ec.field_TeamEnvironment_kafkaTopic_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TeamEnvironment.KafkaTopic(childComplexity, args["name"].(string)), true

	case "TeamEnvironment.name":
		if e.complexity.TeamEnvironment.Name == nil {
			break
		}

		return e.complexity.TeamEnvironment.Name(childComplexity), true

	case "TeamEnvironment.openSearch":
		if e.complexity.TeamEnvironment.OpenSearch == nil {
			break
		}

		args, err := ec.field_TeamEnvironment_openSearch_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TeamEnvironment.OpenSearch(childComplexity, args["name"].(string)), true

	case "TeamEnvironment.sqlInstance":
		if e.complexity.TeamEnvironment.SQLInstance == nil {
			break
		}

		args, err := ec.field_TeamEnvironment_sqlInstance_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TeamEnvironment.SQLInstance(childComplexity, args["name"].(string)), true

	case "TeamEnvironment.secret":
		if e.complexity.TeamEnvironment.Secret == nil {
			break
		}

		args, err := ec.field_TeamEnvironment_secret_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TeamEnvironment.Secret(childComplexity, args["name"].(string)), true

	case "TeamEnvironment.slackAlertsChannel":
		if e.complexity.TeamEnvironment.SlackAlertsChannel == nil {
			break
		}

		return e.complexity.TeamEnvironment.SlackAlertsChannel(childComplexity), true

	case "TeamEnvironment.team":
		if e.complexity.TeamEnvironment.Team == nil {
			break
		}

		return e.complexity.TeamEnvironment.Team(childComplexity), true

	case "TeamEnvironment.valkey":
		if e.complexity.TeamEnvironment.Valkey == nil {
			break
		}

		args, err := ec.field_TeamEnvironment_valkey_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TeamEnvironment.Valkey(childComplexity, args["name"].(string)), true

	case "TeamEnvironment.workload":
		if e.complexity.TeamEnvironment.Workload == nil {
			break
		}

		args, err := ec.field_TeamEnvironment_workload_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TeamEnvironment.Workload(childComplexity, args["name"].(string)), true

	case "TeamEnvironmentCost.daily":
		if e.complexity.TeamEnvironmentCost.Daily == nil {
			break
		}

		args, err := ec.field_TeamEnvironmentCost_daily_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TeamEnvironmentCost.Daily(childComplexity, args["from"].(scalar.Date), args["to"].(scalar.Date)), true

	case "TeamEnvironmentCostPeriod.series":
		if e.complexity.TeamEnvironmentCostPeriod.Series == nil {
			break
		}

		return e.complexity.TeamEnvironmentCostPeriod.Series(childComplexity), true

	case "TeamEnvironmentCostPeriod.sum":
		if e.complexity.TeamEnvironmentCostPeriod.Sum == nil {
			break
		}

		return e.complexity.TeamEnvironmentCostPeriod.Sum(childComplexity), true

	case "TeamEnvironmentUpdatedActivityLogEntry.actor":
		if e.complexity.TeamEnvironmentUpdatedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.TeamEnvironmentUpdatedActivityLogEntry.Actor(childComplexity), true

	case "TeamEnvironmentUpdatedActivityLogEntry.createdAt":
		if e.complexity.TeamEnvironmentUpdatedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.TeamEnvironmentUpdatedActivityLogEntry.CreatedAt(childComplexity), true

	case "TeamEnvironmentUpdatedActivityLogEntry.data":
		if e.complexity.TeamEnvironmentUpdatedActivityLogEntry.Data == nil {
			break
		}

		return e.complexity.TeamEnvironmentUpdatedActivityLogEntry.Data(childComplexity), true

	case "TeamEnvironmentUpdatedActivityLogEntry.environmentName":
		if e.complexity.TeamEnvironmentUpdatedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.TeamEnvironmentUpdatedActivityLogEntry.EnvironmentName(childComplexity), true

	case "TeamEnvironmentUpdatedActivityLogEntry.id":
		if e.complexity.TeamEnvironmentUpdatedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.TeamEnvironmentUpdatedActivityLogEntry.ID(childComplexity), true

	case "TeamEnvironmentUpdatedActivityLogEntry.message":
		if e.complexity.TeamEnvironmentUpdatedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.TeamEnvironmentUpdatedActivityLogEntry.Message(childComplexity), true

	case "TeamEnvironmentUpdatedActivityLogEntry.resourceName":
		if e.complexity.TeamEnvironmentUpdatedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.TeamEnvironmentUpdatedActivityLogEntry.ResourceName(childComplexity), true

	case "TeamEnvironmentUpdatedActivityLogEntry.resourceType":
		if e.complexity.TeamEnvironmentUpdatedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.TeamEnvironmentUpdatedActivityLogEntry.ResourceType(childComplexity), true

	case "TeamEnvironmentUpdatedActivityLogEntry.teamSlug":
		if e.complexity.TeamEnvironmentUpdatedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.TeamEnvironmentUpdatedActivityLogEntry.TeamSlug(childComplexity), true

	case "TeamEnvironmentUpdatedActivityLogEntryData.updatedFields":
		if e.complexity.TeamEnvironmentUpdatedActivityLogEntryData.UpdatedFields == nil {
			break
		}

		return e.complexity.TeamEnvironmentUpdatedActivityLogEntryData.UpdatedFields(childComplexity), true

	case "TeamEnvironmentUpdatedActivityLogEntryDataUpdatedField.field":
		if e.complexity.TeamEnvironmentUpdatedActivityLogEntryDataUpdatedField.Field == nil {
			break
		}

		return e.complexity.TeamEnvironmentUpdatedActivityLogEntryDataUpdatedField.Field(childComplexity), true

	case "TeamEnvironmentUpdatedActivityLogEntryDataUpdatedField.newValue":
		if e.complexity.TeamEnvironmentUpdatedActivityLogEntryDataUpdatedField.NewValue == nil {
			break
		}

		return e.complexity.TeamEnvironmentUpdatedActivityLogEntryDataUpdatedField.NewValue(childComplexity), true

	case "TeamEnvironmentUpdatedActivityLogEntryDataUpdatedField.oldValue":
		if e.complexity.TeamEnvironmentUpdatedActivityLogEntryDataUpdatedField.OldValue == nil {
			break
		}

		return e.complexity.TeamEnvironmentUpdatedActivityLogEntryDataUpdatedField.OldValue(childComplexity), true

	case "TeamExternalResources.cdn":
		if e.complexity.TeamExternalResources.CDN == nil {
			break
		}

		return e.complexity.TeamExternalResources.CDN(childComplexity), true

	case "TeamExternalResources.entraIDGroup":
		if e.complexity.TeamExternalResources.EntraIDGroup == nil {
			break
		}

		return e.complexity.TeamExternalResources.EntraIDGroup(childComplexity), true

	case "TeamExternalResources.gitHubTeam":
		if e.complexity.TeamExternalResources.GitHubTeam == nil {
			break
		}

		return e.complexity.TeamExternalResources.GitHubTeam(childComplexity), true

	case "TeamExternalResources.googleArtifactRegistry":
		if e.complexity.TeamExternalResources.GoogleArtifactRegistry == nil {
			break
		}

		return e.complexity.TeamExternalResources.GoogleArtifactRegistry(childComplexity), true

	case "TeamExternalResources.googleGroup":
		if e.complexity.TeamExternalResources.GoogleGroup == nil {
			break
		}

		return e.complexity.TeamExternalResources.GoogleGroup(childComplexity), true

	case "TeamGitHubTeam.slug":
		if e.complexity.TeamGitHubTeam.Slug == nil {
			break
		}

		return e.complexity.TeamGitHubTeam.Slug(childComplexity), true

	case "TeamGoogleArtifactRegistry.repository":
		if e.complexity.TeamGoogleArtifactRegistry.Repository == nil {
			break
		}

		return e.complexity.TeamGoogleArtifactRegistry.Repository(childComplexity), true

	case "TeamGoogleGroup.email":
		if e.complexity.TeamGoogleGroup.Email == nil {
			break
		}

		return e.complexity.TeamGoogleGroup.Email(childComplexity), true

	case "TeamInventoryCountApplications.total":
		if e.complexity.TeamInventoryCountApplications.Total == nil {
			break
		}

		return e.complexity.TeamInventoryCountApplications.Total(childComplexity), true

	case "TeamInventoryCountBigQueryDatasets.total":
		if e.complexity.TeamInventoryCountBigQueryDatasets.Total == nil {
			break
		}

		return e.complexity.TeamInventoryCountBigQueryDatasets.Total(childComplexity), true

	case "TeamInventoryCountBuckets.total":
		if e.complexity.TeamInventoryCountBuckets.Total == nil {
			break
		}

		return e.complexity.TeamInventoryCountBuckets.Total(childComplexity), true

	case "TeamInventoryCountJobs.total":
		if e.complexity.TeamInventoryCountJobs.Total == nil {
			break
		}

		return e.complexity.TeamInventoryCountJobs.Total(childComplexity), true

	case "TeamInventoryCountKafkaTopics.total":
		if e.complexity.TeamInventoryCountKafkaTopics.Total == nil {
			break
		}

		return e.complexity.TeamInventoryCountKafkaTopics.Total(childComplexity), true

	case "TeamInventoryCountOpenSearches.total":
		if e.complexity.TeamInventoryCountOpenSearches.Total == nil {
			break
		}

		return e.complexity.TeamInventoryCountOpenSearches.Total(childComplexity), true

	case "TeamInventoryCountSqlInstances.total":
		if e.complexity.TeamInventoryCountSqlInstances.Total == nil {
			break
		}

		return e.complexity.TeamInventoryCountSqlInstances.Total(childComplexity), true

	case "TeamInventoryCountValkeys.total":
		if e.complexity.TeamInventoryCountValkeys.Total == nil {
			break
		}

		return e.complexity.TeamInventoryCountValkeys.Total(childComplexity), true

	case "TeamInventoryCounts.applications":
		if e.complexity.TeamInventoryCounts.Applications == nil {
			break
		}

		return e.complexity.TeamInventoryCounts.Applications(childComplexity), true

	case "TeamInventoryCounts.bigQueryDatasets":
		if e.complexity.TeamInventoryCounts.BigQueryDatasets == nil {
			break
		}

		return e.complexity.TeamInventoryCounts.BigQueryDatasets(childComplexity), true

	case "TeamInventoryCounts.buckets":
		if e.complexity.TeamInventoryCounts.Buckets == nil {
			break
		}

		return e.complexity.TeamInventoryCounts.Buckets(childComplexity), true

	case "TeamInventoryCounts.jobs":
		if e.complexity.TeamInventoryCounts.Jobs == nil {
			break
		}

		return e.complexity.TeamInventoryCounts.Jobs(childComplexity), true

	case "TeamInventoryCounts.kafkaTopics":
		if e.complexity.TeamInventoryCounts.KafkaTopics == nil {
			break
		}

		return e.complexity.TeamInventoryCounts.KafkaTopics(childComplexity), true

	case "TeamInventoryCounts.openSearches":
		if e.complexity.TeamInventoryCounts.OpenSearches == nil {
			break
		}

		return e.complexity.TeamInventoryCounts.OpenSearches(childComplexity), true

	case "TeamInventoryCounts.sqlInstances":
		if e.complexity.TeamInventoryCounts.SQLInstances == nil {
			break
		}

		return e.complexity.TeamInventoryCounts.SQLInstances(childComplexity), true

	case "TeamInventoryCounts.valkeys":
		if e.complexity.TeamInventoryCounts.Valkeys == nil {
			break
		}

		return e.complexity.TeamInventoryCounts.Valkeys(childComplexity), true

	case "TeamMember.role":
		if e.complexity.TeamMember.Role == nil {
			break
		}

		return e.complexity.TeamMember.Role(childComplexity), true

	case "TeamMember.team":
		if e.complexity.TeamMember.Team == nil {
			break
		}

		return e.complexity.TeamMember.Team(childComplexity), true

	case "TeamMember.user":
		if e.complexity.TeamMember.User == nil {
			break
		}

		return e.complexity.TeamMember.User(childComplexity), true

	case "TeamMemberAddedActivityLogEntry.actor":
		if e.complexity.TeamMemberAddedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.TeamMemberAddedActivityLogEntry.Actor(childComplexity), true

	case "TeamMemberAddedActivityLogEntry.createdAt":
		if e.complexity.TeamMemberAddedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.TeamMemberAddedActivityLogEntry.CreatedAt(childComplexity), true

	case "TeamMemberAddedActivityLogEntry.data":
		if e.complexity.TeamMemberAddedActivityLogEntry.Data == nil {
			break
		}

		return e.complexity.TeamMemberAddedActivityLogEntry.Data(childComplexity), true

	case "TeamMemberAddedActivityLogEntry.environmentName":
		if e.complexity.TeamMemberAddedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.TeamMemberAddedActivityLogEntry.EnvironmentName(childComplexity), true

	case "TeamMemberAddedActivityLogEntry.id":
		if e.complexity.TeamMemberAddedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.TeamMemberAddedActivityLogEntry.ID(childComplexity), true

	case "TeamMemberAddedActivityLogEntry.message":
		if e.complexity.TeamMemberAddedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.TeamMemberAddedActivityLogEntry.Message(childComplexity), true

	case "TeamMemberAddedActivityLogEntry.resourceName":
		if e.complexity.TeamMemberAddedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.TeamMemberAddedActivityLogEntry.ResourceName(childComplexity), true

	case "TeamMemberAddedActivityLogEntry.resourceType":
		if e.complexity.TeamMemberAddedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.TeamMemberAddedActivityLogEntry.ResourceType(childComplexity), true

	case "TeamMemberAddedActivityLogEntry.teamSlug":
		if e.complexity.TeamMemberAddedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.TeamMemberAddedActivityLogEntry.TeamSlug(childComplexity), true

	case "TeamMemberAddedActivityLogEntryData.role":
		if e.complexity.TeamMemberAddedActivityLogEntryData.Role == nil {
			break
		}

		return e.complexity.TeamMemberAddedActivityLogEntryData.Role(childComplexity), true

	case "TeamMemberAddedActivityLogEntryData.userEmail":
		if e.complexity.TeamMemberAddedActivityLogEntryData.UserEmail == nil {
			break
		}

		return e.complexity.TeamMemberAddedActivityLogEntryData.UserEmail(childComplexity), true

	case "TeamMemberAddedActivityLogEntryData.userID":
		if e.complexity.TeamMemberAddedActivityLogEntryData.UserID == nil {
			break
		}

		return e.complexity.TeamMemberAddedActivityLogEntryData.UserID(childComplexity), true

	case "TeamMemberConnection.edges":
		if e.complexity.TeamMemberConnection.Edges == nil {
			break
		}

		return e.complexity.TeamMemberConnection.Edges(childComplexity), true

	case "TeamMemberConnection.nodes":
		if e.complexity.TeamMemberConnection.Nodes == nil {
			break
		}

		return e.complexity.TeamMemberConnection.Nodes(childComplexity), true

	case "TeamMemberConnection.pageInfo":
		if e.complexity.TeamMemberConnection.PageInfo == nil {
			break
		}

		return e.complexity.TeamMemberConnection.PageInfo(childComplexity), true

	case "TeamMemberEdge.cursor":
		if e.complexity.TeamMemberEdge.Cursor == nil {
			break
		}

		return e.complexity.TeamMemberEdge.Cursor(childComplexity), true

	case "TeamMemberEdge.node":
		if e.complexity.TeamMemberEdge.Node == nil {
			break
		}

		return e.complexity.TeamMemberEdge.Node(childComplexity), true

	case "TeamMemberRemovedActivityLogEntry.actor":
		if e.complexity.TeamMemberRemovedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.TeamMemberRemovedActivityLogEntry.Actor(childComplexity), true

	case "TeamMemberRemovedActivityLogEntry.createdAt":
		if e.complexity.TeamMemberRemovedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.TeamMemberRemovedActivityLogEntry.CreatedAt(childComplexity), true

	case "TeamMemberRemovedActivityLogEntry.data":
		if e.complexity.TeamMemberRemovedActivityLogEntry.Data == nil {
			break
		}

		return e.complexity.TeamMemberRemovedActivityLogEntry.Data(childComplexity), true

	case "TeamMemberRemovedActivityLogEntry.environmentName":
		if e.complexity.TeamMemberRemovedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.TeamMemberRemovedActivityLogEntry.EnvironmentName(childComplexity), true

	case "TeamMemberRemovedActivityLogEntry.id":
		if e.complexity.TeamMemberRemovedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.TeamMemberRemovedActivityLogEntry.ID(childComplexity), true

	case "TeamMemberRemovedActivityLogEntry.message":
		if e.complexity.TeamMemberRemovedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.TeamMemberRemovedActivityLogEntry.Message(childComplexity), true

	case "TeamMemberRemovedActivityLogEntry.resourceName":
		if e.complexity.TeamMemberRemovedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.TeamMemberRemovedActivityLogEntry.ResourceName(childComplexity), true

	case "TeamMemberRemovedActivityLogEntry.resourceType":
		if e.complexity.TeamMemberRemovedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.TeamMemberRemovedActivityLogEntry.ResourceType(childComplexity), true

	case "TeamMemberRemovedActivityLogEntry.teamSlug":
		if e.complexity.TeamMemberRemovedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.TeamMemberRemovedActivityLogEntry.TeamSlug(childComplexity), true

	case "TeamMemberRemovedActivityLogEntryData.userEmail":
		if e.complexity.TeamMemberRemovedActivityLogEntryData.UserEmail == nil {
			break
		}

		return e.complexity.TeamMemberRemovedActivityLogEntryData.UserEmail(childComplexity), true

	case "TeamMemberRemovedActivityLogEntryData.userID":
		if e.complexity.TeamMemberRemovedActivityLogEntryData.UserID == nil {
			break
		}

		return e.complexity.TeamMemberRemovedActivityLogEntryData.UserID(childComplexity), true

	case "TeamMemberSetRoleActivityLogEntry.actor":
		if e.complexity.TeamMemberSetRoleActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.TeamMemberSetRoleActivityLogEntry.Actor(childComplexity), true

	case "TeamMemberSetRoleActivityLogEntry.createdAt":
		if e.complexity.TeamMemberSetRoleActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.TeamMemberSetRoleActivityLogEntry.CreatedAt(childComplexity), true

	case "TeamMemberSetRoleActivityLogEntry.data":
		if e.complexity.TeamMemberSetRoleActivityLogEntry.Data == nil {
			break
		}

		return e.complexity.TeamMemberSetRoleActivityLogEntry.Data(childComplexity), true

	case "TeamMemberSetRoleActivityLogEntry.environmentName":
		if e.complexity.TeamMemberSetRoleActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.TeamMemberSetRoleActivityLogEntry.EnvironmentName(childComplexity), true

	case "TeamMemberSetRoleActivityLogEntry.id":
		if e.complexity.TeamMemberSetRoleActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.TeamMemberSetRoleActivityLogEntry.ID(childComplexity), true

	case "TeamMemberSetRoleActivityLogEntry.message":
		if e.complexity.TeamMemberSetRoleActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.TeamMemberSetRoleActivityLogEntry.Message(childComplexity), true

	case "TeamMemberSetRoleActivityLogEntry.resourceName":
		if e.complexity.TeamMemberSetRoleActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.TeamMemberSetRoleActivityLogEntry.ResourceName(childComplexity), true

	case "TeamMemberSetRoleActivityLogEntry.resourceType":
		if e.complexity.TeamMemberSetRoleActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.TeamMemberSetRoleActivityLogEntry.ResourceType(childComplexity), true

	case "TeamMemberSetRoleActivityLogEntry.teamSlug":
		if e.complexity.TeamMemberSetRoleActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.TeamMemberSetRoleActivityLogEntry.TeamSlug(childComplexity), true

	case "TeamMemberSetRoleActivityLogEntryData.role":
		if e.complexity.TeamMemberSetRoleActivityLogEntryData.Role == nil {
			break
		}

		return e.complexity.TeamMemberSetRoleActivityLogEntryData.Role(childComplexity), true

	case "TeamMemberSetRoleActivityLogEntryData.userEmail":
		if e.complexity.TeamMemberSetRoleActivityLogEntryData.UserEmail == nil {
			break
		}

		return e.complexity.TeamMemberSetRoleActivityLogEntryData.UserEmail(childComplexity), true

	case "TeamMemberSetRoleActivityLogEntryData.userID":
		if e.complexity.TeamMemberSetRoleActivityLogEntryData.UserID == nil {
			break
		}

		return e.complexity.TeamMemberSetRoleActivityLogEntryData.UserID(childComplexity), true

	case "TeamServiceUtilization.sqlInstances":
		if e.complexity.TeamServiceUtilization.SQLInstances == nil {
			break
		}

		return e.complexity.TeamServiceUtilization.SQLInstances(childComplexity), true

	case "TeamServiceUtilizationSqlInstances.cpu":
		if e.complexity.TeamServiceUtilizationSqlInstances.CPU == nil {
			break
		}

		return e.complexity.TeamServiceUtilizationSqlInstances.CPU(childComplexity), true

	case "TeamServiceUtilizationSqlInstances.disk":
		if e.complexity.TeamServiceUtilizationSqlInstances.Disk == nil {
			break
		}

		return e.complexity.TeamServiceUtilizationSqlInstances.Disk(childComplexity), true

	case "TeamServiceUtilizationSqlInstances.memory":
		if e.complexity.TeamServiceUtilizationSqlInstances.Memory == nil {
			break
		}

		return e.complexity.TeamServiceUtilizationSqlInstances.Memory(childComplexity), true

	case "TeamServiceUtilizationSqlInstancesCPU.requested":
		if e.complexity.TeamServiceUtilizationSqlInstancesCPU.Requested == nil {
			break
		}

		return e.complexity.TeamServiceUtilizationSqlInstancesCPU.Requested(childComplexity), true

	case "TeamServiceUtilizationSqlInstancesCPU.used":
		if e.complexity.TeamServiceUtilizationSqlInstancesCPU.Used == nil {
			break
		}

		return e.complexity.TeamServiceUtilizationSqlInstancesCPU.Used(childComplexity), true

	case "TeamServiceUtilizationSqlInstancesCPU.utilization":
		if e.complexity.TeamServiceUtilizationSqlInstancesCPU.Utilization == nil {
			break
		}

		return e.complexity.TeamServiceUtilizationSqlInstancesCPU.Utilization(childComplexity), true

	case "TeamServiceUtilizationSqlInstancesDisk.requested":
		if e.complexity.TeamServiceUtilizationSqlInstancesDisk.Requested == nil {
			break
		}

		return e.complexity.TeamServiceUtilizationSqlInstancesDisk.Requested(childComplexity), true

	case "TeamServiceUtilizationSqlInstancesDisk.used":
		if e.complexity.TeamServiceUtilizationSqlInstancesDisk.Used == nil {
			break
		}

		return e.complexity.TeamServiceUtilizationSqlInstancesDisk.Used(childComplexity), true

	case "TeamServiceUtilizationSqlInstancesDisk.utilization":
		if e.complexity.TeamServiceUtilizationSqlInstancesDisk.Utilization == nil {
			break
		}

		return e.complexity.TeamServiceUtilizationSqlInstancesDisk.Utilization(childComplexity), true

	case "TeamServiceUtilizationSqlInstancesMemory.requested":
		if e.complexity.TeamServiceUtilizationSqlInstancesMemory.Requested == nil {
			break
		}

		return e.complexity.TeamServiceUtilizationSqlInstancesMemory.Requested(childComplexity), true

	case "TeamServiceUtilizationSqlInstancesMemory.used":
		if e.complexity.TeamServiceUtilizationSqlInstancesMemory.Used == nil {
			break
		}

		return e.complexity.TeamServiceUtilizationSqlInstancesMemory.Used(childComplexity), true

	case "TeamServiceUtilizationSqlInstancesMemory.utilization":
		if e.complexity.TeamServiceUtilizationSqlInstancesMemory.Utilization == nil {
			break
		}

		return e.complexity.TeamServiceUtilizationSqlInstancesMemory.Utilization(childComplexity), true

	case "TeamUpdatedActivityLogEntry.actor":
		if e.complexity.TeamUpdatedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.TeamUpdatedActivityLogEntry.Actor(childComplexity), true

	case "TeamUpdatedActivityLogEntry.createdAt":
		if e.complexity.TeamUpdatedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.TeamUpdatedActivityLogEntry.CreatedAt(childComplexity), true

	case "TeamUpdatedActivityLogEntry.data":
		if e.complexity.TeamUpdatedActivityLogEntry.Data == nil {
			break
		}

		return e.complexity.TeamUpdatedActivityLogEntry.Data(childComplexity), true

	case "TeamUpdatedActivityLogEntry.environmentName":
		if e.complexity.TeamUpdatedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.TeamUpdatedActivityLogEntry.EnvironmentName(childComplexity), true

	case "TeamUpdatedActivityLogEntry.id":
		if e.complexity.TeamUpdatedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.TeamUpdatedActivityLogEntry.ID(childComplexity), true

	case "TeamUpdatedActivityLogEntry.message":
		if e.complexity.TeamUpdatedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.TeamUpdatedActivityLogEntry.Message(childComplexity), true

	case "TeamUpdatedActivityLogEntry.resourceName":
		if e.complexity.TeamUpdatedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.TeamUpdatedActivityLogEntry.ResourceName(childComplexity), true

	case "TeamUpdatedActivityLogEntry.resourceType":
		if e.complexity.TeamUpdatedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.TeamUpdatedActivityLogEntry.ResourceType(childComplexity), true

	case "TeamUpdatedActivityLogEntry.teamSlug":
		if e.complexity.TeamUpdatedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.TeamUpdatedActivityLogEntry.TeamSlug(childComplexity), true

	case "TeamUpdatedActivityLogEntryData.updatedFields":
		if e.complexity.TeamUpdatedActivityLogEntryData.UpdatedFields == nil {
			break
		}

		return e.complexity.TeamUpdatedActivityLogEntryData.UpdatedFields(childComplexity), true

	case "TeamUpdatedActivityLogEntryDataUpdatedField.field":
		if e.complexity.TeamUpdatedActivityLogEntryDataUpdatedField.Field == nil {
			break
		}

		return e.complexity.TeamUpdatedActivityLogEntryDataUpdatedField.Field(childComplexity), true

	case "TeamUpdatedActivityLogEntryDataUpdatedField.newValue":
		if e.complexity.TeamUpdatedActivityLogEntryDataUpdatedField.NewValue == nil {
			break
		}

		return e.complexity.TeamUpdatedActivityLogEntryDataUpdatedField.NewValue(childComplexity), true

	case "TeamUpdatedActivityLogEntryDataUpdatedField.oldValue":
		if e.complexity.TeamUpdatedActivityLogEntryDataUpdatedField.OldValue == nil {
			break
		}

		return e.complexity.TeamUpdatedActivityLogEntryDataUpdatedField.OldValue(childComplexity), true

	case "TeamUtilizationData.environment":
		if e.complexity.TeamUtilizationData.Environment == nil {
			break
		}

		return e.complexity.TeamUtilizationData.Environment(childComplexity), true

	case "TeamUtilizationData.requested":
		if e.complexity.TeamUtilizationData.Requested == nil {
			break
		}

		return e.complexity.TeamUtilizationData.Requested(childComplexity), true

	case "TeamUtilizationData.team":
		if e.complexity.TeamUtilizationData.Team == nil {
			break
		}

		return e.complexity.TeamUtilizationData.Team(childComplexity), true

	case "TeamUtilizationData.teamEnvironment":
		if e.complexity.TeamUtilizationData.TeamEnvironment == nil {
			break
		}

		return e.complexity.TeamUtilizationData.TeamEnvironment(childComplexity), true

	case "TeamUtilizationData.used":
		if e.complexity.TeamUtilizationData.Used == nil {
			break
		}

		return e.complexity.TeamUtilizationData.Used(childComplexity), true

	case "TeamVulnerabilitySummary.coverage":
		if e.complexity.TeamVulnerabilitySummary.Coverage == nil {
			break
		}

		return e.complexity.TeamVulnerabilitySummary.Coverage(childComplexity), true

	case "TeamVulnerabilitySummary.critical":
		if e.complexity.TeamVulnerabilitySummary.Critical == nil {
			break
		}

		return e.complexity.TeamVulnerabilitySummary.Critical(childComplexity), true

	case "TeamVulnerabilitySummary.high":
		if e.complexity.TeamVulnerabilitySummary.High == nil {
			break
		}

		return e.complexity.TeamVulnerabilitySummary.High(childComplexity), true

	case "TeamVulnerabilitySummary.lastUpdated":
		if e.complexity.TeamVulnerabilitySummary.LastUpdated == nil {
			break
		}

		return e.complexity.TeamVulnerabilitySummary.LastUpdated(childComplexity), true

	case "TeamVulnerabilitySummary.low":
		if e.complexity.TeamVulnerabilitySummary.Low == nil {
			break
		}

		return e.complexity.TeamVulnerabilitySummary.Low(childComplexity), true

	case "TeamVulnerabilitySummary.medium":
		if e.complexity.TeamVulnerabilitySummary.Medium == nil {
			break
		}

		return e.complexity.TeamVulnerabilitySummary.Medium(childComplexity), true

	case "TeamVulnerabilitySummary.riskScore":
		if e.complexity.TeamVulnerabilitySummary.RiskScore == nil {
			break
		}

		return e.complexity.TeamVulnerabilitySummary.RiskScore(childComplexity), true

	case "TeamVulnerabilitySummary.riskScoreTrend":
		if e.complexity.TeamVulnerabilitySummary.RiskScoreTrend == nil {
			break
		}

		return e.complexity.TeamVulnerabilitySummary.RiskScoreTrend(childComplexity), true

	case "TeamVulnerabilitySummary.sbomCount":
		if e.complexity.TeamVulnerabilitySummary.SBOMCount == nil {
			break
		}

		return e.complexity.TeamVulnerabilitySummary.SBOMCount(childComplexity), true

	case "TeamVulnerabilitySummary.unassigned":
		if e.complexity.TeamVulnerabilitySummary.Unassigned == nil {
			break
		}

		return e.complexity.TeamVulnerabilitySummary.Unassigned(childComplexity), true

	case "TenantVulnerabilitySummary.coverage":
		if e.complexity.TenantVulnerabilitySummary.Coverage == nil {
			break
		}

		return e.complexity.TenantVulnerabilitySummary.Coverage(childComplexity), true

	case "TenantVulnerabilitySummary.critical":
		if e.complexity.TenantVulnerabilitySummary.Critical == nil {
			break
		}

		return e.complexity.TenantVulnerabilitySummary.Critical(childComplexity), true

	case "TenantVulnerabilitySummary.high":
		if e.complexity.TenantVulnerabilitySummary.High == nil {
			break
		}

		return e.complexity.TenantVulnerabilitySummary.High(childComplexity), true

	case "TenantVulnerabilitySummary.lastUpdated":
		if e.complexity.TenantVulnerabilitySummary.LastUpdated == nil {
			break
		}

		return e.complexity.TenantVulnerabilitySummary.LastUpdated(childComplexity), true

	case "TenantVulnerabilitySummary.low":
		if e.complexity.TenantVulnerabilitySummary.Low == nil {
			break
		}

		return e.complexity.TenantVulnerabilitySummary.Low(childComplexity), true

	case "TenantVulnerabilitySummary.medium":
		if e.complexity.TenantVulnerabilitySummary.Medium == nil {
			break
		}

		return e.complexity.TenantVulnerabilitySummary.Medium(childComplexity), true

	case "TenantVulnerabilitySummary.riskScore":
		if e.complexity.TenantVulnerabilitySummary.RiskScore == nil {
			break
		}

		return e.complexity.TenantVulnerabilitySummary.RiskScore(childComplexity), true

	case "TenantVulnerabilitySummary.sbomCount":
		if e.complexity.TenantVulnerabilitySummary.SbomCount == nil {
			break
		}

		return e.complexity.TenantVulnerabilitySummary.SbomCount(childComplexity), true

	case "TenantVulnerabilitySummary.unassigned":
		if e.complexity.TenantVulnerabilitySummary.Unassigned == nil {
			break
		}

		return e.complexity.TenantVulnerabilitySummary.Unassigned(childComplexity), true

	case "TokenXAuthIntegration.name":
		if e.complexity.TokenXAuthIntegration.Name == nil {
			break
		}

		return e.complexity.TokenXAuthIntegration.Name(childComplexity), true

	case "TriggerJobPayload.job":
		if e.complexity.TriggerJobPayload.Job == nil {
			break
		}

		return e.complexity.TriggerJobPayload.Job(childComplexity), true

	case "TriggerJobPayload.jobRun":
		if e.complexity.TriggerJobPayload.JobRun == nil {
			break
		}

		return e.complexity.TriggerJobPayload.JobRun(childComplexity), true

	case "UnleashInstance.apiIngress":
		if e.complexity.UnleashInstance.APIIngress == nil {
			break
		}

		return e.complexity.UnleashInstance.APIIngress(childComplexity), true

	case "UnleashInstance.allowedTeams":
		if e.complexity.UnleashInstance.AllowedTeams == nil {
			break
		}

		args, err := ec.field_UnleashInstance_allowedTeams_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.UnleashInstance.AllowedTeams(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor)), true

	case "UnleashInstance.id":
		if e.complexity.UnleashInstance.ID == nil {
			break
		}

		return e.complexity.UnleashInstance.ID(childComplexity), true

	case "UnleashInstance.metrics":
		if e.complexity.UnleashInstance.Metrics == nil {
			break
		}

		return e.complexity.UnleashInstance.Metrics(childComplexity), true

	case "UnleashInstance.name":
		if e.complexity.UnleashInstance.Name == nil {
			break
		}

		return e.complexity.UnleashInstance.Name(childComplexity), true

	case "UnleashInstance.ready":
		if e.complexity.UnleashInstance.Ready == nil {
			break
		}

		return e.complexity.UnleashInstance.Ready(childComplexity), true

	case "UnleashInstance.version":
		if e.complexity.UnleashInstance.Version == nil {
			break
		}

		return e.complexity.UnleashInstance.Version(childComplexity), true

	case "UnleashInstance.webIngress":
		if e.complexity.UnleashInstance.WebIngress == nil {
			break
		}

		return e.complexity.UnleashInstance.WebIngress(childComplexity), true

	case "UnleashInstanceCreatedActivityLogEntry.actor":
		if e.complexity.UnleashInstanceCreatedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.UnleashInstanceCreatedActivityLogEntry.Actor(childComplexity), true

	case "UnleashInstanceCreatedActivityLogEntry.createdAt":
		if e.complexity.UnleashInstanceCreatedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.UnleashInstanceCreatedActivityLogEntry.CreatedAt(childComplexity), true

	case "UnleashInstanceCreatedActivityLogEntry.environmentName":
		if e.complexity.UnleashInstanceCreatedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.UnleashInstanceCreatedActivityLogEntry.EnvironmentName(childComplexity), true

	case "UnleashInstanceCreatedActivityLogEntry.id":
		if e.complexity.UnleashInstanceCreatedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.UnleashInstanceCreatedActivityLogEntry.ID(childComplexity), true

	case "UnleashInstanceCreatedActivityLogEntry.message":
		if e.complexity.UnleashInstanceCreatedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.UnleashInstanceCreatedActivityLogEntry.Message(childComplexity), true

	case "UnleashInstanceCreatedActivityLogEntry.resourceName":
		if e.complexity.UnleashInstanceCreatedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.UnleashInstanceCreatedActivityLogEntry.ResourceName(childComplexity), true

	case "UnleashInstanceCreatedActivityLogEntry.resourceType":
		if e.complexity.UnleashInstanceCreatedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.UnleashInstanceCreatedActivityLogEntry.ResourceType(childComplexity), true

	case "UnleashInstanceCreatedActivityLogEntry.teamSlug":
		if e.complexity.UnleashInstanceCreatedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.UnleashInstanceCreatedActivityLogEntry.TeamSlug(childComplexity), true

	case "UnleashInstanceMetrics.apiTokens":
		if e.complexity.UnleashInstanceMetrics.APITokens == nil {
			break
		}

		return e.complexity.UnleashInstanceMetrics.APITokens(childComplexity), true

	case "UnleashInstanceMetrics.cpuRequests":
		if e.complexity.UnleashInstanceMetrics.CPURequests == nil {
			break
		}

		return e.complexity.UnleashInstanceMetrics.CPURequests(childComplexity), true

	case "UnleashInstanceMetrics.cpuUtilization":
		if e.complexity.UnleashInstanceMetrics.CPUUtilization == nil {
			break
		}

		return e.complexity.UnleashInstanceMetrics.CPUUtilization(childComplexity), true

	case "UnleashInstanceMetrics.memoryRequests":
		if e.complexity.UnleashInstanceMetrics.MemoryRequests == nil {
			break
		}

		return e.complexity.UnleashInstanceMetrics.MemoryRequests(childComplexity), true

	case "UnleashInstanceMetrics.memoryUtilization":
		if e.complexity.UnleashInstanceMetrics.MemoryUtilization == nil {
			break
		}

		return e.complexity.UnleashInstanceMetrics.MemoryUtilization(childComplexity), true

	case "UnleashInstanceMetrics.toggles":
		if e.complexity.UnleashInstanceMetrics.Toggles == nil {
			break
		}

		return e.complexity.UnleashInstanceMetrics.Toggles(childComplexity), true

	case "UnleashInstanceUpdatedActivityLogEntry.actor":
		if e.complexity.UnleashInstanceUpdatedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.UnleashInstanceUpdatedActivityLogEntry.Actor(childComplexity), true

	case "UnleashInstanceUpdatedActivityLogEntry.createdAt":
		if e.complexity.UnleashInstanceUpdatedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.UnleashInstanceUpdatedActivityLogEntry.CreatedAt(childComplexity), true

	case "UnleashInstanceUpdatedActivityLogEntry.data":
		if e.complexity.UnleashInstanceUpdatedActivityLogEntry.Data == nil {
			break
		}

		return e.complexity.UnleashInstanceUpdatedActivityLogEntry.Data(childComplexity), true

	case "UnleashInstanceUpdatedActivityLogEntry.environmentName":
		if e.complexity.UnleashInstanceUpdatedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.UnleashInstanceUpdatedActivityLogEntry.EnvironmentName(childComplexity), true

	case "UnleashInstanceUpdatedActivityLogEntry.id":
		if e.complexity.UnleashInstanceUpdatedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.UnleashInstanceUpdatedActivityLogEntry.ID(childComplexity), true

	case "UnleashInstanceUpdatedActivityLogEntry.message":
		if e.complexity.UnleashInstanceUpdatedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.UnleashInstanceUpdatedActivityLogEntry.Message(childComplexity), true

	case "UnleashInstanceUpdatedActivityLogEntry.resourceName":
		if e.complexity.UnleashInstanceUpdatedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.UnleashInstanceUpdatedActivityLogEntry.ResourceName(childComplexity), true

	case "UnleashInstanceUpdatedActivityLogEntry.resourceType":
		if e.complexity.UnleashInstanceUpdatedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.UnleashInstanceUpdatedActivityLogEntry.ResourceType(childComplexity), true

	case "UnleashInstanceUpdatedActivityLogEntry.teamSlug":
		if e.complexity.UnleashInstanceUpdatedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.UnleashInstanceUpdatedActivityLogEntry.TeamSlug(childComplexity), true

	case "UnleashInstanceUpdatedActivityLogEntryData.allowedTeamSlug":
		if e.complexity.UnleashInstanceUpdatedActivityLogEntryData.AllowedTeamSlug == nil {
			break
		}

		return e.complexity.UnleashInstanceUpdatedActivityLogEntryData.AllowedTeamSlug(childComplexity), true

	case "UnleashInstanceUpdatedActivityLogEntryData.revokedTeamSlug":
		if e.complexity.UnleashInstanceUpdatedActivityLogEntryData.RevokedTeamSlug == nil {
			break
		}

		return e.complexity.UnleashInstanceUpdatedActivityLogEntryData.RevokedTeamSlug(childComplexity), true

	case "UpdateImageVulnerabilityPayload.vulnerability":
		if e.complexity.UpdateImageVulnerabilityPayload.Vulnerability == nil {
			break
		}

		return e.complexity.UpdateImageVulnerabilityPayload.Vulnerability(childComplexity), true

	case "UpdateOpenSearchPayload.openSearch":
		if e.complexity.UpdateOpenSearchPayload.OpenSearch == nil {
			break
		}

		return e.complexity.UpdateOpenSearchPayload.OpenSearch(childComplexity), true

	case "UpdateSecretValuePayload.secret":
		if e.complexity.UpdateSecretValuePayload.Secret == nil {
			break
		}

		return e.complexity.UpdateSecretValuePayload.Secret(childComplexity), true

	case "UpdateServiceAccountPayload.serviceAccount":
		if e.complexity.UpdateServiceAccountPayload.ServiceAccount == nil {
			break
		}

		return e.complexity.UpdateServiceAccountPayload.ServiceAccount(childComplexity), true

	case "UpdateServiceAccountTokenPayload.serviceAccount":
		if e.complexity.UpdateServiceAccountTokenPayload.ServiceAccount == nil {
			break
		}

		return e.complexity.UpdateServiceAccountTokenPayload.ServiceAccount(childComplexity), true

	case "UpdateServiceAccountTokenPayload.serviceAccountToken":
		if e.complexity.UpdateServiceAccountTokenPayload.ServiceAccountToken == nil {
			break
		}

		return e.complexity.UpdateServiceAccountTokenPayload.ServiceAccountToken(childComplexity), true

	case "UpdateTeamEnvironmentPayload.environment":
		if e.complexity.UpdateTeamEnvironmentPayload.Environment == nil {
			break
		}

		return e.complexity.UpdateTeamEnvironmentPayload.Environment(childComplexity), true

	case "UpdateTeamEnvironmentPayload.teamEnvironment":
		if e.complexity.UpdateTeamEnvironmentPayload.TeamEnvironment == nil {
			break
		}

		return e.complexity.UpdateTeamEnvironmentPayload.TeamEnvironment(childComplexity), true

	case "UpdateTeamPayload.team":
		if e.complexity.UpdateTeamPayload.Team == nil {
			break
		}

		return e.complexity.UpdateTeamPayload.Team(childComplexity), true

	case "UpdateValkeyPayload.valkey":
		if e.complexity.UpdateValkeyPayload.Valkey == nil {
			break
		}

		return e.complexity.UpdateValkeyPayload.Valkey(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.externalID":
		if e.complexity.User.ExternalID == nil {
			break
		}

		return e.complexity.User.ExternalID(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.isAdmin":
		if e.complexity.User.IsAdmin == nil {
			break
		}

		return e.complexity.User.IsAdmin(childComplexity), true

	case "User.name":
		if e.complexity.User.Name == nil {
			break
		}

		return e.complexity.User.Name(childComplexity), true

	case "User.teams":
		if e.complexity.User.Teams == nil {
			break
		}

		args, err := ec.field_User_teams_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.Teams(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["orderBy"].(*team.UserTeamOrder)), true

	case "UserConnection.edges":
		if e.complexity.UserConnection.Edges == nil {
			break
		}

		return e.complexity.UserConnection.Edges(childComplexity), true

	case "UserConnection.nodes":
		if e.complexity.UserConnection.Nodes == nil {
			break
		}

		return e.complexity.UserConnection.Nodes(childComplexity), true

	case "UserConnection.pageInfo":
		if e.complexity.UserConnection.PageInfo == nil {
			break
		}

		return e.complexity.UserConnection.PageInfo(childComplexity), true

	case "UserCreatedUserSyncLogEntry.createdAt":
		if e.complexity.UserCreatedUserSyncLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.UserCreatedUserSyncLogEntry.CreatedAt(childComplexity), true

	case "UserCreatedUserSyncLogEntry.id":
		if e.complexity.UserCreatedUserSyncLogEntry.ID == nil {
			break
		}

		return e.complexity.UserCreatedUserSyncLogEntry.ID(childComplexity), true

	case "UserCreatedUserSyncLogEntry.message":
		if e.complexity.UserCreatedUserSyncLogEntry.Message == nil {
			break
		}

		return e.complexity.UserCreatedUserSyncLogEntry.Message(childComplexity), true

	case "UserCreatedUserSyncLogEntry.userEmail":
		if e.complexity.UserCreatedUserSyncLogEntry.UserEmail == nil {
			break
		}

		return e.complexity.UserCreatedUserSyncLogEntry.UserEmail(childComplexity), true

	case "UserCreatedUserSyncLogEntry.userID":
		if e.complexity.UserCreatedUserSyncLogEntry.UserID == nil {
			break
		}

		return e.complexity.UserCreatedUserSyncLogEntry.UserID(childComplexity), true

	case "UserCreatedUserSyncLogEntry.userName":
		if e.complexity.UserCreatedUserSyncLogEntry.UserName == nil {
			break
		}

		return e.complexity.UserCreatedUserSyncLogEntry.UserName(childComplexity), true

	case "UserDeletedUserSyncLogEntry.createdAt":
		if e.complexity.UserDeletedUserSyncLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.UserDeletedUserSyncLogEntry.CreatedAt(childComplexity), true

	case "UserDeletedUserSyncLogEntry.id":
		if e.complexity.UserDeletedUserSyncLogEntry.ID == nil {
			break
		}

		return e.complexity.UserDeletedUserSyncLogEntry.ID(childComplexity), true

	case "UserDeletedUserSyncLogEntry.message":
		if e.complexity.UserDeletedUserSyncLogEntry.Message == nil {
			break
		}

		return e.complexity.UserDeletedUserSyncLogEntry.Message(childComplexity), true

	case "UserDeletedUserSyncLogEntry.userEmail":
		if e.complexity.UserDeletedUserSyncLogEntry.UserEmail == nil {
			break
		}

		return e.complexity.UserDeletedUserSyncLogEntry.UserEmail(childComplexity), true

	case "UserDeletedUserSyncLogEntry.userID":
		if e.complexity.UserDeletedUserSyncLogEntry.UserID == nil {
			break
		}

		return e.complexity.UserDeletedUserSyncLogEntry.UserID(childComplexity), true

	case "UserDeletedUserSyncLogEntry.userName":
		if e.complexity.UserDeletedUserSyncLogEntry.UserName == nil {
			break
		}

		return e.complexity.UserDeletedUserSyncLogEntry.UserName(childComplexity), true

	case "UserEdge.cursor":
		if e.complexity.UserEdge.Cursor == nil {
			break
		}

		return e.complexity.UserEdge.Cursor(childComplexity), true

	case "UserEdge.node":
		if e.complexity.UserEdge.Node == nil {
			break
		}

		return e.complexity.UserEdge.Node(childComplexity), true

	case "UserSyncLogEntryConnection.edges":
		if e.complexity.UserSyncLogEntryConnection.Edges == nil {
			break
		}

		return e.complexity.UserSyncLogEntryConnection.Edges(childComplexity), true

	case "UserSyncLogEntryConnection.nodes":
		if e.complexity.UserSyncLogEntryConnection.Nodes == nil {
			break
		}

		return e.complexity.UserSyncLogEntryConnection.Nodes(childComplexity), true

	case "UserSyncLogEntryConnection.pageInfo":
		if e.complexity.UserSyncLogEntryConnection.PageInfo == nil {
			break
		}

		return e.complexity.UserSyncLogEntryConnection.PageInfo(childComplexity), true

	case "UserSyncLogEntryEdge.cursor":
		if e.complexity.UserSyncLogEntryEdge.Cursor == nil {
			break
		}

		return e.complexity.UserSyncLogEntryEdge.Cursor(childComplexity), true

	case "UserSyncLogEntryEdge.node":
		if e.complexity.UserSyncLogEntryEdge.Node == nil {
			break
		}

		return e.complexity.UserSyncLogEntryEdge.Node(childComplexity), true

	case "UserUpdatedUserSyncLogEntry.createdAt":
		if e.complexity.UserUpdatedUserSyncLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.UserUpdatedUserSyncLogEntry.CreatedAt(childComplexity), true

	case "UserUpdatedUserSyncLogEntry.id":
		if e.complexity.UserUpdatedUserSyncLogEntry.ID == nil {
			break
		}

		return e.complexity.UserUpdatedUserSyncLogEntry.ID(childComplexity), true

	case "UserUpdatedUserSyncLogEntry.message":
		if e.complexity.UserUpdatedUserSyncLogEntry.Message == nil {
			break
		}

		return e.complexity.UserUpdatedUserSyncLogEntry.Message(childComplexity), true

	case "UserUpdatedUserSyncLogEntry.oldUserEmail":
		if e.complexity.UserUpdatedUserSyncLogEntry.OldUserEmail == nil {
			break
		}

		return e.complexity.UserUpdatedUserSyncLogEntry.OldUserEmail(childComplexity), true

	case "UserUpdatedUserSyncLogEntry.oldUserName":
		if e.complexity.UserUpdatedUserSyncLogEntry.OldUserName == nil {
			break
		}

		return e.complexity.UserUpdatedUserSyncLogEntry.OldUserName(childComplexity), true

	case "UserUpdatedUserSyncLogEntry.userEmail":
		if e.complexity.UserUpdatedUserSyncLogEntry.UserEmail == nil {
			break
		}

		return e.complexity.UserUpdatedUserSyncLogEntry.UserEmail(childComplexity), true

	case "UserUpdatedUserSyncLogEntry.userID":
		if e.complexity.UserUpdatedUserSyncLogEntry.UserID == nil {
			break
		}

		return e.complexity.UserUpdatedUserSyncLogEntry.UserID(childComplexity), true

	case "UserUpdatedUserSyncLogEntry.userName":
		if e.complexity.UserUpdatedUserSyncLogEntry.UserName == nil {
			break
		}

		return e.complexity.UserUpdatedUserSyncLogEntry.UserName(childComplexity), true

	case "UtilizationSample.instance":
		if e.complexity.UtilizationSample.Instance == nil {
			break
		}

		return e.complexity.UtilizationSample.Instance(childComplexity), true

	case "UtilizationSample.timestamp":
		if e.complexity.UtilizationSample.Timestamp == nil {
			break
		}

		return e.complexity.UtilizationSample.Timestamp(childComplexity), true

	case "UtilizationSample.value":
		if e.complexity.UtilizationSample.Value == nil {
			break
		}

		return e.complexity.UtilizationSample.Value(childComplexity), true

	case "Valkey.access":
		if e.complexity.Valkey.Access == nil {
			break
		}

		args, err := ec.field_Valkey_access_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Valkey.Access(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["orderBy"].(*valkey.ValkeyAccessOrder)), true

	case "Valkey.activityLog":
		if e.complexity.Valkey.ActivityLog == nil {
			break
		}

		args, err := ec.field_Valkey_activityLog_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Valkey.ActivityLog(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["filter"].(*activitylog.ActivityLogFilter)), true

	case "Valkey.cost":
		if e.complexity.Valkey.Cost == nil {
			break
		}

		return e.complexity.Valkey.Cost(childComplexity), true

	case "Valkey.environment":
		if e.complexity.Valkey.Environment == nil {
			break
		}

		return e.complexity.Valkey.Environment(childComplexity), true

	case "Valkey.id":
		if e.complexity.Valkey.ID == nil {
			break
		}

		return e.complexity.Valkey.ID(childComplexity), true

	case "Valkey.issues":
		if e.complexity.Valkey.Issues == nil {
			break
		}

		args, err := ec.field_Valkey_issues_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Valkey.Issues(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor), args["orderBy"].(*issue.IssueOrder), args["filter"].(*issue.ResourceIssueFilter)), true

	case "Valkey.maintenance":
		if e.complexity.Valkey.Maintenance == nil {
			break
		}

		return e.complexity.Valkey.Maintenance(childComplexity), true

	case "Valkey.maxMemoryPolicy":
		if e.complexity.Valkey.MaxMemoryPolicy == nil {
			break
		}

		return e.complexity.Valkey.MaxMemoryPolicy(childComplexity), true

	case "Valkey.memory":
		if e.complexity.Valkey.Memory == nil {
			break
		}

		return e.complexity.Valkey.Memory(childComplexity), true

	case "Valkey.name":
		if e.complexity.Valkey.Name == nil {
			break
		}

		return e.complexity.Valkey.Name(childComplexity), true

	case "Valkey.state":
		if e.complexity.Valkey.State == nil {
			break
		}

		return e.complexity.Valkey.State(childComplexity), true

	case "Valkey.team":
		if e.complexity.Valkey.Team == nil {
			break
		}

		return e.complexity.Valkey.Team(childComplexity), true

	case "Valkey.teamEnvironment":
		if e.complexity.Valkey.TeamEnvironment == nil {
			break
		}

		return e.complexity.Valkey.TeamEnvironment(childComplexity), true

	case "Valkey.terminationProtection":
		if e.complexity.Valkey.TerminationProtection == nil {
			break
		}

		return e.complexity.Valkey.TerminationProtection(childComplexity), true

	case "Valkey.tier":
		if e.complexity.Valkey.Tier == nil {
			break
		}

		return e.complexity.Valkey.Tier(childComplexity), true

	case "Valkey.workload":
		if e.complexity.Valkey.Workload == nil {
			break
		}

		return e.complexity.Valkey.Workload(childComplexity), true

	case "ValkeyAccess.access":
		if e.complexity.ValkeyAccess.Access == nil {
			break
		}

		return e.complexity.ValkeyAccess.Access(childComplexity), true

	case "ValkeyAccess.workload":
		if e.complexity.ValkeyAccess.Workload == nil {
			break
		}

		return e.complexity.ValkeyAccess.Workload(childComplexity), true

	case "ValkeyAccessConnection.edges":
		if e.complexity.ValkeyAccessConnection.Edges == nil {
			break
		}

		return e.complexity.ValkeyAccessConnection.Edges(childComplexity), true

	case "ValkeyAccessConnection.nodes":
		if e.complexity.ValkeyAccessConnection.Nodes == nil {
			break
		}

		return e.complexity.ValkeyAccessConnection.Nodes(childComplexity), true

	case "ValkeyAccessConnection.pageInfo":
		if e.complexity.ValkeyAccessConnection.PageInfo == nil {
			break
		}

		return e.complexity.ValkeyAccessConnection.PageInfo(childComplexity), true

	case "ValkeyAccessEdge.cursor":
		if e.complexity.ValkeyAccessEdge.Cursor == nil {
			break
		}

		return e.complexity.ValkeyAccessEdge.Cursor(childComplexity), true

	case "ValkeyAccessEdge.node":
		if e.complexity.ValkeyAccessEdge.Node == nil {
			break
		}

		return e.complexity.ValkeyAccessEdge.Node(childComplexity), true

	case "ValkeyConnection.edges":
		if e.complexity.ValkeyConnection.Edges == nil {
			break
		}

		return e.complexity.ValkeyConnection.Edges(childComplexity), true

	case "ValkeyConnection.nodes":
		if e.complexity.ValkeyConnection.Nodes == nil {
			break
		}

		return e.complexity.ValkeyConnection.Nodes(childComplexity), true

	case "ValkeyConnection.pageInfo":
		if e.complexity.ValkeyConnection.PageInfo == nil {
			break
		}

		return e.complexity.ValkeyConnection.PageInfo(childComplexity), true

	case "ValkeyCost.sum":
		if e.complexity.ValkeyCost.Sum == nil {
			break
		}

		return e.complexity.ValkeyCost.Sum(childComplexity), true

	case "ValkeyCreatedActivityLogEntry.actor":
		if e.complexity.ValkeyCreatedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.ValkeyCreatedActivityLogEntry.Actor(childComplexity), true

	case "ValkeyCreatedActivityLogEntry.createdAt":
		if e.complexity.ValkeyCreatedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.ValkeyCreatedActivityLogEntry.CreatedAt(childComplexity), true

	case "ValkeyCreatedActivityLogEntry.environmentName":
		if e.complexity.ValkeyCreatedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.ValkeyCreatedActivityLogEntry.EnvironmentName(childComplexity), true

	case "ValkeyCreatedActivityLogEntry.id":
		if e.complexity.ValkeyCreatedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.ValkeyCreatedActivityLogEntry.ID(childComplexity), true

	case "ValkeyCreatedActivityLogEntry.message":
		if e.complexity.ValkeyCreatedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.ValkeyCreatedActivityLogEntry.Message(childComplexity), true

	case "ValkeyCreatedActivityLogEntry.resourceName":
		if e.complexity.ValkeyCreatedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.ValkeyCreatedActivityLogEntry.ResourceName(childComplexity), true

	case "ValkeyCreatedActivityLogEntry.resourceType":
		if e.complexity.ValkeyCreatedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.ValkeyCreatedActivityLogEntry.ResourceType(childComplexity), true

	case "ValkeyCreatedActivityLogEntry.teamSlug":
		if e.complexity.ValkeyCreatedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.ValkeyCreatedActivityLogEntry.TeamSlug(childComplexity), true

	case "ValkeyDeletedActivityLogEntry.actor":
		if e.complexity.ValkeyDeletedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.ValkeyDeletedActivityLogEntry.Actor(childComplexity), true

	case "ValkeyDeletedActivityLogEntry.createdAt":
		if e.complexity.ValkeyDeletedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.ValkeyDeletedActivityLogEntry.CreatedAt(childComplexity), true

	case "ValkeyDeletedActivityLogEntry.environmentName":
		if e.complexity.ValkeyDeletedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.ValkeyDeletedActivityLogEntry.EnvironmentName(childComplexity), true

	case "ValkeyDeletedActivityLogEntry.id":
		if e.complexity.ValkeyDeletedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.ValkeyDeletedActivityLogEntry.ID(childComplexity), true

	case "ValkeyDeletedActivityLogEntry.message":
		if e.complexity.ValkeyDeletedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.ValkeyDeletedActivityLogEntry.Message(childComplexity), true

	case "ValkeyDeletedActivityLogEntry.resourceName":
		if e.complexity.ValkeyDeletedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.ValkeyDeletedActivityLogEntry.ResourceName(childComplexity), true

	case "ValkeyDeletedActivityLogEntry.resourceType":
		if e.complexity.ValkeyDeletedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.ValkeyDeletedActivityLogEntry.ResourceType(childComplexity), true

	case "ValkeyDeletedActivityLogEntry.teamSlug":
		if e.complexity.ValkeyDeletedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.ValkeyDeletedActivityLogEntry.TeamSlug(childComplexity), true

	case "ValkeyEdge.cursor":
		if e.complexity.ValkeyEdge.Cursor == nil {
			break
		}

		return e.complexity.ValkeyEdge.Cursor(childComplexity), true

	case "ValkeyEdge.node":
		if e.complexity.ValkeyEdge.Node == nil {
			break
		}

		return e.complexity.ValkeyEdge.Node(childComplexity), true

	case "ValkeyIssue.event":
		if e.complexity.ValkeyIssue.Event == nil {
			break
		}

		return e.complexity.ValkeyIssue.Event(childComplexity), true

	case "ValkeyIssue.id":
		if e.complexity.ValkeyIssue.ID == nil {
			break
		}

		return e.complexity.ValkeyIssue.ID(childComplexity), true

	case "ValkeyIssue.message":
		if e.complexity.ValkeyIssue.Message == nil {
			break
		}

		return e.complexity.ValkeyIssue.Message(childComplexity), true

	case "ValkeyIssue.severity":
		if e.complexity.ValkeyIssue.Severity == nil {
			break
		}

		return e.complexity.ValkeyIssue.Severity(childComplexity), true

	case "ValkeyIssue.teamEnvironment":
		if e.complexity.ValkeyIssue.TeamEnvironment == nil {
			break
		}

		return e.complexity.ValkeyIssue.TeamEnvironment(childComplexity), true

	case "ValkeyIssue.valkey":
		if e.complexity.ValkeyIssue.Valkey == nil {
			break
		}

		return e.complexity.ValkeyIssue.Valkey(childComplexity), true

	case "ValkeyMaintenance.updates":
		if e.complexity.ValkeyMaintenance.Updates == nil {
			break
		}

		args, err := ec.field_ValkeyMaintenance_updates_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ValkeyMaintenance.Updates(childComplexity, args["first"].(*int), args["after"].(*pagination.Cursor), args["last"].(*int), args["before"].(*pagination.Cursor)), true

	case "ValkeyMaintenance.window":
		if e.complexity.ValkeyMaintenance.Window == nil {
			break
		}

		return e.complexity.ValkeyMaintenance.Window(childComplexity), true

	case "ValkeyMaintenanceUpdate.deadline":
		if e.complexity.ValkeyMaintenanceUpdate.Deadline == nil {
			break
		}

		return e.complexity.ValkeyMaintenanceUpdate.Deadline(childComplexity), true

	case "ValkeyMaintenanceUpdate.description":
		if e.complexity.ValkeyMaintenanceUpdate.Description == nil {
			break
		}

		return e.complexity.ValkeyMaintenanceUpdate.Description(childComplexity), true

	case "ValkeyMaintenanceUpdate.startAt":
		if e.complexity.ValkeyMaintenanceUpdate.StartAt == nil {
			break
		}

		return e.complexity.ValkeyMaintenanceUpdate.StartAt(childComplexity), true

	case "ValkeyMaintenanceUpdate.title":
		if e.complexity.ValkeyMaintenanceUpdate.Title == nil {
			break
		}

		return e.complexity.ValkeyMaintenanceUpdate.Title(childComplexity), true

	case "ValkeyMaintenanceUpdateConnection.edges":
		if e.complexity.ValkeyMaintenanceUpdateConnection.Edges == nil {
			break
		}

		return e.complexity.ValkeyMaintenanceUpdateConnection.Edges(childComplexity), true

	case "ValkeyMaintenanceUpdateConnection.nodes":
		if e.complexity.ValkeyMaintenanceUpdateConnection.Nodes == nil {
			break
		}

		return e.complexity.ValkeyMaintenanceUpdateConnection.Nodes(childComplexity), true

	case "ValkeyMaintenanceUpdateConnection.pageInfo":
		if e.complexity.ValkeyMaintenanceUpdateConnection.PageInfo == nil {
			break
		}

		return e.complexity.ValkeyMaintenanceUpdateConnection.PageInfo(childComplexity), true

	case "ValkeyMaintenanceUpdateEdge.cursor":
		if e.complexity.ValkeyMaintenanceUpdateEdge.Cursor == nil {
			break
		}

		return e.complexity.ValkeyMaintenanceUpdateEdge.Cursor(childComplexity), true

	case "ValkeyMaintenanceUpdateEdge.node":
		if e.complexity.ValkeyMaintenanceUpdateEdge.Node == nil {
			break
		}

		return e.complexity.ValkeyMaintenanceUpdateEdge.Node(childComplexity), true

	case "ValkeyUpdatedActivityLogEntry.actor":
		if e.complexity.ValkeyUpdatedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.ValkeyUpdatedActivityLogEntry.Actor(childComplexity), true

	case "ValkeyUpdatedActivityLogEntry.createdAt":
		if e.complexity.ValkeyUpdatedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.ValkeyUpdatedActivityLogEntry.CreatedAt(childComplexity), true

	case "ValkeyUpdatedActivityLogEntry.data":
		if e.complexity.ValkeyUpdatedActivityLogEntry.Data == nil {
			break
		}

		return e.complexity.ValkeyUpdatedActivityLogEntry.Data(childComplexity), true

	case "ValkeyUpdatedActivityLogEntry.environmentName":
		if e.complexity.ValkeyUpdatedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.ValkeyUpdatedActivityLogEntry.EnvironmentName(childComplexity), true

	case "ValkeyUpdatedActivityLogEntry.id":
		if e.complexity.ValkeyUpdatedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.ValkeyUpdatedActivityLogEntry.ID(childComplexity), true

	case "ValkeyUpdatedActivityLogEntry.message":
		if e.complexity.ValkeyUpdatedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.ValkeyUpdatedActivityLogEntry.Message(childComplexity), true

	case "ValkeyUpdatedActivityLogEntry.resourceName":
		if e.complexity.ValkeyUpdatedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.ValkeyUpdatedActivityLogEntry.ResourceName(childComplexity), true

	case "ValkeyUpdatedActivityLogEntry.resourceType":
		if e.complexity.ValkeyUpdatedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.ValkeyUpdatedActivityLogEntry.ResourceType(childComplexity), true

	case "ValkeyUpdatedActivityLogEntry.teamSlug":
		if e.complexity.ValkeyUpdatedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.ValkeyUpdatedActivityLogEntry.TeamSlug(childComplexity), true

	case "ValkeyUpdatedActivityLogEntryData.updatedFields":
		if e.complexity.ValkeyUpdatedActivityLogEntryData.UpdatedFields == nil {
			break
		}

		return e.complexity.ValkeyUpdatedActivityLogEntryData.UpdatedFields(childComplexity), true

	case "ValkeyUpdatedActivityLogEntryDataUpdatedField.field":
		if e.complexity.ValkeyUpdatedActivityLogEntryDataUpdatedField.Field == nil {
			break
		}

		return e.complexity.ValkeyUpdatedActivityLogEntryDataUpdatedField.Field(childComplexity), true

	case "ValkeyUpdatedActivityLogEntryDataUpdatedField.newValue":
		if e.complexity.ValkeyUpdatedActivityLogEntryDataUpdatedField.NewValue == nil {
			break
		}

		return e.complexity.ValkeyUpdatedActivityLogEntryDataUpdatedField.NewValue(childComplexity), true

	case "ValkeyUpdatedActivityLogEntryDataUpdatedField.oldValue":
		if e.complexity.ValkeyUpdatedActivityLogEntryDataUpdatedField.OldValue == nil {
			break
		}

		return e.complexity.ValkeyUpdatedActivityLogEntryDataUpdatedField.OldValue(childComplexity), true

	case "VulnerabilityActivityLogEntryData.identifier":
		if e.complexity.VulnerabilityActivityLogEntryData.Identifier == nil {
			break
		}

		return e.complexity.VulnerabilityActivityLogEntryData.Identifier(childComplexity), true

	case "VulnerabilityActivityLogEntryData.newSuppression":
		if e.complexity.VulnerabilityActivityLogEntryData.NewSuppression == nil {
			break
		}

		return e.complexity.VulnerabilityActivityLogEntryData.NewSuppression(childComplexity), true

	case "VulnerabilityActivityLogEntryData.package":
		if e.complexity.VulnerabilityActivityLogEntryData.Package == nil {
			break
		}

		return e.complexity.VulnerabilityActivityLogEntryData.Package(childComplexity), true

	case "VulnerabilityActivityLogEntryData.previousSuppression":
		if e.complexity.VulnerabilityActivityLogEntryData.PreviousSuppression == nil {
			break
		}

		return e.complexity.VulnerabilityActivityLogEntryData.PreviousSuppression(childComplexity), true

	case "VulnerabilityActivityLogEntryData.severity":
		if e.complexity.VulnerabilityActivityLogEntryData.Severity == nil {
			break
		}

		return e.complexity.VulnerabilityActivityLogEntryData.Severity(childComplexity), true

	case "VulnerabilityFixHistory.samples":
		if e.complexity.VulnerabilityFixHistory.Samples == nil {
			break
		}

		return e.complexity.VulnerabilityFixHistory.Samples(childComplexity), true

	case "VulnerabilityFixSample.date":
		if e.complexity.VulnerabilityFixSample.Date == nil {
			break
		}

		return e.complexity.VulnerabilityFixSample.Date(childComplexity), true

	case "VulnerabilityFixSample.days":
		if e.complexity.VulnerabilityFixSample.Days == nil {
			break
		}

		return e.complexity.VulnerabilityFixSample.Days(childComplexity), true

	case "VulnerabilityFixSample.firstFixedAt":
		if e.complexity.VulnerabilityFixSample.FirstFixedAt == nil {
			break
		}

		return e.complexity.VulnerabilityFixSample.FirstFixedAt(childComplexity), true

	case "VulnerabilityFixSample.fixedCount":
		if e.complexity.VulnerabilityFixSample.FixedCount == nil {
			break
		}

		return e.complexity.VulnerabilityFixSample.FixedCount(childComplexity), true

	case "VulnerabilityFixSample.lastFixedAt":
		if e.complexity.VulnerabilityFixSample.LastFixedAt == nil {
			break
		}

		return e.complexity.VulnerabilityFixSample.LastFixedAt(childComplexity), true

	case "VulnerabilityFixSample.severity":
		if e.complexity.VulnerabilityFixSample.Severity == nil {
			break
		}

		return e.complexity.VulnerabilityFixSample.Severity(childComplexity), true

	case "VulnerabilityFixSample.totalWorkloads":
		if e.complexity.VulnerabilityFixSample.TotalWorkloads == nil {
			break
		}

		return e.complexity.VulnerabilityFixSample.TotalWorkloads(childComplexity), true

	case "VulnerabilityUpdatedActivityLogEntry.actor":
		if e.complexity.VulnerabilityUpdatedActivityLogEntry.Actor == nil {
			break
		}

		return e.complexity.VulnerabilityUpdatedActivityLogEntry.Actor(childComplexity), true

	case "VulnerabilityUpdatedActivityLogEntry.createdAt":
		if e.complexity.VulnerabilityUpdatedActivityLogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.VulnerabilityUpdatedActivityLogEntry.CreatedAt(childComplexity), true

	case "VulnerabilityUpdatedActivityLogEntry.data":
		if e.complexity.VulnerabilityUpdatedActivityLogEntry.Data == nil {
			break
		}

		return e.complexity.VulnerabilityUpdatedActivityLogEntry.Data(childComplexity), true

	case "VulnerabilityUpdatedActivityLogEntry.environmentName":
		if e.complexity.VulnerabilityUpdatedActivityLogEntry.EnvironmentName == nil {
			break
		}

		return e.complexity.VulnerabilityUpdatedActivityLogEntry.EnvironmentName(childComplexity), true

	case "VulnerabilityUpdatedActivityLogEntry.id":
		if e.complexity.VulnerabilityUpdatedActivityLogEntry.ID == nil {
			break
		}

		return e.complexity.VulnerabilityUpdatedActivityLogEntry.ID(childComplexity), true

	case "VulnerabilityUpdatedActivityLogEntry.message":
		if e.complexity.VulnerabilityUpdatedActivityLogEntry.Message == nil {
			break
		}

		return e.complexity.VulnerabilityUpdatedActivityLogEntry.Message(childComplexity), true

	case "VulnerabilityUpdatedActivityLogEntry.resourceName":
		if e.complexity.VulnerabilityUpdatedActivityLogEntry.ResourceName == nil {
			break
		}

		return e.complexity.VulnerabilityUpdatedActivityLogEntry.ResourceName(childComplexity), true

	case "VulnerabilityUpdatedActivityLogEntry.resourceType":
		if e.complexity.VulnerabilityUpdatedActivityLogEntry.ResourceType == nil {
			break
		}

		return e.complexity.VulnerabilityUpdatedActivityLogEntry.ResourceType(childComplexity), true

	case "VulnerabilityUpdatedActivityLogEntry.teamSlug":
		if e.complexity.VulnerabilityUpdatedActivityLogEntry.TeamSlug == nil {
			break
		}

		return e.complexity.VulnerabilityUpdatedActivityLogEntry.TeamSlug(childComplexity), true

	case "VulnerableImageIssue.critical":
		if e.complexity.VulnerableImageIssue.Critical == nil {
			break
		}

		return e.complexity.VulnerableImageIssue.Critical(childComplexity), true

	case "VulnerableImageIssue.id":
		if e.complexity.VulnerableImageIssue.ID == nil {
			break
		}

		return e.complexity.VulnerableImageIssue.ID(childComplexity), true

	case "VulnerableImageIssue.message":
		if e.complexity.VulnerableImageIssue.Message == nil {
			break
		}

		return e.complexity.VulnerableImageIssue.Message(childComplexity), true

	case "VulnerableImageIssue.riskScore":
		if e.complexity.VulnerableImageIssue.RiskScore == nil {
			break
		}

		return e.complexity.VulnerableImageIssue.RiskScore(childComplexity), true

	case "VulnerableImageIssue.severity":
		if e.complexity.VulnerableImageIssue.Severity == nil {
			break
		}

		return e.complexity.VulnerableImageIssue.Severity(childComplexity), true

	case "VulnerableImageIssue.teamEnvironment":
		if e.complexity.VulnerableImageIssue.TeamEnvironment == nil {
			break
		}

		return e.complexity.VulnerableImageIssue.TeamEnvironment(childComplexity), true

	case "VulnerableImageIssue.workload":
		if e.complexity.VulnerableImageIssue.Workload == nil {
			break
		}

		return e.complexity.VulnerableImageIssue.Workload(childComplexity), true

	case "WorkloadConnection.edges":
		if e.complexity.WorkloadConnection.Edges == nil {
			break
		}

		return e.complexity.WorkloadConnection.Edges(childComplexity), true

	case "WorkloadConnection.nodes":
		if e.complexity.WorkloadConnection.Nodes == nil {
			break
		}

		return e.complexity.WorkloadConnection.Nodes(childComplexity), true

	case "WorkloadConnection.pageInfo":
		if e.complexity.WorkloadConnection.PageInfo == nil {
			break
		}

		return e.complexity.WorkloadConnection.PageInfo(childComplexity), true

	case "WorkloadCost.daily":
		if e.complexity.WorkloadCost.Daily == nil {
			break
		}

		args, err := ec.field_WorkloadCost_daily_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.WorkloadCost.Daily(childComplexity, args["from"].(scalar.Date), args["to"].(scalar.Date)), true

	case "WorkloadCost.monthly":
		if e.complexity.WorkloadCost.Monthly == nil {
			break
		}

		return e.complexity.WorkloadCost.Monthly(childComplexity), true

	case "WorkloadCostPeriod.series":
		if e.complexity.WorkloadCostPeriod.Series == nil {
			break
		}

		return e.complexity.WorkloadCostPeriod.Series(childComplexity), true

	case "WorkloadCostPeriod.sum":
		if e.complexity.WorkloadCostPeriod.Sum == nil {
			break
		}

		return e.complexity.WorkloadCostPeriod.Sum(childComplexity), true

	case "WorkloadCostSample.cost":
		if e.complexity.WorkloadCostSample.Cost == nil {
			break
		}

		return e.complexity.WorkloadCostSample.Cost(childComplexity), true

	case "WorkloadCostSample.workload":
		if e.complexity.WorkloadCostSample.Workload == nil {
			break
		}

		return e.complexity.WorkloadCostSample.Workload(childComplexity), true

	case "WorkloadCostSample.workloadName":
		if e.complexity.WorkloadCostSample.WorkloadName == nil {
			break
		}

		return e.complexity.WorkloadCostSample.WorkloadName(childComplexity), true

	case "WorkloadCostSeries.date":
		if e.complexity.WorkloadCostSeries.Date == nil {
			break
		}

		return e.complexity.WorkloadCostSeries.Date(childComplexity), true

	case "WorkloadCostSeries.sum":
		if e.complexity.WorkloadCostSeries.Sum == nil {
			break
		}

		return e.complexity.WorkloadCostSeries.Sum(childComplexity), true

	case "WorkloadCostSeries.workloads":
		if e.complexity.WorkloadCostSeries.Workloads == nil {
			break
		}

		return e.complexity.WorkloadCostSeries.Workloads(childComplexity), true

	case "WorkloadEdge.cursor":
		if e.complexity.WorkloadEdge.Cursor == nil {
			break
		}

		return e.complexity.WorkloadEdge.Cursor(childComplexity), true

	case "WorkloadEdge.node":
		if e.complexity.WorkloadEdge.Node == nil {
			break
		}

		return e.complexity.WorkloadEdge.Node(childComplexity), true

	case "WorkloadLogLine.instance":
		if e.complexity.WorkloadLogLine.Instance == nil {
			break
		}

		return e.complexity.WorkloadLogLine.Instance(childComplexity), true

	case "WorkloadLogLine.message":
		if e.complexity.WorkloadLogLine.Message == nil {
			break
		}

		return e.complexity.WorkloadLogLine.Message(childComplexity), true

	case "WorkloadLogLine.time":
		if e.complexity.WorkloadLogLine.Time == nil {
			break
		}

		return e.complexity.WorkloadLogLine.Time(childComplexity), true

	case "WorkloadResourceQuantity.cpu":
		if e.complexity.WorkloadResourceQuantity.CPU == nil {
			break
		}

		return e.complexity.WorkloadResourceQuantity.CPU(childComplexity), true

	case "WorkloadResourceQuantity.memory":
		if e.complexity.WorkloadResourceQuantity.Memory == nil {
			break
		}

		return e.complexity.WorkloadResourceQuantity.Memory(childComplexity), true

	case "WorkloadUtilization.current":
		if e.complexity.WorkloadUtilization.Current == nil {
			break
		}

		args, err := ec.field_WorkloadUtilization_current_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.WorkloadUtilization.Current(childComplexity, args["resourceType"].(utilization.UtilizationResourceType)), true

	case "WorkloadUtilization.limit":
		if e.complexity.WorkloadUtilization.Limit == nil {
			break
		}

		args, err := ec.field_WorkloadUtilization_limit_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.WorkloadUtilization.Limit(childComplexity, args["resourceType"].(utilization.UtilizationResourceType)), true

	case "WorkloadUtilization.limitSeries":
		if e.complexity.WorkloadUtilization.LimitSeries == nil {
			break
		}

		args, err := ec.field_WorkloadUtilization_limitSeries_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.WorkloadUtilization.LimitSeries(childComplexity, args["input"].(utilization.WorkloadUtilizationSeriesInput)), true

	case "WorkloadUtilization.recommendations":
		if e.complexity.WorkloadUtilization.Recommendations == nil {
			break
		}

		return e.complexity.WorkloadUtilization.Recommendations(childComplexity), true

	case "WorkloadUtilization.requested":
		if e.complexity.WorkloadUtilization.Requested == nil {
			break
		}

		args, err := ec.field_WorkloadUtilization_requested_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.WorkloadUtilization.Requested(childComplexity, args["resourceType"].(utilization.UtilizationResourceType)), true

	case "WorkloadUtilization.requestedSeries":
		if e.complexity.WorkloadUtilization.RequestedSeries == nil {
			break
		}

		args, err := ec.field_WorkloadUtilization_requestedSeries_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.WorkloadUtilization.RequestedSeries(childComplexity, args["input"].(utilization.WorkloadUtilizationSeriesInput)), true

	case "WorkloadUtilization.series":
		if e.complexity.WorkloadUtilization.Series == nil {
			break
		}

		args, err := ec.field_WorkloadUtilization_series_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.WorkloadUtilization.Series(childComplexity, args["input"].(utilization.WorkloadUtilizationSeriesInput)), true

	case "WorkloadUtilizationData.requested":
		if e.complexity.WorkloadUtilizationData.Requested == nil {
			break
		}

		return e.complexity.WorkloadUtilizationData.Requested(childComplexity), true

	case "WorkloadUtilizationData.used":
		if e.complexity.WorkloadUtilizationData.Used == nil {
			break
		}

		return e.complexity.WorkloadUtilizationData.Used(childComplexity), true

	case "WorkloadUtilizationData.workload":
		if e.complexity.WorkloadUtilizationData.Workload == nil {
			break
		}

		return e.complexity.WorkloadUtilizationData.Workload(childComplexity), true

	case "WorkloadUtilizationRecommendations.cpuRequestCores":
		if e.complexity.WorkloadUtilizationRecommendations.CPURequestCores == nil {
			break
		}

		return e.complexity.WorkloadUtilizationRecommendations.CPURequestCores(childComplexity), true

	case "WorkloadUtilizationRecommendations.memoryLimitBytes":
		if e.complexity.WorkloadUtilizationRecommendations.MemoryLimitBytes == nil {
			break
		}

		return e.complexity.WorkloadUtilizationRecommendations.MemoryLimitBytes(childComplexity), true

	case "WorkloadUtilizationRecommendations.memoryRequestBytes":
		if e.complexity.WorkloadUtilizationRecommendations.MemoryRequestBytes == nil {
			break
		}

		return e.complexity.WorkloadUtilizationRecommendations.MemoryRequestBytes(childComplexity), true

	case "WorkloadVulnerabilitySummary.hasSBOM":
		if e.complexity.WorkloadVulnerabilitySummary.HasSbom == nil {
			break
		}

		return e.complexity.WorkloadVulnerabilitySummary.HasSbom(childComplexity), true

	case "WorkloadVulnerabilitySummary.id":
		if e.complexity.WorkloadVulnerabilitySummary.ID == nil {
			break
		}

		return e.complexity.WorkloadVulnerabilitySummary.ID(childComplexity), true

	case "WorkloadVulnerabilitySummary.summary":
		if e.complexity.WorkloadVulnerabilitySummary.Summary == nil {
			break
		}

		return e.complexity.WorkloadVulnerabilitySummary.Summary(childComplexity), true

	case "WorkloadVulnerabilitySummary.workload":
		if e.complexity.WorkloadVulnerabilitySummary.Workload == nil {
			break
		}

		return e.complexity.WorkloadVulnerabilitySummary.Workload(childComplexity), true

	case "WorkloadVulnerabilitySummaryConnection.edges":
		if e.complexity.WorkloadVulnerabilitySummaryConnection.Edges == nil {
			break
		}

		return e.complexity.WorkloadVulnerabilitySummaryConnection.Edges(childComplexity), true

	case "WorkloadVulnerabilitySummaryConnection.nodes":
		if e.complexity.WorkloadVulnerabilitySummaryConnection.Nodes == nil {
			break
		}

		return e.complexity.WorkloadVulnerabilitySummaryConnection.Nodes(childComplexity), true

	case "WorkloadVulnerabilitySummaryConnection.pageInfo":
		if e.complexity.WorkloadVulnerabilitySummaryConnection.PageInfo == nil {
			break
		}

		return e.complexity.WorkloadVulnerabilitySummaryConnection.PageInfo(childComplexity), true

	case "WorkloadVulnerabilitySummaryEdge.cursor":
		if e.complexity.WorkloadVulnerabilitySummaryEdge.Cursor == nil {
			break
		}

		return e.complexity.WorkloadVulnerabilitySummaryEdge.Cursor(childComplexity), true

	case "WorkloadVulnerabilitySummaryEdge.node":
		if e.complexity.WorkloadVulnerabilitySummaryEdge.Node == nil {
			break
		}

		return e.complexity.WorkloadVulnerabilitySummaryEdge.Node(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputActivityLogFilter,
		ec.unmarshalInputAddRepositoryToTeamInput,
		ec.unmarshalInputAddSecretValueInput,
		ec.unmarshalInputAddTeamMemberInput,
		ec.unmarshalInputAlertOrder,
		ec.unmarshalInputAllowTeamAccessToUnleashInput,
		ec.unmarshalInputApplicationOrder,
		ec.unmarshalInputAssignRoleToServiceAccountInput,
		ec.unmarshalInputBigQueryDatasetAccessOrder,
		ec.unmarshalInputBigQueryDatasetOrder,
		ec.unmarshalInputBucketOrder,
		ec.unmarshalInputChangeDeploymentKeyInput,
		ec.unmarshalInputConfigureReconcilerInput,
		ec.unmarshalInputConfirmTeamDeletionInput,
		ec.unmarshalInputCreateOpenSearchInput,
		ec.unmarshalInputCreateSecretInput,
		ec.unmarshalInputCreateServiceAccountInput,
		ec.unmarshalInputCreateServiceAccountTokenInput,
		ec.unmarshalInputCreateTeamInput,
		ec.unmarshalInputCreateUnleashForTeamInput,
		ec.unmarshalInputCreateValkeyInput,
		ec.unmarshalInputDeleteApplicationInput,
		ec.unmarshalInputDeleteJobInput,
		ec.unmarshalInputDeleteOpenSearchInput,
		ec.unmarshalInputDeleteSecretInput,
		ec.unmarshalInputDeleteServiceAccountInput,
		ec.unmarshalInputDeleteServiceAccountTokenInput,
		ec.unmarshalInputDeleteValkeyInput,
		ec.unmarshalInputDisableReconcilerInput,
		ec.unmarshalInputEnableReconcilerInput,
		ec.unmarshalInputEnvironmentOrder,
		ec.unmarshalInputEnvironmentWorkloadOrder,
		ec.unmarshalInputImageVulnerabilityFilter,
		ec.unmarshalInputImageVulnerabilityOrder,
		ec.unmarshalInputIngressMetricsInput,
		ec.unmarshalInputIssueFilter,
		ec.unmarshalInputIssueOrder,
		ec.unmarshalInputJobOrder,
		ec.unmarshalInputKafkaTopicAclFilter,
		ec.unmarshalInputKafkaTopicAclOrder,
		ec.unmarshalInputKafkaTopicOrder,
		ec.unmarshalInputLogSubscriptionFilter,
		ec.unmarshalInputLogSubscriptionInitialBatch,
		ec.unmarshalInputOpenSearchAccessOrder,
		ec.unmarshalInputOpenSearchOrder,
		ec.unmarshalInputReconcilerConfigInput,
		ec.unmarshalInputRemoveRepositoryFromTeamInput,
		ec.unmarshalInputRemoveSecretValueInput,
		ec.unmarshalInputRemoveTeamMemberInput,
		ec.unmarshalInputRepositoryOrder,
		ec.unmarshalInputRequestTeamDeletionInput,
		ec.unmarshalInputResourceIssueFilter,
		ec.unmarshalInputRestartApplicationInput,
		ec.unmarshalInputRevokeRoleFromServiceAccountInput,
		ec.unmarshalInputRevokeTeamAccessToUnleashInput,
		ec.unmarshalInputSearchFilter,
		ec.unmarshalInputSecretFilter,
		ec.unmarshalInputSecretOrder,
		ec.unmarshalInputSecretValueInput,
		ec.unmarshalInputSetTeamMemberRoleInput,
		ec.unmarshalInputSqlInstanceOrder,
		ec.unmarshalInputSqlInstanceUserOrder,
		ec.unmarshalInputStartOpenSearchMaintenanceInput,
		ec.unmarshalInputStartValkeyMaintenanceInput,
		ec.unmarshalInputTeamAlertsFilter,
		ec.unmarshalInputTeamApplicationsFilter,
		ec.unmarshalInputTeamCostDailyFilter,
		ec.unmarshalInputTeamFilter,
		ec.unmarshalInputTeamJobsFilter,
		ec.unmarshalInputTeamMemberOrder,
		ec.unmarshalInputTeamOrder,
		ec.unmarshalInputTeamRepositoryFilter,
		ec.unmarshalInputTeamVulnerabilitySummaryFilter,
		ec.unmarshalInputTeamWorkloadsFilter,
		ec.unmarshalInputTriggerJobInput,
		ec.unmarshalInputUpdateImageVulnerabilityInput,
		ec.unmarshalInputUpdateOpenSearchInput,
		ec.unmarshalInputUpdateSecretValueInput,
		ec.unmarshalInputUpdateServiceAccountInput,
		ec.unmarshalInputUpdateServiceAccountTokenInput,
		ec.unmarshalInputUpdateTeamEnvironmentInput,
		ec.unmarshalInputUpdateTeamInput,
		ec.unmarshalInputUpdateValkeyInput,
		ec.unmarshalInputUserOrder,
		ec.unmarshalInputUserTeamOrder,
		ec.unmarshalInputValkeyAccessOrder,
		ec.unmarshalInputValkeyOrder,
		ec.unmarshalInputVulnerabilitySummaryOrder,
		ec.unmarshalInputWorkloadLogSubscriptionFilter,
		ec.unmarshalInputWorkloadOrder,
		ec.unmarshalInputWorkloadUtilizationSeriesInput,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, opCtx.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, opCtx.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next(ctx)

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema/activitylog.graphqls", Input: `extend type Team implements ActivityLogger {
	"""
	Activity log associated with the team.
	"""
	activityLog(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor

		"""
		Filter items.
		"""
		filter: ActivityLogFilter
	): ActivityLogEntryConnection!
}

interface ActivityLogger {
	"""
	Activity log associated with the type.
	"""
	activityLog(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor

		"""
		Filter items.
		"""
		filter: ActivityLogFilter
	): ActivityLogEntryConnection!
}

extend type Reconciler implements ActivityLogger {
	"""
	Activity log associated with the reconciler.
	"""
	activityLog(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor

		"""
		Filter items.
		"""
		filter: ActivityLogFilter
	): ActivityLogEntryConnection!
}

extend type OpenSearch implements ActivityLogger {
	"""
	Activity log associated with the reconciler.
	"""
	activityLog(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor

		"""
		Filter items.
		"""
		filter: ActivityLogFilter
	): ActivityLogEntryConnection!
}

extend type Valkey implements ActivityLogger {
	"""
	Activity log associated with the reconciler.
	"""
	activityLog(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor

		"""
		Filter items.
		"""
		filter: ActivityLogFilter
	): ActivityLogEntryConnection!
}

input ActivityLogFilter {
	activityTypes: [ActivityLogActivityType!]
}

enum ActivityLogActivityType

"""
Interface for activity log entries.
"""
interface ActivityLogEntry implements Node {
	"""
	ID of the entry.
	"""
	id: ID!

	"""
	The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user.
	"""
	actor: String!

	"""
	Creation time of the entry.
	"""
	createdAt: Time!

	"""
	Message that summarizes the entry.
	"""
	message: String!

	"""
	Type of the resource that was affected by the action.
	"""
	resourceType: ActivityLogEntryResourceType!

	"""
	Name of the resource that was affected by the action.
	"""
	resourceName: String!

	"""
	The team slug that the entry belongs to.
	"""
	teamSlug: Slug

	"""
	The environment name that the entry belongs to.
	"""
	environmentName: String
}

"""
The type of the resource that was affected by the activity.
"""
enum ActivityLogEntryResourceType {
	"""
	Unknown type.
	"""
	UNKNOWN
}

"""
Activity log connection.
"""
type ActivityLogEntryConnection {
	"""
	Pagination information.
	"""
	pageInfo: PageInfo!

	"""
	List of nodes.
	"""
	nodes: [ActivityLogEntry!]!

	"""
	List of edges.
	"""
	edges: [ActivityLogEntryEdge!]!
}

"""
Activity log edge.
"""
type ActivityLogEntryEdge {
	"""
	Cursor for this edge that can be used for pagination.
	"""
	cursor: Cursor!

	"""
	The log entry.
	"""
	node: ActivityLogEntry!
}
`, BuiltIn: false},
	{Name: "../schema/alerts.graphqls", Input: `extend type TeamEnvironment {
	"""
	EXPERIMENTAL: DO NOT USE
	"""
	alerts(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor

		"""
		Ordering options for items returned from the connection.
		"""
		orderBy: AlertOrder

		"""
		Filter the returned objects
		"""
		filter: TeamAlertsFilter
	): AlertConnection!
}

extend type Team {
	"""
	EXPERIMENTAL: DO NOT USE
	"""
	alerts(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor

		"""
		Ordering options for items returned from the connection.
		"""
		orderBy: AlertOrder

		"""
		Filter the returned objects
		"""
		filter: TeamAlertsFilter
	): AlertConnection!
}

"""
Alert interface.
"""
interface Alert implements Node {
	"""
	The unique identifier of the alert.
	"""
	id: ID!
	"""
	The name of the alert.
	"""
	name: String!
	"""
	The team responsible for the alert.
	"""
	team: Team!
	"""
	The team environment associated with the alert.
	"""
	teamEnvironment: TeamEnvironment!
	"""
	The current state of the alert (e.g. FIRING, PENDING, INACTIVE).
	"""
	state: AlertState!
	"""
	The query or expression evaluated for the alert.
	"""
	query: String!
	"""
	The time in seconds the alert condition must be met before it activates.
	"""
	duration: Float!
}

"""
PrometheusAlert type
"""
type PrometheusAlert implements Node & Alert {
	"The unique identifier for the alert."
	id: ID!
	"The name of the alert."
	name: String!
	"""
	The team that owns the alert.
	"""
	team: Team!
	"""
	The team environment for the alert.
	"""
	teamEnvironment: TeamEnvironment!
	"""
	The state of the alert.
	"""
	state: AlertState!

	"""
	The query for the alert.
	"""
	query: String!
	"""
	The duration for the alert.
	"""
	duration: Float!

	"""
	The prometheus rule group for the alert.
	"""
	ruleGroup: String!

	"""
	The alarms of the alert available if state is firing.
	"""
	alarms: [PrometheusAlarm!]!
}

type PrometheusAlarm {
	"""
	The action to take when the alert fires.
	"""
	action: String!

	"""
	The consequence of the alert firing.
	"""
	consequence: String!

	"""
	A summary of the alert.
	"""
	summary: String!

	"""
	The state of the alert.
	"""
	state: AlertState!

	"""
	The current value of the metric that triggered the alert.
	"""
	value: Float!

	"""
	The time when the alert started firing.
	"""
	since: Time!
}

"""
AlertConnection connection.
"""
type AlertConnection {
	"""
	Pagination information.
	"""
	pageInfo: PageInfo!

	"""
	List of nodes.
	"""
	nodes: [Alert!]!

	"""
	List of edges.
	"""
	edges: [AlertEdge!]!
}

"""
Alert edge.
"""
type AlertEdge {
	"""
	Cursor for this edge that can be used for pagination.
	"""
	cursor: Cursor!

	"""
	The Alert.
	"""
	node: Alert!
}

"""
Fields to order alerts in an environment by.
"""
enum AlertOrderField {
	"""
	Order by name.
	"""
	NAME
	"""
	Order by state.
	"""
	STATE
	"""
	ENVIRONMENT
	"""
	ENVIRONMENT
}

"""
Ordering options when fetching alerts.
"""
input AlertOrder {
	"""
	The field to order items by.
	"""
	field: AlertOrderField!

	"""
	The direction to order items by.
	"""
	direction: OrderDirection!
}

"""
Input for filtering alerts.
"""
input TeamAlertsFilter {
	"""
	Filter by the name of the application.
	"""
	name: String
	"""
	Filter by the name of the environment.
	"""
	environments: [String!]
	"""
	Only return alerts from the given named states.
	"""
	states: [AlertState!]
}

enum AlertState {
	"""
	Only return alerts that are firing.
	"""
	FIRING

	"""
	Only return alerts that are inactive.
	"""
	INACTIVE

	"""
	Only return alerts that are pending.
	"""
	PENDING
}
`, BuiltIn: false},
	{Name: "../schema/applications.graphqls", Input: `extend type Team {
	"""
	Nais applications owned by the team.
	"""
	applications(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor

		"""
		Ordering options for items returned from the connection.
		"""
		orderBy: ApplicationOrder

		"""
		Filtering options for items returned from the connection.
		"""
		filter: TeamApplicationsFilter
	): ApplicationConnection!
}

extend type TeamEnvironment {
	"""
	Nais application in the team environment.
	"""
	application(
		"""
		The name of the application.
		"""
		name: String!
	): Application!
}

extend type Mutation {
	"""
	Delete an application.
	"""
	deleteApplication(
		"""
		Input for deleting an application.
		"""
		input: DeleteApplicationInput!
	): DeleteApplicationPayload!

	"""
	Restart an application.
	"""
	restartApplication(
		"""
		Input for restarting an application.
		"""
		input: RestartApplicationInput!
	): RestartApplicationPayload!
}

extend type TeamInventoryCounts {
	"""
	Application inventory count for a team.
	"""
	applications: TeamInventoryCountApplications!
}

"""
Application inventory count for a team.
"""
type TeamInventoryCountApplications {
	"""
	Total number of applications.
	"""
	total: Int!
}

"""
An application lets you run one or more instances of a container image on the [Nais platform](https://nais.io/).

Learn more about how to create and configure your applications in the [Nais documentation](https://docs.nais.io/workloads/application/).
"""
type Application implements Node & Workload & ActivityLogger {
	"""
	The globally unique ID of the application.
	"""
	id: ID!

	"""
	The name of the application.
	"""
	name: String!

	"""
	The team that owns the application.
	"""
	team: Team!

	"""
	The environment the application is deployed in.
	"""
	environment: TeamEnvironment! @deprecated(reason: "Use the ` + "`" + `teamEnvironment` + "`" + ` field instead.")

	"""
	The team environment for the application.
	"""
	teamEnvironment: TeamEnvironment!

	"""
	The container image of the application.
	"""
	image: ContainerImage!

	"""
	Resources for the application.
	"""
	resources: ApplicationResources!

	"""
	List of ingresses for the application.
	"""
	ingresses: [Ingress!]!

	"""
	List of authentication and authorization for the application.
	"""
	authIntegrations: [ApplicationAuthIntegrations!]!

	"""
	The application manifest.
	"""
	manifest: ApplicationManifest!

	"""
	The application instances.
	"""
	instances(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor
	): ApplicationInstanceConnection!

	"""
	If set, when the application was marked for deletion.
	"""
	deletionStartedAt: Time

	"""
	Activity log associated with the application.
	"""
	activityLog(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor

		"""
		Filter items.
		"""
		filter: ActivityLogFilter
	): ActivityLogEntryConnection!

	"The application state."
	state: ApplicationState!

	"Issues that affects the workload."
	issues(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Ordering options for items returned from the connection."
		orderBy: IssueOrder

		"Filtering options for items returned from the connection."
		filter: ResourceIssueFilter
	): IssueConnection!
}

enum ApplicationState {
	"""
	The application is running.
	"""
	RUNNING

	"""
	The application is not running.
	"""
	NOT_RUNNING

	"""
	The application state is unknown.
	"""
	UNKNOWN
}

"""
Input for filtering the applications of a team.
"""
input TeamApplicationsFilter {
	"""
	Filter by the name of the application.
	"""
	name: String

	"""
	Filter by the name of the environment.
	"""
	environments: [String!]
}

"""
The manifest that describes the application.
"""
type ApplicationManifest implements WorkloadManifest {
	"""
	The manifest content, serialized as a YAML document.
	"""
	content: String!
}

"""
Authentication integrations for the application.
"""
union ApplicationAuthIntegrations =
	| EntraIDAuthIntegration
	| IDPortenAuthIntegration
	| MaskinportenAuthIntegration
	| TokenXAuthIntegration

type ApplicationResources implements WorkloadResources {
	"""
	Instances using resources above this threshold will be killed.
	"""
	limits: WorkloadResourceQuantity!

	"""
	How many resources are allocated to each instance.
	"""
	requests: WorkloadResourceQuantity!

	"""
	Scaling strategies for the application.
	"""
	scaling: ApplicationScaling!
}

"""
The scaling configuration of an application.
"""
type ApplicationScaling {
	"""
	The minimum number of application instances.
	"""
	minInstances: Int!

	"""
	The maximum number of application instances.
	"""
	maxInstances: Int!

	"""
	Scaling strategies for the application.
	"""
	strategies: [ScalingStrategy!]!
}

"""
Types of scaling strategies.
"""
union ScalingStrategy = CPUScalingStrategy | KafkaLagScalingStrategy

"""
A scaling strategy based on CPU usage

Read more: https://docs.nais.io/workloads/application/reference/automatic-scaling/#cpu-based-scaling
"""
type CPUScalingStrategy {
	"""
	The threshold that must be met for the scaling to trigger.
	"""
	threshold: Int!
}

type KafkaLagScalingStrategy {
	"""
	The threshold that must be met for the scaling to trigger.
	"""
	threshold: Int!

	"""
	The consumer group of the topic.
	"""
	consumerGroup: String!

	"""
	The name of the Kafka topic.
	"""
	topicName: String!
}

"""
Application connection.
"""
type ApplicationConnection {
	"""
	Pagination information.
	"""
	pageInfo: PageInfo!

	"""
	List of nodes.
	"""
	nodes: [Application!]!

	"""
	List of edges.
	"""
	edges: [ApplicationEdge!]!
}

"""
Application edge.
"""
type ApplicationEdge {
	"""
	Cursor for this edge that can be used for pagination.
	"""
	cursor: Cursor!

	"""
	The application.
	"""
	node: Application!
}

"""
Ordering options when fetching applications.
"""
input ApplicationOrder {
	"""
	The field to order items by.
	"""
	field: ApplicationOrderField!

	"""
	The direction to order items by.
	"""
	direction: OrderDirection!
}

"""
Fields to order applications by.
"""
enum ApplicationOrderField {
	"""
	Order applications by name.
	"""
	NAME

	"""
	Order applications by the name of the environment.
	"""
	ENVIRONMENT

	"""
	Order applications by state.
	"""
	STATE
}

extend union SearchNode = Application

extend enum SearchType {
	"""
	Search for applications.
	"""
	APPLICATION
}

input DeleteApplicationInput {
	"""
	Name of the application.
	"""
	name: String!

	"""
	Slug of the team that owns the application.
	"""
	teamSlug: Slug!

	"""
	Name of the environment where the application runs.
	"""
	environmentName: String!
}

type DeleteApplicationPayload {
	"""
	The team that owned the deleted application.
	"""
	team: Team

	"""
	Whether or not the application was deleted.
	"""
	success: Boolean
}

input RestartApplicationInput {
	"""
	Name of the application.
	"""
	name: String!

	"""
	Slug of the team that owns the application.
	"""
	teamSlug: Slug!

	"""
	Name of the environment where the application runs.
	"""
	environmentName: String!
}

type RestartApplicationPayload {
	"""
	The application that was restarted.
	"""
	application: Application
}

type Ingress {
	"""
	URL for the ingress.
	"""
	url: String!

	"""
	Type of ingress.
	"""
	type: IngressType!

	"""
	Metrics for the ingress.
	"""
	metrics: IngressMetrics!
}

type IngressMetrics {
	"""
	Number of requests to the ingress per second.
	"""
	requestsPerSecond: Float!

	"""
	Number of errors in the ingress per second.
	"""
	errorsPerSecond: Float!
	"""
	Ingress metrics between start and end with step size.
	"""
	series(input: IngressMetricsInput!): [IngressMetricSample!]!
}

input IngressMetricsInput {
	"""
	Fetch metrics from this timestamp.
	"""
	start: Time!

	"""
	Fetch metrics until this timestamp.
	"""
	end: Time!

	"""
	Type of metric to fetch.
	"""
	type: IngressMetricsType!
}

"""
Type of ingress metrics to fetch.
"""
enum IngressMetricsType {
	"""
	Number of requests to the ingress per second.
	"""
	REQUESTS_PER_SECOND
	"""
	Number of errors in the ingress per second.
	"""
	ERRORS_PER_SECOND
}

"""
Ingress metric type.
"""
type IngressMetricSample {
	"Timestamp of the value."
	timestamp: Time!
	"Value of the IngressMetricsType at the given timestamp."
	value: Float!
}

enum IngressType {
	UNKNOWN
	EXTERNAL
	INTERNAL
	AUTHENTICATED
}

type ApplicationInstance implements Node {
	id: ID!
	name: String!
	image: ContainerImage!
	restarts: Int!
	created: Time!
	status: ApplicationInstanceStatus!
}

type ApplicationInstanceStatus {
	state: ApplicationInstanceState!
	message: String!
}

enum ApplicationInstanceState {
	RUNNING
	STARTING
	FAILING
	UNKNOWN
}

type ApplicationInstanceConnection {
	"""
	Pagination information.
	"""
	pageInfo: PageInfo!

	"""
	List of nodes.
	"""
	nodes: [ApplicationInstance!]!

	"""
	List of edges.
	"""
	edges: [ApplicationInstanceEdge!]!
}

type ApplicationInstanceEdge {
	"""
	Cursor for this edge that can be used for pagination.
	"""
	cursor: Cursor!

	"""
	The instance.
	"""
	node: ApplicationInstance!
}

extend enum ActivityLogEntryResourceType {
	"All activity log entries related to applications will use this resource type."
	APP
}

type ApplicationDeletedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}

type ApplicationRestartedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}

# This is managed directly by the activitylog package since it
# combines data within the database.
type ApplicationScaledActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String

	"Data associated with the update."
	data: ApplicationScaledActivityLogEntryData!
}

enum ScalingDirection {
	"""
	The scaling direction is up.
	"""
	UP

	"""
	The scaling direction is down.
	"""
	DOWN
}

type ApplicationScaledActivityLogEntryData {
	newSize: Int!
	direction: ScalingDirection!
}

extend enum ActivityLogActivityType {
	"""
	An application was deleted.
	"""
	APPLICATION_DELETED

	"""
	An application was restarted.
	"""
	APPLICATION_RESTARTED

	"""
	An application was scaled.
	"""
	APPLICATION_SCALED
}
`, BuiltIn: false},
	{Name: "../schema/authz.graphqls", Input: `type Role implements Node {
	"""
	The globally unique ID of the role.
	"""
	id: ID!

	"""
	Name of the role.
	"""
	name: String!

	"""
	Description of the role.
	"""
	description: String!
}

extend type Query {
	roles(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): RoleConnection!
}

type RoleConnection {
	"""
	A list of roles.
	"""
	nodes: [Role!]!

	"""
	A list of role edges.
	"""
	edges: [RoleEdge!]!

	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
}

type RoleEdge {
	"""
	The role.
	"""
	node: Role!

	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
`, BuiltIn: false},
	{Name: "../schema/bigquery.graphqls", Input: `extend type Team {
	"BigQuery datasets owned by the team."
	bigQueryDatasets(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Ordering options for items returned from the connection."
		orderBy: BigQueryDatasetOrder
	): BigQueryDatasetConnection!
}

extend type TeamEnvironment {
	"BigQuery datasets in the team environment."
	bigQueryDataset(name: String!): BigQueryDataset!
}

extend interface Workload {
	"BigQuery datasets referenced by the workload. This does not currently support pagination, but will return all available datasets."
	bigQueryDatasets(
		"Ordering options for items returned from the connection."
		orderBy: BigQueryDatasetOrder
	): BigQueryDatasetConnection!
}

extend type Application {
	"BigQuery datasets referenced by the application. This does not currently support pagination, but will return all available datasets."
	bigQueryDatasets(
		"Ordering options for items returned from the connection."
		orderBy: BigQueryDatasetOrder
	): BigQueryDatasetConnection!
}

extend type Job {
	"BigQuery datasets referenced by the job. This does not currently support pagination, but will return all available datasets."
	bigQueryDatasets(
		"Ordering options for items returned from the connection."
		orderBy: BigQueryDatasetOrder
	): BigQueryDatasetConnection!
}

extend type TeamInventoryCounts {
	bigQueryDatasets: TeamInventoryCountBigQueryDatasets!
}

type TeamInventoryCountBigQueryDatasets {
	"Total number of BigQuery datasets."
	total: Int!
}

type BigQueryDataset implements Persistence & Node {
	id: ID!
	name: String!
	team: Team!
	environment: TeamEnvironment! @deprecated(reason: "Use the ` + "`" + `teamEnvironment` + "`" + ` field instead.")
	teamEnvironment: TeamEnvironment!
	cascadingDelete: Boolean!
	description: String
	access(
		first: Int
		after: Cursor
		last: Int
		before: Cursor
		orderBy: BigQueryDatasetAccessOrder
	): BigQueryDatasetAccessConnection!
	status: BigQueryDatasetStatus!
	workload: Workload
}

type BigQueryDatasetAccess {
	role: String!
	email: String!
}

type BigQueryDatasetStatus {
	creationTime: Time!
	lastModifiedTime: Time
}

type BigQueryDatasetAccessConnection {
	pageInfo: PageInfo!
	nodes: [BigQueryDatasetAccess!]!
	edges: [BigQueryDatasetAccessEdge!]!
}

type BigQueryDatasetConnection {
	pageInfo: PageInfo!
	nodes: [BigQueryDataset!]!
	edges: [BigQueryDatasetEdge!]!
}

type BigQueryDatasetAccessEdge {
	cursor: Cursor!
	node: BigQueryDatasetAccess!
}

type BigQueryDatasetEdge {
	cursor: Cursor!
	node: BigQueryDataset!
}

input BigQueryDatasetAccessOrder {
	field: BigQueryDatasetAccessOrderField!
	direction: OrderDirection!
}

input BigQueryDatasetOrder {
	field: BigQueryDatasetOrderField!
	direction: OrderDirection!
}

enum BigQueryDatasetAccessOrderField {
	ROLE
	EMAIL
}

enum BigQueryDatasetOrderField {
	NAME
	ENVIRONMENT
}

extend union SearchNode = BigQueryDataset

extend enum SearchType {
	BIGQUERY_DATASET
}
`, BuiltIn: false},
	{Name: "../schema/bucket.graphqls", Input: `extend type Team {
	"Google Cloud Storage buckets owned by the team."
	buckets(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Ordering options for items returned from the connection."
		orderBy: BucketOrder
	): BucketConnection!
}

extend type TeamEnvironment {
	"Storage bucket in the team environment."
	bucket(name: String!): Bucket!
}

extend interface Workload {
	"Google Cloud Storage referenced by the workload. This does not currently support pagination, but will return all available buckets."
	buckets(
		"Ordering options for items returned from the connection."
		orderBy: BucketOrder
	): BucketConnection!
}

extend type Application {
	"Google Cloud Storage referenced by the application. This does not currently support pagination, but will return all available buckets."
	buckets(
		"Ordering options for items returned from the connection."
		orderBy: BucketOrder
	): BucketConnection!
}

extend type Job {
	"Google Cloud Storage referenced by the job. This does not currently support pagination, but will return all available buckets."
	buckets(
		"Ordering options for items returned from the connection."
		orderBy: BucketOrder
	): BucketConnection!
}

extend type TeamInventoryCounts {
	buckets: TeamInventoryCountBuckets!
}

type TeamInventoryCountBuckets {
	"Total number of Google Cloud Storage buckets."
	total: Int!
}

type Bucket implements Persistence & Node {
	id: ID!
	name: String!
	team: Team!
	environment: TeamEnvironment! @deprecated(reason: "Use the ` + "`" + `teamEnvironment` + "`" + ` field instead.")
	teamEnvironment: TeamEnvironment!
	cascadingDelete: Boolean!
	publicAccessPrevention: String!
	uniformBucketLevelAccess: Boolean!
	workload: Workload
}

type BucketConnection {
	pageInfo: PageInfo!
	nodes: [Bucket!]!
	edges: [BucketEdge!]!
}

type BucketEdge {
	cursor: Cursor!
	node: Bucket!
}

input BucketOrder {
	field: BucketOrderField!
	direction: OrderDirection!
}

enum BucketOrderField {
	NAME
	ENVIRONMENT
}

extend union SearchNode = Bucket

extend enum SearchType {
	BUCKET
}
`, BuiltIn: false},
	{Name: "../schema/cluster.graphqls", Input: `extend enum ActivityLogEntryResourceType {
	"All activity log entries related to direct cluster changes."
	CLUSTER_AUDIT
}

extend enum ActivityLogActivityType {
	"All activity log entries related to direct cluster changes."
	CLUSTER_AUDIT
}

type ClusterAuditActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String

	"Data associated with the entry."
	data: ClusterAuditActivityLogEntryData!
}

type ClusterAuditActivityLogEntryData {
	"The action that was performed."
	action: String!
	"The kind of resource that was affected by the action."
	resourceKind: String!
}
`, BuiltIn: false},
	{Name: "../schema/cost.graphqls", Input: `extend type Team {
	"The cost for the team."
	cost: TeamCost!
}

extend type TeamEnvironment {
	"The cost for the team environment."
	cost: TeamEnvironmentCost!
}

extend type Query {
	"""
	Get the monthly cost summary for a tenant.
	"""
	costMonthlySummary(
		"Start month of the period, inclusive."
		from: Date!
		"End month of the period, inclusive."
		to: Date!
	): CostMonthlySummary!
}

extend enum TeamOrderField {
	"The team's accumulated cost over the last 12 months"
	ACCUMULATED_COST
}

type TeamCost {
	daily(
		"Start date of the period, inclusive."
		from: Date!

		"End date of the period, inclusive."
		to: Date!

		"Filter the results."
		filter: TeamCostDailyFilter
	): TeamCostPeriod!

	monthlySummary: TeamCostMonthlySummary!
}

type CostMonthlySummary {
	"The cost series."
	series: [ServiceCostSeries!]!
}

input TeamCostDailyFilter {
	"Services to include in the summary."
	services: [String!]
}

type TeamEnvironmentCost {
	daily(
		"Start date of the period, inclusive."
		from: Date!

		"End date of the period, inclusive."
		to: Date!
	): TeamEnvironmentCostPeriod!
}

type TeamCostMonthlySummary {
	"The total cost for the last 12 months."
	sum: Float!

	"The cost series."
	series: [TeamCostMonthlySample!]!
}

type TeamCostMonthlySample {
	"The last date with cost data in the month."
	date: Date!

	"The total cost for the month."
	cost: Float!
}

type TeamCostPeriod {
	"The total cost for the period."
	sum: Float!

	"The cost series."
	series: [ServiceCostSeries!]!
}

type TeamEnvironmentCostPeriod {
	"The total cost for the period."
	sum: Float!

	"The cost series."
	series: [WorkloadCostSeries!]!
}

extend interface Workload {
	"The cost for a workload."
	cost: WorkloadCost!
}

extend type Application {
	"The cost for the application."
	cost: WorkloadCost!
}

extend type Job {
	"The cost for the job."
	cost: WorkloadCost!
}

type WorkloadCost {
	"Get the cost for a workload within a time period."
	daily(
		"Start date of the period, inclusive."
		from: Date!

		"End date of the period, inclusive."
		to: Date!
	): WorkloadCostPeriod!

	"The cost for the last 12 months."
	monthly: WorkloadCostPeriod!
}

type WorkloadCostPeriod {
	"The total cost for the period."
	sum: Float!

	"The cost series."
	series: [ServiceCostSeries!]!
}

type ServiceCostSeries {
	"The date for the cost. When calculating the cost for a monthly period, the date will be the last day of the month that has cost data."
	date: Date!

	"The sum of the cost across all services."
	sum: Float!

	"The cost for the services used by the workload."
	services: [ServiceCostSample!]!
}

type WorkloadCostSeries {
	"The date for the cost. When calculating the cost for a monthly period, the date will be the last day of the month that has cost data."
	date: Date!

	"The sum of the cost across all workloads."
	sum: Float!

	"The cost for the workloads in the environment."
	workloads: [WorkloadCostSample!]!
}

type ServiceCostSample {
	"The name of the service."
	service: String!

	"The cost in euros."
	cost: Float!
}

type WorkloadCostSample {
	"The workload."
	workload: Workload

	"The name of the workload."
	workloadName: String!

	"The cost in euros."
	cost: Float!
}

extend type OpenSearch {
	cost: OpenSearchCost!
}

type OpenSearchCost {
	sum: Float!
}

extend type Valkey {
	cost: ValkeyCost!
}

type ValkeyCost {
	sum: Float!
}

extend type BigQueryDataset {
	cost: BigQueryDatasetCost!
}

type BigQueryDatasetCost {
	sum: Float!
}

extend type SqlInstance {
	cost: SqlInstanceCost!
}

type SqlInstanceCost {
	sum: Float!
}
`, BuiltIn: false},
	{Name: "../schema/deployment.graphqls", Input: `extend type Team {
	"""
	Deployment key for the team.
	"""
	deploymentKey: DeploymentKey

	"""
	List deployments for a team.
	"""
	deployments(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): DeploymentConnection!
}

extend interface Workload {
	"""
	List of deployments for the workload.
	"""
	deployments(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): DeploymentConnection!
}

extend type Application {
	"""
	List of deployments for the application.
	"""
	deployments(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): DeploymentConnection!
}

extend type Job {
	"""
	List of deployments for the job.
	"""
	deployments(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): DeploymentConnection!
}

extend type Mutation {
	"Update the deploy key of a team. Returns the updated deploy key."
	changeDeploymentKey(input: ChangeDeploymentKeyInput!): ChangeDeploymentKeyPayload!
}

input ChangeDeploymentKeyInput {
	"The name of the team to update the deploy key for."
	teamSlug: Slug!
}

type ChangeDeploymentKeyPayload {
	"The updated deploy key."
	deploymentKey: DeploymentKey
}

"Deployment key type."
type DeploymentKey implements Node {
	"The unique identifier of the deployment key."
	id: ID!

	"The actual key."
	key: String!

	"The date the deployment key was created."
	created: Time!

	"The date the deployment key expires."
	expires: Time!
}

type DeploymentConnection {
	"""
	Pagination information.
	"""
	pageInfo: PageInfo!

	"""
	List of nodes.
	"""
	nodes: [Deployment!]!

	"""
	List of edges.
	"""
	edges: [DeploymentEdge!]!
}

type DeploymentStatusConnection {
	"""
	Pagination information.
	"""
	pageInfo: PageInfo!

	"""
	List of nodes.
	"""
	nodes: [DeploymentStatus!]!

	"""
	List of edges.
	"""
	edges: [DeploymentStatusEdge!]!
}

type DeploymentResourceConnection {
	"""
	Pagination information.
	"""
	pageInfo: PageInfo!

	"""
	List of nodes.
	"""
	nodes: [DeploymentResource!]!

	"""
	List of edges.
	"""
	edges: [DeploymentResourceEdge!]!
}

type DeploymentEdge {
	"""
	Cursor for this edge that can be used for pagination.
	"""
	cursor: Cursor!

	"""
	The deployment.
	"""
	node: Deployment!
}

type DeploymentStatusEdge {
	"""
	Cursor for this edge that can be used for pagination.
	"""
	cursor: Cursor!

	"""
	The deployment status.
	"""
	node: DeploymentStatus!
}

type DeploymentResourceEdge {
	"""
	Cursor for this edge that can be used for pagination.
	"""
	cursor: Cursor!

	"""
	The deployment resource.
	"""
	node: DeploymentResource!
}

"""
Description of a deployment.
"""
type Deployment implements Node {
	"""
	ID of the deployment.
	"""
	id: ID!

	"""
	Creation timestamp of the deployment.
	"""
	createdAt: Time!

	"""
	Team slug that the deployment belongs to.
	"""
	teamSlug: Slug!

	"""
	Name of the environment that the deployment belongs to.
	"""
	environmentName: String!

	"""
	The repository that triggered the deployment.
	"""
	repository: String

	"""
	Username of the actor who initiated the deployment.
	"""
	deployerUsername: String

	"""
	The git commit SHA that was deployed.
	"""
	commitSha: String

	"""
	The URL of the workflow that triggered the deployment.
	"""
	triggerUrl: String

	"""
	Resources that were deployed.
	"""
	resources(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): DeploymentResourceConnection!

	"""
	Statuses of the deployment.
	"""
	statuses(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): DeploymentStatusConnection!
}

"""
Resource connected to a deployment.
"""
type DeploymentResource implements Node {
	"""
	Globally unique ID of the deployment resource.
	"""
	id: ID!

	"""
	Deployment resource kind.
	"""
	kind: String!

	"""
	The name of the resource.
	"""
	name: String!
}

"""
Resource connected to a deployment.
"""
type DeploymentStatus implements Node {
	"""
	Globally unique ID of the deployment resource.
	"""
	id: ID!

	"""
	Creation timestamp of the deployment status.
	"""
	createdAt: Time!

	"""
	State of the deployment.
	"""
	state: DeploymentStatusState!

	"""
	Message describing the deployment status.
	"""
	message: String!
}

"""
Possible states of a deployment status.
"""
enum DeploymentStatusState {
	SUCCESS
	ERROR
	FAILURE
	INACTIVE
	IN_PROGRESS
	QUEUED
	PENDING
}

extend enum ApplicationOrderField {
	"Order applications by the deployment time."
	DEPLOYMENT_TIME
}

extend enum JobOrderField {
	"Order applications by the deployment time."
	DEPLOYMENT_TIME
}

extend enum ActivityLogEntryResourceType {
	"All activity log entries related to deploy keys will use this resource type."
	DEPLOY_KEY
}

type TeamDeployKeyUpdatedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}

# This is managed directly by the activitylog package since it
# combines data within the database.
type DeploymentActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String

	"Data associated with the update."
	data: DeploymentActivityLogEntryData!
}

type DeploymentActivityLogEntryData {
	triggerURL: String
}

extend enum ActivityLogActivityType {
	"Activity log entry for deployment activity."
	DEPLOYMENT

	"Activity log entry for team deploy key updates."
	TEAM_DEPLOY_KEY_UPDATED
}
`, BuiltIn: false},
	{Name: "../schema/environments.graphqls", Input: `extend type Query {
	"""
	Get a list of environments.
	"""
	environments(
		"""
		Ordering options for environments.
		"""
		orderBy: EnvironmentOrder
	): EnvironmentConnection!

	"""
	Get a single environment.
	"""
	environment(
		"""
		The name of the environment to get.
		"""
		name: String!
	): Environment!
}

"""
Environment connection.
"""
type EnvironmentConnection {
	"""
	Pagination information.
	"""
	pageInfo: PageInfo!

	"""
	List of nodes.
	"""
	nodes: [Environment!]!

	"""
	List of edges.
	"""
	edges: [EnvironmentEdge!]!
}

"""
Environment edge.
"""
type EnvironmentEdge {
	"""
	Cursor for this edge that can be used for pagination.
	"""
	cursor: Cursor!

	"""
	The Environment.
	"""
	node: Environment!
}

"""
Ordering options when fetching environments.
"""
input EnvironmentOrder {
	"""
	The field to order by.
	"""
	field: EnvironmentOrderField!

	"""
	The direction to order in.
	"""
	direction: OrderDirection!
}

"""
Fields to order environments by.
"""
enum EnvironmentOrderField {
	"""
	Order by name.
	"""
	NAME
}

"""
An environment represents a runtime environment for workloads.

Learn more in the [official Nais documentation](https://docs.nais.io/workloads/explanations/environment/).
"""
type Environment implements Node {
	"""
	The globally unique ID of the team.
	"""
	id: ID!

	"""
	Unique name of the environment.
	"""
	name: String!
}

extend type TeamEnvironment {
	"""
	Get the environment.
	"""
	environment: Environment!
}
`, BuiltIn: false},
	{Name: "../schema/feature.graphqls", Input: `type Features implements Node {
	"""
	Unique identifier for the feature container.
	"""
	id: ID!

	"""
	Information about Unleash feature.
	"""
	unleash: FeatureUnleash!

	"""
	Information about Valkey feature.
	"""
	valkey: FeatureValkey!

	"""
	Information about Kafka feature.
	"""
	kafka: FeatureKafka!

	"""
	Information about OpenSearch feature.
	"""
	openSearch: FeatureOpenSearch!
}

extend type Query {
	"""
	Feature flags.
	"""
	features: Features!
}

type FeatureUnleash implements Node {
	"""
	Unique identifier for the feature.
	"""
	id: ID!

	"""
	Wether Unleash is enabled or not.
	"""
	enabled: Boolean!
}

type FeatureValkey implements Node {
	"""
	Unique identifier for the feature.
	"""
	id: ID!

	"""
	Wether Valkey is enabled or not.
	"""
	enabled: Boolean!
}

type FeatureKafka implements Node {
	"""
	Unique identifier for the feature.
	"""
	id: ID!

	"""
	Wether Kafka is enabled or not.
	"""
	enabled: Boolean!
}

type FeatureOpenSearch implements Node {
	"""
	Unique identifier for the feature.
	"""
	id: ID!

	"""
	Wether OpenSearch is enabled or not.
	"""
	enabled: Boolean!
}
`, BuiltIn: false},
	{Name: "../schema/issues.graphqls", Input: `extend type Team {
	"Issues that affects the team."
	issues(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		# "Ordering options for items returned from the connection."
		orderBy: IssueOrder

		# "Filtering options for items returned from the connection."
		filter: IssueFilter
	): IssueConnection!
}

input IssueOrder {
	"Order by this field."
	field: IssueOrderField!

	"Order direction."
	direction: OrderDirection!
}

input IssueFilter {
	"Filter by resource name."
	resourceName: String

	"Filter by resource type."
	resourceType: ResourceType

	"Filter by environment."
	environments: [String!]

	"Filter by severity."
	severity: Severity

	"Filter by issue type."
	issueType: IssueType
}

input ResourceIssueFilter {
	"Filter by severity."
	severity: Severity

	"Filter by issue type."
	issueType: IssueType
}

enum IssueOrderField {
	"Order by resource name."
	RESOURCE_NAME
	"Order by severity."
	SEVERITY
	"Order by environment."
	ENVIRONMENT
	"Order by resource type."
	RESOURCE_TYPE
	"Order by issue type."
	ISSUE_TYPE
}

type IssueConnection {
	"Pagination information."
	pageInfo: PageInfo!

	"List of nodes."
	nodes: [Issue!]!

	"List of edges."
	edges: [IssueEdge!]!
}

type IssueEdge {
	"Cursor for this edge that can be used for pagination."
	cursor: Cursor!

	"The Issue."
	node: Issue!
}

interface Issue implements Node {
	id: ID!
	teamEnvironment: TeamEnvironment!
	severity: Severity!
	message: String!
}

extend enum ApplicationOrderField {
	"""
	Order applications by issue severity
	"""
	ISSUES
}

extend enum JobOrderField {
	"""
	Order jobs by issue severity
	"""
	ISSUES
}

extend enum WorkloadOrderField {
	"""
	Order workloads by issue severity
	"""
	ISSUES
}

extend enum SqlInstanceOrderField {
	"""
	Order SqlInstances by issue severity
	"""
	ISSUES
}

extend enum OpenSearchOrderField {
	"""
	Order OpenSearches by issue severity
	"""
	ISSUES
}

extend enum ValkeyOrderField {
	"""
	Order Valkeys by issue severity
	"""
	ISSUES
}

enum Severity {
	CRITICAL
	WARNING
	TODO
}

enum ResourceType {
	OPENSEARCH
	VALKEY
	SQLINSTANCE
	APPLICATION
	JOB
}

enum IssueType {
	OPENSEARCH
	VALKEY
	SQLINSTANCE_STATE
	SQLINSTANCE_VERSION
	DEPRECATED_INGRESS
	DEPRECATED_REGISTRY
	NO_RUNNING_INSTANCES
	FAILED_JOB_RUNS
	FAILED_SYNCHRONIZATION
	INVALID_SPEC
	MISSING_SBOM
	VULNERABLE_IMAGE
}

type VulnerableImageIssue implements Issue & Node {
	id: ID!
	teamEnvironment: TeamEnvironment!
	severity: Severity!
	message: String!

	workload: Workload!
	riskScore: Int!
	critical: Int!
}

type MissingSbomIssue implements Issue & Node {
	id: ID!
	teamEnvironment: TeamEnvironment!
	severity: Severity!
	message: String!

	workload: Workload!
}

type InvalidSpecIssue implements Issue & Node {
	id: ID!
	teamEnvironment: TeamEnvironment!
	severity: Severity!
	message: String!

	workload: Workload!
}

type FailedSynchronizationIssue implements Issue & Node {
	id: ID!
	teamEnvironment: TeamEnvironment!
	severity: Severity!
	message: String!

	workload: Workload!
}

type OpenSearchIssue implements Issue & Node {
	id: ID!
	teamEnvironment: TeamEnvironment!
	severity: Severity!
	message: String!

	openSearch: OpenSearch!
	event: String!
}

type ValkeyIssue implements Issue & Node {
	id: ID!
	teamEnvironment: TeamEnvironment!
	severity: Severity!
	message: String!

	valkey: Valkey!
	event: String!
}

type SqlInstanceVersionIssue implements Issue & Node {
	id: ID!
	teamEnvironment: TeamEnvironment!
	severity: Severity!
	message: String!

	sqlInstance: SqlInstance!
}

type SqlInstanceStateIssue implements Issue & Node {
	id: ID!
	teamEnvironment: TeamEnvironment!
	severity: Severity!
	message: String!

	state: SqlInstanceState!
	sqlInstance: SqlInstance!
}

type DeprecatedIngressIssue implements Issue & Node {
	id: ID!
	teamEnvironment: TeamEnvironment!
	severity: Severity!
	message: String!

	ingresses: [String!]!
	application: Application!
}

type DeprecatedRegistryIssue implements Issue & Node {
	id: ID!
	teamEnvironment: TeamEnvironment!
	severity: Severity!
	message: String!

	workload: Workload!
}

type NoRunningInstancesIssue implements Issue & Node {
	id: ID!
	teamEnvironment: TeamEnvironment!
	severity: Severity!
	message: String!

	workload: Workload!
}

type FailedJobRunsIssue implements Issue & Node {
	id: ID!
	teamEnvironment: TeamEnvironment!
	severity: Severity!
	message: String!

	job: Job!
}
`, BuiltIn: false},
	{Name: "../schema/jobs.graphqls", Input: `extend type Team {
	"Nais jobs owned by the team."
	jobs(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Ordering options for items returned from the connection."
		orderBy: JobOrder

		"Filtering options for items returned from the connection."
		filter: TeamJobsFilter
	): JobConnection!
}

extend type Mutation {
	"Delete a job."
	deleteJob(input: DeleteJobInput!): DeleteJobPayload!

	"Trigger a job"
	triggerJob(input: TriggerJobInput!): TriggerJobPayload!
}

extend type TeamEnvironment {
	"Nais job in the team environment."
	job(name: String!): Job!
}

extend type TeamInventoryCounts {
	jobs: TeamInventoryCountJobs!
}

extend enum ActivityLogEntryResourceType {
	"All activity log entries related to jobs will use this resource type."
	JOB
}

input TeamJobsFilter {
	"""
	Filter by the name of the job.
	"""
	name: String!

	"""
	Filter by the name of the environment.
	"""
	environments: [String!]
}
type Job implements Node & Workload & ActivityLogger {
	"The globally unique ID of the job."
	id: ID!

	"The name of the job."
	name: String!

	"The team that owns the job."
	team: Team!

	"The environment the job is deployed in."
	environment: TeamEnvironment! @deprecated(reason: "Use the ` + "`" + `teamEnvironment` + "`" + ` field instead.")

	"The team environment for the job."
	teamEnvironment: TeamEnvironment!

	"The container image of the job."
	image: ContainerImage!

	"Resources for the job."
	resources: JobResources!

	"List of authentication and authorization for the job."
	authIntegrations: [JobAuthIntegrations!]!

	"Optional schedule for the job. Jobs with no schedule are run once."
	schedule: JobSchedule

	"The job runs."
	runs(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): JobRunConnection!

	"The job manifest."
	manifest: JobManifest!

	"""
	If set, when the job was marked for deletion.
	"""
	deletionStartedAt: Time

	"""
	Activity log associated with the job.
	"""
	activityLog(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor

		"""
		Filter items.
		"""
		filter: ActivityLogFilter
	): ActivityLogEntryConnection!

	"The state of the Job"
	state: JobState!

	"Issues that affects the workload."
	issues(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Ordering options for items returned from the connection."
		orderBy: IssueOrder

		"Filtering options for items returned from the connection."
		filter: ResourceIssueFilter
	): IssueConnection!
}

enum JobState {
	COMPLETED
	RUNNING
	FAILED
	UNKNOWN
}

type JobManifest implements WorkloadManifest {
	"The manifest content, serialized as a YAML document."
	content: String!
}

type JobSchedule {
	"The cron expression for the job."
	expression: String!

	"The time zone for the job. Defaults to UTC."
	timeZone: String!
}

union JobAuthIntegrations = EntraIDAuthIntegration | MaskinportenAuthIntegration

type JobResources implements WorkloadResources {
	limits: WorkloadResourceQuantity!
	requests: WorkloadResourceQuantity!
}

enum JobRunTriggerType {
	# Triggered by a cron job or schedule
	AUTOMATIC
	# Triggered by a user
	MANUAL
}

type JobRunTrigger {
	"The type of trigger that started the job."
	type: JobRunTriggerType!

	"The actor/user who triggered the job run manually, if applicable."
	actor: String
}

type JobRun implements Node {
	"The globally unique ID of the job run."
	id: ID!

	"The name of the job run."
	name: String!

	"The start time of the job."
	startTime: Time

	"The completion time of the job."
	completionTime: Time

	"The status of the job run."
	status: JobRunStatus!

	"The container image of the job run."
	image: ContainerImage!

	"Duration of the job in seconds."
	duration: Int!

	"Job run instances."
	instances(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): JobRunInstanceConnection!

	trigger: JobRunTrigger!
}

type JobRunInstance implements Node {
	"The globally unique ID of the job run instance."
	id: ID!

	"The name of the job run instance."
	name: String!
}

type JobRunStatus {
	"The state of the job run."
	state: JobRunState!

	"Human readable job run status."
	message: String!
}

enum JobRunState {
	"Job run is pending."
	PENDING

	"Job run is running."
	RUNNING

	"Job run is succeeded."
	SUCCEEDED

	"Job run is failed."
	FAILED

	"Job run is unknown."
	UNKNOWN
}

type JobConnection {
	"Pagination information."
	pageInfo: PageInfo!

	"List of nodes."
	nodes: [Job!]!

	"List of edges."
	edges: [JobEdge!]!
}

type JobRunInstanceConnection {
	"Pagination information."
	pageInfo: PageInfo!

	"List of nodes."
	nodes: [JobRunInstance!]!

	"List of edges."
	edges: [JobRunInstanceEdge!]!
}

type JobRunConnection {
	"Pagination information."
	pageInfo: PageInfo!

	"List of nodes."
	nodes: [JobRun!]!

	"List of edges."
	edges: [JobRunEdge!]!
}

type JobEdge {
	"Cursor for this edge that can be used for pagination."
	cursor: Cursor!

	"The job."
	node: Job!
}

type JobRunEdge {
	"Cursor for this edge that can be used for pagination."
	cursor: Cursor!

	"The job run."
	node: JobRun!
}

type JobRunInstanceEdge {
	"Cursor for this edge that can be used for pagination."
	cursor: Cursor!

	"The instance."
	node: JobRunInstance!
}

type TeamInventoryCountJobs {
	"Total number of jobs."
	total: Int!
}

input JobOrder {
	"The field to order items by."
	field: JobOrderField!

	"The direction to order items by."
	direction: OrderDirection!
}

enum JobOrderField {
	"Order jobs by name."
	NAME

	"Order jobs by the name of the environment."
	ENVIRONMENT

	"""
	Order by state.
	"""
	STATE
}

extend union SearchNode = Job
extend enum SearchType {
	JOB
}

input DeleteJobInput {
	"Name of the job."
	name: String!

	"Slug of the team that owns the job."
	teamSlug: Slug!

	"Name of the environment where the job runs."
	environmentName: String!
}

type DeleteJobPayload {
	"The team that owned the deleted job."
	team: Team

	"Whether or not the job was deleted."
	success: Boolean
}

input TriggerJobInput {
	"Name of the job."
	name: String!

	"Slug of the team that owns the job."
	teamSlug: Slug!

	"Name of the environment where the job runs."
	environmentName: String!

	"Name of the new run. Must be unique within the team."
	runName: String!
}

type TriggerJobPayload {
	"The job that was triggered."
	job: Job

	"The new job run."
	jobRun: JobRun
}

type JobDeletedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}

type JobTriggeredActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}

extend enum ActivityLogActivityType {
	"Activity log entries related to job deletion."
	JOB_DELETED

	"Activity log entries related to job triggering."
	JOB_TRIGGERED
}
`, BuiltIn: false},
	{Name: "../schema/kafka.graphqls", Input: `extend type Team {
	"Kafka topics owned by the team."
	kafkaTopics(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Ordering options for items returned from the connection."
		orderBy: KafkaTopicOrder
	): KafkaTopicConnection!
}

extend type TeamEnvironment {
	"Kafka topic in the team environment."
	kafkaTopic(name: String!): KafkaTopic!
}

extend interface Workload {
	"Kafka topics the workload has access to. This does not currently support pagination, but will return all available Kafka topics."
	kafkaTopicAcls(
		"Ordering options for items returned from the connection."
		orderBy: KafkaTopicAclOrder
	): KafkaTopicAclConnection!
}

extend type Application {
	"Kafka topics the application has access to. This does not currently support pagination, but will return all available Kafka topics."
	kafkaTopicAcls(
		"Ordering options for items returned from the connection."
		orderBy: KafkaTopicAclOrder
	): KafkaTopicAclConnection!
}

extend type Job {
	"Kafka topics the job has access to. This does not currently support pagination, but will return all available Kafka topics."
	kafkaTopicAcls(
		"Ordering options for items returned from the connection."
		orderBy: KafkaTopicAclOrder
	): KafkaTopicAclConnection!
}

extend type TeamInventoryCounts {
	kafkaTopics: TeamInventoryCountKafkaTopics!
}

type TeamInventoryCountKafkaTopics {
	"Total number of Kafka topics."
	total: Int!
}

type KafkaTopic implements Persistence & Node {
	id: ID!
	name: String!
	team: Team!
	environment: TeamEnvironment! @deprecated(reason: "Use the ` + "`" + `teamEnvironment` + "`" + ` field instead.")
	teamEnvironment: TeamEnvironment!
	acl(
		first: Int
		after: Cursor
		last: Int
		before: Cursor
		filter: KafkaTopicAclFilter
		orderBy: KafkaTopicAclOrder
	): KafkaTopicAclConnection!
	configuration: KafkaTopicConfiguration
	pool: String!
}

type KafkaTopicAcl {
	access: String!
	workloadName: String!
	teamName: String!
	team: Team
	workload: Workload
	topic: KafkaTopic!
}

type KafkaTopicConfiguration {
	cleanupPolicy: String
	maxMessageBytes: Int
	minimumInSyncReplicas: Int
	partitions: Int
	replication: Int
	retentionBytes: Int
	retentionHours: Int
	segmentHours: Int
}

type KafkaTopicConnection {
	pageInfo: PageInfo!
	nodes: [KafkaTopic!]!
	edges: [KafkaTopicEdge!]!
}

type KafkaTopicAclConnection {
	pageInfo: PageInfo!
	nodes: [KafkaTopicAcl!]!
	edges: [KafkaTopicAclEdge!]!
}

type KafkaTopicEdge {
	cursor: Cursor!
	node: KafkaTopic!
}

type KafkaTopicAclEdge {
	cursor: Cursor!
	node: KafkaTopicAcl!
}

input KafkaTopicAclFilter {
	team: Slug
	workload: String
	validWorkloads: Boolean
}

input KafkaTopicOrder {
	field: KafkaTopicOrderField!
	direction: OrderDirection!
}

input KafkaTopicAclOrder {
	field: KafkaTopicAclOrderField!
	direction: OrderDirection!
}

enum KafkaTopicOrderField {
	NAME
	ENVIRONMENT
}

enum KafkaTopicAclOrderField {
	TOPIC_NAME
	TEAM_SLUG
	CONSUMER
	ACCESS
}

extend union SearchNode = KafkaTopic

extend enum SearchType {
	KAFKA_TOPIC
}
`, BuiltIn: false},
	{Name: "../schema/log.graphqls", Input: `extend type Subscription {
	"""
	Subscribe to log lines

	This subscription is used to stream log lines.
	"""
	log(filter: LogSubscriptionFilter!): LogLine!
}

input LogSubscriptionInitialBatch {
	"""
	Specifies the start timestamp of the initial batch. Defaults to one hour ago.
	"""
	start: Time

	"""
	Initial batch of past log lines before streaming starts.
	"""
	limit: Int = 100
}

input LogSubscriptionFilter {
	"""
	Specify the environment to stream log lines from.
	"""
	environmentName: String!

	"""
	Filter log lines by specifying a query.
	"""
	query: String!

	"""
	Specify an initial batch of log lines to be sent when the subscription starts.
	"""
	initialBatch: LogSubscriptionInitialBatch = {}
}

type LogLine {
	"""
	Timestamp of the log line.
	"""
	time: Time!

	"""
	The log line message.
	"""
	message: String!

	"""
	Labels attached to the log line.
	"""
	labels: [LogLineLabel!]!
}

type LogLineLabel {
	"""
	The key of the label.
	"""
	key: String!

	"""
	The value of the label.
	"""
	value: String!
}
`, BuiltIn: false},
	{Name: "../schema/logging.graphqls", Input: `extend interface Workload {
	"List of log destinations for the workload."
	logDestinations: [LogDestination!]!
}

extend type Application {
	"List of log destinations for the application."
	logDestinations: [LogDestination!]!
}

extend type Job {
	"List of log destinations for the job."
	logDestinations: [LogDestination!]!
}

interface LogDestination implements Node {
	"The globally unique ID of the log destination."
	id: ID!
}

type LogDestinationLoki implements LogDestination & Node {
	"The globally unique ID of the log destination."
	id: ID!
	"Grafana URL to view the logs."
	grafanaURL: String!
}

type LogDestinationSecureLogs implements LogDestination & Node {
	"The globally unique ID of the log destination."
	id: ID!
}
`, BuiltIn: false},
	{Name: "../schema/netpol.graphqls", Input: `extend interface Workload {
	"Network policies for the workload."
	networkPolicy: NetworkPolicy!
}

extend type Application {
	"Network policies for the application."
	networkPolicy: NetworkPolicy!
}

extend type Job {
	"Network policies for the job."
	networkPolicy: NetworkPolicy!
}

interface ExternalNetworkPolicyTarget {
	target: String!
	ports: [Int!]!
}

type ExternalNetworkPolicyHost implements ExternalNetworkPolicyTarget {
	target: String!
	ports: [Int!]!
}

type ExternalNetworkPolicyIpv4 implements ExternalNetworkPolicyTarget {
	target: String!
	ports: [Int!]!
}

type NetworkPolicyRule {
	targetWorkloadName: String!
	targetWorkload: Workload
	targetTeamSlug: Slug!
	targetTeam: Team
	mutual: Boolean!
}

type InboundNetworkPolicy {
	rules: [NetworkPolicyRule!]!
}

type OutboundNetworkPolicy {
	rules: [NetworkPolicyRule!]!
	external: [ExternalNetworkPolicyTarget!]!
}

type NetworkPolicy {
	inbound: InboundNetworkPolicy!
	outbound: OutboundNetworkPolicy!
}
`, BuiltIn: false},
	{Name: "../schema/opensearch.graphqls", Input: `extend type Team {
	"OpenSearch instances owned by the team."
	openSearches(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Ordering options for items returned from the connection."
		orderBy: OpenSearchOrder
	): OpenSearchConnection!
}

extend type TeamEnvironment {
	"OpenSearch instance in the team environment."
	openSearch(name: String!): OpenSearch!
}

extend interface Workload {
	"OpenSearch instance referenced by the workload."
	openSearch: OpenSearch
}

extend type Application {
	"OpenSearch instance referenced by the workload."
	openSearch: OpenSearch
}

extend type Job {
	"OpenSearch instance referenced by the workload."
	openSearch: OpenSearch
}

extend type TeamInventoryCounts {
	openSearches: TeamInventoryCountOpenSearches!
}

type TeamInventoryCountOpenSearches {
	"Total number of OpenSearch instances."
	total: Int!
}

type OpenSearchVersion {
	"The full version string of the OpenSearch instance. This will be available after the instance is created."
	actual: String
	"The desired major version of the OpenSearch instance."
	desiredMajor: OpenSearchMajorVersion!
}

type OpenSearch implements Persistence & Node {
	id: ID!
	name: String!
	team: Team!
	environment: TeamEnvironment! @deprecated(reason: "Use the ` + "`" + `teamEnvironment` + "`" + ` field instead.")
	teamEnvironment: TeamEnvironment!
	terminationProtection: Boolean!
	state: OpenSearchState!
	workload: Workload
		@deprecated(reason: "OpenSearch does not have a owner, so this field will always be null.")
	access(
		first: Int
		after: Cursor
		last: Int
		before: Cursor
		orderBy: OpenSearchAccessOrder
	): OpenSearchAccessConnection!
	"Fetch version for the OpenSearch instance."
	version: OpenSearchVersion!
	"Availability tier for the OpenSearch instance."
	tier: OpenSearchTier!
	"Available memory for the OpenSearch instance."
	memory: OpenSearchMemory!
	"Available storage in GB."
	storageGB: Int!
	"Issues that affects the instance."
	issues(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Ordering options for items returned from the connection."
		orderBy: IssueOrder

		"Filtering options for items returned from the connection."
		filter: ResourceIssueFilter
	): IssueConnection!
}

enum OpenSearchState {
	POWEROFF
	REBALANCING
	REBUILDING
	RUNNING
	UNKNOWN
}

type OpenSearchAccess {
	workload: Workload!
	access: String!
}

type OpenSearchAccessConnection {
	pageInfo: PageInfo!
	nodes: [OpenSearchAccess!]!
	edges: [OpenSearchAccessEdge!]!
}

type OpenSearchConnection {
	pageInfo: PageInfo!
	nodes: [OpenSearch!]!
	edges: [OpenSearchEdge!]!
}

type OpenSearchAccessEdge {
	cursor: Cursor!
	node: OpenSearchAccess!
}

type OpenSearchEdge {
	cursor: Cursor!
	node: OpenSearch!
}

input OpenSearchAccessOrder {
	field: OpenSearchAccessOrderField!
	direction: OrderDirection!
}

input OpenSearchOrder {
	field: OpenSearchOrderField!
	direction: OrderDirection!
}

enum OpenSearchAccessOrderField {
	ACCESS
	WORKLOAD
}

enum OpenSearchOrderField {
	NAME
	ENVIRONMENT
	STATE
}

extend union SearchNode = OpenSearch

extend enum SearchType {
	OPENSEARCH
}

enum OpenSearchTier {
	SINGLE_NODE
	HIGH_AVAILABILITY
}

enum OpenSearchMemory {
	GB_2
	GB_4
	GB_8
	GB_16
	GB_32
	GB_64
}

enum OpenSearchMajorVersion {
	"OpenSearch Version 2.x"
	V2
	"OpenSearch Version 1.x"
	V1
}

input CreateOpenSearchInput {
	"Name of the OpenSearch instance."
	name: String!
	"The environment name that the OpenSearch instance belongs to."
	environmentName: String!
	"The team that owns the OpenSearch instance."
	teamSlug: Slug!
	"Tier of the OpenSearch instance."
	tier: OpenSearchTier!
	"Available memory for the OpenSearch instance."
	memory: OpenSearchMemory!
	"Major version of the OpenSearch instance."
	version: OpenSearchMajorVersion!
	"Available storage in GB."
	storageGB: Int!
}

type CreateOpenSearchPayload {
	"OpenSearch instance that was created."
	openSearch: OpenSearch!
}

input UpdateOpenSearchInput {
	"Name of the OpenSearch instance."
	name: String!
	"The environment name that the OpenSearch instance belongs to."
	environmentName: String!
	"The team that owns the OpenSearch instance."
	teamSlug: Slug!
	"Tier of the OpenSearch instance."
	tier: OpenSearchTier!
	"Available memory for the OpenSearch instance."
	memory: OpenSearchMemory!
	"Major version of the OpenSearch instance."
	version: OpenSearchMajorVersion!
	"Available storage in GB."
	storageGB: Int!
}

type UpdateOpenSearchPayload {
	"OpenSearch instance that was updated."
	openSearch: OpenSearch!
}

input DeleteOpenSearchInput {
	"Name of the OpenSearch instance."
	name: String!
	"The environment name that the OpenSearch instance belongs to."
	environmentName: String!
	"The team that owns the OpenSearch instance."
	teamSlug: Slug!
}

type DeleteOpenSearchPayload {
	"Whether or not the OpenSearch instance was deleted."
	openSearchDeleted: Boolean
}

extend type Mutation {
	"Create a new OpenSearch instance."
	createOpenSearch(input: CreateOpenSearchInput!): CreateOpenSearchPayload!
	"Update an existing OpenSearch instance."
	updateOpenSearch(input: UpdateOpenSearchInput!): UpdateOpenSearchPayload!
	"Delete an existing OpenSearch instance."
	deleteOpenSearch(input: DeleteOpenSearchInput!): DeleteOpenSearchPayload!
}

extend enum ActivityLogEntryResourceType {
	"All activity log entries related to OpenSearches will use this resource type."
	OPENSEARCH
}

extend enum ActivityLogActivityType {
	"OpenSearch was created."
	OPENSEARCH_CREATED
	"OpenSearch was updated."
	OPENSEARCH_UPDATED
	"OpenSearch was deleted."
	OPENSEARCH_DELETED
	"Started service maintenance on OpenSearch instance."
	OPENSEARCH_MAINTENANCE_STARTED
}

type OpenSearchCreatedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}

type OpenSearchUpdatedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String

	"""
	Data associated with the entry.
	"""
	data: OpenSearchUpdatedActivityLogEntryData!
}

type OpenSearchUpdatedActivityLogEntryDataUpdatedField {
	"""
	The name of the field.
	"""
	field: String!

	"""
	The old value of the field.
	"""
	oldValue: String

	"""
	The new value of the field.
	"""
	newValue: String
}

type OpenSearchUpdatedActivityLogEntryData {
	updatedFields: [OpenSearchUpdatedActivityLogEntryDataUpdatedField!]!
}

type OpenSearchDeletedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}
`, BuiltIn: false},
	{Name: "../schema/persistence.graphqls", Input: `interface Persistence implements Node {
	id: ID!
	name: String!
	team: Team!
	environment: TeamEnvironment! @deprecated(reason: "Use the ` + "`" + `teamEnvironment` + "`" + ` field instead.")
	teamEnvironment: TeamEnvironment!
}
`, BuiltIn: false},
	{Name: "../schema/podlog.graphqls", Input: `extend type Subscription {
	"""
	Subscribe to workload logs

	This subscription is used to stream logs from a specific workload. When filtering logs you must either specify an
	application or a job owned by a team that is running in a specific environment. You can also filter logs on instance
	name(s).
	"""
	workloadLog(filter: WorkloadLogSubscriptionFilter!): WorkloadLogLine!
}

input WorkloadLogSubscriptionFilter {
	"Filter logs to a specific team."
	team: Slug!

	"Filter logs to a specific environment."
	environment: String!

	"Filter logs to a specific application."
	application: String

	"Filter logs to a specific job."
	job: String

	"Filter logs to a set of specific instance names."
	instances: [String!]
}

type WorkloadLogLine {
	"The timestamp of the log line."
	time: Time!

	"The log message."
	message: String!

	"The name of the instance that generated the log line."
	instance: String!
}
`, BuiltIn: false},
	{Name: "../schema/price.graphqls", Input: `extend type Query {
	"""
	Get current prices for resources.
	"""
	currentUnitPrices: CurrentUnitPrices!
}
"Get current unit prices."
type CurrentUnitPrices {
	"Current price for one CPU hour."
	cpu: Price!
	"Current price for one GB hour of memory."
	memory: Price!
}

type Price {
	value: Float!
}
`, BuiltIn: false},
	{Name: "../schema/reconcilers.graphqls", Input: `extend type Mutation {
	"""
	Enable a reconciler

	A reconciler must be fully configured before it can be enabled.
	"""
	enableReconciler(input: EnableReconcilerInput!): Reconciler!

	"""
	Disable a reconciler

	The reconciler configuration will be left intact.
	"""
	disableReconciler(input: DisableReconcilerInput!): Reconciler!

	"Configure a reconciler."
	configureReconciler(input: ConfigureReconcilerInput!): Reconciler!
}

extend type Query {
	"Get a collection of reconcilers."
	reconcilers(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): ReconcilerConnection!
}

extend enum ActivityLogEntryResourceType {
	"All activity log entries related to reconcilers will use this resource type."
	RECONCILER
}

type ReconcilerConnection {
	"Pagination information."
	pageInfo: PageInfo!

	"List of nodes."
	nodes: [Reconciler!]!

	"List of edges."
	edges: [ReconcilerEdge!]!
}

type ReconcilerEdge {
	"Cursor for this edge that can be used for pagination."
	cursor: Cursor!

	"The reconciler."
	node: Reconciler!
}

"Reconciler type."
type Reconciler implements Node {
	"Unique identifier for the reconciler."
	id: ID!

	"The name of the reconciler."
	name: String!

	"The human-friendly name of the reconciler."
	displayName: String!

	"Description of what the reconciler is responsible for."
	description: String!

	"Whether or not the reconciler is enabled."
	enabled: Boolean!

	"Reconciler configuration keys and descriptions."
	config: [ReconcilerConfig!]!

	"Whether or not the reconciler is fully configured and ready to be enabled."
	configured: Boolean!

	"Potential errors that have occurred during the reconciler's operation."
	errors(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): ReconcilerErrorConnection!
}

type ReconcilerErrorConnection {
	"Pagination information."
	pageInfo: PageInfo!

	"List of nodes."
	nodes: [ReconcilerError!]!

	"List of edges."
	edges: [ReconcilerErrorEdge!]!
}

type ReconcilerErrorEdge {
	"Cursor for this edge that can be used for pagination."
	cursor: Cursor!

	"The reconcilerError."
	node: ReconcilerError!
}

type ReconcilerError implements Node {
	"""
	Unique identifier for the reconciler error.
	"""
	id: ID!

	"""
	The correlation ID for the reconciler error.
	"""
	correlationID: String!

	"""
	Creation timestamp of the reconciler error.
	"""
	createdAt: Time!

	"""
	The error message itself.
	"""
	message: String!

	"""
	The team that the error belongs to.
	"""
	team: Team!
}

"Reconciler configuration type."
type ReconcilerConfig {
	"Configuration key."
	key: String!

	"The human-friendly name of the configuration key."
	displayName: String!

	"Configuration description."
	description: String!

	"Whether or not the configuration key has a value."
	configured: Boolean!

	"Whether or not the configuration value is considered a secret. Secret values will not be exposed through the API."
	secret: Boolean!

	"Configuration value. This will be set to null if the value is considered a secret."
	value: String
}

"Reconciler configuration input."
input ReconcilerConfigInput {
	"Configuration key."
	key: String!

	"Configuration value."
	value: String!
}

type ReconcilerEnabledActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}

type ReconcilerDisabledActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}

type ReconcilerConfiguredActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String

	"Data associated with the update."
	data: ReconcilerConfiguredActivityLogEntryData!
}

type ReconcilerConfiguredActivityLogEntryData {
	"Keys that were updated."
	updatedKeys: [String!]!
}

input EnableReconcilerInput {
	"The name of the reconciler to enable."
	name: String!
}

input DisableReconcilerInput {
	"The name of the reconciler to disable."
	name: String!
}

input ConfigureReconcilerInput {
	"The name of the reconciler to configure."
	name: String!

	"List of reconciler config inputs."
	config: [ReconcilerConfigInput!]!
}

extend enum ActivityLogActivityType {
	"Reconciler enabled activity log entry."
	RECONCILER_ENABLED

	"Reconciler disabled activity log entry."
	RECONCILER_DISABLED

	"Reconciler configured activity log entry."
	RECONCILER_CONFIGURED
}
`, BuiltIn: false},
	{Name: "../schema/repository.graphqls", Input: `extend type Team {
	repositories(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Ordering options for items returned from the connection."
		orderBy: RepositoryOrder

		filter: TeamRepositoryFilter
	): RepositoryConnection!
}

extend type Mutation {
	"Add a team repository."
	addRepositoryToTeam(input: AddRepositoryToTeamInput!): AddRepositoryToTeamPayload!

	"Remove a team repository."
	removeRepositoryFromTeam(input: RemoveRepositoryFromTeamInput!): RemoveRepositoryFromTeamPayload!
}

extend enum ActivityLogEntryResourceType {
	"All activity log entries related to repositories will use this resource type."
	REPOSITORY
}

input AddRepositoryToTeamInput {
	"Slug of the team to add the repository to."
	teamSlug: Slug!

	"Name of the repository, with the org prefix, for instance 'org/repo'."
	repositoryName: String!
}

type AddRepositoryToTeamPayload {
	"Repository that was added to the team."
	repository: Repository
}

input RemoveRepositoryFromTeamInput {
	"Slug of the team to remove the repository from."
	teamSlug: Slug!

	"Name of the repository, with the org prefix, for instance 'org/repo'."
	repositoryName: String!
}

type RemoveRepositoryFromTeamPayload {
	"Whether or not the repository was removed from the team."
	success: Boolean
}

type RepositoryConnection {
	"Pagination information."
	pageInfo: PageInfo!

	"List of nodes."
	nodes: [Repository!]!

	"List of edges."
	edges: [RepositoryEdge!]!
}

type RepositoryEdge {
	"Cursor for this edge that can be used for pagination."
	cursor: Cursor!

	"The GitHub repository."
	node: Repository!
}

type Repository implements Node {
	"ID of the repository."
	id: ID!

	"Name of the repository, with the organization prefix."
	name: String!

	"Team this repository is connected to."
	team: Team!
}

input TeamRepositoryFilter {
	"Filter by repository name containing the phrase."
	name: String
}

"Ordering options when fetching repositories."
input RepositoryOrder {
	"The field to order items by."
	field: RepositoryOrderField!

	"The direction to order items by."
	direction: OrderDirection!
}

enum RepositoryOrderField {
	"Order repositories by name."
	NAME
}

type RepositoryAddedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}

type RepositoryRemovedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}

extend enum ActivityLogActivityType {
	"Repository was added to a team."
	REPOSITORY_ADDED

	"Repository was removed from a team."
	REPOSITORY_REMOVED
}
`, BuiltIn: false},
	{Name: "../schema/scalars.graphqls", Input: `"""
TimeOfDay is the time of day, represented as a string in the format HH:MM:SS.
"""
scalar TimeOfDay

"""
Time is a string in [RFC 3339](https://rfc-editor.org/rfc/rfc3339.html) format, with sub-second precision added if present.
"""
scalar Time

"""
Date type in YYYY-MM-DD format.
"""
scalar Date

"""
The slug must:

- contain only lowercase alphanumeric characters or hyphens
- contain at least 3 characters and at most 30 characters
- start with an alphabetic character
- end with an alphanumeric character
- not contain two hyphens in a row

Examples of valid slugs:

- ` + "`" + `some-value` + "`" + `
- ` + "`" + `someothervalue` + "`" + `
- ` + "`" + `my-team-123` + "`" + `
"""
scalar Slug

"""
A cursor for use in pagination

Cursors are opaque strings that are returned by the server for paginated results, and used when performing backwards / forwards pagination.
"""
scalar Cursor
`, BuiltIn: false},
	{Name: "../schema/schema.graphqls", Input: `"""
The query root for the Nais GraphQL API.
"""
type Query {
	"""
	Fetch an object using its globally unique ID.
	"""
	node(
		"""
		The ID of the object to fetch.
		"""
		id: ID!
	): Node
}

"""
The mutation root for the Nais GraphQL API.
"""
type Mutation

"""
The subscription root for the Nais GraphQL API.
"""
type Subscription

"""
This interface is implemented by types that supports the [Global Object Identification specification](https://graphql.org/learn/global-object-identification/).
"""
interface Node {
	"""
	Globally unique ID of the object.
	"""
	id: ID!
}

"""
This type is used for paginating the connection

Learn more about how we have implemented pagination in the [GraphQL Best Practices documentation](https://graphql.org/learn/pagination/).
"""
type PageInfo {
	"""
	Whether or not there exists a next page in the connection.
	"""
	hasNextPage: Boolean!

	"""
	The cursor for the last item in the edges. This cursor is used when paginating forwards.
	"""
	endCursor: Cursor

	"""
	Whether or not there exists a previous page in the connection.
	"""
	hasPreviousPage: Boolean!

	"""
	The cursor for the first item in the edges. This cursor is used when paginating backwards.
	"""
	startCursor: Cursor

	"""
	The total amount of items in the connection.
	"""
	totalCount: Int!

	"""
	The offset of the first item in the connection.
	"""
	pageStart: Int!

	"""
	The offset of the last item in the connection.
	"""
	pageEnd: Int!
}

"""
Possible directions in which to order a list of items.
"""
enum OrderDirection {
	"""
	Ascending sort order.
	"""
	ASC

	"""
	Descending sort order.
	"""
	DESC
}

"""
The days of the week.
"""
enum Weekday {
	"""
	Monday
	"""
	MONDAY

	"""
	Tuesday
	"""
	TUESDAY

	"""
	Wednesday
	"""
	WEDNESDAY

	"""
	Thursday
	"""
	THURSDAY

	"""
	Friday
	"""
	FRIDAY

	"""
	Saturday
	"""
	SATURDAY

	"""
	Sunday
	"""
	SUNDAY
}
`, BuiltIn: false},
	{Name: "../schema/search.graphqls", Input: `extend type Query {
	"""
	Search for entities.
	"""
	search(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor

		"""
		Filter the search results.
		"""
		filter: SearchFilter!
	): SearchNodeConnection!
}

"""
Types that can be searched for.
"""
union SearchNode = Team

"""
Search filter for filtering search results.
"""
input SearchFilter {
	"""
	The query string.
	"""
	query: String!

	"""
	The type of entities to search for. If not specified, all types will be searched.
	"""
	type: SearchType
}

"""
Search node connection.
"""
type SearchNodeConnection {
	"""
	Pagination information.
	"""
	pageInfo: PageInfo!

	"""
	List of nodes.
	"""
	nodes: [SearchNode!]!

	"""
	List of edges.
	"""
	edges: [SearchNodeEdge!]!
}

"""
Search node edge.
"""
type SearchNodeEdge {
	"""
	Cursor for this edge that can be used for pagination.
	"""
	cursor: Cursor!

	"""
	The SearchNode.
	"""
	node: SearchNode!
}

"""
A list of possible search types.
"""
enum SearchType {
	"""
	Search for teams.
	"""
	TEAM
}
`, BuiltIn: false},
	{Name: "../schema/secret.graphqls", Input: `extend type Mutation {
	"Create a new secret."
	createSecret(input: CreateSecretInput!): CreateSecretPayload!

	"Add a secret value to a secret."
	addSecretValue(input: AddSecretValueInput!): AddSecretValuePayload!

	"Update a secret value within a secret."
	updateSecretValue(input: UpdateSecretValueInput!): UpdateSecretValuePayload!

	"Remove a secret value from a secret."
	removeSecretValue(input: RemoveSecretValueInput!): RemoveSecretValuePayload!

	"Delete a secret, and the values it contains."
	deleteSecret(input: DeleteSecretInput!): DeleteSecretPayload!
}

extend type Team {
	"Secrets owned by the team."
	secrets(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Ordering options for items returned from the connection."
		orderBy: SecretOrder

		"Filtering options for items returned from the connection."
		filter: SecretFilter
	): SecretConnection!
}

"""
Input for filtering the secrets of a team.
"""
input SecretFilter {
	"""
	Filter by usage of the secret.
	"""
	inUse: Boolean
}

extend type TeamEnvironment {
	"Get a secret by name."
	secret(name: String!): Secret!
}

extend interface Workload {
	"Secrets used by the workload."
	secrets(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): SecretConnection!
}

extend type Application {
	"Secrets used by the application."
	secrets(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): SecretConnection!
}

extend type Job {
	"Secrets used by the job."
	secrets(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): SecretConnection!
}

"A secret is a collection of secret values."
type Secret implements Node {
	"The globally unique ID of the secret."
	id: ID!

	"The name of the secret."
	name: String!

	"The environment the secret exists in."
	environment: TeamEnvironment! @deprecated(reason: "Use the ` + "`" + `teamEnvironment` + "`" + ` field instead.")

	"The environment the secret exists in."
	teamEnvironment: TeamEnvironment!

	"The team that owns the secret."
	team: Team!

	"The secret values contained within the secret."
	values: [SecretValue!]!

	"Applications that use the secret."
	applications(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): ApplicationConnection!

	"Jobs that use the secret."
	jobs(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): JobConnection!

	"Workloads that use the secret."
	workloads(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): WorkloadConnection!

	"Last time the secret was modified."
	lastModifiedAt: Time

	"User who last modified the secret."
	lastModifiedBy: User
}

input SecretValueInput {
	"The name of the secret value."
	name: String!

	"The secret value to set."
	value: String!
}

input CreateSecretInput {
	"The name of the secret."
	name: String!

	"The environment the secret exists in."
	environment: String!

	"The team that owns the secret."
	team: Slug!
}

input AddSecretValueInput {
	"The name of the secret."
	name: String!

	"The environment the secret exists in."
	environment: String!

	"The team that owns the secret."
	team: Slug!

	"The secret value to set."
	value: SecretValueInput!
}

input UpdateSecretValueInput {
	"The name of the secret."
	name: String!

	"The environment the secret exists in."
	environment: String!

	"The team that owns the secret."
	team: Slug!

	"The secret value to set."
	value: SecretValueInput!
}

input RemoveSecretValueInput {
	"The name of the secret."
	secretName: String!

	"The environment the secret exists in."
	environment: String!

	"The team that owns the secret."
	team: Slug!

	"The secret value to remove."
	valueName: String!
}

input DeleteSecretInput {
	"The name of the secret."
	name: String!

	"The environment the secret exists in."
	environment: String!

	"The team that owns the secret."
	team: Slug!
}

type CreateSecretPayload {
	"The created secret."
	secret: Secret
}

input SecretOrder {
	"The field to order items by."
	field: SecretOrderField!

	"The direction to order items by."
	direction: OrderDirection!
}

enum SecretOrderField {
	"Order secrets by name."
	NAME

	"Order secrets by the name of the environment."
	ENVIRONMENT

	"Order secrets by the last time it was modified."
	LAST_MODIFIED_AT
}

type AddSecretValuePayload {
	"The updated secret."
	secret: Secret
}

type UpdateSecretValuePayload {
	"The updated secret."
	secret: Secret
}

type RemoveSecretValuePayload {
	"The updated secret."
	secret: Secret
}

type DeleteSecretPayload {
	"The deleted secret."
	secretDeleted: Boolean
}

type SecretConnection {
	"Pagination information."
	pageInfo: PageInfo!

	"List of nodes."
	nodes: [Secret!]!

	"List of edges."
	edges: [SecretEdge!]!
}

type SecretEdge {
	"Cursor for this edge that can be used for pagination."
	cursor: Cursor!

	"The Secret."
	node: Secret!
}

type SecretValue {
	"The name of the secret value."
	name: String!

	"The secret value itself."
	value: String!
}

extend enum ActivityLogEntryResourceType {
	"All activity log entries related to secrets will use this resource type."
	SECRET
}

type SecretCreatedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}

type SecretValueAddedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String

	"Data associated with the entry."
	data: SecretValueAddedActivityLogEntryData!
}

type SecretValueAddedActivityLogEntryData {
	"The name of the added value."
	valueName: String!
}

type SecretValueUpdatedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String

	"Data associated with the entry."
	data: SecretValueUpdatedActivityLogEntryData!
}

type SecretValueUpdatedActivityLogEntryData {
	"The name of the updated value."
	valueName: String!
}

type SecretValueRemovedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String

	"Data associated with the entry."
	data: SecretValueRemovedActivityLogEntryData!
}

type SecretValueRemovedActivityLogEntryData {
	"The name of the removed value."
	valueName: String!
}

type SecretDeletedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}

extend enum ActivityLogActivityType {
	"Secret was created."
	SECRET_CREATED
	"Secret value was added."
	SECRET_VALUE_ADDED
	"Secret value was updated."
	SECRET_VALUE_UPDATED
	"Secret value was removed."
	SECRET_VALUE_REMOVED
	"Secret was deleted."
	SECRET_DELETED
}
`, BuiltIn: false},
	{Name: "../schema/serviceaccounts.graphqls", Input: `extend type Query {
	"""
	Get a list of service accounts.
	"""
	serviceAccounts(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor
	): ServiceAccountConnection!

	"""
	Returns a service account by its ID.
	"""
	serviceAccount(
		"""
		ID of the service account.
		"""
		id: ID!
	): ServiceAccount!
}

extend type Mutation {
	"""
	Create a service account.
	"""
	createServiceAccount(input: CreateServiceAccountInput!): CreateServiceAccountPayload!

	"""
	Update a service account.
	"""
	updateServiceAccount(input: UpdateServiceAccountInput!): UpdateServiceAccountPayload!

	"""
	Delete a service account.
	"""
	deleteServiceAccount(input: DeleteServiceAccountInput!): DeleteServiceAccountPayload!

	"""
	Assign a role to a service account.
	"""
	assignRoleToServiceAccount(
		input: AssignRoleToServiceAccountInput!
	): AssignRoleToServiceAccountPayload!

	"""
	Revoke a role from a service account.
	"""
	revokeRoleFromServiceAccount(
		input: RevokeRoleFromServiceAccountInput!
	): RevokeRoleFromServiceAccountPayload!

	"""
	Create a service account token.

	The secret is automatically generated, and is returned as a part of the payload for this mutation. The secret can
	not be retrieved at a later stage.

	A service account can have multiple active tokens at the same time.
	"""
	createServiceAccountToken(
		input: CreateServiceAccountTokenInput!
	): CreateServiceAccountTokenPayload!

	"""
	Update a service account token.

	Note that the secret itself can not be updated, only the metadata.
	"""
	updateServiceAccountToken(
		input: UpdateServiceAccountTokenInput!
	): UpdateServiceAccountTokenPayload!

	"""
	Delete a service account token.
	"""
	deleteServiceAccountToken(
		input: DeleteServiceAccountTokenInput!
	): DeleteServiceAccountTokenPayload!
}

input CreateServiceAccountInput {
	"""
	The name of the service account.
	"""
	name: String!

	"""
	A description of the service account.
	"""
	description: String!

	"""
	The team slug that the service account belongs to.
	"""
	teamSlug: Slug
}

input UpdateServiceAccountInput {
	"""
	The ID of the service account to update.
	"""
	serviceAccountID: ID!

	"""
	The new description of the service account.

	If not specified, the description will remain unchanged.
	"""
	description: String
}

input DeleteServiceAccountInput {
	"""
	The ID of the service account to delete.
	"""
	serviceAccountID: ID!
}

input AssignRoleToServiceAccountInput {
	"""
	The ID of the service account to assign the role to.
	"""
	serviceAccountID: ID!

	"""
	The name of the role to assign.
	"""
	roleName: String!
}

input RevokeRoleFromServiceAccountInput {
	"""
	The ID of the service account to revoke the role from.
	"""
	serviceAccountID: ID!

	"""
	The name of the role to revoke.
	"""
	roleName: String!
}

input CreateServiceAccountTokenInput {
	"""
	The ID of the service account to create the token for.
	"""
	serviceAccountID: ID!

	"""
	The name of the service account token.
	"""
	name: String!

	"""
	The description of the service account token.
	"""
	description: String!

	"""
	Optional expiry date of the token.

	If not specified, the token will never expire.
	"""
	expiresAt: Date
}

input UpdateServiceAccountTokenInput {
	"""
	The ID of the service account token to update.
	"""
	serviceAccountTokenID: ID!

	"""
	The new name of the service account token.

	If not specified, the name will remain unchanged.
	"""
	name: String

	"""
	The new description of the service account token.

	If not specified, the description will remain unchanged.
	"""
	description: String
}

input DeleteServiceAccountTokenInput {
	"""
	The ID of the service account token to delete.
	"""
	serviceAccountTokenID: ID!
}

"""
The service account type represents machine-users of the Nais API.

These types of users can be used to automate certain parts of the API, for instance team creation and managing team members.

Service accounts are created using the ` + "`" + `createServiceAccount` + "`" + ` mutation, and authenticate using tokens generated by the ` + "`" + `createServiceAccountToken` + "`" + ` mutation.
"""
type ServiceAccount implements Node {
	"""
	The globally unique ID of the service account.
	"""
	id: ID!

	"""
	The name of the service account.
	"""
	name: String!

	"""
	The description of the service account.
	"""
	description: String!

	"""
	Creation time of the service account.
	"""
	createdAt: Time!

	"""
	When the service account was last updated.
	"""
	updatedAt: Time!

	"""
	When the service account was last used for authentication.
	"""
	lastUsedAt: Time

	"""
	The team that the service account belongs to.
	"""
	team: Team

	"""
	The roles that are assigned to the service account.
	"""
	roles(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor
	): RoleConnection!

	"""
	The service account tokens.
	"""
	tokens(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor
	): ServiceAccountTokenConnection!
}

type CreateServiceAccountPayload {
	"""
	The created service account.
	"""
	serviceAccount: ServiceAccount
}

type UpdateServiceAccountPayload {
	"""
	The updated service account.
	"""
	serviceAccount: ServiceAccount
}

type DeleteServiceAccountPayload {
	"""
	Whether or not the service account was deleted.
	"""
	serviceAccountDeleted: Boolean
}

type AssignRoleToServiceAccountPayload {
	"""
	The service account that had a role assigned.
	"""
	serviceAccount: ServiceAccount
}

type RevokeRoleFromServiceAccountPayload {
	"""
	The service account that had a role revoked.
	"""
	serviceAccount: ServiceAccount
}

type CreateServiceAccountTokenPayload {
	"""
	The service account that the token belongs to.
	"""
	serviceAccount: ServiceAccount

	"""
	The created service account token.
	"""
	serviceAccountToken: ServiceAccountToken

	"""
	The secret of the service account token.

	This value is only returned once, and can not be retrieved at a later stage. If the secret is lost, a new token must be created.

	Once obtained, the secret can be used to authenticate as the service account using the HTTP ` + "`" + `Authorization` + "`" + ` request header:

	` + "`" + `` + "`" + `` + "`" + `
	Authorization: Bearer <secret>
	` + "`" + `` + "`" + `` + "`" + `
	"""
	secret: String
}

type UpdateServiceAccountTokenPayload {
	"""
	The service account that the token belongs to.
	"""
	serviceAccount: ServiceAccount

	"""
	The updated service account token.
	"""
	serviceAccountToken: ServiceAccountToken
}

type DeleteServiceAccountTokenPayload {
	"""
	The service account that the token belonged to.
	"""
	serviceAccount: ServiceAccount

	"""
	Whether or not the service account token was deleted.
	"""
	serviceAccountTokenDeleted: Boolean
}

type ServiceAccountToken implements Node {
	"""
	The globally unique ID of the service account token.
	"""
	id: ID!

	"""
	The name of the service account token.
	"""
	name: String!

	"""
	The description of the service account token.
	"""
	description: String!

	"""
	When the service account token was created.
	"""
	createdAt: Time!

	"""
	When the service account token was last updated.
	"""
	updatedAt: Time!

	"""
	When the service account token was last used for authentication.
	"""
	lastUsedAt: Time

	"""
	Expiry date of the token. If this value is empty the token never expires.
	"""
	expiresAt: Date
}

type ServiceAccountConnection {
	"""
	A list of service accounts.
	"""
	nodes: [ServiceAccount!]!

	"""
	A list of edges.
	"""
	edges: [ServiceAccountEdge!]!

	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
}

type ServiceAccountEdge {
	"""
	The service account.
	"""
	node: ServiceAccount!

	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}

type ServiceAccountTokenConnection {
	"""
	A list of service accounts tokens.
	"""
	nodes: [ServiceAccountToken!]!

	"""
	A list of edges.
	"""
	edges: [ServiceAccountTokenEdge!]!

	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
}

type ServiceAccountTokenEdge {
	"""
	The service account token.
	"""
	node: ServiceAccountToken!

	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}

extend enum ActivityLogEntryResourceType {
	SERVICE_ACCOUNT
}

type ServiceAccountCreatedActivityLogEntry implements ActivityLogEntry & Node {
	"""
	ID of the entry.
	"""
	id: ID!

	"""
	The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user.
	"""
	actor: String!

	"""
	Creation time of the entry.
	"""
	createdAt: Time!

	"""
	Message that summarizes the entry.
	"""
	message: String!

	"""
	Type of the resource that was affected by the action.
	"""
	resourceType: ActivityLogEntryResourceType!

	"""
	Name of the resource that was affected by the action.
	"""
	resourceName: String!

	"""
	The team slug that the entry belongs to.
	"""
	teamSlug: Slug

	"""
	The environment name that the entry belongs to.
	"""
	environmentName: String
}

type ServiceAccountUpdatedActivityLogEntry implements ActivityLogEntry & Node {
	"""
	ID of the entry.
	"""
	id: ID!

	"""
	The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user.
	"""
	actor: String!

	"""
	Creation time of the entry.
	"""
	createdAt: Time!

	"""
	Message that summarizes the entry.
	"""
	message: String!

	"""
	Type of the resource that was affected by the action.
	"""
	resourceType: ActivityLogEntryResourceType!

	"""
	Name of the resource that was affected by the action.
	"""
	resourceName: String!

	"""
	The team slug that the entry belongs to.
	"""
	teamSlug: Slug

	"""
	The environment name that the entry belongs to.
	"""
	environmentName: String

	"""
	Data associated with the entry.
	"""
	data: ServiceAccountUpdatedActivityLogEntryData!
}

type ServiceAccountUpdatedActivityLogEntryData {
	"""
	Fields that were updated.
	"""
	updatedFields: [ServiceAccountUpdatedActivityLogEntryDataUpdatedField!]!
}

type ServiceAccountUpdatedActivityLogEntryDataUpdatedField {
	"""
	The name of the field.
	"""
	field: String!

	"""
	The old value of the field.
	"""
	oldValue: String

	"""
	The new value of the field.
	"""
	newValue: String
}

type ServiceAccountDeletedActivityLogEntry implements ActivityLogEntry & Node {
	"""
	ID of the entry.
	"""
	id: ID!

	"""
	The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user.
	"""
	actor: String!

	"""
	Creation time of the entry.
	"""
	createdAt: Time!

	"""
	Message that summarizes the entry.
	"""
	message: String!

	"""
	Type of the resource that was affected by the action.
	"""
	resourceType: ActivityLogEntryResourceType!

	"""
	Name of the resource that was affected by the action.
	"""
	resourceName: String!

	"""
	The team slug that the entry belongs to.
	"""
	teamSlug: Slug

	"""
	The environment name that the entry belongs to.
	"""
	environmentName: String
}

type RoleAssignedToServiceAccountActivityLogEntry implements ActivityLogEntry & Node {
	"""
	ID of the entry.
	"""
	id: ID!

	"""
	The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user.
	"""
	actor: String!

	"""
	Creation time of the entry.
	"""
	createdAt: Time!

	"""
	Message that summarizes the entry.
	"""
	message: String!

	"""
	Type of the resource that was affected by the action.
	"""
	resourceType: ActivityLogEntryResourceType!

	"""
	Name of the resource that was affected by the action.
	"""
	resourceName: String!

	"""
	The team slug that the entry belongs to.
	"""
	teamSlug: Slug

	"""
	The environment name that the entry belongs to.
	"""
	environmentName: String

	"""
	Data associated with the entry.
	"""
	data: RoleAssignedToServiceAccountActivityLogEntryData!
}

type RoleAssignedToServiceAccountActivityLogEntryData {
	"""
	The added role.
	"""
	roleName: String!
}

type RoleRevokedFromServiceAccountActivityLogEntry implements ActivityLogEntry & Node {
	"""
	ID of the entry.
	"""
	id: ID!

	"""
	The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user.
	"""
	actor: String!

	"""
	Creation time of the entry.
	"""
	createdAt: Time!

	"""
	Message that summarizes the entry.
	"""
	message: String!

	"""
	Type of the resource that was affected by the action.
	"""
	resourceType: ActivityLogEntryResourceType!

	"""
	Name of the resource that was affected by the action.
	"""
	resourceName: String!

	"""
	The team slug that the entry belongs to.
	"""
	teamSlug: Slug

	"""
	The environment name that the entry belongs to.
	"""
	environmentName: String

	"""
	Data associated with the entry.
	"""
	data: RoleRevokedFromServiceAccountActivityLogEntryData!
}

type RoleRevokedFromServiceAccountActivityLogEntryData {
	"""
	The removed role.
	"""
	roleName: String!
}

type ServiceAccountTokenCreatedActivityLogEntry implements ActivityLogEntry & Node {
	"""
	ID of the entry.
	"""
	id: ID!

	"""
	The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user.
	"""
	actor: String!

	"""
	Creation time of the entry.
	"""
	createdAt: Time!

	"""
	Message that summarizes the entry.
	"""
	message: String!

	"""
	Type of the resource that was affected by the action.
	"""
	resourceType: ActivityLogEntryResourceType!

	"""
	Name of the resource that was affected by the action.
	"""
	resourceName: String!

	"""
	The team slug that the entry belongs to.
	"""
	teamSlug: Slug

	"""
	The environment name that the entry belongs to.
	"""
	environmentName: String

	"""
	Data associated with the entry.
	"""
	data: ServiceAccountTokenCreatedActivityLogEntryData!
}

type ServiceAccountTokenCreatedActivityLogEntryData {
	"""
	The name of the service account token.
	"""
	tokenName: String!
}

type ServiceAccountTokenUpdatedActivityLogEntry implements ActivityLogEntry & Node {
	"""
	ID of the entry.
	"""
	id: ID!

	"""
	The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user.
	"""
	actor: String!

	"""
	Creation time of the entry.
	"""
	createdAt: Time!

	"""
	Message that summarizes the entry.
	"""
	message: String!

	"""
	Type of the resource that was affected by the action.
	"""
	resourceType: ActivityLogEntryResourceType!

	"""
	Name of the resource that was affected by the action.
	"""
	resourceName: String!

	"""
	The team slug that the entry belongs to.
	"""
	teamSlug: Slug

	"""
	The environment name that the entry belongs to.
	"""
	environmentName: String

	"""
	Data associated with the entry.
	"""
	data: ServiceAccountTokenUpdatedActivityLogEntryData!
}

type ServiceAccountTokenUpdatedActivityLogEntryData {
	"""
	Fields that were updated.
	"""
	updatedFields: [ServiceAccountTokenUpdatedActivityLogEntryDataUpdatedField!]!
}

type ServiceAccountTokenUpdatedActivityLogEntryDataUpdatedField {
	"""
	The name of the field.
	"""
	field: String!

	"""
	The old value of the field.
	"""
	oldValue: String

	"""
	The new value of the field.
	"""
	newValue: String
}

type ServiceAccountTokenDeletedActivityLogEntry implements ActivityLogEntry & Node {
	"""
	ID of the entry.
	"""
	id: ID!

	"""
	The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user.
	"""
	actor: String!

	"""
	Creation time of the entry.
	"""
	createdAt: Time!

	"""
	Message that summarizes the entry.
	"""
	message: String!

	"""
	Type of the resource that was affected by the action.
	"""
	resourceType: ActivityLogEntryResourceType!

	"""
	Name of the resource that was affected by the action.
	"""
	resourceName: String!

	"""
	The team slug that the entry belongs to.
	"""
	teamSlug: Slug

	"""
	The environment name that the entry belongs to.
	"""
	environmentName: String

	"""
	Data associated with the entry.
	"""
	data: ServiceAccountTokenDeletedActivityLogEntryData!
}

type ServiceAccountTokenDeletedActivityLogEntryData {
	"""
	The name of the service account token.
	"""
	tokenName: String!
}

extend enum ActivityLogActivityType {
	"Service account was created."
	SERVICE_ACCOUNT_CREATED
	"Service account was updated."
	SERVICE_ACCOUNT_UPDATED
	"Service account was deleted."
	SERVICE_ACCOUNT_DELETED
	"Role was assigned to a service account."
	SERVICE_ACCOUNT_ROLE_ASSIGNED
	"Role was revoked from a service account."
	SERVICE_ACCOUNT_ROLE_REVOKED
	"Service account token was created."
	SERVICE_ACCOUNT_TOKEN_CREATED
	"Service account token was updated."
	SERVICE_ACCOUNT_TOKEN_UPDATED
	"Service account token was deleted."
	SERVICE_ACCOUNT_TOKEN_DELETED
}
`, BuiltIn: false},
	{Name: "../schema/servicemaintenance.graphqls", Input: `extend type Mutation {
	"Start maintenance updates for a Valkey instance."
	startValkeyMaintenance(input: StartValkeyMaintenanceInput!): StartValkeyMaintenancePayload
	"Start maintenance updates for an OpenSearch instance."
	startOpenSearchMaintenance(
		input: StartOpenSearchMaintenanceInput!
	): StartOpenSearchMaintenancePayload
}

interface ServiceMaintenanceUpdate {
	"Title of the maintenance."
	title: String!

	"Description of the maintenance."
	description: String
}

type ValkeyMaintenanceUpdate implements ServiceMaintenanceUpdate {
	"Title of the maintenance."
	title: String!

	"Description of the maintenance."
	description: String!

	"Deadline for installing the maintenance. If set, maintenance is mandatory and will be forcibly applied."
	deadline: Time

	"The time when the update will be automatically applied. If set, maintenance is mandatory and will be forcibly applied."
	startAt: Time
}

type ValkeyMaintenance {
	"The day and time of the week when the maintenance will be scheduled."
	window: MaintenanceWindow

	updates(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): ValkeyMaintenanceUpdateConnection!
}

type ValkeyMaintenanceUpdateConnection {
	"Pagination information."
	pageInfo: PageInfo!

	"List of nodes."
	nodes: [ValkeyMaintenanceUpdate!]!

	"List of edges."
	edges: [ValkeyMaintenanceUpdateEdge!]!
}

type ValkeyMaintenanceUpdateEdge {
	"Cursor for this edge that can be used for pagination."
	cursor: Cursor!

	"The ValkeyMaintenanceUpdate."
	node: ValkeyMaintenanceUpdate!
}

extend type Valkey {
	"Fetch maintenances updates for the Valkey instance."
	maintenance: ValkeyMaintenance!
}

type StartValkeyMaintenancePayload {
	error: String
}

input StartValkeyMaintenanceInput {
	serviceName: String!
	teamSlug: Slug!
	environmentName: String!
}

type OpenSearchMaintenanceUpdate implements ServiceMaintenanceUpdate {
	"Title of the maintenance."
	title: String!

	"Description of the maintenance."
	description: String!

	"Deadline for installing the maintenance. If set, maintenance is mandatory and will be forcibly applied."
	deadline: Time

	"The time when the update will be automatically applied. If set, maintenance is mandatory and will be forcibly applied."
	startAt: Time
}

type MaintenanceWindow {
	"Day of the week when the maintenance is scheduled."
	dayOfWeek: Weekday!

	"Time of day when the maintenance is scheduled."
	timeOfDay: TimeOfDay!
}

type OpenSearchMaintenance {
	"The day and time of the week when the maintenance will be scheduled."
	window: MaintenanceWindow

	updates(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): OpenSearchMaintenanceUpdateConnection!
}

type OpenSearchMaintenanceUpdateConnection {
	"Pagination information."
	pageInfo: PageInfo!

	"List of nodes."
	nodes: [OpenSearchMaintenanceUpdate!]!

	"List of edges."
	edges: [OpenSearchMaintenanceUpdateEdge!]!
}

type OpenSearchMaintenanceUpdateEdge {
	"Cursor for this edge that can be used for pagination."
	cursor: Cursor!

	"The OpenSearchMaintenanceUpdate."
	node: OpenSearchMaintenanceUpdate!
}

extend type OpenSearch {
	"Fetch maintenances updates for the OpenSearch instance."
	maintenance: OpenSearchMaintenance!
}

type StartOpenSearchMaintenancePayload {
	error: String
}

input StartOpenSearchMaintenanceInput {
	serviceName: String!
	teamSlug: Slug!
	environmentName: String!
}

type ServiceMaintenanceActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}
`, BuiltIn: false},
	{Name: "../schema/sqlinstance.graphqls", Input: `extend type Team {
	"SQL instances owned by the team."
	sqlInstances(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Ordering options for items returned from the connection."
		orderBy: SqlInstanceOrder
	): SqlInstanceConnection!
}

extend type TeamServiceUtilization {
	sqlInstances: TeamServiceUtilizationSqlInstances!
}

type TeamServiceUtilizationSqlInstances {
	cpu: TeamServiceUtilizationSqlInstancesCPU!
	memory: TeamServiceUtilizationSqlInstancesMemory!
	disk: TeamServiceUtilizationSqlInstancesDisk!
}

type TeamServiceUtilizationSqlInstancesCPU {
	used: Float!
	requested: Float!
	utilization: Float!
}

type TeamServiceUtilizationSqlInstancesMemory {
	used: Int!
	requested: Int!
	utilization: Float!
}

type TeamServiceUtilizationSqlInstancesDisk {
	used: Int!
	requested: Int!
	utilization: Float!
}

extend type TeamEnvironment {
	"SQL instance in the team environment."
	sqlInstance(name: String!): SqlInstance!
}

extend interface Workload {
	"SQL instances referenced by the workload. This does not currently support pagination, but will return all available SQL instances."
	sqlInstances(
		"Ordering options for items returned from the connection."
		orderBy: SqlInstanceOrder
	): SqlInstanceConnection!
}

extend type Application {
	"SQL instances referenced by the application. This does not currently support pagination, but will return all available SQL instances."
	sqlInstances(
		"Ordering options for items returned from the connection."
		orderBy: SqlInstanceOrder
	): SqlInstanceConnection!
}

extend type Job {
	"SQL instances referenced by the job. This does not currently support pagination, but will return all available SQL instances."
	sqlInstances(
		"Ordering options for items returned from the connection."
		orderBy: SqlInstanceOrder
	): SqlInstanceConnection!
}

extend type TeamInventoryCounts {
	sqlInstances: TeamInventoryCountSqlInstances!
}

type TeamInventoryCountSqlInstances {
	"Total number of SQL instances."
	total: Int!
}

type SqlDatabase implements Persistence & Node {
	id: ID!
	name: String!
	team: Team!
	environment: TeamEnvironment! @deprecated(reason: "Use the ` + "`" + `teamEnvironment` + "`" + ` field instead.")
	teamEnvironment: TeamEnvironment!
	charset: String
	collation: String
	deletionPolicy: String
	healthy: Boolean!
}

type SqlInstance implements Persistence & Node {
	id: ID!
	name: String!
	team: Team!
	environment: TeamEnvironment! @deprecated(reason: "Use the ` + "`" + `teamEnvironment` + "`" + ` field instead.")
	teamEnvironment: TeamEnvironment!
	workload: Workload
	cascadingDelete: Boolean!
	connectionName: String
	diskAutoresize: Boolean
	diskAutoresizeLimit: Int
	highAvailability: Boolean!
	healthy: Boolean!
	maintenanceVersion: String
	maintenanceWindow: SqlInstanceMaintenanceWindow
	backupConfiguration: SqlInstanceBackupConfiguration
	projectID: String!
	tier: String!
	version: String
	status: SqlInstanceStatus!
	database: SqlDatabase
	flags(first: Int, after: Cursor, last: Int, before: Cursor): SqlInstanceFlagConnection!
	users(
		first: Int
		after: Cursor
		last: Int
		before: Cursor
		orderBy: SqlInstanceUserOrder
	): SqlInstanceUserConnection!
	metrics: SqlInstanceMetrics!
	state: SqlInstanceState!
	"Issues that affects the instance."
	issues(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Ordering options for items returned from the connection."
		orderBy: IssueOrder

		"Filtering options for items returned from the connection."
		filter: ResourceIssueFilter
	): IssueConnection!
}

type SqlInstanceBackupConfiguration {
	enabled: Boolean
	startTime: String
	retainedBackups: Int
	pointInTimeRecovery: Boolean
	transactionLogRetentionDays: Int
}

type SqlInstanceFlag {
	name: String!
	value: String!
}

type SqlInstanceMaintenanceWindow {
	day: Int!
	hour: Int!
}

type SqlInstanceStatus {
	publicIpAddress: String
	privateIpAddress: String
}

type SqlInstanceUser {
	name: String!
	authentication: String!
}

type SqlInstanceConnection {
	pageInfo: PageInfo!
	nodes: [SqlInstance!]!
	edges: [SqlInstanceEdge!]!
}

type SqlInstanceFlagConnection {
	pageInfo: PageInfo!
	nodes: [SqlInstanceFlag!]!
	edges: [SqlInstanceFlagEdge!]!
}

type SqlInstanceUserConnection {
	pageInfo: PageInfo!
	nodes: [SqlInstanceUser!]!
	edges: [SqlInstanceUserEdge!]!
}

type SqlInstanceEdge {
	cursor: Cursor!
	node: SqlInstance!
}

type SqlInstanceFlagEdge {
	cursor: Cursor!
	node: SqlInstanceFlag!
}

type SqlInstanceUserEdge {
	cursor: Cursor!
	node: SqlInstanceUser!
}

input SqlInstanceOrder {
	field: SqlInstanceOrderField!
	direction: OrderDirection!
}

input SqlInstanceUserOrder {
	field: SqlInstanceUserOrderField!
	direction: OrderDirection!
}

enum SqlInstanceOrderField {
	NAME
	VERSION
	ENVIRONMENT
	COST
	CPU_UTILIZATION
	MEMORY_UTILIZATION
	DISK_UTILIZATION
	STATE
}

enum SqlInstanceUserOrderField {
	NAME
	AUTHENTICATION
}

extend union SearchNode = SqlInstance

extend enum SearchType {
	SQL_INSTANCE
}

type SqlInstanceMetrics {
	cpu: SqlInstanceCpu!
	memory: SqlInstanceMemory!
	disk: SqlInstanceDisk!
}

type SqlInstanceCpu {
	cores: Float!
	utilization: Float!
}

type SqlInstanceMemory {
	quotaBytes: Int!
	utilization: Float!
}

type SqlInstanceDisk {
	quotaBytes: Int!
	utilization: Float!
}

enum SqlInstanceState {
	UNSPECIFIED
	STOPPED
	RUNNABLE
	SUSPENDED
	PENDING_DELETE
	PENDING_CREATE
	MAINTENANCE
	FAILED
}
`, BuiltIn: false},
	{Name: "../schema/teams.graphqls", Input: `extend type Query {
	"Get a list of teams."
	teams(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Ordering options for items returned from the connection."
		orderBy: TeamOrder

		"Filter options for the teams returned from the connection."
		filter: TeamFilter
	): TeamConnection!

	"Get a team by its slug."
	team(slug: Slug!): Team!
}

extend type Mutation {
	"""
	Create a new Nais team

	The user creating the team will be granted team ownership, unless the user is a service account, in which case the
	team will not get an initial owner. To add one or more owners to the team, refer to the ` + "`" + `addTeamOwners` + "`" + ` mutation.

	Creation of a team will also create external resources for the team, which will be managed by the Nais API
	reconcilers. This will be done asynchronously.

	Refer to the [official Nais documentation](https://docs.nais.io/explanations/team/) for more information regarding
	Nais teams.
	"""
	createTeam(input: CreateTeamInput!): CreateTeamPayload!

	"""
	Update an existing Nais team

	This mutation can be used to update the team purpose and the main Slack channel. It is not possible to update the
	team slug.
	"""
	updateTeam(input: UpdateTeamInput!): UpdateTeamPayload!

	"""
	Update an environment for a team
	"""
	updateTeamEnvironment(input: UpdateTeamEnvironmentInput!): UpdateTeamEnvironmentPayload!

	"""
	Request a key that can be used to trigger a team deletion process

	Deleting a team is a two step process. First an owner of the team (or an admin) must request a team deletion key,
	and then a second owner of the team (or an admin) must confirm the deletion using the confirmTeamDeletion mutation.

	The returned delete key is valid for an hour, and can only be used once.

	Note: Service accounts are not allowed to request team delete keys.
	"""
	requestTeamDeletion(input: RequestTeamDeletionInput!): RequestTeamDeletionPayload!

	"""
	Confirm a team deletion

	This will start the actual team deletion process, which will be done in an asynchronous manner. All external
	entities controlled by Nais will also be deleted.

	WARNING: There is no going back after starting this process.

	Note: Service accounts are not allowed to confirm a team deletion.
	"""
	confirmTeamDeletion(input: ConfirmTeamDeletionInput!): ConfirmTeamDeletionPayload!

	"""
	Add a team member

	If the user is already a member or an owner of the team, the mutation will result in an error.
	"""
	addTeamMember(input: AddTeamMemberInput!): AddTeamMemberPayload!

	"""
	Remove a team member

	If the user is not already a member or an owner of the team, the mutation will result in an error.
	"""
	removeTeamMember(input: RemoveTeamMemberInput!): RemoveTeamMemberPayload!

	"""
	Assign a role to a team member

	The user must already be a member of the team for this mutation to succeed.
	"""
	setTeamMemberRole(input: SetTeamMemberRoleInput!): SetTeamMemberRolePayload!
}

"""
The team type represents a team on the [Nais platform](https://nais.io/).

Learn more about what Nais teams are and what they can be used for in the [official Nais documentation](https://docs.nais.io/explanations/team/).

External resources (e.g. entraIDGroupID, gitHubTeamSlug) are managed by [Nais API reconcilers](https://github.com/nais/api-reconcilers).
"""
type Team implements Node {
	"The globally unique ID of the team."
	id: ID!

	"Unique slug of the team."
	slug: Slug!

	"Main Slack channel for the team."
	slackChannel: String!

	"Purpose of the team."
	purpose: String!

	"External resources for the team."
	externalResources: TeamExternalResources!

	"Get a specific member of the team."
	member(email: String!): TeamMember!

	"Team members."
	members(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Ordering options for items returned from the connection."
		orderBy: TeamMemberOrder
	): TeamMemberConnection!

	"Timestamp of the last successful synchronization of the team."
	lastSuccessfulSync: Time

	"Whether or not the team is currently being deleted."
	deletionInProgress: Boolean!

	"Whether or not the viewer is an owner of the team."
	viewerIsOwner: Boolean!

	"Whether or not the viewer is a member of the team."
	viewerIsMember: Boolean!

	"Environments for the team."
	environments: [TeamEnvironment!]!

	"Get a specific environment for the team."
	environment(name: String!): TeamEnvironment!

	"Get a delete key for the team."
	deleteKey(key: String!): TeamDeleteKey!

	"Overall inventory of resources for the team."
	inventoryCounts: TeamInventoryCounts!
}

type TeamEnvironment implements Node {
	"The globally unique ID of the team environment."
	id: ID!

	"Name of the team environment."
	name: String! @deprecated(reason: "Use the ` + "`" + `environment` + "`" + ` field to get the environment name.")

	"The GCP project ID for the team environment."
	gcpProjectID: String

	"The Slack alerts channel for the team environment."
	slackAlertsChannel: String!

	"The connected team."
	team: Team!
}

type TeamMember {
	"Team instance."
	team: Team!

	"User instance."
	user: User!

	"The role that the user has in the team."
	role: TeamMemberRole!
}

type CreateTeamPayload {
	"The newly created team."
	team: Team
}

type UpdateTeamPayload {
	"The updated team."
	team: Team
}

type UpdateTeamEnvironmentPayload {
	"The updated team environment."
	environment: TeamEnvironment @deprecated(reason: "Use the ` + "`" + `teamEnvironment` + "`" + ` field instead.")

	"The updated team environment."
	teamEnvironment: TeamEnvironment
}

type RequestTeamDeletionPayload {
	"The delete key for the team. This can be used to confirm the deletion of the team."
	key: TeamDeleteKey
}

type ConfirmTeamDeletionPayload {
	"Whether or not the asynchronous deletion process was started."
	deletionStarted: Boolean
}

type AddTeamMemberPayload {
	"The added team member."
	member: TeamMember
}

type RemoveTeamMemberPayload {
	"The user that was removed from the team."
	user: User

	"The team that the member was removed from."
	team: Team
}

type SetTeamMemberRolePayload {
	"The updated team member."
	member: TeamMember
}

type TeamDeleteKey {
	"The unique key used to confirm the deletion of a team."
	key: String!

	"The creation timestamp of the key."
	createdAt: Time!

	"Expiration timestamp of the key."
	expires: Time!

	"The user who created the key."
	createdBy: User!

	"The team the delete key is for."
	team: Team!
}

type TeamConnection {
	"Pagination information."
	pageInfo: PageInfo!

	"List of nodes."
	nodes: [Team!]!

	"List of edges."
	edges: [TeamEdge!]!
}

type TeamMemberConnection {
	"Pagination information."
	pageInfo: PageInfo!

	"List of nodes."
	nodes: [TeamMember!]!

	"List of edges."
	edges: [TeamMemberEdge!]!
}

type TeamEdge {
	"Cursor for this edge that can be used for pagination."
	cursor: Cursor!

	"The team."
	node: Team!
}

type TeamMemberEdge {
	"Cursor for this edge that can be used for pagination."
	cursor: Cursor!

	"The team member."
	node: TeamMember!
}

type TeamInventoryCounts

input CreateTeamInput {
	"""
	Unique team slug.

	After creation, this value can not be changed. Also, after a potential deletion of the team, the slug can not be
	reused, so please choose wisely.
	"""
	slug: Slug!

	"""
	The purpose / description of the team.

	What is the team for? What is the team working on? This value is meant for human consumption, and should be enough
	to give a newcomer an idea of what the team is about.
	"""
	purpose: String!

	"""
	The main Slack channel for the team.

	Where does the team communicate? This value is used to link to the team's main Slack channel.
	"""
	slackChannel: String!
}

input UpdateTeamInput {
	"Slug of the team to update."
	slug: Slug!

	"""
	An optional new purpose / description of the team.

	When omitted the existing value will not be updated.
	"""
	purpose: String

	"""
	An optional new Slack channel for the team.

	When omitted the existing value will not be updated.
	"""
	slackChannel: String
}

input UpdateTeamEnvironmentInput {
	"Slug of the team to update."
	slug: Slug!

	"Name of the environment to update."
	environmentName: String!

	"Slack alerts channel for the environment. Set to an empty string to remove the existing value."
	slackAlertsChannel: String
}

"Ordering options when fetching teams."
input TeamOrder {
	"The field to order items by."
	field: TeamOrderField!

	"The direction to order items by."
	direction: OrderDirection!
}

"Ordering options for team members."
input TeamMemberOrder {
	"The field to order items by."
	field: TeamMemberOrderField!

	"The direction to order items by."
	direction: OrderDirection!
}

input RequestTeamDeletionInput {
	"Slug of the team to request a team deletion key for."
	slug: Slug!
}

input ConfirmTeamDeletionInput {
	"Slug of the team to confirm deletion for."
	slug: Slug!

	"Deletion key, acquired using the requestTeamDeletion mutation."
	key: String!
}

input AddTeamMemberInput {
	"Slug of the team that should receive a new member."
	teamSlug: Slug!

	"The email address of the user to add to the team."
	userEmail: String!

	"The role that the user will have in the team."
	role: TeamMemberRole!
}

input RemoveTeamMemberInput {
	"Slug of the team that the member should be removed from."
	teamSlug: Slug!

	"The email address of the user to remove from the team."
	userEmail: String!
}

input SetTeamMemberRoleInput {
	"The slug of the team."
	teamSlug: Slug!

	"The email address of the user."
	userEmail: String!

	"The role to assign."
	role: TeamMemberRole!
}

"Possible fields to order teams by."
enum TeamOrderField {
	"The unique slug of the team."
	SLUG
}

"Possible fields to order team members by."
enum TeamMemberOrderField {
	"The name of user."
	NAME

	"The email address of the user."
	EMAIL

	"The role the user has in the team."
	ROLE
}

"Team member roles."
enum TeamMemberRole {
	"Regular member, read only access."
	MEMBER

	"Team owner, full access to the team."
	OWNER
}

extend enum ActivityLogEntryResourceType {
	"All activity log entries related to teams will use this resource type."
	TEAM
}

type TeamCreatedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}

type TeamUpdatedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String

	"Data associated with the update."
	data: TeamUpdatedActivityLogEntryData!
}

type TeamUpdatedActivityLogEntryData {
	"Fields that were updated."
	updatedFields: [TeamUpdatedActivityLogEntryDataUpdatedField!]!
}

type TeamUpdatedActivityLogEntryDataUpdatedField {
	"The name of the field."
	field: String!

	"The old value of the field."
	oldValue: String

	"The new value of the field."
	newValue: String
}

type TeamCreateDeleteKeyActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}

type TeamConfirmDeleteKeyActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}

type TeamMemberAddedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String

	"Data associated with the action."
	data: TeamMemberAddedActivityLogEntryData!
}

type TeamMemberAddedActivityLogEntryData {
	"The role that the user was added with."
	role: TeamMemberRole!

	"The ID of the user that was added."
	userID: ID!

	"The email address of the user that was added."
	userEmail: String!
}

type TeamMemberRemovedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String

	"Data associated with the action."
	data: TeamMemberRemovedActivityLogEntryData!
}

type TeamMemberRemovedActivityLogEntryData {
	"The ID of the user that was removed."
	userID: ID!

	"The email address of the user that was removed."
	userEmail: String!
}

type TeamMemberSetRoleActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String

	"Data associated with the action."
	data: TeamMemberSetRoleActivityLogEntryData!
}

type TeamMemberSetRoleActivityLogEntryData {
	"The role that the user was assigned."
	role: TeamMemberRole!

	"The ID of the user that was added."
	userID: ID!

	"The email address of the user that was added."
	userEmail: String!
}

type TeamEnvironmentUpdatedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String

	"Data associated with the action."
	data: TeamEnvironmentUpdatedActivityLogEntryData!
}

type TeamEnvironmentUpdatedActivityLogEntryData {
	"Fields that were updated."
	updatedFields: [TeamEnvironmentUpdatedActivityLogEntryDataUpdatedField!]!
}

type TeamEnvironmentUpdatedActivityLogEntryDataUpdatedField {
	"The name of the field."
	field: String!

	"The old value of the field."
	oldValue: String

	"The new value of the field."
	newValue: String
}

type TeamExternalResources {
	"The Entra ID (f.k.a. Azure AD) group for the team."
	entraIDGroup: TeamEntraIDGroup

	"The teams GitHub team."
	gitHubTeam: TeamGitHubTeam

	"The Google group for the team."
	googleGroup: TeamGoogleGroup

	"Google Artifact Registry."
	googleArtifactRegistry: TeamGoogleArtifactRegistry

	"CDN bucket."
	cdn: TeamCDN
}

type TeamCDN {
	"The CDN bucket for the team."
	bucket: String!
}

type TeamEntraIDGroup {
	"The ID of the Entra ID (f.k.a. Azure AD) group for the team."
	groupID: String!
}

type TeamGitHubTeam {
	"The slug of the GitHub team."
	slug: String!
}

type TeamGoogleGroup {
	"The email address of the Google Workspace group for the team."
	email: String!
}

type TeamGoogleArtifactRegistry {
	"The Google Artifact Registry for the team."
	repository: String!
}

"""
Input for filtering teams.
"""
input TeamFilter {
	"""
	Filter teams by the existence of workloads.
	"""
	hasWorkloads: Boolean
}

extend enum ActivityLogActivityType {
	"Team was created."
	TEAM_CREATED
	"Team was updated."
	TEAM_UPDATED
	"Team delete key was created."
	TEAM_CREATE_DELETE_KEY
	"Team delete key was confirmed."
	TEAM_CONFIRM_DELETE_KEY
	"Team member was added."
	TEAM_MEMBER_ADDED
	"Team member was removed."
	TEAM_MEMBER_REMOVED
	"Team member role was set."
	TEAM_MEMBER_SET_ROLE
	"Team environment was updated."
	TEAM_ENVIRONMENT_UPDATED
}
`, BuiltIn: false},
	{Name: "../schema/unleash.graphqls", Input: `extend type Mutation {
	"""
	Create a new Unleash instance.

	This mutation will create a new Unleash instance for the given team. The team
	will be set as owner of the Unleash instance and will be able to manage it.
	"""
	createUnleashForTeam(input: CreateUnleashForTeamInput!): CreateUnleashForTeamPayload!

	"""
	Add team to the list of teams that can access the Unleash instance.
	"""
	allowTeamAccessToUnleash(input: AllowTeamAccessToUnleashInput!): AllowTeamAccessToUnleashPayload!

	"""
	Remove team from the list of teams that can access the Unleash instance.
	"""
	revokeTeamAccessToUnleash(
		input: RevokeTeamAccessToUnleashInput!
	): RevokeTeamAccessToUnleashPayload!
}

input CreateUnleashForTeamInput {
	teamSlug: Slug!
}

type CreateUnleashForTeamPayload {
	unleash: UnleashInstance
}

input AllowTeamAccessToUnleashInput {
	teamSlug: Slug!
	allowedTeamSlug: Slug!
}

type AllowTeamAccessToUnleashPayload {
	unleash: UnleashInstance
}

input RevokeTeamAccessToUnleashInput {
	teamSlug: Slug!
	revokedTeamSlug: Slug!
}

type RevokeTeamAccessToUnleashPayload {
	unleash: UnleashInstance
}

extend type Team {
	unleash: UnleashInstance
}

type UnleashInstance implements Node {
	id: ID!
	name: String!
	version: String!
	allowedTeams(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): TeamConnection!
	webIngress: String!
	apiIngress: String!
	metrics: UnleashInstanceMetrics!
	ready: Boolean!
}

type UnleashInstanceMetrics {
	toggles: Int!
	apiTokens: Int!
	cpuUtilization: Float!
	cpuRequests: Float!
	memoryUtilization: Float!
	memoryRequests: Float!
}

extend enum ActivityLogEntryResourceType {
	"All activity log entries related to unleash will use this resource type."
	UNLEASH
}

type UnleashInstanceCreatedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}

type UnleashInstanceUpdatedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String

	"Data associated with the update."
	data: UnleashInstanceUpdatedActivityLogEntryData!
}

type UnleashInstanceUpdatedActivityLogEntryData {
	"Revoked team slug."
	revokedTeamSlug: Slug

	"Allowed team slug."
	allowedTeamSlug: Slug
}

extend enum ActivityLogActivityType {
	"Unleash instance was created."
	UNLEASH_INSTANCE_CREATED

	"Unleash instance was updated."
	UNLEASH_INSTANCE_UPDATED
}
`, BuiltIn: false},
	{Name: "../schema/users.graphqls", Input: `extend type Query {
	"""
	Get a list of users.
	"""
	users(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor

		"""
		Ordering options for items returned from the connection.
		"""
		orderBy: UserOrder
	): UserConnection!

	"""
	Get a user by an identifier.
	"""
	user(email: String): User!

	"""
	The currently authenticated user.
	"""
	me: AuthenticatedUser!
}

"""
The user type represents a user of the Nais platform and the Nais GraphQL API.
"""
type User implements Node {
	"""
	The globally unique ID of the user.
	"""
	id: ID!

	"""
	The email address of the user.
	"""
	email: String!

	"""
	The full name of the user.
	"""
	name: String!

	"""
	The external ID of the user. This value is managed by the Nais API user synchronization.
	"""
	externalID: String!

	"""
	List of teams the user is connected to.
	"""
	teams(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor

		"""
		Ordering options for items returned from the connection.
		"""
		orderBy: UserTeamOrder
	): TeamMemberConnection!

	"""
	True if the user is global admin.
	"""
	isAdmin: Boolean!
}

"""
User connection.
"""
type UserConnection {
	"""
	Pagination information.
	"""
	pageInfo: PageInfo!

	"""
	List of nodes.
	"""
	nodes: [User!]!

	"""
	List of edges.
	"""
	edges: [UserEdge!]!
}

"""
User edge.
"""
type UserEdge {
	"""
	Cursor for this edge that can be used for pagination.
	"""
	cursor: Cursor!

	"""
	The user.
	"""
	node: User!
}

"""
Ordering options when fetching users.
"""
input UserOrder {
	"""
	The field to order items by.
	"""
	field: UserOrderField!

	"""
	The direction to order items by.
	"""
	direction: OrderDirection!
}

"""
Ordering options when fetching the teams a user is connected to.
"""
input UserTeamOrder {
	"""
	The field to order items by.
	"""
	field: UserTeamOrderField!

	"""
	The direction to order items by.
	"""
	direction: OrderDirection!
}

"""
Possible fields to order users by.
"""
enum UserOrderField {
	"""
	The name of the user.
	"""
	NAME

	"""
	The email address of the user.
	"""
	EMAIL
}

"""
Possible fields to order user teams by.
"""
enum UserTeamOrderField {
	"""
	The unique slug of the team.
	"""
	TEAM_SLUG
}

"""
Authenticated user type.
"""
union AuthenticatedUser = User | ServiceAccount
`, BuiltIn: false},
	{Name: "../schema/usersync.graphqls", Input: `extend type Query {
	"""
	Log entries from the user sync process.
	"""
	userSyncLog(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor
	): UserSyncLogEntryConnection!
}

"""
Interface for user sync log entries.
"""
interface UserSyncLogEntry implements Node {
	"""
	ID of the entry.
	"""
	id: ID!

	"""
	Creation time of the entry.
	"""
	createdAt: Time!

	"""
	Message that summarizes the log entry.
	"""
	message: String!

	"""
	The ID of the affected user.
	"""
	userID: ID!

	"""
	The name of the affected user.
	"""
	userName: String!

	"""
	The email address of the affected user.
	"""
	userEmail: String!
}

"""
User created log entry.
"""
type UserCreatedUserSyncLogEntry implements UserSyncLogEntry & Node {
	"""
	ID of the entry.
	"""
	id: ID!

	"""
	Creation time of the entry.
	"""
	createdAt: Time!

	"""
	Message that summarizes the log entry.
	"""
	message: String!

	"""
	The ID of the created user.
	"""
	userID: ID!

	"""
	The name of the created user.
	"""
	userName: String!

	"""
	The email address of the created user.
	"""
	userEmail: String!
}

"""
User updated log entry.
"""
type UserUpdatedUserSyncLogEntry implements UserSyncLogEntry & Node {
	"""
	ID of the entry.
	"""
	id: ID!

	"""
	Creation time of the entry.
	"""
	createdAt: Time!

	"""
	Message that summarizes the log entry.
	"""
	message: String!

	"""
	The ID of the updated user.
	"""
	userID: ID!

	"""
	The name of the updated user.
	"""
	userName: String!

	"""
	The email address of the updated user.
	"""
	userEmail: String!

	"""
	The old name of the user.
	"""
	oldUserName: String!

	"""
	The old email address of the user.
	"""
	oldUserEmail: String!
}

"""
User deleted log entry.
"""
type UserDeletedUserSyncLogEntry implements UserSyncLogEntry & Node {
	"""
	ID of the entry.
	"""
	id: ID!

	"""
	Creation time of the entry.
	"""
	createdAt: Time!

	"""
	Message that summarizes the log entry.
	"""
	message: String!

	"""
	The ID of the deleted user.
	"""
	userID: ID!

	"""
	The name of the deleted user.
	"""
	userName: String!

	"""
	The email address of the deleted user.
	"""
	userEmail: String!
}

"""
Assigned role to user log entry.
"""
type RoleAssignedUserSyncLogEntry implements UserSyncLogEntry & Node {
	"""
	ID of the entry.
	"""
	id: ID!

	"""
	Creation time of the entry.
	"""
	createdAt: Time!

	"""
	Message that summarizes the log entry.
	"""
	message: String!

	"""
	The ID of the user that was assigned a role.
	"""
	userID: ID!

	"""
	The name of the user that was assigned a role.
	"""
	userName: String!

	"""
	The email address of the user that was assigned a role.
	"""
	userEmail: String!

	"""
	The name of the assigned role.
	"""
	roleName: String!
}

"""
Revoked role from user log entry.
"""
type RoleRevokedUserSyncLogEntry implements UserSyncLogEntry & Node {
	"""
	ID of the entry.
	"""
	id: ID!

	"""
	Creation time of the entry.
	"""
	createdAt: Time!

	"""
	Message that summarizes the log entry.
	"""
	message: String!

	"""
	The ID of the user that got a role revoked.
	"""
	userID: ID!

	"""
	The name of the user that got a role revoked.
	"""
	userName: String!

	"""
	The email address of the user that got a role revoked.
	"""
	userEmail: String!

	"""
	The name of the revoked role.
	"""
	roleName: String!
}

"""
User sync log entry connection.
"""
type UserSyncLogEntryConnection {
	"""
	Pagination information.
	"""
	pageInfo: PageInfo!

	"""
	List of nodes.
	"""
	nodes: [UserSyncLogEntry!]!

	"""
	List of edges.
	"""
	edges: [UserSyncLogEntryEdge!]!
}

"""
User sync log edge.
"""
type UserSyncLogEntryEdge {
	"""
	Cursor for this edge that can be used for pagination.
	"""
	cursor: Cursor!

	"""
	The log entry.
	"""
	node: UserSyncLogEntry!
}
`, BuiltIn: false},
	{Name: "../schema/utilization.graphqls", Input: `extend type Application {
	utilization: WorkloadUtilization!
}

extend type Team {
	workloadUtilization(resourceType: UtilizationResourceType!): [WorkloadUtilizationData]!
	serviceUtilization: TeamServiceUtilization!
}

extend type ApplicationInstance {
	instanceUtilization(resourceType: UtilizationResourceType!): ApplicationInstanceUtilization!
}

extend type Query {
	teamsUtilization(resourceType: UtilizationResourceType!): [TeamUtilizationData!]!
}

type TeamServiceUtilization

type WorkloadUtilizationData {
	"The workload."
	workload: Workload!

	"The requested amount of resources"
	requested: Float!

	"The current resource usage."
	used: Float!
}

type WorkloadUtilization {
	"Get the current usage for the requested resource type."
	current(resourceType: UtilizationResourceType!): Float!

	"Gets the requested amount of resources for the requested resource type."
	requested(resourceType: UtilizationResourceType!): Float!

	"Gets the requested amount of resources between start and end with step size for given resource type."
	requestedSeries(input: WorkloadUtilizationSeriesInput!): [UtilizationSample!]!

	"Gets the limit of the resources for the requested resource type."
	limit(resourceType: UtilizationResourceType!): Float

	"Gets the limit of the resources between start and end with step size for given resource type."
	limitSeries(input: WorkloadUtilizationSeriesInput!): [UtilizationSample!]!

	"Usage between start and end with step size for given resource type."
	series(input: WorkloadUtilizationSeriesInput!): [UtilizationSample!]!

	"Gets the recommended amount of resources for the workload."
	recommendations: WorkloadUtilizationRecommendations!
}

type WorkloadUtilizationRecommendations {
	cpuRequestCores: Float!
	memoryRequestBytes: Int!
	memoryLimitBytes: Int!
}

input WorkloadUtilizationSeriesInput {
	"Fetch resource usage from this timestamp."
	start: Time!

	"Fetch resource usage until this timestamp."
	end: Time!

	"Resource type."
	resourceType: UtilizationResourceType!
}

"Resource type."
enum UtilizationResourceType {
	CPU
	MEMORY
}

"Resource utilization type."
type UtilizationSample {
	"Timestamp of the value."
	timestamp: Time!

	"Value of the used resource at the given timestamp."
	value: Float!

	"The instance for the utilization data."
	instance: String!
}

type TeamUtilizationData {
	"The team."
	team: Team!

	"The requested amount of resources"
	requested: Float!

	"The current resource usage."
	used: Float!

	"The environment for the utilization data."
	environment: TeamEnvironment! @deprecated(reason: "Use the ` + "`" + `teamEnvironment` + "`" + ` field instead.")

	"The environment for the utilization data."
	teamEnvironment: TeamEnvironment!
}

type ApplicationInstanceUtilization {
	"Get the current usage for the requested resource type."
	current: Float!
}
`, BuiltIn: false},
	{Name: "../schema/valkey.graphqls", Input: `extend type Team {
	"Valkey instances owned by the team."
	valkeys(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Ordering options for items returned from the connection."
		orderBy: ValkeyOrder
	): ValkeyConnection!
}

extend type TeamEnvironment {
	"Valkey instance in the team environment."
	valkey(name: String!): Valkey!
}

extend interface Workload {
	"Valkey instances referenced by the workload. This does not currently support pagination, but will return all available Valkey instances."
	valkeys(
		"Ordering options for items returned from the connection."
		orderBy: ValkeyOrder
	): ValkeyConnection!
}

extend type Application {
	"Valkey instances referenced by the application. This does not currently support pagination, but will return all available Valkey instances."
	valkeys(
		"Ordering options for items returned from the connection."
		orderBy: ValkeyOrder
	): ValkeyConnection!
}

extend type Job {
	"Valkey instances referenced by the job. This does not currently support pagination, but will return all available Valkey instances."
	valkeys(
		"Ordering options for items returned from the connection."
		orderBy: ValkeyOrder
	): ValkeyConnection!
}

extend type TeamInventoryCounts {
	valkeys: TeamInventoryCountValkeys!
}

type TeamInventoryCountValkeys {
	"Total number of Valkey instances."
	total: Int!
}

type Valkey implements Persistence & Node {
	id: ID!
	name: String!
	terminationProtection: Boolean!
	team: Team!
	environment: TeamEnvironment! @deprecated(reason: "Use the ` + "`" + `teamEnvironment` + "`" + ` field instead.")
	teamEnvironment: TeamEnvironment!
	access(
		first: Int
		after: Cursor
		last: Int
		before: Cursor
		orderBy: ValkeyAccessOrder
	): ValkeyAccessConnection!
	workload: Workload
		@deprecated(reason: "Owners of valkeys have been removed, so this will always be null.")
	state: ValkeyState!
	"Availability tier for the Valkey instance."
	tier: ValkeyTier!
	"Available memory for the Valkey instance."
	memory: ValkeyMemory!
	maxMemoryPolicy: ValkeyMaxMemoryPolicy
	"Issues that affects the instance."
	issues(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Ordering options for items returned from the connection."
		orderBy: IssueOrder

		"Filtering options for items returned from the connection."
		filter: ResourceIssueFilter
	): IssueConnection!
}

enum ValkeyState {
	POWEROFF
	REBALANCING
	REBUILDING
	RUNNING
	UNKNOWN
}

type ValkeyAccess {
	workload: Workload!
	access: String!
}

type ValkeyAccessConnection {
	pageInfo: PageInfo!
	nodes: [ValkeyAccess!]!
	edges: [ValkeyAccessEdge!]!
}

type ValkeyConnection {
	pageInfo: PageInfo!
	nodes: [Valkey!]!
	edges: [ValkeyEdge!]!
}

type ValkeyAccessEdge {
	cursor: Cursor!
	node: ValkeyAccess!
}

type ValkeyEdge {
	cursor: Cursor!
	node: Valkey!
}

input ValkeyAccessOrder {
	field: ValkeyAccessOrderField!
	direction: OrderDirection!
}

input ValkeyOrder {
	field: ValkeyOrderField!
	direction: OrderDirection!
}

enum ValkeyAccessOrderField {
	ACCESS
	WORKLOAD
}

enum ValkeyOrderField {
	NAME
	ENVIRONMENT
	STATE
}

extend union SearchNode = Valkey

extend enum SearchType {
	VALKEY
}

enum ValkeyTier {
	SINGLE_NODE
	HIGH_AVAILABILITY
}

enum ValkeyMemory {
	GB_1
	GB_4
	GB_8
	GB_14
	GB_28
	GB_56
	GB_112
	GB_200
}

enum ValkeyMaxMemoryPolicy {
	"Keeps frequently used keys; removes least frequently used (LFU) keys"
	ALLKEYS_LFU

	"Keeps most recently used keys; removes least recently used (LRU) keys"
	ALLKEYS_LRU

	"Randomly removes keys to make space for the new data added."
	ALLKEYS_RANDOM

	"New values aren't saved when memory limit is reached. When a database uses replication, this applies to the primary database."
	NO_EVICTION

	"Removes least frequently used keys with a TTL set."
	VOLATILE_LFU

	"Removes least recently used keys with a time-to-live (TTL) set."
	VOLATILE_LRU

	"Randomly removes keys with a TTL set."
	VOLATILE_RANDOM

	"Removes keys with a TTL set, the keys with the shortest remaining time-to-live value first."
	VOLATILE_TTL
}

input CreateValkeyInput {
	"Name of the Valkey instance."
	name: String!
	"The environment name that the entry belongs to."
	environmentName: String!
	"The team that owns the Valkey instance."
	teamSlug: Slug!
	"Tier of the Valkey instance."
	tier: ValkeyTier!
	"Available memory for the Valkey instance."
	memory: ValkeyMemory!
	"Maximum memory policy for the Valkey instance."
	maxMemoryPolicy: ValkeyMaxMemoryPolicy
}

type CreateValkeyPayload {
	"Valkey instance that was created."
	valkey: Valkey!
}

input UpdateValkeyInput {
	"Name of the Valkey instance."
	name: String!
	"The environment name that the entry belongs to."
	environmentName: String!
	"The team that owns the Valkey instance."
	teamSlug: Slug!
	"Tier of the Valkey instance."
	tier: ValkeyTier!
	"Available memory for the Valkey instance."
	memory: ValkeyMemory!
	"Maximum memory policy for the Valkey instance."
	maxMemoryPolicy: ValkeyMaxMemoryPolicy
}

type UpdateValkeyPayload {
	"Valkey instance that was updated."
	valkey: Valkey!
}

input DeleteValkeyInput {
	"Name of the Valkey instance."
	name: String!
	"The environment name that the entry belongs to."
	environmentName: String!
	"The team that owns the Valkey instance."
	teamSlug: Slug!
}

type DeleteValkeyPayload {
	"Whether or not the job was deleted."
	valkeyDeleted: Boolean
}

extend type Mutation {
	"Create a new Valkey instance."
	createValkey(input: CreateValkeyInput!): CreateValkeyPayload!
	"Update an existing Valkey instance."
	updateValkey(input: UpdateValkeyInput!): UpdateValkeyPayload!
	"Delete an existing Valkey instance."
	deleteValkey(input: DeleteValkeyInput!): DeleteValkeyPayload!
}

extend enum ActivityLogEntryResourceType {
	"All activity log entries related to Valkeys will use this resource type."
	VALKEY
}

extend enum ActivityLogActivityType {
	"Valkey was created."
	VALKEY_CREATED
	"Valkey was updated."
	VALKEY_UPDATED
	"Valkey was deleted."
	VALKEY_DELETED
	"Started service maintenance on Valkey instance."
	VALKEY_MAINTENANCE_STARTED
}

type ValkeyCreatedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}

type ValkeyUpdatedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String

	"""
	Data associated with the entry.
	"""
	data: ValkeyUpdatedActivityLogEntryData!
}

type ValkeyUpdatedActivityLogEntryDataUpdatedField {
	"""
	The name of the field.
	"""
	field: String!

	"""
	The old value of the field.
	"""
	oldValue: String

	"""
	The new value of the field.
	"""
	newValue: String
}

type ValkeyUpdatedActivityLogEntryData {
	updatedFields: [ValkeyUpdatedActivityLogEntryDataUpdatedField!]!
}

type ValkeyDeletedActivityLogEntry implements ActivityLogEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: ActivityLogEntryResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}
`, BuiltIn: false},
	{Name: "../schema/vulnerability.graphqls", Input: `extend type Mutation {
	"""
	Updates a vulnerability
	This mutation is currently unstable and may change in the future.
	"""
	updateImageVulnerability(input: UpdateImageVulnerabilityInput!): UpdateImageVulnerabilityPayload!
}

extend type Query {
	"Get the vulnerability summary history for all teams."
	imageVulnerabilityHistory(
		"Get vulnerability summary from given date until today."
		from: Date!
	): ImageVulnerabilityHistory!

	"Get the vulnerability summary for the tenant."
	vulnerabilitySummary: TenantVulnerabilitySummary!
}

extend interface Workload {
	"Get the vulnerability summary history for workload."
	imageVulnerabilityHistory(
		"Get vulnerability summary from given date until today."
		from: Date!
	): ImageVulnerabilityHistory!
}

extend enum TeamOrderField {
	"The accumulated risk score of the teams workloads."
	RISK_SCORE
	"The accumulated number of critical vulnerabilities of the teams workloads."
	CRITICAL_VULNERABILITIES
	"The accumulated number of high vulnerabilities of the teams workloads."
	HIGH_VULNERABILITIES
	"The accumulated number of medium vulnerabilities of the teams workloads."
	MEDIUM_VULNERABILITIES
	"The accumulated number of low vulnerabilities of the teams workloads."
	LOW_VULNERABILITIES
	"The accumulated number of unassigned vulnerabilities of the teams workloads."
	UNASSIGNED_VULNERABILITIES
	"The team's software bill of materials (SBOM) coverage."
	SBOM_COVERAGE
}

extend type Application {
	"Get the vulnerability summary history for application."
	imageVulnerabilityHistory(
		"Get vulnerability summary from given date until today."
		from: Date!
	): ImageVulnerabilityHistory!
}

extend type Job {
	"Get the vulnerability summary history for job."
	imageVulnerabilityHistory(
		"Get vulnerability summary from given date until today."
		from: Date!
	): ImageVulnerabilityHistory!
}

extend type Team {
	"Get the vulnerability summary history for team."
	imageVulnerabilityHistory(
		"Get vulnerability summary from given date until today."
		from: Date!
	): ImageVulnerabilityHistory!
}

type ImageVulnerabilityHistory {
	"Vulnerability summary samples."
	samples: [ImageVulnerabilitySample!]!
}

extend type ContainerImage {
	"Whether the image has a software bill of materials (SBOM) attached to it."
	hasSBOM: Boolean!

	"Get the vulnerabilities of the image."
	vulnerabilities(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Filter the vulnerabilities."
		filter: ImageVulnerabilityFilter

		"Ordering options for items returned from the connection."
		orderBy: ImageVulnerabilityOrder
	): ImageVulnerabilityConnection!

	"Get the summary of the vulnerabilities of the image."
	vulnerabilitySummary: ImageVulnerabilitySummary

	"Workloads using this container image."
	workloadReferences(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): ContainerImageWorkloadReferenceConnection!
}

extend type Team {
	vulnerabilitySummary(filter: TeamVulnerabilitySummaryFilter): TeamVulnerabilitySummary!

	"Fetch vulnerability summaries for workloads in the team."
	vulnerabilitySummaries(
		"Filter the workloads by named environments."
		filter: TeamVulnerabilitySummaryFilter

		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Ordering options for items returned from the connection."
		orderBy: VulnerabilitySummaryOrder
	): WorkloadVulnerabilitySummaryConnection!
}

type WorkloadVulnerabilitySummaryConnection {
	"Information to aid in pagination."
	pageInfo: PageInfo!

	"List of edges."
	edges: [WorkloadVulnerabilitySummaryEdge!]!

	"List of nodes."
	nodes: [WorkloadVulnerabilitySummary!]!
}

type WorkloadVulnerabilitySummaryEdge {
	"A cursor for use in pagination."
	cursor: Cursor!

	"The workload vulnerability summary."
	node: WorkloadVulnerabilitySummary!
}

extend enum ActivityLogEntryResourceType {
	"All activity log entries related to vulnerabilities will use this resource type."
	VULNERABILITY
}

"""
Input for filtering team workloads.
"""
input TeamVulnerabilitySummaryFilter {
	"""
	Only return workloads from the given named environments.
	"""
	environments: [String!]
}

"""
Input for filtering image vulnerabilities.
"""
input ImageVulnerabilityFilter {
	"""
	Only return vulnerabilities with the given severity.
	"""
	severity: ImageVulnerabilitySeverity
	severitySince: Time
}

type ImageVulnerabilitySummary {
	"Total number of vulnerabilities."
	total: Int!

	"Risk score of the image."
	riskScore: Int!

	"Number of vulnerabilities with severity LOW."
	low: Int!

	"Number of vulnerabilities with severity MEDIUM."
	medium: Int!

	"Number of vulnerabilities with severity HIGH."
	high: Int!

	"Number of vulnerabilities with severity CRITICAL."
	critical: Int!

	"Number of vulnerabilities with severity UNASSIGNED."
	unassigned: Int!

	"Timestamp of the last update of the vulnerability summary."
	lastUpdated: Time
}

type ImageVulnerabilityConnection {
	"Information to aid in pagination."
	pageInfo: PageInfo!

	"List of edges."
	edges: [ImageVulnerabilityEdge!]!

	"List of nodes."
	nodes: [ImageVulnerability!]!
}

type ImageVulnerabilitySample {
	"The historic image vulnerability summary"
	summary: ImageVulnerabilitySummary!

	"Timestamp of the vulnerability summary."
	date: Time!
}

type ContainerImageWorkloadReferenceConnection {
	"Information to aid in pagination."
	pageInfo: PageInfo!

	"List of edges."
	edges: [ContainerImageWorkloadReferenceEdge!]!

	"List of nodes."
	nodes: [ContainerImageWorkloadReference!]!
}

type ImageVulnerabilityEdge {
	"A cursor for use in pagination."
	cursor: Cursor!

	"The image vulnerability."
	node: ImageVulnerability!
}

type ContainerImageWorkloadReferenceEdge {
	"A cursor for use in pagination."
	cursor: Cursor!

	"The workload reference."
	node: ContainerImageWorkloadReference!
}

type ContainerImageWorkloadReference {
	"The workload using the container image."
	workload: Workload!
}

type ImageVulnerability implements Node {
	"The globally unique ID of the image vulnerability node."
	id: ID!

	"The unique identifier of the vulnerability. E.g. CVE-****-****."
	identifier: String!

	"Severity of the vulnerability."
	severity: ImageVulnerabilitySeverity!

	"Description of the vulnerability."
	description: String!

	"Package name of the vulnerability."
	package: String!

	suppression: ImageVulnerabilitySuppression

	"Timestamp of when the vulnerability got its current severity."
	severitySince: Time

	"Link to the vulnerability details."
	vulnerabilityDetailsLink: String!
}

enum ImageVulnerabilitySeverity {
	LOW
	MEDIUM
	HIGH
	CRITICAL
	UNASSIGNED
}

enum ImageVulnerabilitySuppressionState {
	"Vulnerability is in triage."
	IN_TRIAGE
	"Vulnerability is resolved."
	RESOLVED
	"Vulnerability is marked as false positive."
	FALSE_POSITIVE
	"Vulnerability is marked as not affected."
	NOT_AFFECTED
}

"Ordering options when fetching teams."
input ImageVulnerabilityOrder {
	"The field to order items by."
	field: ImageVulnerabilityOrderField!

	"The direction to order items by."
	direction: OrderDirection!
}

enum ImageVulnerabilityOrderField {
	IDENTIFIER
	SEVERITY
	SEVERITY_SINCE
	PACKAGE
	STATE
	SUPPRESSED
}

type WorkloadVulnerabilitySummary implements Node {
	"The globally unique ID of the workload vulnerability summary node."
	id: ID!

	"The workload"
	workload: Workload!

	"True if the workload has a software bill of materials (SBOM) attached."
	hasSBOM: Boolean!

	"The vulnerability summary for the workload."
	summary: ImageVulnerabilitySummary!
}

"""
Ordering options when fetching vulnerability summaries for workloads.
"""
input VulnerabilitySummaryOrder {
	"""
	The field to order items by.
	"""
	field: VulnerabilitySummaryOrderByField!

	"""
	The direction to order items by.
	"""
	direction: OrderDirection!
}

enum VulnerabilitySummaryOrderByField {
	"""
	Order by name.
	"""
	NAME
	"""
	Order by the name of the environment the workload is deployed in.
	"""
	ENVIRONMENT
	"""
	Order by risk score"
	"""
	VULNERABILITY_RISK_SCORE
	"""
	Order by vulnerability severity critical"
	"""
	VULNERABILITY_SEVERITY_CRITICAL
	"""
	Order by vulnerability severity high"
	"""
	VULNERABILITY_SEVERITY_HIGH
	"""
	Order by vulnerability severity medium"
	"""
	VULNERABILITY_SEVERITY_MEDIUM
	"""
	Order by vulnerability severity low"
	"""
	VULNERABILITY_SEVERITY_LOW
	"""
	Order by vulnerability severity unassigned"
	"""
	VULNERABILITY_SEVERITY_UNASSIGNED
}

type TenantVulnerabilitySummary {
	"Risk score of the tenant."
	riskScore: Int!
	"Number of vulnerabilities with severity CRITICAL."
	critical: Int!
	"Number of vulnerabilities with severity HIGH."
	high: Int!
	"Number of vulnerabilities with severity MEDIUM."
	medium: Int!
	"Number of vulnerabilities with severity LOW."
	low: Int!
	"Number of vulnerabilities with severity UNASSIGNED."
	unassigned: Int!
	"Number of workloads with a software bill of materials (SBOM) attached."
	sbomCount: Int!
	"SBOM Coverage of the tenant."
	coverage: Float!
	"Timestamp of the last update of the vulnerability summary."
	lastUpdated: Time
}

type TeamVulnerabilitySummary {
	"Risk score of the team."
	riskScore: Int!
	"Number of vulnerabilities with severity CRITICAL."
	critical: Int!
	"Number of vulnerabilities with severity HIGH."
	high: Int!
	"Number of vulnerabilities with severity MEDIUM."
	medium: Int!
	"Number of vulnerabilities with severity LOW."
	low: Int!
	"Number of vulnerabilities with severity UNASSIGNED."
	unassigned: Int!
	"Number of workloads with a software bill of materials (SBOM) attached."
	sbomCount: Int!
	"Coverage of the team."
	coverage: Float!
	"Timestamp of the last update of the vulnerability summary."
	lastUpdated: Time
	"Trend of vulnerability status for the team."
	riskScoreTrend: TeamVulnerabilityRiskScoreTrend!
}

enum TeamVulnerabilityRiskScoreTrend {
	"Risk score is increasing."
	UP
	"Risk score is decreasing."
	DOWN
	"Risk score is not changing."
	FLAT
}

extend enum WorkloadOrderField {
	"Order by risk score"
	VULNERABILITY_RISK_SCORE
	"Order apps by vulnerability severity critical"
	VULNERABILITY_SEVERITY_CRITICAL
	"Order apps by vulnerability severity high"
	VULNERABILITY_SEVERITY_HIGH
	"Order apps by vulnerability severity medium"
	VULNERABILITY_SEVERITY_MEDIUM
	"Order apps by vulnerability severity low"
	VULNERABILITY_SEVERITY_LOW
	"Order apps by vulnerability severity unassigned"
	VULNERABILITY_SEVERITY_UNASSIGNED
	"Order by whether the workload has a software bill of materials (SBOM)"
	HAS_SBOM
	"Order by the last time the vulnerabilities were scanned."
	VULNERABILITY_LAST_SCANNED
}

type ImageVulnerabilitySuppression {
	"Suppression state of the vulnerability."
	state: ImageVulnerabilitySuppressionState!
	"The reason for the suppression of the vulnerability."
	reason: String!
}

input UpdateImageVulnerabilityInput {
	"The id of the vulnerability to suppress."
	vulnerabilityID: ID!
	"The reason for suppressing the vulnerability."
	reason: String!
	"Should the vulnerability be suppressed."
	suppress: Boolean!
	"New state of the vulnerability."
	state: ImageVulnerabilitySuppressionState
}

type UpdateImageVulnerabilityPayload {
	"The vulnerability updated."
	vulnerability: ImageVulnerability
}

type VulnerabilityActivityLogEntryData {
	"The unique identifier of the vulnerability. E.g. CVE-****-****."
	identifier: String!
	"The severity of the vulnerability."
	severity: ImageVulnerabilitySeverity!
	"The package affected by the vulnerability."
	package: String!
	"The previous suppression state of the vulnerability."
	previousSuppression: ImageVulnerabilitySuppression
	"The new suppression state of the vulnerability."
	newSuppression: ImageVulnerabilitySuppression
}

type VulnerabilityUpdatedActivityLogEntry implements ActivityLogEntry & Node {
	"""
	ID of the entry.
	"""
	id: ID!

	"""
	The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user.
	"""
	actor: String!

	"""
	Creation time of the entry.
	"""
	createdAt: Time!

	"""
	Message that summarizes the entry.
	"""
	message: String!

	"""
	Type of the resource that was affected by the action.
	"""
	resourceType: ActivityLogEntryResourceType!

	"""
	Name of the resource that was affected by the action.
	"""
	resourceName: String!

	"""
	The team slug that the entry belongs to.
	"""
	teamSlug: Slug

	"""
	The environment name that the entry belongs to.
	"""
	environmentName: String

	"Data associated with the update."
	data: VulnerabilityActivityLogEntryData!
}

extend enum ActivityLogActivityType {
	"Activity log entry for when a vulnerability is updated."
	VULNERABILITY_UPDATED
}

extend type Query {
	"Get the mean time to fix history for all teams."
	vulnerabilityFixHistory(from: Date!): VulnerabilityFixHistory!
}

extend interface Workload {
	"Get the mean time to fix history for a workload."
	vulnerabilityFixHistory(from: Date!): VulnerabilityFixHistory!
}

extend type Application {
	"Get the mean time to fix history for an application."
	vulnerabilityFixHistory(from: Date!): VulnerabilityFixHistory!
}

extend type Job {
	"Get the mean time to fix history for a job."
	vulnerabilityFixHistory(from: Date!): VulnerabilityFixHistory!
}

extend type Team {
	"Get the mean time to fix history for a team."
	vulnerabilityFixHistory(from: Date!): VulnerabilityFixHistory!
}

"Trend of mean time to fix vulnerabilities grouped by severity."
type VulnerabilityFixHistory {
	"Mean time to fix samples."
	samples: [VulnerabilityFixSample!]!
}

"One MTTR sample for a severity at a point in time."
type VulnerabilityFixSample {
	"Severity of vulnerabilities in this sample."
	severity: ImageVulnerabilitySeverity!

	"Snapshot date of the sample."
	date: Time!

	"Mean time to fix in days."
	days: Int!

	"Number of vulnerabilities fixed in this sample."
	fixedCount: Int!

	"Earliest time a vulnerability was fixed in this sample."
	firstFixedAt: Time

	"Latest time a vulnerability was fixed in this sample."
	lastFixedAt: Time

	"Total number of workloads with this severity of vulnerabilities."
	totalWorkloads: Int!
}
`, BuiltIn: false},
	{Name: "../schema/workloads.graphqls", Input: `extend type Team {
	"""
	Nais workloads owned by the team.
	"""
	workloads(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor

		"""
		Ordering options for items returned from the connection.
		"""
		orderBy: WorkloadOrder

		"""
		Filter the returned objects
		"""
		filter: TeamWorkloadsFilter
	): WorkloadConnection!
}

extend type Environment {
	"""
	Nais workloads in the environment.
	"""
	workloads(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor

		"""
		Ordering options for items returned from the connection.
		"""
		orderBy: EnvironmentWorkloadOrder
	): WorkloadConnection!
}

extend type TeamEnvironment {
	"""
	Workload in the team environment.
	"""
	workload(
		"""
		The name of the workload to get.
		"""
		name: String!
	): Workload!
}

"""
Interface for workloads.
"""
interface Workload implements Node & ActivityLogger {
	"""
	The globally unique ID of the workload.
	"""
	id: ID!

	"""
	The name of the workload.
	"""
	name: String!

	"""
	The team that owns the workload.
	"""
	team: Team!

	"""
	The environment the workload is deployed in.
	"""
	environment: TeamEnvironment! @deprecated(reason: "Use the ` + "`" + `teamEnvironment` + "`" + ` field instead.")

	"""
	The team environment for the workload.
	"""
	teamEnvironment: TeamEnvironment!

	"""
	The container image of the workload.
	"""
	image: ContainerImage!

	"""
	The resources allocated to the workload.
	"""
	resources: WorkloadResources!

	"""
	The workload manifest.
	"""
	manifest: WorkloadManifest!

	"""
	If set, when the workload was marked for deletion.
	"""
	deletionStartedAt: Time

	"""
	Activity log associated with the workload.
	"""
	activityLog(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor

		"""
		Filter items.
		"""
		filter: ActivityLogFilter
	): ActivityLogEntryConnection!

	"Issues that affects the workload."
	issues(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Ordering options for items returned from the connection."
		orderBy: IssueOrder

		"Filtering options for items returned from the connection."
		filter: ResourceIssueFilter
	): IssueConnection!
}

"""
Interface for workload manifests.
"""
interface WorkloadManifest {
	"""
	The manifest content, serialized as a YAML document.
	"""
	content: String!
}

"""
Container image.
"""
type ContainerImage implements Node & ActivityLogger {
	"""
	The globally unique ID of the container image node.
	"""
	id: ID!

	"""
	Name of the container image.
	"""
	name: String!

	"""
	Tag of the container image.
	"""
	tag: String!

	"""
	Activity log associated with the container image.
	"""
	activityLog(
		"""
		Get the first n items in the connection. This can be used in combination with the after parameter.
		"""
		first: Int

		"""
		Get items after this cursor.
		"""
		after: Cursor

		"""
		Get the last n items in the connection. This can be used in combination with the before parameter.
		"""
		last: Int

		"""
		Get items before this cursor.
		"""
		before: Cursor

		"""
		Filter items.
		"""
		filter: ActivityLogFilter
	): ActivityLogEntryConnection!
}

"""
Interface for resources allocated to workloads.
"""
interface WorkloadResources {
	"""
	Instances using resources above this threshold will be killed.
	"""
	limits: WorkloadResourceQuantity!

	"""
	Resources requested by the workload.
	"""
	requests: WorkloadResourceQuantity!
}

"""
Resource quantities for a workload.
"""
type WorkloadResourceQuantity {
	"""
	The number of CPU cores.
	"""
	cpu: Float

	"""
	The amount of memory in bytes.
	"""
	memory: Int
}

"""
Interface for authentication and authorization integrations.

Read more about this topic in the [Nais documentation](https://docs.nais.io/auth/).
"""
interface AuthIntegration {
	"""
	The name of the integration.
	"""
	name: String!
}

"""
Entra ID (f.k.a. Azure AD) authentication.

Read more: https://docs.nais.io/auth/entra-id/
"""
type EntraIDAuthIntegration implements AuthIntegration {
	"""
	The name of the integration.
	"""
	name: String!
}

"""
ID-porten authentication.

Read more: https://docs.nais.io/auth/idporten/
"""
type IDPortenAuthIntegration implements AuthIntegration {
	"""
	The name of the integration.
	"""
	name: String!
}

"""
Maskinporten authentication.

Read more: https://docs.nais.io/auth/maskinporten/
"""
type MaskinportenAuthIntegration implements AuthIntegration {
	"""
	The name of the integration.
	"""
	name: String!
}

"""
TokenX authentication.

Read more: https://docs.nais.io/auth/tokenx/
"""
type TokenXAuthIntegration implements AuthIntegration {
	"""
	The name of the integration.
	"""
	name: String!
}

"""
Workload connection.
"""
type WorkloadConnection {
	"""
	Pagination information.
	"""
	pageInfo: PageInfo!

	"""
	List of nodes.
	"""
	nodes: [Workload!]!

	"""
	List of edges.
	"""
	edges: [WorkloadEdge!]!
}

"""
Workload edge.
"""
type WorkloadEdge {
	"""
	Cursor for this edge that can be used for pagination.
	"""
	cursor: Cursor!

	"""
	The Workload.
	"""
	node: Workload!
}

"""
Ordering options when fetching workloads.
"""
input WorkloadOrder {
	"""
	The field to order items by.
	"""
	field: WorkloadOrderField!

	"""
	The direction to order items by.
	"""
	direction: OrderDirection!
}

"""
Fields to order workloads by.
"""
enum WorkloadOrderField {
	"""
	Order by name.
	"""
	NAME

	"""
	Order by the name of the environment the workload is deployed in.
	"""
	ENVIRONMENT

	"""
	Order by the deployment time.
	"""
	DEPLOYMENT_TIME
}

"""
Ordering options when fetching workloads in an environment.
"""
input EnvironmentWorkloadOrder {
	"""
	The field to order items by.
	"""
	field: EnvironmentWorkloadOrderField!

	"""
	The direction to order items by.
	"""
	direction: OrderDirection!
}

"""
Fields to order workloads in an environment by.
"""
enum EnvironmentWorkloadOrderField {
	"""
	Order by name.
	"""
	NAME

	"""
	Order by team slug.
	"""
	TEAM_SLUG

	"""
	Order by the deployment time.
	"""
	DEPLOYMENT_TIME
}

"""
Input for filtering team workloads.
"""
input TeamWorkloadsFilter {
	"""
	Only return workloads from the given named environments.
	"""
	environments: [String!]
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
