// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gengql

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/nais/api/internal/activitylog"
	"github.com/nais/api/internal/deployment/deploymentactivity"
	"github.com/nais/api/internal/github/repository"
	"github.com/nais/api/internal/graph/pagination"
	"github.com/nais/api/internal/kubernetes/event/pubsublog"
	"github.com/nais/api/internal/persistence/opensearch"
	"github.com/nais/api/internal/persistence/valkey"
	"github.com/nais/api/internal/reconciler"
	"github.com/nais/api/internal/serviceaccount"
	activitylog1 "github.com/nais/api/internal/servicemaintenance/activitylog"
	"github.com/nais/api/internal/team"
	"github.com/nais/api/internal/unleash"
	"github.com/nais/api/internal/vulnerability"
	"github.com/nais/api/internal/workload"
	"github.com/nais/api/internal/workload/application"
	"github.com/nais/api/internal/workload/job"
	"github.com/nais/api/internal/workload/secret"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _ActivityLogEntryConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *pagination.Connection[activitylog.ActivityLogEntry]) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ActivityLogEntryConnection_pageInfo,
		func(ctx context.Context) (any, error) {
			return obj.PageInfo, nil
		},
		nil,
		ec.marshalNPageInfo2githubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐPageInfo,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ActivityLogEntryConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityLogEntryConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "totalCount":
				return ec.fieldContext_PageInfo_totalCount(ctx, field)
			case "pageStart":
				return ec.fieldContext_PageInfo_pageStart(ctx, field)
			case "pageEnd":
				return ec.fieldContext_PageInfo_pageEnd(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityLogEntryConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *pagination.Connection[activitylog.ActivityLogEntry]) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ActivityLogEntryConnection_nodes,
		func(ctx context.Context) (any, error) {
			return obj.Nodes(), nil
		},
		nil,
		ec.marshalNActivityLogEntry2ᚕgithubᚗcomᚋnaisᚋapiᚋinternalᚋactivitylogᚐActivityLogEntryᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ActivityLogEntryConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityLogEntryConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityLogEntryConnection_edges(ctx context.Context, field graphql.CollectedField, obj *pagination.Connection[activitylog.ActivityLogEntry]) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ActivityLogEntryConnection_edges,
		func(ctx context.Context) (any, error) {
			return obj.Edges, nil
		},
		nil,
		ec.marshalNActivityLogEntryEdge2ᚕgithubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐEdgeᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ActivityLogEntryConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityLogEntryConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_ActivityLogEntryEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_ActivityLogEntryEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActivityLogEntryEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityLogEntryEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *pagination.Edge[activitylog.ActivityLogEntry]) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ActivityLogEntryEdge_cursor,
		func(ctx context.Context) (any, error) {
			return obj.Cursor, nil
		},
		nil,
		ec.marshalNCursor2githubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐCursor,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ActivityLogEntryEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityLogEntryEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActivityLogEntryEdge_node(ctx context.Context, field graphql.CollectedField, obj *pagination.Edge[activitylog.ActivityLogEntry]) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ActivityLogEntryEdge_node,
		func(ctx context.Context) (any, error) {
			return obj.Node, nil
		},
		nil,
		ec.marshalNActivityLogEntry2githubᚗcomᚋnaisᚋapiᚋinternalᚋactivitylogᚐActivityLogEntry,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ActivityLogEntryEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActivityLogEntryEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputActivityLogFilter(ctx context.Context, obj any) (activitylog.ActivityLogFilter, error) {
	var it activitylog.ActivityLogFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"activityTypes"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "activityTypes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activityTypes"))
			data, err := ec.unmarshalOActivityLogActivityType2ᚕgithubᚗcomᚋnaisᚋapiᚋinternalᚋactivitylogᚐActivityLogActivityTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActivityTypes = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _ActivityLogEntry(ctx context.Context, sel ast.SelectionSet, obj activitylog.ActivityLogEntry) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case vulnerability.VulnerabilityUpdatedActivityLogEntry:
		return ec._VulnerabilityUpdatedActivityLogEntry(ctx, sel, &obj)
	case *vulnerability.VulnerabilityUpdatedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._VulnerabilityUpdatedActivityLogEntry(ctx, sel, obj)
	case valkey.ValkeyUpdatedActivityLogEntry:
		return ec._ValkeyUpdatedActivityLogEntry(ctx, sel, &obj)
	case *valkey.ValkeyUpdatedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._ValkeyUpdatedActivityLogEntry(ctx, sel, obj)
	case valkey.ValkeyDeletedActivityLogEntry:
		return ec._ValkeyDeletedActivityLogEntry(ctx, sel, &obj)
	case *valkey.ValkeyDeletedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._ValkeyDeletedActivityLogEntry(ctx, sel, obj)
	case valkey.ValkeyCreatedActivityLogEntry:
		return ec._ValkeyCreatedActivityLogEntry(ctx, sel, &obj)
	case *valkey.ValkeyCreatedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._ValkeyCreatedActivityLogEntry(ctx, sel, obj)
	case unleash.UnleashInstanceUpdatedActivityLogEntry:
		return ec._UnleashInstanceUpdatedActivityLogEntry(ctx, sel, &obj)
	case *unleash.UnleashInstanceUpdatedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._UnleashInstanceUpdatedActivityLogEntry(ctx, sel, obj)
	case unleash.UnleashInstanceCreatedActivityLogEntry:
		return ec._UnleashInstanceCreatedActivityLogEntry(ctx, sel, &obj)
	case *unleash.UnleashInstanceCreatedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._UnleashInstanceCreatedActivityLogEntry(ctx, sel, obj)
	case team.TeamUpdatedActivityLogEntry:
		return ec._TeamUpdatedActivityLogEntry(ctx, sel, &obj)
	case *team.TeamUpdatedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._TeamUpdatedActivityLogEntry(ctx, sel, obj)
	case team.TeamMemberSetRoleActivityLogEntry:
		return ec._TeamMemberSetRoleActivityLogEntry(ctx, sel, &obj)
	case *team.TeamMemberSetRoleActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._TeamMemberSetRoleActivityLogEntry(ctx, sel, obj)
	case team.TeamMemberRemovedActivityLogEntry:
		return ec._TeamMemberRemovedActivityLogEntry(ctx, sel, &obj)
	case *team.TeamMemberRemovedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._TeamMemberRemovedActivityLogEntry(ctx, sel, obj)
	case team.TeamMemberAddedActivityLogEntry:
		return ec._TeamMemberAddedActivityLogEntry(ctx, sel, &obj)
	case *team.TeamMemberAddedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._TeamMemberAddedActivityLogEntry(ctx, sel, obj)
	case team.TeamEnvironmentUpdatedActivityLogEntry:
		return ec._TeamEnvironmentUpdatedActivityLogEntry(ctx, sel, &obj)
	case *team.TeamEnvironmentUpdatedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._TeamEnvironmentUpdatedActivityLogEntry(ctx, sel, obj)
	case deploymentactivity.TeamDeployKeyUpdatedActivityLogEntry:
		return ec._TeamDeployKeyUpdatedActivityLogEntry(ctx, sel, &obj)
	case *deploymentactivity.TeamDeployKeyUpdatedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._TeamDeployKeyUpdatedActivityLogEntry(ctx, sel, obj)
	case team.TeamCreatedActivityLogEntry:
		return ec._TeamCreatedActivityLogEntry(ctx, sel, &obj)
	case *team.TeamCreatedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._TeamCreatedActivityLogEntry(ctx, sel, obj)
	case team.TeamCreateDeleteKeyActivityLogEntry:
		return ec._TeamCreateDeleteKeyActivityLogEntry(ctx, sel, &obj)
	case *team.TeamCreateDeleteKeyActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._TeamCreateDeleteKeyActivityLogEntry(ctx, sel, obj)
	case team.TeamConfirmDeleteKeyActivityLogEntry:
		return ec._TeamConfirmDeleteKeyActivityLogEntry(ctx, sel, &obj)
	case *team.TeamConfirmDeleteKeyActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._TeamConfirmDeleteKeyActivityLogEntry(ctx, sel, obj)
	case activitylog1.ServiceMaintenanceActivityLogEntry:
		return ec._ServiceMaintenanceActivityLogEntry(ctx, sel, &obj)
	case *activitylog1.ServiceMaintenanceActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._ServiceMaintenanceActivityLogEntry(ctx, sel, obj)
	case serviceaccount.ServiceAccountUpdatedActivityLogEntry:
		return ec._ServiceAccountUpdatedActivityLogEntry(ctx, sel, &obj)
	case *serviceaccount.ServiceAccountUpdatedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._ServiceAccountUpdatedActivityLogEntry(ctx, sel, obj)
	case serviceaccount.ServiceAccountTokenUpdatedActivityLogEntry:
		return ec._ServiceAccountTokenUpdatedActivityLogEntry(ctx, sel, &obj)
	case *serviceaccount.ServiceAccountTokenUpdatedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._ServiceAccountTokenUpdatedActivityLogEntry(ctx, sel, obj)
	case serviceaccount.ServiceAccountTokenDeletedActivityLogEntry:
		return ec._ServiceAccountTokenDeletedActivityLogEntry(ctx, sel, &obj)
	case *serviceaccount.ServiceAccountTokenDeletedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._ServiceAccountTokenDeletedActivityLogEntry(ctx, sel, obj)
	case serviceaccount.ServiceAccountTokenCreatedActivityLogEntry:
		return ec._ServiceAccountTokenCreatedActivityLogEntry(ctx, sel, &obj)
	case *serviceaccount.ServiceAccountTokenCreatedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._ServiceAccountTokenCreatedActivityLogEntry(ctx, sel, obj)
	case serviceaccount.ServiceAccountDeletedActivityLogEntry:
		return ec._ServiceAccountDeletedActivityLogEntry(ctx, sel, &obj)
	case *serviceaccount.ServiceAccountDeletedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._ServiceAccountDeletedActivityLogEntry(ctx, sel, obj)
	case serviceaccount.ServiceAccountCreatedActivityLogEntry:
		return ec._ServiceAccountCreatedActivityLogEntry(ctx, sel, &obj)
	case *serviceaccount.ServiceAccountCreatedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._ServiceAccountCreatedActivityLogEntry(ctx, sel, obj)
	case secret.SecretValueUpdatedActivityLogEntry:
		return ec._SecretValueUpdatedActivityLogEntry(ctx, sel, &obj)
	case *secret.SecretValueUpdatedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._SecretValueUpdatedActivityLogEntry(ctx, sel, obj)
	case secret.SecretValueRemovedActivityLogEntry:
		return ec._SecretValueRemovedActivityLogEntry(ctx, sel, &obj)
	case *secret.SecretValueRemovedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._SecretValueRemovedActivityLogEntry(ctx, sel, obj)
	case secret.SecretValueAddedActivityLogEntry:
		return ec._SecretValueAddedActivityLogEntry(ctx, sel, &obj)
	case *secret.SecretValueAddedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._SecretValueAddedActivityLogEntry(ctx, sel, obj)
	case secret.SecretDeletedActivityLogEntry:
		return ec._SecretDeletedActivityLogEntry(ctx, sel, &obj)
	case *secret.SecretDeletedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._SecretDeletedActivityLogEntry(ctx, sel, obj)
	case secret.SecretCreatedActivityLogEntry:
		return ec._SecretCreatedActivityLogEntry(ctx, sel, &obj)
	case *secret.SecretCreatedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._SecretCreatedActivityLogEntry(ctx, sel, obj)
	case serviceaccount.RoleRevokedFromServiceAccountActivityLogEntry:
		return ec._RoleRevokedFromServiceAccountActivityLogEntry(ctx, sel, &obj)
	case *serviceaccount.RoleRevokedFromServiceAccountActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._RoleRevokedFromServiceAccountActivityLogEntry(ctx, sel, obj)
	case serviceaccount.RoleAssignedToServiceAccountActivityLogEntry:
		return ec._RoleAssignedToServiceAccountActivityLogEntry(ctx, sel, &obj)
	case *serviceaccount.RoleAssignedToServiceAccountActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._RoleAssignedToServiceAccountActivityLogEntry(ctx, sel, obj)
	case repository.RepositoryRemovedActivityLogEntry:
		return ec._RepositoryRemovedActivityLogEntry(ctx, sel, &obj)
	case *repository.RepositoryRemovedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._RepositoryRemovedActivityLogEntry(ctx, sel, obj)
	case repository.RepositoryAddedActivityLogEntry:
		return ec._RepositoryAddedActivityLogEntry(ctx, sel, &obj)
	case *repository.RepositoryAddedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._RepositoryAddedActivityLogEntry(ctx, sel, obj)
	case reconciler.ReconcilerEnabledActivityLogEntry:
		return ec._ReconcilerEnabledActivityLogEntry(ctx, sel, &obj)
	case *reconciler.ReconcilerEnabledActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._ReconcilerEnabledActivityLogEntry(ctx, sel, obj)
	case reconciler.ReconcilerDisabledActivityLogEntry:
		return ec._ReconcilerDisabledActivityLogEntry(ctx, sel, &obj)
	case *reconciler.ReconcilerDisabledActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._ReconcilerDisabledActivityLogEntry(ctx, sel, obj)
	case reconciler.ReconcilerConfiguredActivityLogEntry:
		return ec._ReconcilerConfiguredActivityLogEntry(ctx, sel, &obj)
	case *reconciler.ReconcilerConfiguredActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._ReconcilerConfiguredActivityLogEntry(ctx, sel, obj)
	case opensearch.OpenSearchUpdatedActivityLogEntry:
		return ec._OpenSearchUpdatedActivityLogEntry(ctx, sel, &obj)
	case *opensearch.OpenSearchUpdatedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._OpenSearchUpdatedActivityLogEntry(ctx, sel, obj)
	case opensearch.OpenSearchDeletedActivityLogEntry:
		return ec._OpenSearchDeletedActivityLogEntry(ctx, sel, &obj)
	case *opensearch.OpenSearchDeletedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._OpenSearchDeletedActivityLogEntry(ctx, sel, obj)
	case opensearch.OpenSearchCreatedActivityLogEntry:
		return ec._OpenSearchCreatedActivityLogEntry(ctx, sel, &obj)
	case *opensearch.OpenSearchCreatedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._OpenSearchCreatedActivityLogEntry(ctx, sel, obj)
	case job.JobTriggeredActivityLogEntry:
		return ec._JobTriggeredActivityLogEntry(ctx, sel, &obj)
	case *job.JobTriggeredActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._JobTriggeredActivityLogEntry(ctx, sel, obj)
	case job.JobDeletedActivityLogEntry:
		return ec._JobDeletedActivityLogEntry(ctx, sel, &obj)
	case *job.JobDeletedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._JobDeletedActivityLogEntry(ctx, sel, obj)
	case deploymentactivity.DeploymentActivityLogEntry:
		return ec._DeploymentActivityLogEntry(ctx, sel, &obj)
	case *deploymentactivity.DeploymentActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeploymentActivityLogEntry(ctx, sel, obj)
	case pubsublog.ClusterAuditActivityLogEntry:
		return ec._ClusterAuditActivityLogEntry(ctx, sel, &obj)
	case *pubsublog.ClusterAuditActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._ClusterAuditActivityLogEntry(ctx, sel, obj)
	case application.ApplicationScaledActivityLogEntry:
		return ec._ApplicationScaledActivityLogEntry(ctx, sel, &obj)
	case *application.ApplicationScaledActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._ApplicationScaledActivityLogEntry(ctx, sel, obj)
	case application.ApplicationRestartedActivityLogEntry:
		return ec._ApplicationRestartedActivityLogEntry(ctx, sel, &obj)
	case *application.ApplicationRestartedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._ApplicationRestartedActivityLogEntry(ctx, sel, obj)
	case application.ApplicationDeletedActivityLogEntry:
		return ec._ApplicationDeletedActivityLogEntry(ctx, sel, &obj)
	case *application.ApplicationDeletedActivityLogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._ApplicationDeletedActivityLogEntry(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _ActivityLogger(ctx context.Context, sel ast.SelectionSet, obj activitylog.ActivityLogger) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case valkey.Valkey:
		return ec._Valkey(ctx, sel, &obj)
	case *valkey.Valkey:
		if obj == nil {
			return graphql.Null
		}
		return ec._Valkey(ctx, sel, obj)
	case opensearch.OpenSearch:
		return ec._OpenSearch(ctx, sel, &obj)
	case *opensearch.OpenSearch:
		if obj == nil {
			return graphql.Null
		}
		return ec._OpenSearch(ctx, sel, obj)
	case job.Job:
		return ec._Job(ctx, sel, &obj)
	case *job.Job:
		if obj == nil {
			return graphql.Null
		}
		return ec._Job(ctx, sel, obj)
	case application.Application:
		return ec._Application(ctx, sel, &obj)
	case *application.Application:
		if obj == nil {
			return graphql.Null
		}
		return ec._Application(ctx, sel, obj)
	case workload.Workload:
		if obj == nil {
			return graphql.Null
		}
		return ec._Workload(ctx, sel, obj)
	case team.Team:
		return ec._Team(ctx, sel, &obj)
	case *team.Team:
		if obj == nil {
			return graphql.Null
		}
		return ec._Team(ctx, sel, obj)
	case reconciler.Reconciler:
		return ec._Reconciler(ctx, sel, &obj)
	case *reconciler.Reconciler:
		if obj == nil {
			return graphql.Null
		}
		return ec._Reconciler(ctx, sel, obj)
	case workload.ContainerImage:
		return ec._ContainerImage(ctx, sel, &obj)
	case *workload.ContainerImage:
		if obj == nil {
			return graphql.Null
		}
		return ec._ContainerImage(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var activityLogEntryConnectionImplementors = []string{"ActivityLogEntryConnection"}

func (ec *executionContext) _ActivityLogEntryConnection(ctx context.Context, sel ast.SelectionSet, obj *pagination.Connection[activitylog.ActivityLogEntry]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, activityLogEntryConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActivityLogEntryConnection")
		case "pageInfo":
			out.Values[i] = ec._ActivityLogEntryConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._ActivityLogEntryConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._ActivityLogEntryConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var activityLogEntryEdgeImplementors = []string{"ActivityLogEntryEdge"}

func (ec *executionContext) _ActivityLogEntryEdge(ctx context.Context, sel ast.SelectionSet, obj *pagination.Edge[activitylog.ActivityLogEntry]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, activityLogEntryEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActivityLogEntryEdge")
		case "cursor":
			out.Values[i] = ec._ActivityLogEntryEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._ActivityLogEntryEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNActivityLogActivityType2githubᚗcomᚋnaisᚋapiᚋinternalᚋactivitylogᚐActivityLogActivityType(ctx context.Context, v any) (activitylog.ActivityLogActivityType, error) {
	var res activitylog.ActivityLogActivityType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNActivityLogActivityType2githubᚗcomᚋnaisᚋapiᚋinternalᚋactivitylogᚐActivityLogActivityType(ctx context.Context, sel ast.SelectionSet, v activitylog.ActivityLogActivityType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNActivityLogEntry2githubᚗcomᚋnaisᚋapiᚋinternalᚋactivitylogᚐActivityLogEntry(ctx context.Context, sel ast.SelectionSet, v activitylog.ActivityLogEntry) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ActivityLogEntry(ctx, sel, v)
}

func (ec *executionContext) marshalNActivityLogEntry2ᚕgithubᚗcomᚋnaisᚋapiᚋinternalᚋactivitylogᚐActivityLogEntryᚄ(ctx context.Context, sel ast.SelectionSet, v []activitylog.ActivityLogEntry) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNActivityLogEntry2githubᚗcomᚋnaisᚋapiᚋinternalᚋactivitylogᚐActivityLogEntry(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNActivityLogEntryConnection2githubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐConnection(ctx context.Context, sel ast.SelectionSet, v pagination.Connection[activitylog.ActivityLogEntry]) graphql.Marshaler {
	return ec._ActivityLogEntryConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNActivityLogEntryConnection2ᚖgithubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐConnection(ctx context.Context, sel ast.SelectionSet, v *pagination.Connection[activitylog.ActivityLogEntry]) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ActivityLogEntryConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNActivityLogEntryEdge2githubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐEdge(ctx context.Context, sel ast.SelectionSet, v pagination.Edge[activitylog.ActivityLogEntry]) graphql.Marshaler {
	return ec._ActivityLogEntryEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalNActivityLogEntryEdge2ᚕgithubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []pagination.Edge[activitylog.ActivityLogEntry]) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNActivityLogEntryEdge2githubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNActivityLogEntryResourceType2githubᚗcomᚋnaisᚋapiᚋinternalᚋactivitylogᚐActivityLogEntryResourceType(ctx context.Context, v any) (activitylog.ActivityLogEntryResourceType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := activitylog.ActivityLogEntryResourceType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNActivityLogEntryResourceType2githubᚗcomᚋnaisᚋapiᚋinternalᚋactivitylogᚐActivityLogEntryResourceType(ctx context.Context, sel ast.SelectionSet, v activitylog.ActivityLogEntryResourceType) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOActivityLogActivityType2ᚕgithubᚗcomᚋnaisᚋapiᚋinternalᚋactivitylogᚐActivityLogActivityTypeᚄ(ctx context.Context, v any) ([]activitylog.ActivityLogActivityType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]activitylog.ActivityLogActivityType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNActivityLogActivityType2githubᚗcomᚋnaisᚋapiᚋinternalᚋactivitylogᚐActivityLogActivityType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOActivityLogActivityType2ᚕgithubᚗcomᚋnaisᚋapiᚋinternalᚋactivitylogᚐActivityLogActivityTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []activitylog.ActivityLogActivityType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNActivityLogActivityType2githubᚗcomᚋnaisᚋapiᚋinternalᚋactivitylogᚐActivityLogActivityType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOActivityLogFilter2ᚖgithubᚗcomᚋnaisᚋapiᚋinternalᚋactivitylogᚐActivityLogFilter(ctx context.Context, v any) (*activitylog.ActivityLogFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputActivityLogFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
