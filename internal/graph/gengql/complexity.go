// Code generated by ./cmd/gen_complexity, DO NOT EDIT.

package gengql

import (
	repository "github.com/nais/api/internal/github/repository"
	pagination "github.com/nais/api/internal/graph/pagination"
	bigquery "github.com/nais/api/internal/persistence/bigquery"
	bucket "github.com/nais/api/internal/persistence/bucket"
	kafkatopic "github.com/nais/api/internal/persistence/kafkatopic"
	opensearch "github.com/nais/api/internal/persistence/opensearch"
	redis "github.com/nais/api/internal/persistence/redis"
	sqlinstance "github.com/nais/api/internal/persistence/sqlinstance"
	valkey "github.com/nais/api/internal/persistence/valkey"
	search "github.com/nais/api/internal/search"
	team "github.com/nais/api/internal/team"
	user "github.com/nais/api/internal/user"
	vulnerability "github.com/nais/api/internal/vulnerability"
	workload "github.com/nais/api/internal/workload"
	application "github.com/nais/api/internal/workload/application"
	job "github.com/nais/api/internal/workload/job"
	secret "github.com/nais/api/internal/workload/secret"
)

func NewComplexityRoot() ComplexityRoot {
	c := ComplexityRoot{}

	c.Application.Deployments = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Application.Instances = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Application.Secrets = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.BigQueryDataset.Access = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *bigquery.BigQueryDatasetAccessOrder) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.ContainerImage.Vulnerabilities = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *vulnerability.ImageVulnerabilityOrder) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.ContainerImage.WorkloadReferences = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Deployment.Resources = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Deployment.Statuses = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.ImageVulnerabilityAnalysisTrail.Comments = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Job.Deployments = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Job.Runs = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Job.Secrets = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.JobRun.Instances = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.KafkaTopic.ACL = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, filter *kafkatopic.KafkaTopicACLFilter, orderBy *kafkatopic.KafkaTopicACLOrder) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.OpenSearch.Access = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *opensearch.OpenSearchAccessOrder) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Query.Reconcilers = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Query.Roles = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Query.Search = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, filter search.SearchFilter) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Query.ServiceAccounts = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Query.Teams = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *team.TeamOrder) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Query.UserSyncLog = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Query.Users = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *user.UserOrder) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Reconciler.ActivityLog = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Reconciler.Errors = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.RedisInstance.Access = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *redis.RedisInstanceAccessOrder) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Secret.Applications = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Secret.Jobs = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Secret.Workloads = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.SqlInstance.Flags = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.SqlInstance.Users = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *sqlinstance.SQLInstanceUserOrder) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Team.ActivityLog = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Team.Applications = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *application.ApplicationOrder, filter *application.TeamApplicationsFilter) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Team.BigQueryDatasets = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *bigquery.BigQueryDatasetOrder) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Team.Buckets = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *bucket.BucketOrder) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Team.Deployments = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Team.Jobs = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *job.JobOrder, filter *job.TeamJobsFilter) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Team.KafkaTopics = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *kafkatopic.KafkaTopicOrder) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Team.Members = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *team.TeamMemberOrder) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Team.OpenSearchInstances = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *opensearch.OpenSearchOrder) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Team.RedisInstances = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *redis.RedisInstanceOrder) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Team.Repositories = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *repository.RepositoryOrder, filter *repository.TeamRepositoryFilter) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Team.SQLInstances = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *sqlinstance.SQLInstanceOrder) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Team.Secrets = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *secret.SecretOrder, filter *secret.SecretFilter) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Team.ValkeyInstances = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *valkey.ValkeyInstanceOrder) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.Team.Workloads = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *workload.WorkloadOrder, filter *workload.TeamWorkloadsFilter) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.UnleashInstance.AllowedTeams = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.User.Teams = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *team.UserTeamOrder) int {
		return cursorComplexity(first, last) * childComplexity
	}
	c.ValkeyInstance.Access = func(childComplexity int, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor, orderBy *valkey.ValkeyInstanceAccessOrder) int {
		return cursorComplexity(first, last) * childComplexity
	}

	return c
}

func cursorComplexity(first, last *int) int {
	if first != nil {
		return *first
	}
	if last != nil {
		return *last
	}
	return pagination.DefaultPageSize
}
