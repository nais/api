// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gengql

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/nais/api/internal/graph/pagination"
	"github.com/nais/api/internal/servicemaintenance"
	"github.com/nais/api/internal/servicemaintenance/activitylog"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

type OpenSearchMaintenanceResolver interface {
	Window(ctx context.Context, obj *servicemaintenance.OpenSearchMaintenance) (*servicemaintenance.MaintenanceWindow, error)
	Updates(ctx context.Context, obj *servicemaintenance.OpenSearchMaintenance, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) (*pagination.Connection[*servicemaintenance.OpenSearchMaintenanceUpdate], error)
}
type ValkeyMaintenanceResolver interface {
	Window(ctx context.Context, obj *servicemaintenance.ValkeyMaintenance) (*servicemaintenance.MaintenanceWindow, error)
	Updates(ctx context.Context, obj *servicemaintenance.ValkeyMaintenance, first *int, after *pagination.Cursor, last *int, before *pagination.Cursor) (*pagination.Connection[*servicemaintenance.ValkeyMaintenanceUpdate], error)
}

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_OpenSearchMaintenance_updates_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "first", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["first"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "after", ec.unmarshalOCursor2ᚖgithubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐCursor)
	if err != nil {
		return nil, err
	}
	args["after"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "last", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["last"] = arg2
	arg3, err := graphql.ProcessArgField(ctx, rawArgs, "before", ec.unmarshalOCursor2ᚖgithubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐCursor)
	if err != nil {
		return nil, err
	}
	args["before"] = arg3
	return args, nil
}

func (ec *executionContext) field_ValkeyMaintenance_updates_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "first", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["first"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "after", ec.unmarshalOCursor2ᚖgithubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐCursor)
	if err != nil {
		return nil, err
	}
	args["after"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "last", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["last"] = arg2
	arg3, err := graphql.ProcessArgField(ctx, rawArgs, "before", ec.unmarshalOCursor2ᚖgithubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐCursor)
	if err != nil {
		return nil, err
	}
	args["before"] = arg3
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _MaintenanceWindow_dayOfWeek(ctx context.Context, field graphql.CollectedField, obj *servicemaintenance.MaintenanceWindow) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MaintenanceWindow_dayOfWeek,
		func(ctx context.Context) (any, error) {
			return obj.DayOfWeek, nil
		},
		nil,
		ec.marshalNWeekday2githubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋmodelᚐWeekday,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MaintenanceWindow_dayOfWeek(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MaintenanceWindow",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Weekday does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MaintenanceWindow_timeOfDay(ctx context.Context, field graphql.CollectedField, obj *servicemaintenance.MaintenanceWindow) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MaintenanceWindow_timeOfDay,
		func(ctx context.Context) (any, error) {
			return obj.TimeOfDay, nil
		},
		nil,
		ec.marshalNTimeOfDay2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MaintenanceWindow_timeOfDay(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MaintenanceWindow",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TimeOfDay does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OpenSearchMaintenance_window(ctx context.Context, field graphql.CollectedField, obj *servicemaintenance.OpenSearchMaintenance) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_OpenSearchMaintenance_window,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.OpenSearchMaintenance().Window(ctx, obj)
		},
		nil,
		ec.marshalOMaintenanceWindow2ᚖgithubᚗcomᚋnaisᚋapiᚋinternalᚋservicemaintenanceᚐMaintenanceWindow,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_OpenSearchMaintenance_window(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OpenSearchMaintenance",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "dayOfWeek":
				return ec.fieldContext_MaintenanceWindow_dayOfWeek(ctx, field)
			case "timeOfDay":
				return ec.fieldContext_MaintenanceWindow_timeOfDay(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MaintenanceWindow", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OpenSearchMaintenance_updates(ctx context.Context, field graphql.CollectedField, obj *servicemaintenance.OpenSearchMaintenance) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_OpenSearchMaintenance_updates,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.OpenSearchMaintenance().Updates(ctx, obj, fc.Args["first"].(*int), fc.Args["after"].(*pagination.Cursor), fc.Args["last"].(*int), fc.Args["before"].(*pagination.Cursor))
		},
		nil,
		ec.marshalNOpenSearchMaintenanceUpdateConnection2ᚖgithubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐConnection,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_OpenSearchMaintenance_updates(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OpenSearchMaintenance",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pageInfo":
				return ec.fieldContext_OpenSearchMaintenanceUpdateConnection_pageInfo(ctx, field)
			case "nodes":
				return ec.fieldContext_OpenSearchMaintenanceUpdateConnection_nodes(ctx, field)
			case "edges":
				return ec.fieldContext_OpenSearchMaintenanceUpdateConnection_edges(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OpenSearchMaintenanceUpdateConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_OpenSearchMaintenance_updates_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _OpenSearchMaintenanceUpdate_title(ctx context.Context, field graphql.CollectedField, obj *servicemaintenance.OpenSearchMaintenanceUpdate) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_OpenSearchMaintenanceUpdate_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_OpenSearchMaintenanceUpdate_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OpenSearchMaintenanceUpdate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OpenSearchMaintenanceUpdate_description(ctx context.Context, field graphql.CollectedField, obj *servicemaintenance.OpenSearchMaintenanceUpdate) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_OpenSearchMaintenanceUpdate_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_OpenSearchMaintenanceUpdate_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OpenSearchMaintenanceUpdate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OpenSearchMaintenanceUpdate_deadline(ctx context.Context, field graphql.CollectedField, obj *servicemaintenance.OpenSearchMaintenanceUpdate) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_OpenSearchMaintenanceUpdate_deadline,
		func(ctx context.Context) (any, error) {
			return obj.Deadline, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_OpenSearchMaintenanceUpdate_deadline(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OpenSearchMaintenanceUpdate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OpenSearchMaintenanceUpdate_startAt(ctx context.Context, field graphql.CollectedField, obj *servicemaintenance.OpenSearchMaintenanceUpdate) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_OpenSearchMaintenanceUpdate_startAt,
		func(ctx context.Context) (any, error) {
			return obj.StartAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_OpenSearchMaintenanceUpdate_startAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OpenSearchMaintenanceUpdate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OpenSearchMaintenanceUpdateConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *pagination.Connection[*servicemaintenance.OpenSearchMaintenanceUpdate]) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_OpenSearchMaintenanceUpdateConnection_pageInfo,
		func(ctx context.Context) (any, error) {
			return obj.PageInfo, nil
		},
		nil,
		ec.marshalNPageInfo2githubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐPageInfo,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_OpenSearchMaintenanceUpdateConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OpenSearchMaintenanceUpdateConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "totalCount":
				return ec.fieldContext_PageInfo_totalCount(ctx, field)
			case "pageStart":
				return ec.fieldContext_PageInfo_pageStart(ctx, field)
			case "pageEnd":
				return ec.fieldContext_PageInfo_pageEnd(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OpenSearchMaintenanceUpdateConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *pagination.Connection[*servicemaintenance.OpenSearchMaintenanceUpdate]) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_OpenSearchMaintenanceUpdateConnection_nodes,
		func(ctx context.Context) (any, error) {
			return obj.Nodes(), nil
		},
		nil,
		ec.marshalNOpenSearchMaintenanceUpdate2ᚕᚖgithubᚗcomᚋnaisᚋapiᚋinternalᚋservicemaintenanceᚐOpenSearchMaintenanceUpdateᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_OpenSearchMaintenanceUpdateConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OpenSearchMaintenanceUpdateConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "title":
				return ec.fieldContext_OpenSearchMaintenanceUpdate_title(ctx, field)
			case "description":
				return ec.fieldContext_OpenSearchMaintenanceUpdate_description(ctx, field)
			case "deadline":
				return ec.fieldContext_OpenSearchMaintenanceUpdate_deadline(ctx, field)
			case "startAt":
				return ec.fieldContext_OpenSearchMaintenanceUpdate_startAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OpenSearchMaintenanceUpdate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OpenSearchMaintenanceUpdateConnection_edges(ctx context.Context, field graphql.CollectedField, obj *pagination.Connection[*servicemaintenance.OpenSearchMaintenanceUpdate]) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_OpenSearchMaintenanceUpdateConnection_edges,
		func(ctx context.Context) (any, error) {
			return obj.Edges, nil
		},
		nil,
		ec.marshalNOpenSearchMaintenanceUpdateEdge2ᚕgithubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐEdgeᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_OpenSearchMaintenanceUpdateConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OpenSearchMaintenanceUpdateConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_OpenSearchMaintenanceUpdateEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_OpenSearchMaintenanceUpdateEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OpenSearchMaintenanceUpdateEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OpenSearchMaintenanceUpdateEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *pagination.Edge[*servicemaintenance.OpenSearchMaintenanceUpdate]) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_OpenSearchMaintenanceUpdateEdge_cursor,
		func(ctx context.Context) (any, error) {
			return obj.Cursor, nil
		},
		nil,
		ec.marshalNCursor2githubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐCursor,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_OpenSearchMaintenanceUpdateEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OpenSearchMaintenanceUpdateEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OpenSearchMaintenanceUpdateEdge_node(ctx context.Context, field graphql.CollectedField, obj *pagination.Edge[*servicemaintenance.OpenSearchMaintenanceUpdate]) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_OpenSearchMaintenanceUpdateEdge_node,
		func(ctx context.Context) (any, error) {
			return obj.Node, nil
		},
		nil,
		ec.marshalNOpenSearchMaintenanceUpdate2ᚖgithubᚗcomᚋnaisᚋapiᚋinternalᚋservicemaintenanceᚐOpenSearchMaintenanceUpdate,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_OpenSearchMaintenanceUpdateEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OpenSearchMaintenanceUpdateEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "title":
				return ec.fieldContext_OpenSearchMaintenanceUpdate_title(ctx, field)
			case "description":
				return ec.fieldContext_OpenSearchMaintenanceUpdate_description(ctx, field)
			case "deadline":
				return ec.fieldContext_OpenSearchMaintenanceUpdate_deadline(ctx, field)
			case "startAt":
				return ec.fieldContext_OpenSearchMaintenanceUpdate_startAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OpenSearchMaintenanceUpdate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceMaintenanceActivityLogEntry_id(ctx context.Context, field graphql.CollectedField, obj *activitylog.ServiceMaintenanceActivityLogEntry) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ServiceMaintenanceActivityLogEntry_id,
		func(ctx context.Context) (any, error) {
			return obj.ID(), nil
		},
		nil,
		ec.marshalNID2githubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋidentᚐIdent,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ServiceMaintenanceActivityLogEntry_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceMaintenanceActivityLogEntry",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceMaintenanceActivityLogEntry_actor(ctx context.Context, field graphql.CollectedField, obj *activitylog.ServiceMaintenanceActivityLogEntry) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ServiceMaintenanceActivityLogEntry_actor,
		func(ctx context.Context) (any, error) {
			return obj.Actor, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ServiceMaintenanceActivityLogEntry_actor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceMaintenanceActivityLogEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceMaintenanceActivityLogEntry_createdAt(ctx context.Context, field graphql.CollectedField, obj *activitylog.ServiceMaintenanceActivityLogEntry) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ServiceMaintenanceActivityLogEntry_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ServiceMaintenanceActivityLogEntry_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceMaintenanceActivityLogEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceMaintenanceActivityLogEntry_message(ctx context.Context, field graphql.CollectedField, obj *activitylog.ServiceMaintenanceActivityLogEntry) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ServiceMaintenanceActivityLogEntry_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ServiceMaintenanceActivityLogEntry_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceMaintenanceActivityLogEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceMaintenanceActivityLogEntry_resourceType(ctx context.Context, field graphql.CollectedField, obj *activitylog.ServiceMaintenanceActivityLogEntry) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ServiceMaintenanceActivityLogEntry_resourceType,
		func(ctx context.Context) (any, error) {
			return obj.ResourceType, nil
		},
		nil,
		ec.marshalNActivityLogEntryResourceType2githubᚗcomᚋnaisᚋapiᚋinternalᚋactivitylogᚐActivityLogEntryResourceType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ServiceMaintenanceActivityLogEntry_resourceType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceMaintenanceActivityLogEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ActivityLogEntryResourceType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceMaintenanceActivityLogEntry_resourceName(ctx context.Context, field graphql.CollectedField, obj *activitylog.ServiceMaintenanceActivityLogEntry) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ServiceMaintenanceActivityLogEntry_resourceName,
		func(ctx context.Context) (any, error) {
			return obj.ResourceName, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ServiceMaintenanceActivityLogEntry_resourceName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceMaintenanceActivityLogEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceMaintenanceActivityLogEntry_teamSlug(ctx context.Context, field graphql.CollectedField, obj *activitylog.ServiceMaintenanceActivityLogEntry) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ServiceMaintenanceActivityLogEntry_teamSlug,
		func(ctx context.Context) (any, error) {
			return obj.TeamSlug, nil
		},
		nil,
		ec.marshalNSlug2ᚖgithubᚗcomᚋnaisᚋapiᚋinternalᚋslugᚐSlug,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ServiceMaintenanceActivityLogEntry_teamSlug(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceMaintenanceActivityLogEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Slug does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceMaintenanceActivityLogEntry_environmentName(ctx context.Context, field graphql.CollectedField, obj *activitylog.ServiceMaintenanceActivityLogEntry) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ServiceMaintenanceActivityLogEntry_environmentName,
		func(ctx context.Context) (any, error) {
			return obj.EnvironmentName, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ServiceMaintenanceActivityLogEntry_environmentName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceMaintenanceActivityLogEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StartOpenSearchMaintenancePayload_error(ctx context.Context, field graphql.CollectedField, obj *servicemaintenance.StartOpenSearchMaintenancePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StartOpenSearchMaintenancePayload_error,
		func(ctx context.Context) (any, error) {
			return obj.Error, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StartOpenSearchMaintenancePayload_error(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StartOpenSearchMaintenancePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StartValkeyMaintenancePayload_error(ctx context.Context, field graphql.CollectedField, obj *servicemaintenance.StartValkeyMaintenancePayload) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StartValkeyMaintenancePayload_error,
		func(ctx context.Context) (any, error) {
			return obj.Error, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StartValkeyMaintenancePayload_error(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StartValkeyMaintenancePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ValkeyMaintenance_window(ctx context.Context, field graphql.CollectedField, obj *servicemaintenance.ValkeyMaintenance) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ValkeyMaintenance_window,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.ValkeyMaintenance().Window(ctx, obj)
		},
		nil,
		ec.marshalOMaintenanceWindow2ᚖgithubᚗcomᚋnaisᚋapiᚋinternalᚋservicemaintenanceᚐMaintenanceWindow,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ValkeyMaintenance_window(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ValkeyMaintenance",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "dayOfWeek":
				return ec.fieldContext_MaintenanceWindow_dayOfWeek(ctx, field)
			case "timeOfDay":
				return ec.fieldContext_MaintenanceWindow_timeOfDay(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MaintenanceWindow", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ValkeyMaintenance_updates(ctx context.Context, field graphql.CollectedField, obj *servicemaintenance.ValkeyMaintenance) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ValkeyMaintenance_updates,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.ValkeyMaintenance().Updates(ctx, obj, fc.Args["first"].(*int), fc.Args["after"].(*pagination.Cursor), fc.Args["last"].(*int), fc.Args["before"].(*pagination.Cursor))
		},
		nil,
		ec.marshalNValkeyMaintenanceUpdateConnection2ᚖgithubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐConnection,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ValkeyMaintenance_updates(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ValkeyMaintenance",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pageInfo":
				return ec.fieldContext_ValkeyMaintenanceUpdateConnection_pageInfo(ctx, field)
			case "nodes":
				return ec.fieldContext_ValkeyMaintenanceUpdateConnection_nodes(ctx, field)
			case "edges":
				return ec.fieldContext_ValkeyMaintenanceUpdateConnection_edges(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ValkeyMaintenanceUpdateConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ValkeyMaintenance_updates_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _ValkeyMaintenanceUpdate_title(ctx context.Context, field graphql.CollectedField, obj *servicemaintenance.ValkeyMaintenanceUpdate) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ValkeyMaintenanceUpdate_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ValkeyMaintenanceUpdate_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ValkeyMaintenanceUpdate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ValkeyMaintenanceUpdate_description(ctx context.Context, field graphql.CollectedField, obj *servicemaintenance.ValkeyMaintenanceUpdate) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ValkeyMaintenanceUpdate_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ValkeyMaintenanceUpdate_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ValkeyMaintenanceUpdate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ValkeyMaintenanceUpdate_deadline(ctx context.Context, field graphql.CollectedField, obj *servicemaintenance.ValkeyMaintenanceUpdate) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ValkeyMaintenanceUpdate_deadline,
		func(ctx context.Context) (any, error) {
			return obj.Deadline, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ValkeyMaintenanceUpdate_deadline(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ValkeyMaintenanceUpdate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ValkeyMaintenanceUpdate_startAt(ctx context.Context, field graphql.CollectedField, obj *servicemaintenance.ValkeyMaintenanceUpdate) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ValkeyMaintenanceUpdate_startAt,
		func(ctx context.Context) (any, error) {
			return obj.StartAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ValkeyMaintenanceUpdate_startAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ValkeyMaintenanceUpdate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ValkeyMaintenanceUpdateConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *pagination.Connection[*servicemaintenance.ValkeyMaintenanceUpdate]) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ValkeyMaintenanceUpdateConnection_pageInfo,
		func(ctx context.Context) (any, error) {
			return obj.PageInfo, nil
		},
		nil,
		ec.marshalNPageInfo2githubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐPageInfo,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ValkeyMaintenanceUpdateConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ValkeyMaintenanceUpdateConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "totalCount":
				return ec.fieldContext_PageInfo_totalCount(ctx, field)
			case "pageStart":
				return ec.fieldContext_PageInfo_pageStart(ctx, field)
			case "pageEnd":
				return ec.fieldContext_PageInfo_pageEnd(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ValkeyMaintenanceUpdateConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *pagination.Connection[*servicemaintenance.ValkeyMaintenanceUpdate]) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ValkeyMaintenanceUpdateConnection_nodes,
		func(ctx context.Context) (any, error) {
			return obj.Nodes(), nil
		},
		nil,
		ec.marshalNValkeyMaintenanceUpdate2ᚕᚖgithubᚗcomᚋnaisᚋapiᚋinternalᚋservicemaintenanceᚐValkeyMaintenanceUpdateᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ValkeyMaintenanceUpdateConnection_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ValkeyMaintenanceUpdateConnection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "title":
				return ec.fieldContext_ValkeyMaintenanceUpdate_title(ctx, field)
			case "description":
				return ec.fieldContext_ValkeyMaintenanceUpdate_description(ctx, field)
			case "deadline":
				return ec.fieldContext_ValkeyMaintenanceUpdate_deadline(ctx, field)
			case "startAt":
				return ec.fieldContext_ValkeyMaintenanceUpdate_startAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ValkeyMaintenanceUpdate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ValkeyMaintenanceUpdateConnection_edges(ctx context.Context, field graphql.CollectedField, obj *pagination.Connection[*servicemaintenance.ValkeyMaintenanceUpdate]) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ValkeyMaintenanceUpdateConnection_edges,
		func(ctx context.Context) (any, error) {
			return obj.Edges, nil
		},
		nil,
		ec.marshalNValkeyMaintenanceUpdateEdge2ᚕgithubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐEdgeᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ValkeyMaintenanceUpdateConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ValkeyMaintenanceUpdateConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_ValkeyMaintenanceUpdateEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_ValkeyMaintenanceUpdateEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ValkeyMaintenanceUpdateEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ValkeyMaintenanceUpdateEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *pagination.Edge[*servicemaintenance.ValkeyMaintenanceUpdate]) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ValkeyMaintenanceUpdateEdge_cursor,
		func(ctx context.Context) (any, error) {
			return obj.Cursor, nil
		},
		nil,
		ec.marshalNCursor2githubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐCursor,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ValkeyMaintenanceUpdateEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ValkeyMaintenanceUpdateEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ValkeyMaintenanceUpdateEdge_node(ctx context.Context, field graphql.CollectedField, obj *pagination.Edge[*servicemaintenance.ValkeyMaintenanceUpdate]) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ValkeyMaintenanceUpdateEdge_node,
		func(ctx context.Context) (any, error) {
			return obj.Node, nil
		},
		nil,
		ec.marshalNValkeyMaintenanceUpdate2ᚖgithubᚗcomᚋnaisᚋapiᚋinternalᚋservicemaintenanceᚐValkeyMaintenanceUpdate,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ValkeyMaintenanceUpdateEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ValkeyMaintenanceUpdateEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "title":
				return ec.fieldContext_ValkeyMaintenanceUpdate_title(ctx, field)
			case "description":
				return ec.fieldContext_ValkeyMaintenanceUpdate_description(ctx, field)
			case "deadline":
				return ec.fieldContext_ValkeyMaintenanceUpdate_deadline(ctx, field)
			case "startAt":
				return ec.fieldContext_ValkeyMaintenanceUpdate_startAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ValkeyMaintenanceUpdate", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputStartOpenSearchMaintenanceInput(ctx context.Context, obj any) (servicemaintenance.StartOpenSearchMaintenanceInput, error) {
	var it servicemaintenance.StartOpenSearchMaintenanceInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"serviceName", "teamSlug", "environmentName"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "serviceName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ServiceName = data
		case "teamSlug":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("teamSlug"))
			data, err := ec.unmarshalNSlug2githubᚗcomᚋnaisᚋapiᚋinternalᚋslugᚐSlug(ctx, v)
			if err != nil {
				return it, err
			}
			it.TeamSlug = data
		case "environmentName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("environmentName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.EnvironmentName = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStartValkeyMaintenanceInput(ctx context.Context, obj any) (servicemaintenance.StartValkeyMaintenanceInput, error) {
	var it servicemaintenance.StartValkeyMaintenanceInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"serviceName", "teamSlug", "environmentName"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "serviceName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ServiceName = data
		case "teamSlug":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("teamSlug"))
			data, err := ec.unmarshalNSlug2githubᚗcomᚋnaisᚋapiᚋinternalᚋslugᚐSlug(ctx, v)
			if err != nil {
				return it, err
			}
			it.TeamSlug = data
		case "environmentName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("environmentName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.EnvironmentName = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _ServiceMaintenanceUpdate(ctx context.Context, sel ast.SelectionSet, obj servicemaintenance.ServiceMaintenanceUpdate) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case servicemaintenance.ValkeyMaintenanceUpdate:
		return ec._ValkeyMaintenanceUpdate(ctx, sel, &obj)
	case *servicemaintenance.ValkeyMaintenanceUpdate:
		if obj == nil {
			return graphql.Null
		}
		return ec._ValkeyMaintenanceUpdate(ctx, sel, obj)
	case servicemaintenance.OpenSearchMaintenanceUpdate:
		return ec._OpenSearchMaintenanceUpdate(ctx, sel, &obj)
	case *servicemaintenance.OpenSearchMaintenanceUpdate:
		if obj == nil {
			return graphql.Null
		}
		return ec._OpenSearchMaintenanceUpdate(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var maintenanceWindowImplementors = []string{"MaintenanceWindow"}

func (ec *executionContext) _MaintenanceWindow(ctx context.Context, sel ast.SelectionSet, obj *servicemaintenance.MaintenanceWindow) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, maintenanceWindowImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MaintenanceWindow")
		case "dayOfWeek":
			out.Values[i] = ec._MaintenanceWindow_dayOfWeek(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "timeOfDay":
			out.Values[i] = ec._MaintenanceWindow_timeOfDay(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var openSearchMaintenanceImplementors = []string{"OpenSearchMaintenance"}

func (ec *executionContext) _OpenSearchMaintenance(ctx context.Context, sel ast.SelectionSet, obj *servicemaintenance.OpenSearchMaintenance) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, openSearchMaintenanceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OpenSearchMaintenance")
		case "window":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OpenSearchMaintenance_window(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "updates":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OpenSearchMaintenance_updates(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var openSearchMaintenanceUpdateImplementors = []string{"OpenSearchMaintenanceUpdate", "ServiceMaintenanceUpdate"}

func (ec *executionContext) _OpenSearchMaintenanceUpdate(ctx context.Context, sel ast.SelectionSet, obj *servicemaintenance.OpenSearchMaintenanceUpdate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, openSearchMaintenanceUpdateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OpenSearchMaintenanceUpdate")
		case "title":
			out.Values[i] = ec._OpenSearchMaintenanceUpdate_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._OpenSearchMaintenanceUpdate_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deadline":
			out.Values[i] = ec._OpenSearchMaintenanceUpdate_deadline(ctx, field, obj)
		case "startAt":
			out.Values[i] = ec._OpenSearchMaintenanceUpdate_startAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var openSearchMaintenanceUpdateConnectionImplementors = []string{"OpenSearchMaintenanceUpdateConnection"}

func (ec *executionContext) _OpenSearchMaintenanceUpdateConnection(ctx context.Context, sel ast.SelectionSet, obj *pagination.Connection[*servicemaintenance.OpenSearchMaintenanceUpdate]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, openSearchMaintenanceUpdateConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OpenSearchMaintenanceUpdateConnection")
		case "pageInfo":
			out.Values[i] = ec._OpenSearchMaintenanceUpdateConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._OpenSearchMaintenanceUpdateConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._OpenSearchMaintenanceUpdateConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var openSearchMaintenanceUpdateEdgeImplementors = []string{"OpenSearchMaintenanceUpdateEdge"}

func (ec *executionContext) _OpenSearchMaintenanceUpdateEdge(ctx context.Context, sel ast.SelectionSet, obj *pagination.Edge[*servicemaintenance.OpenSearchMaintenanceUpdate]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, openSearchMaintenanceUpdateEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OpenSearchMaintenanceUpdateEdge")
		case "cursor":
			out.Values[i] = ec._OpenSearchMaintenanceUpdateEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._OpenSearchMaintenanceUpdateEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var serviceMaintenanceActivityLogEntryImplementors = []string{"ServiceMaintenanceActivityLogEntry", "ActivityLogEntry", "Node"}

func (ec *executionContext) _ServiceMaintenanceActivityLogEntry(ctx context.Context, sel ast.SelectionSet, obj *activitylog.ServiceMaintenanceActivityLogEntry) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, serviceMaintenanceActivityLogEntryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceMaintenanceActivityLogEntry")
		case "id":
			out.Values[i] = ec._ServiceMaintenanceActivityLogEntry_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "actor":
			out.Values[i] = ec._ServiceMaintenanceActivityLogEntry_actor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._ServiceMaintenanceActivityLogEntry_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ServiceMaintenanceActivityLogEntry_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "resourceType":
			out.Values[i] = ec._ServiceMaintenanceActivityLogEntry_resourceType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "resourceName":
			out.Values[i] = ec._ServiceMaintenanceActivityLogEntry_resourceName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "teamSlug":
			out.Values[i] = ec._ServiceMaintenanceActivityLogEntry_teamSlug(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "environmentName":
			out.Values[i] = ec._ServiceMaintenanceActivityLogEntry_environmentName(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var startOpenSearchMaintenancePayloadImplementors = []string{"StartOpenSearchMaintenancePayload"}

func (ec *executionContext) _StartOpenSearchMaintenancePayload(ctx context.Context, sel ast.SelectionSet, obj *servicemaintenance.StartOpenSearchMaintenancePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, startOpenSearchMaintenancePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StartOpenSearchMaintenancePayload")
		case "error":
			out.Values[i] = ec._StartOpenSearchMaintenancePayload_error(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var startValkeyMaintenancePayloadImplementors = []string{"StartValkeyMaintenancePayload"}

func (ec *executionContext) _StartValkeyMaintenancePayload(ctx context.Context, sel ast.SelectionSet, obj *servicemaintenance.StartValkeyMaintenancePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, startValkeyMaintenancePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StartValkeyMaintenancePayload")
		case "error":
			out.Values[i] = ec._StartValkeyMaintenancePayload_error(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var valkeyMaintenanceImplementors = []string{"ValkeyMaintenance"}

func (ec *executionContext) _ValkeyMaintenance(ctx context.Context, sel ast.SelectionSet, obj *servicemaintenance.ValkeyMaintenance) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, valkeyMaintenanceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ValkeyMaintenance")
		case "window":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ValkeyMaintenance_window(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "updates":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ValkeyMaintenance_updates(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var valkeyMaintenanceUpdateImplementors = []string{"ValkeyMaintenanceUpdate", "ServiceMaintenanceUpdate"}

func (ec *executionContext) _ValkeyMaintenanceUpdate(ctx context.Context, sel ast.SelectionSet, obj *servicemaintenance.ValkeyMaintenanceUpdate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, valkeyMaintenanceUpdateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ValkeyMaintenanceUpdate")
		case "title":
			out.Values[i] = ec._ValkeyMaintenanceUpdate_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._ValkeyMaintenanceUpdate_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deadline":
			out.Values[i] = ec._ValkeyMaintenanceUpdate_deadline(ctx, field, obj)
		case "startAt":
			out.Values[i] = ec._ValkeyMaintenanceUpdate_startAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var valkeyMaintenanceUpdateConnectionImplementors = []string{"ValkeyMaintenanceUpdateConnection"}

func (ec *executionContext) _ValkeyMaintenanceUpdateConnection(ctx context.Context, sel ast.SelectionSet, obj *pagination.Connection[*servicemaintenance.ValkeyMaintenanceUpdate]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, valkeyMaintenanceUpdateConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ValkeyMaintenanceUpdateConnection")
		case "pageInfo":
			out.Values[i] = ec._ValkeyMaintenanceUpdateConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._ValkeyMaintenanceUpdateConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._ValkeyMaintenanceUpdateConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var valkeyMaintenanceUpdateEdgeImplementors = []string{"ValkeyMaintenanceUpdateEdge"}

func (ec *executionContext) _ValkeyMaintenanceUpdateEdge(ctx context.Context, sel ast.SelectionSet, obj *pagination.Edge[*servicemaintenance.ValkeyMaintenanceUpdate]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, valkeyMaintenanceUpdateEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ValkeyMaintenanceUpdateEdge")
		case "cursor":
			out.Values[i] = ec._ValkeyMaintenanceUpdateEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._ValkeyMaintenanceUpdateEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNOpenSearchMaintenance2githubᚗcomᚋnaisᚋapiᚋinternalᚋservicemaintenanceᚐOpenSearchMaintenance(ctx context.Context, sel ast.SelectionSet, v servicemaintenance.OpenSearchMaintenance) graphql.Marshaler {
	return ec._OpenSearchMaintenance(ctx, sel, &v)
}

func (ec *executionContext) marshalNOpenSearchMaintenance2ᚖgithubᚗcomᚋnaisᚋapiᚋinternalᚋservicemaintenanceᚐOpenSearchMaintenance(ctx context.Context, sel ast.SelectionSet, v *servicemaintenance.OpenSearchMaintenance) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OpenSearchMaintenance(ctx, sel, v)
}

func (ec *executionContext) marshalNOpenSearchMaintenanceUpdate2ᚕᚖgithubᚗcomᚋnaisᚋapiᚋinternalᚋservicemaintenanceᚐOpenSearchMaintenanceUpdateᚄ(ctx context.Context, sel ast.SelectionSet, v []*servicemaintenance.OpenSearchMaintenanceUpdate) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOpenSearchMaintenanceUpdate2ᚖgithubᚗcomᚋnaisᚋapiᚋinternalᚋservicemaintenanceᚐOpenSearchMaintenanceUpdate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNOpenSearchMaintenanceUpdate2ᚖgithubᚗcomᚋnaisᚋapiᚋinternalᚋservicemaintenanceᚐOpenSearchMaintenanceUpdate(ctx context.Context, sel ast.SelectionSet, v *servicemaintenance.OpenSearchMaintenanceUpdate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OpenSearchMaintenanceUpdate(ctx, sel, v)
}

func (ec *executionContext) marshalNOpenSearchMaintenanceUpdateConnection2githubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐConnection(ctx context.Context, sel ast.SelectionSet, v pagination.Connection[*servicemaintenance.OpenSearchMaintenanceUpdate]) graphql.Marshaler {
	return ec._OpenSearchMaintenanceUpdateConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNOpenSearchMaintenanceUpdateConnection2ᚖgithubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐConnection(ctx context.Context, sel ast.SelectionSet, v *pagination.Connection[*servicemaintenance.OpenSearchMaintenanceUpdate]) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OpenSearchMaintenanceUpdateConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNOpenSearchMaintenanceUpdateEdge2githubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐEdge(ctx context.Context, sel ast.SelectionSet, v pagination.Edge[*servicemaintenance.OpenSearchMaintenanceUpdate]) graphql.Marshaler {
	return ec._OpenSearchMaintenanceUpdateEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalNOpenSearchMaintenanceUpdateEdge2ᚕgithubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []pagination.Edge[*servicemaintenance.OpenSearchMaintenanceUpdate]) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOpenSearchMaintenanceUpdateEdge2githubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNStartOpenSearchMaintenanceInput2githubᚗcomᚋnaisᚋapiᚋinternalᚋservicemaintenanceᚐStartOpenSearchMaintenanceInput(ctx context.Context, v any) (servicemaintenance.StartOpenSearchMaintenanceInput, error) {
	res, err := ec.unmarshalInputStartOpenSearchMaintenanceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNStartValkeyMaintenanceInput2githubᚗcomᚋnaisᚋapiᚋinternalᚋservicemaintenanceᚐStartValkeyMaintenanceInput(ctx context.Context, v any) (servicemaintenance.StartValkeyMaintenanceInput, error) {
	res, err := ec.unmarshalInputStartValkeyMaintenanceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNValkeyMaintenance2githubᚗcomᚋnaisᚋapiᚋinternalᚋservicemaintenanceᚐValkeyMaintenance(ctx context.Context, sel ast.SelectionSet, v servicemaintenance.ValkeyMaintenance) graphql.Marshaler {
	return ec._ValkeyMaintenance(ctx, sel, &v)
}

func (ec *executionContext) marshalNValkeyMaintenance2ᚖgithubᚗcomᚋnaisᚋapiᚋinternalᚋservicemaintenanceᚐValkeyMaintenance(ctx context.Context, sel ast.SelectionSet, v *servicemaintenance.ValkeyMaintenance) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ValkeyMaintenance(ctx, sel, v)
}

func (ec *executionContext) marshalNValkeyMaintenanceUpdate2ᚕᚖgithubᚗcomᚋnaisᚋapiᚋinternalᚋservicemaintenanceᚐValkeyMaintenanceUpdateᚄ(ctx context.Context, sel ast.SelectionSet, v []*servicemaintenance.ValkeyMaintenanceUpdate) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNValkeyMaintenanceUpdate2ᚖgithubᚗcomᚋnaisᚋapiᚋinternalᚋservicemaintenanceᚐValkeyMaintenanceUpdate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNValkeyMaintenanceUpdate2ᚖgithubᚗcomᚋnaisᚋapiᚋinternalᚋservicemaintenanceᚐValkeyMaintenanceUpdate(ctx context.Context, sel ast.SelectionSet, v *servicemaintenance.ValkeyMaintenanceUpdate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ValkeyMaintenanceUpdate(ctx, sel, v)
}

func (ec *executionContext) marshalNValkeyMaintenanceUpdateConnection2githubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐConnection(ctx context.Context, sel ast.SelectionSet, v pagination.Connection[*servicemaintenance.ValkeyMaintenanceUpdate]) graphql.Marshaler {
	return ec._ValkeyMaintenanceUpdateConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNValkeyMaintenanceUpdateConnection2ᚖgithubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐConnection(ctx context.Context, sel ast.SelectionSet, v *pagination.Connection[*servicemaintenance.ValkeyMaintenanceUpdate]) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ValkeyMaintenanceUpdateConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNValkeyMaintenanceUpdateEdge2githubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐEdge(ctx context.Context, sel ast.SelectionSet, v pagination.Edge[*servicemaintenance.ValkeyMaintenanceUpdate]) graphql.Marshaler {
	return ec._ValkeyMaintenanceUpdateEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalNValkeyMaintenanceUpdateEdge2ᚕgithubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []pagination.Edge[*servicemaintenance.ValkeyMaintenanceUpdate]) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNValkeyMaintenanceUpdateEdge2githubᚗcomᚋnaisᚋapiᚋinternalᚋgraphᚋpaginationᚐEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMaintenanceWindow2ᚖgithubᚗcomᚋnaisᚋapiᚋinternalᚋservicemaintenanceᚐMaintenanceWindow(ctx context.Context, sel ast.SelectionSet, v *servicemaintenance.MaintenanceWindow) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MaintenanceWindow(ctx, sel, v)
}

func (ec *executionContext) marshalOStartOpenSearchMaintenancePayload2ᚖgithubᚗcomᚋnaisᚋapiᚋinternalᚋservicemaintenanceᚐStartOpenSearchMaintenancePayload(ctx context.Context, sel ast.SelectionSet, v *servicemaintenance.StartOpenSearchMaintenancePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StartOpenSearchMaintenancePayload(ctx, sel, v)
}

func (ec *executionContext) marshalOStartValkeyMaintenancePayload2ᚖgithubᚗcomᚋnaisᚋapiᚋinternalᚋservicemaintenanceᚐStartValkeyMaintenancePayload(ctx context.Context, sel ast.SelectionSet, v *servicemaintenance.StartValkeyMaintenancePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StartValkeyMaintenancePayload(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
