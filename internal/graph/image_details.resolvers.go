package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/nais/api/internal/graph/gengql"
	"github.com/nais/api/internal/graph/model"
)

// AnalysisTrail is the resolver for the analysisTrail field.
func (r *findingResolver) AnalysisTrail(ctx context.Context, obj *model.Finding) (*model.AnalysisTrail, error) {
	return r.dependencyTrackClient.GetAnalysisTrailForImage(ctx, obj.ParentID, obj.ComponentID, obj.VulnerabilityID)
}

// SuppressFinding is the resolver for the suppressFinding field.
func (r *mutationResolver) SuppressFinding(ctx context.Context, analysisState string, comment string, componentID string, projectID string, vulnerabilityID string, suppressedBy string, suppress bool) (*model.AnalysisTrail, error) {
	options := []string{
		"IN_TRIAGE",
		"RESOLVED",
		"FALSE_POSITIVE",
		"NOT_AFFECTED",
	}

	var valid bool
	for _, o := range options {
		if analysisState == o {
			valid = true
			break
		}
	}

	if _, err := uuid.Parse(componentID); err != nil {
		return nil, fmt.Errorf("invalid component ID: %s", componentID)
	}
	if _, err := uuid.Parse(projectID); err != nil {
		return nil, fmt.Errorf("invalid project ID: %s", projectID)
	}
	if _, err := uuid.Parse(vulnerabilityID); err != nil {
		return nil, fmt.Errorf("invalid vulnerability ID: %s", vulnerabilityID)
	}

	if !valid {
		return nil, fmt.Errorf("invalid analysis state: %s", analysisState)
	}

	trail, err := r.dependencyTrackClient.SuppressFinding(ctx, analysisState, comment, componentID, projectID, vulnerabilityID, suppressedBy, suppress)
	if err != nil {
		return nil, err
	}

	return trail, nil
}

// Finding returns gengql.FindingResolver implementation.
func (r *Resolver) Finding() gengql.FindingResolver { return &findingResolver{r} }

type findingResolver struct{ *Resolver }
