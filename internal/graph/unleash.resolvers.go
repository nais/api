package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"fmt"

	"github.com/nais/api/internal/graph/gengql"
	"github.com/nais/api/internal/graph/model"
	"github.com/nais/api/internal/slug"
)

// CreateUnleashForTeam is the resolver for the createUnleashForTeam field.
func (r *mutationResolver) CreateUnleashForTeam(ctx context.Context, team slug.Slug) (*model.Unleash, error) {
	//actor := authz.ActorFromContext(ctx)
	//err := authz.RequireTeamMembership(actor, team)
	//if err != nil {
	//	return nil, err
	//}

	err := r.unleashMgr.NewUnleash(ctx, team.String(), []string{team.String()})
	if err != nil {
		return nil, err
	}

	return r.unleashMgr.Unleash(team.String())
}

// Toggles is the resolver for the toggles field.
func (r *unleashMetricsResolver) Toggles(ctx context.Context, obj *model.UnleashMetrics) (int, error) {
	toggles, err := r.unleashMgr.PromQuery(ctx, fmt.Sprintf("sum(feature_toggles_total{job=~\"%s\", namespace=\"%s\"})", obj.GQLVars.InstanceName, obj.GQLVars.Namespace))
	if err != nil {
		return 0, err
	}
	return int(toggles), nil
}

// APITokens is the resolver for the apiTokens field.
func (r *unleashMetricsResolver) APITokens(ctx context.Context, obj *model.UnleashMetrics) (int, error) {
	apiTokens, err := r.unleashMgr.PromQuery(ctx, fmt.Sprintf("sum(client_apps_total{job=~\"%s\", namespace=\"%s\", range=\"allTime\"})", obj.GQLVars.InstanceName, obj.GQLVars.Namespace))
	if err != nil {
		return 0, err
	}
	return int(apiTokens), nil
}

// CPUUtilization is the resolver for the cpuUtilization field.
func (r *unleashMetricsResolver) CPUUtilization(ctx context.Context, obj *model.UnleashMetrics) (float64, error) {
	cpu, err := r.unleashMgr.PromQuery(ctx, fmt.Sprintf("irate(process_cpu_user_seconds_total{job=\"%s\", namespace=\"%s\"}[2m])", obj.GQLVars.InstanceName, obj.GQLVars.Namespace))
	if err != nil {
		return 0, err
	}
	return float64(cpu) / obj.CpuRequests * 100, nil
}

// MemoryUtilization is the resolver for the memoryUtilization field.
func (r *unleashMetricsResolver) MemoryUtilization(ctx context.Context, obj *model.UnleashMetrics) (float64, error) {
	memory, err := r.unleashMgr.PromQuery(ctx, fmt.Sprintf("process_resident_memory_bytes{job=\"%s\", namespace=\"%s\"}", obj.GQLVars.InstanceName, obj.GQLVars.Namespace))
	if err != nil {
		return 0, err
	}
	return float64(memory) / obj.MemoryRequests * 100, nil
}

// UnleashMetrics returns gengql.UnleashMetricsResolver implementation.
func (r *Resolver) UnleashMetrics() gengql.UnleashMetricsResolver { return &unleashMetricsResolver{r} }

type unleashMetricsResolver struct{ *Resolver }
