package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"fmt"

	"github.com/nais/api/internal/graph/gengql"
	"github.com/nais/api/internal/graph/model"
	"github.com/nais/api/internal/graph/scalar"
	"github.com/nais/api/internal/slug"
)

// Secret is the resolver for the secret field.
func (r *queryResolver) Secret(ctx context.Context, name string, team slug.Slug, env string) (*model.Secret, error) {
	panic(fmt.Errorf("not implemented: Secret - secret"))
}

// ID is the resolver for the id field.
func (r *secretResolver) ID(ctx context.Context, obj *model.Secret) (*scalar.Ident, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Data is the resolver for the data field.
func (r *secretResolver) Data(ctx context.Context, obj *model.Secret) ([]*model.SecretTuple, error) {
	panic(fmt.Errorf("not implemented: Data - data"))
}

// Secret returns gengql.SecretResolver implementation.
func (r *Resolver) Secret() gengql.SecretResolver { return &secretResolver{r} }

type secretResolver struct{ *Resolver }
