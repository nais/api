package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"fmt"

	"github.com/nais/api/internal/auth/authz"
	"github.com/nais/api/internal/graph/apierror"
	"github.com/nais/api/internal/graph/gengql"
	"github.com/nais/api/internal/graph/loader"
	"github.com/nais/api/internal/graph/model"
	"github.com/nais/api/internal/slug"
	"github.com/nais/api/internal/thirdparty/dependencytrack"
	"k8s.io/utils/ptr"
)

// Instances is the resolver for the instances field.
func (r *appResolver) Instances(ctx context.Context, obj *model.App) ([]*model.Instance, error) {
	instances, err := r.k8sClient.Instances(ctx, obj.GQLVars.Team.String(), obj.Env.Name, obj.Name)
	if err != nil {
		return nil, fmt.Errorf("getting instances from Kubernetes: %w", err)
	}

	return instances, nil
}

// Persistence is the resolver for the persistence field.
func (r *appResolver) Persistence(ctx context.Context, obj *model.App) ([]model.Persistence, error) {
	return r.k8sClient.Persistence(ctx, obj.WorkloadBase)
}

// Manifest is the resolver for the manifest field.
func (r *appResolver) Manifest(ctx context.Context, obj *model.App) (string, error) {
	app, err := r.k8sClient.Manifest(ctx, obj.Name, obj.GQLVars.Team.String(), obj.Env.Name)
	if err != nil {
		return "", fmt.Errorf("getting app manifest from Kubernetes: %w", err)
	}
	return app, err
}

// Team is the resolver for the team field.
func (r *appResolver) Team(ctx context.Context, obj *model.App) (*model.Team, error) {
	return loader.GetTeam(ctx, obj.GQLVars.Team)
}

// Vulnerabilities is the resolver for the vulnerabilities field.
func (r *appResolver) Vulnerabilities(ctx context.Context, obj *model.App) (*model.Vulnerability, error) {
	return r.dependencyTrackClient.VulnerabilitySummary(ctx, &dependencytrack.AppInstance{Env: obj.Env.Name, Team: obj.GQLVars.Team.String(), App: obj.Name, Image: obj.GQLVars.Spec.ImageName})
}

// Secrets is the resolver for the secrets field.
func (r *appResolver) Secrets(ctx context.Context, obj *model.App) ([]*model.Secret, error) {
	actor := authz.ActorFromContext(ctx)
	err := authz.RequireTeamMembership(actor, obj.GQLVars.Team)
	if err != nil {
		return nil, err
	}

	return r.k8sClient.SecretsForApp(ctx, obj)
}

// ImageName is the resolver for the imageName field.
func (r *instanceResolver) ImageName(ctx context.Context, obj *model.Instance) (string, error) {
	panic(fmt.Errorf("not implemented: ImageName - imageName"))
}

// DeleteApp is the resolver for the deleteApp field.
func (r *mutationResolver) DeleteApp(ctx context.Context, name string, team slug.Slug, env string) (*model.DeleteAppResult, error) {
	actor := authz.ActorFromContext(ctx)
	err := authz.RequireTeamMembership(actor, team)
	if err != nil {
		return nil, err
	}

	if err := r.k8sClient.DeleteApp(ctx, name, team.String(), env); err != nil {
		return &model.DeleteAppResult{
			Deleted: false,
			Error:   ptr.To(err.Error()),
		}, nil
	}

	return &model.DeleteAppResult{
		Deleted: true,
	}, nil
}

// RestartApp is the resolver for the restartApp field.
func (r *mutationResolver) RestartApp(ctx context.Context, name string, team slug.Slug, env string) (*model.RestartAppResult, error) {
	actor := authz.ActorFromContext(ctx)
	err := authz.RequireTeamMembership(actor, team)
	if err != nil {
		return nil, err
	}

	if err := r.k8sClient.RestartApp(ctx, name, team.String(), env); err != nil {
		return &model.RestartAppResult{
			Error: ptr.To(err.Error()),
		}, nil
	}
	return &model.RestartAppResult{}, nil
}

// App is the resolver for the app field.
func (r *queryResolver) App(ctx context.Context, name string, team slug.Slug, env string) (*model.App, error) {
	app, err := r.k8sClient.App(ctx, name, team.String(), env)
	if err != nil {
		return nil, apierror.ErrAppNotFound
	}
	image, err := r.dependencyTrackClient.GetMetadataForImage(ctx, app.GQLVars.Spec.ImageName)
	if err != nil {
		return nil, fmt.Errorf("getting metadata for image %q: %w", app.GQLVars.Spec.ImageName, err)
	}
	if image != nil {
		app.ImageDetails = *image
	}
	for _, ref := range image.WorkloadReferences {
		app, err := r.k8sClient.App(ctx, ref.Name, ref.Team, ref.Environment)
		if err != nil {
			continue
		}
		if app == nil {
			continue
		}
		ref.DeployInfo = app.DeployInfo
	}
	return app, nil
}

// App returns gengql.AppResolver implementation.
func (r *Resolver) App() gengql.AppResolver { return &appResolver{r} }

// Instance returns gengql.InstanceResolver implementation.
func (r *Resolver) Instance() gengql.InstanceResolver { return &instanceResolver{r} }

type (
	appResolver      struct{ *Resolver }
	instanceResolver struct{ *Resolver }
)
