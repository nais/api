package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"fmt"

	"github.com/nais/api/internal/graph/gengql"
	"github.com/nais/api/internal/graph/loader"
	"github.com/nais/api/internal/graph/model"
	"github.com/nais/api/internal/slug"
)

// Team is the resolver for the team field.
func (r *bigQueryDatasetResolver) Team(ctx context.Context, obj *model.BigQueryDataset) (*model.Team, error) {
	return loader.GetTeam(ctx, obj.GQLVars.TeamSlug)
}

// Workload is the resolver for the workload field.
func (r *bigQueryDatasetResolver) Workload(ctx context.Context, obj *model.BigQueryDataset) (model.Workload, error) {
	return r.workload(ctx, obj.GQLVars.OwnerReference, obj.GQLVars.TeamSlug, obj.Env.Name)
}

// Team is the resolver for the team field.
func (r *bucketResolver) Team(ctx context.Context, obj *model.Bucket) (*model.Team, error) {
	return loader.GetTeam(ctx, obj.GQLVars.TeamSlug)
}

// Workload is the resolver for the workload field.
func (r *bucketResolver) Workload(ctx context.Context, obj *model.Bucket) (model.Workload, error) {
	return r.workload(ctx, obj.GQLVars.OwnerReference, obj.GQLVars.TeamSlug, obj.Env.Name)
}

// Team is the resolver for the team field.
func (r *kafkaTopicResolver) Team(ctx context.Context, obj *model.KafkaTopic) (*model.Team, error) {
	return loader.GetTeam(ctx, obj.GQLVars.TeamSlug)
}

// Workload is the resolver for the workload field.
func (r *kafkaTopicResolver) Workload(ctx context.Context, obj *model.KafkaTopic) (model.Workload, error) {
	return r.workload(ctx, obj.GQLVars.OwnerReference, obj.GQLVars.TeamSlug, obj.Env.Name)
}

// Team is the resolver for the team field.
func (r *openSearchResolver) Team(ctx context.Context, obj *model.OpenSearch) (*model.Team, error) {
	return loader.GetTeam(ctx, obj.GQLVars.TeamSlug)
}

// Workload is the resolver for the workload field.
func (r *openSearchResolver) Workload(ctx context.Context, obj *model.OpenSearch) (model.Workload, error) {
	return r.workload(ctx, obj.GQLVars.OwnerReference, obj.GQLVars.TeamSlug, obj.Env.Name)
}

// Bucket is the resolver for the bucket field.
func (r *queryResolver) Bucket(ctx context.Context, name string, team slug.Slug, env string) (*model.Bucket, error) {
	panic(fmt.Errorf("not implemented: Bucket - bucket"))
}

// Redis is the resolver for the redis field.
func (r *queryResolver) Redis(ctx context.Context, name string, team slug.Slug, env string) (*model.Redis, error) {
	return r.redisClient.RedisInstance(team, name, env)
}

// Team is the resolver for the team field.
func (r *redisResolver) Team(ctx context.Context, obj *model.Redis) (*model.Team, error) {
	return loader.GetTeam(ctx, obj.GQLVars.TeamSlug)
}

// Workload is the resolver for the workload field.
func (r *redisResolver) Workload(ctx context.Context, obj *model.Redis) (model.Workload, error) {
	return r.workload(ctx, obj.GQLVars.OwnerReference, obj.GQLVars.TeamSlug, obj.Env.Name)
}

// Database is the resolver for the database field.
func (r *sqlInstanceResolver) Database(ctx context.Context, obj *model.SQLInstance) (*model.SQLDatabase, error) {
	return r.sqlInstanceClient.SqlDatabase(obj)
}

// Team is the resolver for the team field.
func (r *sqlInstanceResolver) Team(ctx context.Context, obj *model.SQLInstance) (*model.Team, error) {
	return loader.GetTeam(ctx, obj.GQLVars.TeamSlug)
}

// Users is the resolver for the users field.
func (r *sqlInstanceResolver) Users(ctx context.Context, obj *model.SQLInstance) ([]*model.SQLUser, error) {
	return r.sqlInstanceClient.SqlUsers(ctx, obj)
}

// Workload is the resolver for the workload field.
func (r *sqlInstanceResolver) Workload(ctx context.Context, obj *model.SQLInstance) (model.Workload, error) {
	return r.workload(ctx, obj.GQLVars.OwnerReference, obj.GQLVars.TeamSlug, obj.Env.Name)
}

// BigQueryDataset returns gengql.BigQueryDatasetResolver implementation.
func (r *Resolver) BigQueryDataset() gengql.BigQueryDatasetResolver {
	return &bigQueryDatasetResolver{r}
}

// Bucket returns gengql.BucketResolver implementation.
func (r *Resolver) Bucket() gengql.BucketResolver { return &bucketResolver{r} }

// KafkaTopic returns gengql.KafkaTopicResolver implementation.
func (r *Resolver) KafkaTopic() gengql.KafkaTopicResolver { return &kafkaTopicResolver{r} }

// OpenSearch returns gengql.OpenSearchResolver implementation.
func (r *Resolver) OpenSearch() gengql.OpenSearchResolver { return &openSearchResolver{r} }

// Redis returns gengql.RedisResolver implementation.
func (r *Resolver) Redis() gengql.RedisResolver { return &redisResolver{r} }

// SqlInstance returns gengql.SqlInstanceResolver implementation.
func (r *Resolver) SqlInstance() gengql.SqlInstanceResolver { return &sqlInstanceResolver{r} }

type (
	bigQueryDatasetResolver struct{ *Resolver }
	bucketResolver          struct{ *Resolver }
	kafkaTopicResolver      struct{ *Resolver }
	openSearchResolver      struct{ *Resolver }
	redisResolver           struct{ *Resolver }
	sqlInstanceResolver     struct{ *Resolver }
)
