package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/nais/api/internal/auth/authz"
	"github.com/nais/api/internal/graph/gengql"
	"github.com/nais/api/internal/graph/loader"
	"github.com/nais/api/internal/graph/model"
	"github.com/nais/api/internal/slug"
)

// CreateSecret is the resolver for the createSecret field.
func (r *mutationResolver) CreateSecret(ctx context.Context, name string, team slug.Slug, env string, data []*model.VariableInput) (*model.Secret, error) {
	actor := authz.ActorFromContext(ctx)
	err := authz.RequireTeamMembership(actor, team)
	if err != nil {
		return nil, err
	}
	return r.k8sClient.CreateSecret(ctx, name, team, env, data)
}

// UpdateSecret is the resolver for the updateSecret field.
func (r *mutationResolver) UpdateSecret(ctx context.Context, name string, team slug.Slug, env string, data []*model.VariableInput) (*model.Secret, error) {
	actor := authz.ActorFromContext(ctx)
	err := authz.RequireTeamMembership(actor, team)
	if err != nil {
		return nil, err
	}
	return r.k8sClient.UpdateSecret(ctx, name, team, env, data)
}

// DeleteSecret is the resolver for the deleteSecret field.
func (r *mutationResolver) DeleteSecret(ctx context.Context, name string, team slug.Slug, env string) (bool, error) {
	actor := authz.ActorFromContext(ctx)
	err := authz.RequireTeamMembership(actor, team)
	if err != nil {
		return false, err
	}
	return r.k8sClient.DeleteSecret(ctx, name, team, env)
}

// Env is the resolver for the env field.
func (r *secretResolver) Env(ctx context.Context, obj *model.Secret) (*model.Env, error) {
	return &model.Env{Name: obj.GQLVars.Env, Team: obj.GQLVars.Team.String()}, nil
}

// Team is the resolver for the team field.
func (r *secretResolver) Team(ctx context.Context, obj *model.Secret) (*model.Team, error) {
	return loader.GetTeam(ctx, obj.GQLVars.Team)
}

// Data is the resolver for the data field.
func (r *secretResolver) Data(ctx context.Context, obj *model.Secret) ([]*model.Variable, error) {
	return convertSecretDataToTuple(obj.Data), nil
}

// Apps is the resolver for the apps field.
func (r *secretResolver) Apps(ctx context.Context, obj *model.Secret) ([]*model.App, error) {
	return r.k8sClient.AppsUsingSecret(ctx, obj)
}

// LastModifiedBy is the resolver for the lastModifiedBy field.
func (r *secretResolver) LastModifiedBy(ctx context.Context, obj *model.Secret) (*model.User, error) {
	return r.Query().User(ctx, nil, &obj.GQLVars.LastModifiedBy)
}

// Secret returns gengql.SecretResolver implementation.
func (r *Resolver) Secret() gengql.SecretResolver { return &secretResolver{r} }

type secretResolver struct{ *Resolver }
