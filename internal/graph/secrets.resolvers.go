package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"fmt"

	"github.com/nais/api/internal/graph/gengql"
	"github.com/nais/api/internal/graph/model"
	"github.com/nais/api/internal/slug"
)

// CreateSecret is the resolver for the createSecret field.
func (r *mutationResolver) CreateSecret(ctx context.Context, name string, team slug.Slug, env string, data []*model.SecretTupleInput) (*model.Secret, error) {
	secret := emptySecret(name, team, env)
	secret.Data = convertSecretData(data)

	return r.k8sClient.CreateSecret(ctx, secret)
}

// UpdateSecret is the resolver for the updateSecret field.
func (r *mutationResolver) UpdateSecret(ctx context.Context, name string, team slug.Slug, env string, data []*model.SecretTupleInput) (*model.Secret, error) {
	secret := emptySecret(name, team, env)
	secret.Data = convertSecretData(data)

	return r.k8sClient.UpdateSecret(ctx, secret)
}

// DeleteSecret is the resolver for the deleteSecret field.
func (r *mutationResolver) DeleteSecret(ctx context.Context, name string, team slug.Slug, env string) (bool, error) {
	err := r.k8sClient.DeleteSecret(ctx, name, team, env)
	if err != nil {
		return false, err
	}

	return true, nil
}

// Secrets is the resolver for the secrets field.
func (r *queryResolver) Secrets(ctx context.Context, team slug.Slug) ([]*model.EnvSecret, error) {
	return r.k8sClient.Secrets(ctx, team.String())
}

// Secret is the resolver for the secret field.
func (r *queryResolver) Secret(ctx context.Context, name string, team slug.Slug, env string) (*model.Secret, error) {
	return r.k8sClient.Secret(ctx, name, team.String(), env)
}

// Env is the resolver for the env field.
func (r *secretResolver) Env(ctx context.Context, obj *model.Secret) (*model.Env, error) {
	panic(fmt.Errorf("not implemented: Env - env"))
}

// Data is the resolver for the data field.
func (r *secretResolver) Data(ctx context.Context, obj *model.Secret) ([]*model.SecretTuple, error) {
	return convertSecretDataToTuple(obj.Data), nil
}

// Secret returns gengql.SecretResolver implementation.
func (r *Resolver) Secret() gengql.SecretResolver { return &secretResolver{r} }

type secretResolver struct{ *Resolver }
