package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"github.com/nais/api/internal/graph/gengql"
	"github.com/nais/api/internal/graph/model"
	"github.com/nais/api/internal/graph/scalar"
	"github.com/nais/api/internal/slug"
)

// CreateSecret is the resolver for the createSecret field.
func (r *mutationResolver) CreateSecret(ctx context.Context, name string, team slug.Slug, env string, data []*model.SecretTupleInput) (*model.Secret, error) {
	secret := emptySecret(name, team, env)
	secret.Data = convertSecretData(data)

	return r.k8sClient.CreateSecret(ctx, secret)
}

// UpdateSecret is the resolver for the updateSecret field.
func (r *mutationResolver) UpdateSecret(ctx context.Context, name string, team slug.Slug, env string, data []*model.SecretTupleInput) (*model.Secret, error) {
	secret := emptySecret(name, team, env)
	secret.Data = convertSecretData(data)

	return r.k8sClient.UpdateSecret(ctx, secret)
}

// DeleteSecret is the resolver for the deleteSecret field.
func (r *mutationResolver) DeleteSecret(ctx context.Context, name string, team slug.Slug, env string) (bool, error) {
	err := r.k8sClient.DeleteSecret(ctx, emptySecret(name, team, env))
	if err != nil {
		return false, err
	}

	return true, nil
}

// Secrets is the resolver for the secrets field.
func (r *queryResolver) Secrets(ctx context.Context, team slug.Slug) ([]*model.Secret, error) {
	return r.k8sClient.Secrets(ctx, team.String())
}

// Secret is the resolver for the secret field.
func (r *queryResolver) Secret(ctx context.Context, name string, team slug.Slug, env string) (*model.Secret, error) {
	return r.k8sClient.Secret(ctx, name, team.String(), env)
}

// Data is the resolver for the data field.
func (r *secretResolver) Data(_ context.Context, obj *model.Secret) ([]*model.SecretTuple, error) {
	return convertSecretDataToTuple(obj.Data), nil
}

func convertSecretDataToTuple(data map[string]string) []*model.SecretTuple {
	ret := make([]*model.SecretTuple, 0, len(data))
	for key, value := range data {
		ret = append(ret, &model.SecretTuple{
			Key:   key,
			Value: value,
		})
	}
	return ret
}

func makeSecretIdent(env, namespace, name string) scalar.Ident {
	return scalar.SecretIdent("secret_" + env + "_" + namespace + "_" + name)
}

func convertSecretData(data []*model.SecretTupleInput) map[string]string {
	ret := make(map[string]string, len(data))
	for _, value := range data {
		ret[value.Key] = value.Value
	}
	return ret
}

func emptySecret(name string, team slug.Slug, env string) *model.Secret {
	return &model.Secret{
		ID: makeSecretIdent(env, team.String(), name),
		Env: model.Env{
			Name: env,
			ID:   scalar.EnvIdent(env),
		},
		Name: name,
		Data: make(map[string]string),
	}
}

// Secret returns gengql.SecretResolver implementation.
func (r *Resolver) Secret() gengql.SecretResolver { return &secretResolver{r} }

type secretResolver struct{ *Resolver }
