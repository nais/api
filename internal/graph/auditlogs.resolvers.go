package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/nais/api/internal/auditlogger"
	"github.com/nais/api/internal/graph/gengql"
	"github.com/nais/api/internal/graph/model"
	"github.com/nais/api/internal/logger"
)

// Action is the resolver for the action field.
func (r *auditLogResolver) Action(ctx context.Context, obj *model.AuditLog) (auditlogger.AuditAction, error) {
	return auditlogger.AuditAction(obj.Action), nil
}

// ComponentName is the resolver for the componentName field.
func (r *auditLogResolver) ComponentName(ctx context.Context, obj *model.AuditLog) (logger.ComponentName, error) {
	return logger.ComponentName(obj.ComponentName), nil
}

// TargetType is the resolver for the targetType field.
func (r *auditLogResolver) TargetType(ctx context.Context, obj *model.AuditLog) (auditlogger.AuditLogsTargetType, error) {
	return auditlogger.AuditLogsTargetType(obj.TargetType), nil
}

// AuditLog returns gengql.AuditLogResolver implementation.
func (r *Resolver) AuditLog() gengql.AuditLogResolver { return &auditLogResolver{r} }

type auditLogResolver struct{ *Resolver }
