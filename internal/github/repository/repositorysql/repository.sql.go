// Code generated by sqlc. DO NOT EDIT.
// source: repository.sql

package repositorysql

import (
	"context"

	"github.com/nais/api/internal/slug"
)

const addToTeam = `-- name: AddToTeam :one
INSERT INTO
	team_repositories (team_slug, github_repository)
VALUES
	($1, $2)
RETURNING
	team_slug, github_repository
`

type AddToTeamParams struct {
	TeamSlug         slug.Slug
	GithubRepository string
}

func (q *Queries) AddToTeam(ctx context.Context, arg AddToTeamParams) (*TeamRepository, error) {
	row := q.db.QueryRow(ctx, addToTeam, arg.TeamSlug, arg.GithubRepository)
	var i TeamRepository
	err := row.Scan(&i.TeamSlug, &i.GithubRepository)
	return &i, err
}

const getByName = `-- name: GetByName :many
SELECT
	team_slug, github_repository
FROM
	team_repositories
WHERE
	github_repository = $1
ORDER BY
	team_slug ASC
`

func (q *Queries) GetByName(ctx context.Context, githubRepository string) ([]*TeamRepository, error) {
	rows, err := q.db.Query(ctx, getByName, githubRepository)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*TeamRepository{}
	for rows.Next() {
		var i TeamRepository
		if err := rows.Scan(&i.TeamSlug, &i.GithubRepository); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listForTeam = `-- name: ListForTeam :many
SELECT
	team_repositories.team_slug, team_repositories.github_repository,
	COUNT(*) OVER () AS total_count
FROM
	team_repositories
WHERE
	team_slug = $1
	AND CASE
		WHEN $2::TEXT IS NOT NULL THEN github_repository ILIKE '%' || $2 || '%'
		ELSE TRUE
	END
ORDER BY
	CASE
		WHEN $3::TEXT = 'name:asc' THEN github_repository
	END ASC,
	CASE
		WHEN $3::TEXT = 'name:desc' THEN github_repository
	END DESC,
	github_repository ASC
LIMIT
	$5
OFFSET
	$4
`

type ListForTeamParams struct {
	TeamSlug slug.Slug
	Search   *string
	OrderBy  string
	Offset   int32
	Limit    int32
}

type ListForTeamRow struct {
	TeamRepository TeamRepository
	TotalCount     int64
}

func (q *Queries) ListForTeam(ctx context.Context, arg ListForTeamParams) ([]*ListForTeamRow, error) {
	rows, err := q.db.Query(ctx, listForTeam,
		arg.TeamSlug,
		arg.Search,
		arg.OrderBy,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListForTeamRow{}
	for rows.Next() {
		var i ListForTeamRow
		if err := rows.Scan(&i.TeamRepository.TeamSlug, &i.TeamRepository.GithubRepository, &i.TotalCount); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeFromTeam = `-- name: RemoveFromTeam :exec
DELETE FROM team_repositories
WHERE
	team_slug = $1
	AND github_repository = $2
`

type RemoveFromTeamParams struct {
	TeamSlug         slug.Slug
	GithubRepository string
}

func (q *Queries) RemoveFromTeam(ctx context.Context, arg RemoveFromTeamParams) error {
	_, err := q.db.Exec(ctx, removeFromTeam, arg.TeamSlug, arg.GithubRepository)
	return err
}
