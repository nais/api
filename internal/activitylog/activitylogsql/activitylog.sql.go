// Code generated by sqlc. DO NOT EDIT.
// source: activitylog.sql

package activitylogsql

import (
	"context"

	"github.com/google/uuid"
	"github.com/nais/api/internal/slug"
)

const create = `-- name: Create :exec
INSERT INTO
	activity_log_entries (
		actor,
		action,
		resource_type,
		resource_name,
		team_slug,
		environment,
		data
	)
VALUES
	(
		$1,
		$2,
		$3,
		$4,
		$5,
		$6,
		$7
	)
`

type CreateParams struct {
	Actor           string
	Action          string
	ResourceType    string
	ResourceName    string
	TeamSlug        *slug.Slug
	EnvironmentName *string
	Data            []byte
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) error {
	_, err := q.db.Exec(ctx, create,
		arg.Actor,
		arg.Action,
		arg.ResourceType,
		arg.ResourceName,
		arg.TeamSlug,
		arg.EnvironmentName,
		arg.Data,
	)
	return err
}

const get = `-- name: Get :one
SELECT
	id, created_at, actor, action, resource_type, resource_name, team_slug, data, environment
FROM
	activity_log_entries
WHERE
	id = $1
`

func (q *Queries) Get(ctx context.Context, id uuid.UUID) (*ActivityLogEntry, error) {
	row := q.db.QueryRow(ctx, get, id)
	var i ActivityLogEntry
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Actor,
		&i.Action,
		&i.ResourceType,
		&i.ResourceName,
		&i.TeamSlug,
		&i.Data,
		&i.Environment,
	)
	return &i, err
}

const listByIDs = `-- name: ListByIDs :many
SELECT
	id, created_at, actor, action, resource_type, resource_name, team_slug, data, environment
FROM
	activity_log_entries
WHERE
	id = ANY ($1::UUID[])
ORDER BY
	created_at DESC
`

func (q *Queries) ListByIDs(ctx context.Context, ids []uuid.UUID) ([]*ActivityLogEntry, error) {
	rows, err := q.db.Query(ctx, listByIDs, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ActivityLogEntry{}
	for rows.Next() {
		var i ActivityLogEntry
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Actor,
			&i.Action,
			&i.ResourceType,
			&i.ResourceName,
			&i.TeamSlug,
			&i.Data,
			&i.Environment,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listForResource = `-- name: ListForResource :many
SELECT
	activity_log_entries.id, activity_log_entries.created_at, activity_log_entries.actor, activity_log_entries.action, activity_log_entries.resource_type, activity_log_entries.resource_name, activity_log_entries.team_slug, activity_log_entries.data, activity_log_entries.environment,
	COUNT(*) OVER () AS total_count
FROM
	activity_log_entries
WHERE
	resource_type = $1
	AND resource_name = $2
ORDER BY
	created_at DESC
LIMIT
	$4
OFFSET
	$3
`

type ListForResourceParams struct {
	ResourceType string
	ResourceName string
	Offset       int32
	Limit        int32
}

type ListForResourceRow struct {
	ActivityLogEntry ActivityLogEntry
	TotalCount       int64
}

func (q *Queries) ListForResource(ctx context.Context, arg ListForResourceParams) ([]*ListForResourceRow, error) {
	rows, err := q.db.Query(ctx, listForResource,
		arg.ResourceType,
		arg.ResourceName,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListForResourceRow{}
	for rows.Next() {
		var i ListForResourceRow
		if err := rows.Scan(
			&i.ActivityLogEntry.ID,
			&i.ActivityLogEntry.CreatedAt,
			&i.ActivityLogEntry.Actor,
			&i.ActivityLogEntry.Action,
			&i.ActivityLogEntry.ResourceType,
			&i.ActivityLogEntry.ResourceName,
			&i.ActivityLogEntry.TeamSlug,
			&i.ActivityLogEntry.Data,
			&i.ActivityLogEntry.Environment,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listForTeam = `-- name: ListForTeam :many
SELECT
	activity_log_entries.id, activity_log_entries.created_at, activity_log_entries.actor, activity_log_entries.action, activity_log_entries.resource_type, activity_log_entries.resource_name, activity_log_entries.team_slug, activity_log_entries.data, activity_log_entries.environment,
	COUNT(*) OVER () AS total_count
FROM
	activity_log_entries
WHERE
	team_slug = $1
ORDER BY
	created_at DESC
LIMIT
	$3
OFFSET
	$2
`

type ListForTeamParams struct {
	TeamSlug *slug.Slug
	Offset   int32
	Limit    int32
}

type ListForTeamRow struct {
	ActivityLogEntry ActivityLogEntry
	TotalCount       int64
}

func (q *Queries) ListForTeam(ctx context.Context, arg ListForTeamParams) ([]*ListForTeamRow, error) {
	rows, err := q.db.Query(ctx, listForTeam, arg.TeamSlug, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListForTeamRow{}
	for rows.Next() {
		var i ListForTeamRow
		if err := rows.Scan(
			&i.ActivityLogEntry.ID,
			&i.ActivityLogEntry.CreatedAt,
			&i.ActivityLogEntry.Actor,
			&i.ActivityLogEntry.Action,
			&i.ActivityLogEntry.ResourceType,
			&i.ActivityLogEntry.ResourceName,
			&i.ActivityLogEntry.TeamSlug,
			&i.ActivityLogEntry.Data,
			&i.ActivityLogEntry.Environment,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
