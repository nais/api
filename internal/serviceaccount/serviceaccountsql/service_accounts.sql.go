// Code generated by sqlc. DO NOT EDIT.
// source: service_accounts.sql

package serviceaccountsql

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/nais/api/internal/slug"
)

const count = `-- name: Count :one
SELECT
	COUNT(*)
FROM
	service_accounts
`

func (q *Queries) Count(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, count)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const create = `-- name: Create :one
INSERT INTO
	service_accounts (name, description, team_slug)
VALUES
	($1, $2, $3)
RETURNING
	id, created_at, updated_at, name, description, team_slug
`

type CreateParams struct {
	Name        string
	Description string
	TeamSlug    *slug.Slug
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*ServiceAccount, error) {
	row := q.db.QueryRow(ctx, create, arg.Name, arg.Description, arg.TeamSlug)
	var i ServiceAccount
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.TeamSlug,
	)
	return &i, err
}

const createToken = `-- name: CreateToken :one
INSERT INTO
	service_account_tokens (expires_at, note, token, service_account_id)
VALUES
	($1, $2, $3, $4)
RETURNING
	id, created_at, updated_at, expires_at, note, token, service_account_id
`

type CreateTokenParams struct {
	ExpiresAt        pgtype.Date
	Note             string
	Token            string
	ServiceAccountID uuid.UUID
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (*ServiceAccountToken, error) {
	row := q.db.QueryRow(ctx, createToken,
		arg.ExpiresAt,
		arg.Note,
		arg.Token,
		arg.ServiceAccountID,
	)
	var i ServiceAccountToken
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.Note,
		&i.Token,
		&i.ServiceAccountID,
	)
	return &i, err
}

const delete = `-- name: Delete :exec
DELETE FROM service_accounts
WHERE
	id = $1
`

func (q *Queries) Delete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const deleteStaticServiceAccounts = `-- name: DeleteStaticServiceAccounts :exec
DELETE FROM service_accounts
WHERE
	name LIKE 'nais-%'
`

// TODO: Remove once static service accounts has been removed
func (q *Queries) DeleteStaticServiceAccounts(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteStaticServiceAccounts)
	return err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM service_account_tokens
WHERE
	id = $1
`

func (q *Queries) DeleteToken(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteToken, id)
	return err
}

const getByIDs = `-- name: GetByIDs :many
SELECT
	id, created_at, updated_at, name, description, team_slug
FROM
	service_accounts
WHERE
	id = ANY ($1::UUID[])
ORDER BY
	name ASC
`

func (q *Queries) GetByIDs(ctx context.Context, ids []uuid.UUID) ([]*ServiceAccount, error) {
	rows, err := q.db.Query(ctx, getByIDs, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ServiceAccount{}
	for rows.Next() {
		var i ServiceAccount
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.TeamSlug,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByName = `-- name: GetByName :one
SELECT
	id, created_at, updated_at, name, description, team_slug
FROM
	service_accounts
WHERE
	name = $1
`

func (q *Queries) GetByName(ctx context.Context, name string) (*ServiceAccount, error) {
	row := q.db.QueryRow(ctx, getByName, name)
	var i ServiceAccount
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.TeamSlug,
	)
	return &i, err
}

const getByToken = `-- name: GetByToken :one
SELECT
	service_accounts.id, service_accounts.created_at, service_accounts.updated_at, service_accounts.name, service_accounts.description, service_accounts.team_slug
FROM
	service_account_tokens
	JOIN service_accounts ON service_accounts.id = service_account_tokens.service_account_id
WHERE
	service_account_tokens.token = $1
`

func (q *Queries) GetByToken(ctx context.Context, token string) (*ServiceAccount, error) {
	row := q.db.QueryRow(ctx, getByToken, token)
	var i ServiceAccount
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.TeamSlug,
	)
	return &i, err
}

const getTokensByIDs = `-- name: GetTokensByIDs :many
SELECT
	id, created_at, updated_at, expires_at, note, token, service_account_id
FROM
	service_account_tokens
WHERE
	id = ANY ($1::UUID[])
ORDER BY
	created_at
`

func (q *Queries) GetTokensByIDs(ctx context.Context, ids []uuid.UUID) ([]*ServiceAccountToken, error) {
	rows, err := q.db.Query(ctx, getTokensByIDs, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ServiceAccountToken{}
	for rows.Next() {
		var i ServiceAccountToken
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiresAt,
			&i.Note,
			&i.Token,
			&i.ServiceAccountID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const list = `-- name: List :many
SELECT
	id, created_at, updated_at, name, description, team_slug
FROM
	service_accounts
ORDER BY
	name,
	team_slug
LIMIT
	$2
OFFSET
	$1
`

type ListParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) List(ctx context.Context, arg ListParams) ([]*ServiceAccount, error) {
	rows, err := q.db.Query(ctx, list, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ServiceAccount{}
	for rows.Next() {
		var i ServiceAccount
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.TeamSlug,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeApiKeysFromServiceAccount = `-- name: RemoveApiKeysFromServiceAccount :exec
DELETE FROM service_account_tokens
WHERE
	service_account_id = $1
`

func (q *Queries) RemoveApiKeysFromServiceAccount(ctx context.Context, serviceAccountID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeApiKeysFromServiceAccount, serviceAccountID)
	return err
}

const update = `-- name: Update :one
UPDATE service_accounts
SET
	description = COALESCE($1, description)
WHERE
	id = $2
RETURNING
	id, created_at, updated_at, name, description, team_slug
`

type UpdateParams struct {
	Description *string
	ID          uuid.UUID
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (*ServiceAccount, error) {
	row := q.db.QueryRow(ctx, update, arg.Description, arg.ID)
	var i ServiceAccount
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.TeamSlug,
	)
	return &i, err
}

const updateToken = `-- name: UpdateToken :one
UPDATE service_account_tokens
SET
	expires_at = $1,
	note = COALESCE($2, note)
WHERE
	id = $3
RETURNING
	id, created_at, updated_at, expires_at, note, token, service_account_id
`

type UpdateTokenParams struct {
	ExpiresAt pgtype.Date
	Note      *string
	ID        uuid.UUID
}

func (q *Queries) UpdateToken(ctx context.Context, arg UpdateTokenParams) (*ServiceAccountToken, error) {
	row := q.db.QueryRow(ctx, updateToken, arg.ExpiresAt, arg.Note, arg.ID)
	var i ServiceAccountToken
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.Note,
		&i.Token,
		&i.ServiceAccountID,
	)
	return &i, err
}
