// Code generated by sqlc. DO NOT EDIT.
// source: deployments.sql

package deploymentsql

import (
	"context"

	"github.com/google/uuid"
	"github.com/nais/api/internal/slug"
)

const countForTeam = `-- name: CountForTeam :one
SELECT
	COUNT(*)
FROM
	deployments
WHERE
	team_slug = $1::slug
`

func (q *Queries) CountForTeam(ctx context.Context, teamSlug slug.Slug) (int64, error) {
	row := q.db.QueryRow(ctx, countForTeam, teamSlug)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listByIDs = `-- name: ListByIDs :many
SELECT
	id, created_at, team_slug, repository, environment
FROM
	deployments
WHERE
	id = ANY ($1::UUID[])
ORDER BY
	created_at
`

func (q *Queries) ListByIDs(ctx context.Context, ids []uuid.UUID) ([]*Deployment, error) {
	rows, err := q.db.Query(ctx, listByIDs, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Deployment{}
	for rows.Next() {
		var i Deployment
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.TeamSlug,
			&i.Repository,
			&i.Environment,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listByTeamSlug = `-- name: ListByTeamSlug :many
SELECT
	id, created_at, team_slug, repository, environment
FROM
	deployments
WHERE
	team_slug = $1::slug
ORDER BY
	created_at DESC
LIMIT
	$3
OFFSET
	$2
`

type ListByTeamSlugParams struct {
	TeamSlug slug.Slug
	Offset   int32
	Limit    int32
}

func (q *Queries) ListByTeamSlug(ctx context.Context, arg ListByTeamSlugParams) ([]*Deployment, error) {
	rows, err := q.db.Query(ctx, listByTeamSlug, arg.TeamSlug, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Deployment{}
	for rows.Next() {
		var i Deployment
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.TeamSlug,
			&i.Repository,
			&i.Environment,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
