// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package costsql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/nais/api/internal/slug"
	mock "github.com/stretchr/testify/mock"
)

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
}

type MockQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerier) EXPECT() *MockQuerier_Expecter {
	return &MockQuerier_Expecter{mock: &_m.Mock}
}

// CostForService provides a mock function for the type MockQuerier
func (_mock *MockQuerier) CostForService(ctx context.Context, arg CostForServiceParams) (float32, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CostForService")
	}

	var r0 float32
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, CostForServiceParams) (float32, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, CostForServiceParams) float32); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(float32)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, CostForServiceParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_CostForService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CostForService'
type MockQuerier_CostForService_Call struct {
	*mock.Call
}

// CostForService is a helper method to define mock.On call
//   - ctx context.Context
//   - arg CostForServiceParams
func (_e *MockQuerier_Expecter) CostForService(ctx interface{}, arg interface{}) *MockQuerier_CostForService_Call {
	return &MockQuerier_CostForService_Call{Call: _e.mock.On("CostForService", ctx, arg)}
}

func (_c *MockQuerier_CostForService_Call) Run(run func(ctx context.Context, arg CostForServiceParams)) *MockQuerier_CostForService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 CostForServiceParams
		if args[1] != nil {
			arg1 = args[1].(CostForServiceParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_CostForService_Call) Return(f float32, err error) *MockQuerier_CostForService_Call {
	_c.Call.Return(f, err)
	return _c
}

func (_c *MockQuerier_CostForService_Call) RunAndReturn(run func(ctx context.Context, arg CostForServiceParams) (float32, error)) *MockQuerier_CostForService_Call {
	_c.Call.Return(run)
	return _c
}

// CostForTeam provides a mock function for the type MockQuerier
func (_mock *MockQuerier) CostForTeam(ctx context.Context, arg CostForTeamParams) (float32, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CostForTeam")
	}

	var r0 float32
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, CostForTeamParams) (float32, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, CostForTeamParams) float32); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(float32)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, CostForTeamParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_CostForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CostForTeam'
type MockQuerier_CostForTeam_Call struct {
	*mock.Call
}

// CostForTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - arg CostForTeamParams
func (_e *MockQuerier_Expecter) CostForTeam(ctx interface{}, arg interface{}) *MockQuerier_CostForTeam_Call {
	return &MockQuerier_CostForTeam_Call{Call: _e.mock.On("CostForTeam", ctx, arg)}
}

func (_c *MockQuerier_CostForTeam_Call) Run(run func(ctx context.Context, arg CostForTeamParams)) *MockQuerier_CostForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 CostForTeamParams
		if args[1] != nil {
			arg1 = args[1].(CostForTeamParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_CostForTeam_Call) Return(f float32, err error) *MockQuerier_CostForTeam_Call {
	_c.Call.Return(f, err)
	return _c
}

func (_c *MockQuerier_CostForTeam_Call) RunAndReturn(run func(ctx context.Context, arg CostForTeamParams) (float32, error)) *MockQuerier_CostForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// CostUpsert provides a mock function for the type MockQuerier
func (_mock *MockQuerier) CostUpsert(ctx context.Context, arg []CostUpsertParams) *CostUpsertBatchResults {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CostUpsert")
	}

	var r0 *CostUpsertBatchResults
	if returnFunc, ok := ret.Get(0).(func(context.Context, []CostUpsertParams) *CostUpsertBatchResults); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CostUpsertBatchResults)
		}
	}
	return r0
}

// MockQuerier_CostUpsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CostUpsert'
type MockQuerier_CostUpsert_Call struct {
	*mock.Call
}

// CostUpsert is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []CostUpsertParams
func (_e *MockQuerier_Expecter) CostUpsert(ctx interface{}, arg interface{}) *MockQuerier_CostUpsert_Call {
	return &MockQuerier_CostUpsert_Call{Call: _e.mock.On("CostUpsert", ctx, arg)}
}

func (_c *MockQuerier_CostUpsert_Call) Run(run func(ctx context.Context, arg []CostUpsertParams)) *MockQuerier_CostUpsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []CostUpsertParams
		if args[1] != nil {
			arg1 = args[1].([]CostUpsertParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_CostUpsert_Call) Return(costUpsertBatchResults *CostUpsertBatchResults) *MockQuerier_CostUpsert_Call {
	_c.Call.Return(costUpsertBatchResults)
	return _c
}

func (_c *MockQuerier_CostUpsert_Call) RunAndReturn(run func(ctx context.Context, arg []CostUpsertParams) *CostUpsertBatchResults) *MockQuerier_CostUpsert_Call {
	_c.Call.Return(run)
	return _c
}

// DailyCostForTeam provides a mock function for the type MockQuerier
func (_mock *MockQuerier) DailyCostForTeam(ctx context.Context, arg DailyCostForTeamParams) ([]*DailyCostForTeamRow, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for DailyCostForTeam")
	}

	var r0 []*DailyCostForTeamRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, DailyCostForTeamParams) ([]*DailyCostForTeamRow, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, DailyCostForTeamParams) []*DailyCostForTeamRow); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*DailyCostForTeamRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, DailyCostForTeamParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_DailyCostForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DailyCostForTeam'
type MockQuerier_DailyCostForTeam_Call struct {
	*mock.Call
}

// DailyCostForTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - arg DailyCostForTeamParams
func (_e *MockQuerier_Expecter) DailyCostForTeam(ctx interface{}, arg interface{}) *MockQuerier_DailyCostForTeam_Call {
	return &MockQuerier_DailyCostForTeam_Call{Call: _e.mock.On("DailyCostForTeam", ctx, arg)}
}

func (_c *MockQuerier_DailyCostForTeam_Call) Run(run func(ctx context.Context, arg DailyCostForTeamParams)) *MockQuerier_DailyCostForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 DailyCostForTeamParams
		if args[1] != nil {
			arg1 = args[1].(DailyCostForTeamParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_DailyCostForTeam_Call) Return(dailyCostForTeamRows []*DailyCostForTeamRow, err error) *MockQuerier_DailyCostForTeam_Call {
	_c.Call.Return(dailyCostForTeamRows, err)
	return _c
}

func (_c *MockQuerier_DailyCostForTeam_Call) RunAndReturn(run func(ctx context.Context, arg DailyCostForTeamParams) ([]*DailyCostForTeamRow, error)) *MockQuerier_DailyCostForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// DailyCostForTeamEnvironment provides a mock function for the type MockQuerier
func (_mock *MockQuerier) DailyCostForTeamEnvironment(ctx context.Context, arg DailyCostForTeamEnvironmentParams) ([]*DailyCostForTeamEnvironmentRow, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for DailyCostForTeamEnvironment")
	}

	var r0 []*DailyCostForTeamEnvironmentRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, DailyCostForTeamEnvironmentParams) ([]*DailyCostForTeamEnvironmentRow, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, DailyCostForTeamEnvironmentParams) []*DailyCostForTeamEnvironmentRow); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*DailyCostForTeamEnvironmentRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, DailyCostForTeamEnvironmentParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_DailyCostForTeamEnvironment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DailyCostForTeamEnvironment'
type MockQuerier_DailyCostForTeamEnvironment_Call struct {
	*mock.Call
}

// DailyCostForTeamEnvironment is a helper method to define mock.On call
//   - ctx context.Context
//   - arg DailyCostForTeamEnvironmentParams
func (_e *MockQuerier_Expecter) DailyCostForTeamEnvironment(ctx interface{}, arg interface{}) *MockQuerier_DailyCostForTeamEnvironment_Call {
	return &MockQuerier_DailyCostForTeamEnvironment_Call{Call: _e.mock.On("DailyCostForTeamEnvironment", ctx, arg)}
}

func (_c *MockQuerier_DailyCostForTeamEnvironment_Call) Run(run func(ctx context.Context, arg DailyCostForTeamEnvironmentParams)) *MockQuerier_DailyCostForTeamEnvironment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 DailyCostForTeamEnvironmentParams
		if args[1] != nil {
			arg1 = args[1].(DailyCostForTeamEnvironmentParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_DailyCostForTeamEnvironment_Call) Return(dailyCostForTeamEnvironmentRows []*DailyCostForTeamEnvironmentRow, err error) *MockQuerier_DailyCostForTeamEnvironment_Call {
	_c.Call.Return(dailyCostForTeamEnvironmentRows, err)
	return _c
}

func (_c *MockQuerier_DailyCostForTeamEnvironment_Call) RunAndReturn(run func(ctx context.Context, arg DailyCostForTeamEnvironmentParams) ([]*DailyCostForTeamEnvironmentRow, error)) *MockQuerier_DailyCostForTeamEnvironment_Call {
	_c.Call.Return(run)
	return _c
}

// DailyCostForWorkload provides a mock function for the type MockQuerier
func (_mock *MockQuerier) DailyCostForWorkload(ctx context.Context, arg DailyCostForWorkloadParams) ([]*DailyCostForWorkloadRow, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for DailyCostForWorkload")
	}

	var r0 []*DailyCostForWorkloadRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, DailyCostForWorkloadParams) ([]*DailyCostForWorkloadRow, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, DailyCostForWorkloadParams) []*DailyCostForWorkloadRow); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*DailyCostForWorkloadRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, DailyCostForWorkloadParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_DailyCostForWorkload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DailyCostForWorkload'
type MockQuerier_DailyCostForWorkload_Call struct {
	*mock.Call
}

// DailyCostForWorkload is a helper method to define mock.On call
//   - ctx context.Context
//   - arg DailyCostForWorkloadParams
func (_e *MockQuerier_Expecter) DailyCostForWorkload(ctx interface{}, arg interface{}) *MockQuerier_DailyCostForWorkload_Call {
	return &MockQuerier_DailyCostForWorkload_Call{Call: _e.mock.On("DailyCostForWorkload", ctx, arg)}
}

func (_c *MockQuerier_DailyCostForWorkload_Call) Run(run func(ctx context.Context, arg DailyCostForWorkloadParams)) *MockQuerier_DailyCostForWorkload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 DailyCostForWorkloadParams
		if args[1] != nil {
			arg1 = args[1].(DailyCostForWorkloadParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_DailyCostForWorkload_Call) Return(dailyCostForWorkloadRows []*DailyCostForWorkloadRow, err error) *MockQuerier_DailyCostForWorkload_Call {
	_c.Call.Return(dailyCostForWorkloadRows, err)
	return _c
}

func (_c *MockQuerier_DailyCostForWorkload_Call) RunAndReturn(run func(ctx context.Context, arg DailyCostForWorkloadParams) ([]*DailyCostForWorkloadRow, error)) *MockQuerier_DailyCostForWorkload_Call {
	_c.Call.Return(run)
	return _c
}

// DailyEnvCostForTeam provides a mock function for the type MockQuerier
func (_mock *MockQuerier) DailyEnvCostForTeam(ctx context.Context, arg DailyEnvCostForTeamParams) ([]*DailyEnvCostForTeamRow, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for DailyEnvCostForTeam")
	}

	var r0 []*DailyEnvCostForTeamRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, DailyEnvCostForTeamParams) ([]*DailyEnvCostForTeamRow, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, DailyEnvCostForTeamParams) []*DailyEnvCostForTeamRow); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*DailyEnvCostForTeamRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, DailyEnvCostForTeamParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_DailyEnvCostForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DailyEnvCostForTeam'
type MockQuerier_DailyEnvCostForTeam_Call struct {
	*mock.Call
}

// DailyEnvCostForTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - arg DailyEnvCostForTeamParams
func (_e *MockQuerier_Expecter) DailyEnvCostForTeam(ctx interface{}, arg interface{}) *MockQuerier_DailyEnvCostForTeam_Call {
	return &MockQuerier_DailyEnvCostForTeam_Call{Call: _e.mock.On("DailyEnvCostForTeam", ctx, arg)}
}

func (_c *MockQuerier_DailyEnvCostForTeam_Call) Run(run func(ctx context.Context, arg DailyEnvCostForTeamParams)) *MockQuerier_DailyEnvCostForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 DailyEnvCostForTeamParams
		if args[1] != nil {
			arg1 = args[1].(DailyEnvCostForTeamParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_DailyEnvCostForTeam_Call) Return(dailyEnvCostForTeamRows []*DailyEnvCostForTeamRow, err error) *MockQuerier_DailyEnvCostForTeam_Call {
	_c.Call.Return(dailyEnvCostForTeamRows, err)
	return _c
}

func (_c *MockQuerier_DailyEnvCostForTeam_Call) RunAndReturn(run func(ctx context.Context, arg DailyEnvCostForTeamParams) ([]*DailyEnvCostForTeamRow, error)) *MockQuerier_DailyEnvCostForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// LastCostDate provides a mock function for the type MockQuerier
func (_mock *MockQuerier) LastCostDate(ctx context.Context) (pgtype.Date, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LastCostDate")
	}

	var r0 pgtype.Date
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (pgtype.Date, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) pgtype.Date); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(pgtype.Date)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_LastCostDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LastCostDate'
type MockQuerier_LastCostDate_Call struct {
	*mock.Call
}

// LastCostDate is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) LastCostDate(ctx interface{}) *MockQuerier_LastCostDate_Call {
	return &MockQuerier_LastCostDate_Call{Call: _e.mock.On("LastCostDate", ctx)}
}

func (_c *MockQuerier_LastCostDate_Call) Run(run func(ctx context.Context)) *MockQuerier_LastCostDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQuerier_LastCostDate_Call) Return(date pgtype.Date, err error) *MockQuerier_LastCostDate_Call {
	_c.Call.Return(date, err)
	return _c
}

func (_c *MockQuerier_LastCostDate_Call) RunAndReturn(run func(ctx context.Context) (pgtype.Date, error)) *MockQuerier_LastCostDate_Call {
	_c.Call.Return(run)
	return _c
}

// ListTeamSlugsForCostUpdater provides a mock function for the type MockQuerier
func (_mock *MockQuerier) ListTeamSlugsForCostUpdater(ctx context.Context) ([]slug.Slug, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListTeamSlugsForCostUpdater")
	}

	var r0 []slug.Slug
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]slug.Slug, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []slug.Slug); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]slug.Slug)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_ListTeamSlugsForCostUpdater_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTeamSlugsForCostUpdater'
type MockQuerier_ListTeamSlugsForCostUpdater_Call struct {
	*mock.Call
}

// ListTeamSlugsForCostUpdater is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) ListTeamSlugsForCostUpdater(ctx interface{}) *MockQuerier_ListTeamSlugsForCostUpdater_Call {
	return &MockQuerier_ListTeamSlugsForCostUpdater_Call{Call: _e.mock.On("ListTeamSlugsForCostUpdater", ctx)}
}

func (_c *MockQuerier_ListTeamSlugsForCostUpdater_Call) Run(run func(ctx context.Context)) *MockQuerier_ListTeamSlugsForCostUpdater_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQuerier_ListTeamSlugsForCostUpdater_Call) Return(slugs []slug.Slug, err error) *MockQuerier_ListTeamSlugsForCostUpdater_Call {
	_c.Call.Return(slugs, err)
	return _c
}

func (_c *MockQuerier_ListTeamSlugsForCostUpdater_Call) RunAndReturn(run func(ctx context.Context) ([]slug.Slug, error)) *MockQuerier_ListTeamSlugsForCostUpdater_Call {
	_c.Call.Return(run)
	return _c
}

// MonthlyCostForTeam provides a mock function for the type MockQuerier
func (_mock *MockQuerier) MonthlyCostForTeam(ctx context.Context, teamSlug slug.Slug) ([]*CostMonthlyTeam, error) {
	ret := _mock.Called(ctx, teamSlug)

	if len(ret) == 0 {
		panic("no return value specified for MonthlyCostForTeam")
	}

	var r0 []*CostMonthlyTeam
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, slug.Slug) ([]*CostMonthlyTeam, error)); ok {
		return returnFunc(ctx, teamSlug)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, slug.Slug) []*CostMonthlyTeam); ok {
		r0 = returnFunc(ctx, teamSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*CostMonthlyTeam)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, slug.Slug) error); ok {
		r1 = returnFunc(ctx, teamSlug)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_MonthlyCostForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MonthlyCostForTeam'
type MockQuerier_MonthlyCostForTeam_Call struct {
	*mock.Call
}

// MonthlyCostForTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
func (_e *MockQuerier_Expecter) MonthlyCostForTeam(ctx interface{}, teamSlug interface{}) *MockQuerier_MonthlyCostForTeam_Call {
	return &MockQuerier_MonthlyCostForTeam_Call{Call: _e.mock.On("MonthlyCostForTeam", ctx, teamSlug)}
}

func (_c *MockQuerier_MonthlyCostForTeam_Call) Run(run func(ctx context.Context, teamSlug slug.Slug)) *MockQuerier_MonthlyCostForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 slug.Slug
		if args[1] != nil {
			arg1 = args[1].(slug.Slug)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_MonthlyCostForTeam_Call) Return(costMonthlyTeams []*CostMonthlyTeam, err error) *MockQuerier_MonthlyCostForTeam_Call {
	_c.Call.Return(costMonthlyTeams, err)
	return _c
}

func (_c *MockQuerier_MonthlyCostForTeam_Call) RunAndReturn(run func(ctx context.Context, teamSlug slug.Slug) ([]*CostMonthlyTeam, error)) *MockQuerier_MonthlyCostForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// MonthlyCostForTenant provides a mock function for the type MockQuerier
func (_mock *MockQuerier) MonthlyCostForTenant(ctx context.Context, arg MonthlyCostForTenantParams) ([]*CostMonthlyTenant, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for MonthlyCostForTenant")
	}

	var r0 []*CostMonthlyTenant
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, MonthlyCostForTenantParams) ([]*CostMonthlyTenant, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, MonthlyCostForTenantParams) []*CostMonthlyTenant); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*CostMonthlyTenant)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, MonthlyCostForTenantParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_MonthlyCostForTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MonthlyCostForTenant'
type MockQuerier_MonthlyCostForTenant_Call struct {
	*mock.Call
}

// MonthlyCostForTenant is a helper method to define mock.On call
//   - ctx context.Context
//   - arg MonthlyCostForTenantParams
func (_e *MockQuerier_Expecter) MonthlyCostForTenant(ctx interface{}, arg interface{}) *MockQuerier_MonthlyCostForTenant_Call {
	return &MockQuerier_MonthlyCostForTenant_Call{Call: _e.mock.On("MonthlyCostForTenant", ctx, arg)}
}

func (_c *MockQuerier_MonthlyCostForTenant_Call) Run(run func(ctx context.Context, arg MonthlyCostForTenantParams)) *MockQuerier_MonthlyCostForTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 MonthlyCostForTenantParams
		if args[1] != nil {
			arg1 = args[1].(MonthlyCostForTenantParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_MonthlyCostForTenant_Call) Return(costMonthlyTenants []*CostMonthlyTenant, err error) *MockQuerier_MonthlyCostForTenant_Call {
	_c.Call.Return(costMonthlyTenants, err)
	return _c
}

func (_c *MockQuerier_MonthlyCostForTenant_Call) RunAndReturn(run func(ctx context.Context, arg MonthlyCostForTenantParams) ([]*CostMonthlyTenant, error)) *MockQuerier_MonthlyCostForTenant_Call {
	_c.Call.Return(run)
	return _c
}

// MonthlyCostForWorkload provides a mock function for the type MockQuerier
func (_mock *MockQuerier) MonthlyCostForWorkload(ctx context.Context, arg MonthlyCostForWorkloadParams) ([]*MonthlyCostForWorkloadRow, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for MonthlyCostForWorkload")
	}

	var r0 []*MonthlyCostForWorkloadRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, MonthlyCostForWorkloadParams) ([]*MonthlyCostForWorkloadRow, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, MonthlyCostForWorkloadParams) []*MonthlyCostForWorkloadRow); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*MonthlyCostForWorkloadRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, MonthlyCostForWorkloadParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_MonthlyCostForWorkload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MonthlyCostForWorkload'
type MockQuerier_MonthlyCostForWorkload_Call struct {
	*mock.Call
}

// MonthlyCostForWorkload is a helper method to define mock.On call
//   - ctx context.Context
//   - arg MonthlyCostForWorkloadParams
func (_e *MockQuerier_Expecter) MonthlyCostForWorkload(ctx interface{}, arg interface{}) *MockQuerier_MonthlyCostForWorkload_Call {
	return &MockQuerier_MonthlyCostForWorkload_Call{Call: _e.mock.On("MonthlyCostForWorkload", ctx, arg)}
}

func (_c *MockQuerier_MonthlyCostForWorkload_Call) Run(run func(ctx context.Context, arg MonthlyCostForWorkloadParams)) *MockQuerier_MonthlyCostForWorkload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 MonthlyCostForWorkloadParams
		if args[1] != nil {
			arg1 = args[1].(MonthlyCostForWorkloadParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_MonthlyCostForWorkload_Call) Return(monthlyCostForWorkloadRows []*MonthlyCostForWorkloadRow, err error) *MockQuerier_MonthlyCostForWorkload_Call {
	_c.Call.Return(monthlyCostForWorkloadRows, err)
	return _c
}

func (_c *MockQuerier_MonthlyCostForWorkload_Call) RunAndReturn(run func(ctx context.Context, arg MonthlyCostForWorkloadParams) ([]*MonthlyCostForWorkloadRow, error)) *MockQuerier_MonthlyCostForWorkload_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshCostMonthlyTeam provides a mock function for the type MockQuerier
func (_mock *MockQuerier) RefreshCostMonthlyTeam(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RefreshCostMonthlyTeam")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_RefreshCostMonthlyTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshCostMonthlyTeam'
type MockQuerier_RefreshCostMonthlyTeam_Call struct {
	*mock.Call
}

// RefreshCostMonthlyTeam is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) RefreshCostMonthlyTeam(ctx interface{}) *MockQuerier_RefreshCostMonthlyTeam_Call {
	return &MockQuerier_RefreshCostMonthlyTeam_Call{Call: _e.mock.On("RefreshCostMonthlyTeam", ctx)}
}

func (_c *MockQuerier_RefreshCostMonthlyTeam_Call) Run(run func(ctx context.Context)) *MockQuerier_RefreshCostMonthlyTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQuerier_RefreshCostMonthlyTeam_Call) Return(err error) *MockQuerier_RefreshCostMonthlyTeam_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_RefreshCostMonthlyTeam_Call) RunAndReturn(run func(ctx context.Context) error) *MockQuerier_RefreshCostMonthlyTeam_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshCostMonthlyTenant provides a mock function for the type MockQuerier
func (_mock *MockQuerier) RefreshCostMonthlyTenant(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RefreshCostMonthlyTenant")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_RefreshCostMonthlyTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshCostMonthlyTenant'
type MockQuerier_RefreshCostMonthlyTenant_Call struct {
	*mock.Call
}

// RefreshCostMonthlyTenant is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) RefreshCostMonthlyTenant(ctx interface{}) *MockQuerier_RefreshCostMonthlyTenant_Call {
	return &MockQuerier_RefreshCostMonthlyTenant_Call{Call: _e.mock.On("RefreshCostMonthlyTenant", ctx)}
}

func (_c *MockQuerier_RefreshCostMonthlyTenant_Call) Run(run func(ctx context.Context)) *MockQuerier_RefreshCostMonthlyTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQuerier_RefreshCostMonthlyTenant_Call) Return(err error) *MockQuerier_RefreshCostMonthlyTenant_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_RefreshCostMonthlyTenant_Call) RunAndReturn(run func(ctx context.Context) error) *MockQuerier_RefreshCostMonthlyTenant_Call {
	_c.Call.Return(run)
	return _c
}
