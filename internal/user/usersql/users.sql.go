// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package usersql

import (
	"context"

	"github.com/google/uuid"
)

const getByEmail = `-- name: GetByEmail :one
SELECT
	id, email, name, external_id, admin
FROM
	users
WHERE
	email = LOWER($1)
`

func (q *Queries) GetByEmail(ctx context.Context, email string) (*User, error) {
	row := q.db.QueryRow(ctx, getByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.ExternalID,
		&i.Admin,
	)
	return &i, err
}

const getByExternalID = `-- name: GetByExternalID :one
SELECT
	id, email, name, external_id, admin
FROM
	users
WHERE
	external_id = $1
`

func (q *Queries) GetByExternalID(ctx context.Context, externalID string) (*User, error) {
	row := q.db.QueryRow(ctx, getByExternalID, externalID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.ExternalID,
		&i.Admin,
	)
	return &i, err
}

const getByIDs = `-- name: GetByIDs :many
SELECT
	id, email, name, external_id, admin
FROM
	users
WHERE
	id = ANY ($1::UUID[])
ORDER BY
	name,
	email ASC
`

func (q *Queries) GetByIDs(ctx context.Context, ids []uuid.UUID) ([]*User, error) {
	rows, err := q.db.Query(ctx, getByIDs, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.ExternalID,
			&i.Admin,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const list = `-- name: List :many
SELECT
	users.id, users.email, users.name, users.external_id, users.admin,
	COUNT(*) OVER () AS total_count
FROM
	users
ORDER BY
	CASE
		WHEN $1::TEXT = 'name:asc' THEN name
	END ASC,
	CASE
		WHEN $1::TEXT = 'name:desc' THEN name
	END DESC,
	CASE
		WHEN $1::TEXT = 'email:asc' THEN email
	END ASC,
	CASE
		WHEN $1::TEXT = 'email:desc' THEN email
	END DESC,
	name,
	email ASC
LIMIT
	$3
OFFSET
	$2
`

type ListParams struct {
	OrderBy string
	Offset  int32
	Limit   int32
}

type ListRow struct {
	User       User
	TotalCount int64
}

func (q *Queries) List(ctx context.Context, arg ListParams) ([]*ListRow, error) {
	rows, err := q.db.Query(ctx, list, arg.OrderBy, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListRow{}
	for rows.Next() {
		var i ListRow
		if err := rows.Scan(
			&i.User.ID,
			&i.User.Email,
			&i.User.Name,
			&i.User.ExternalID,
			&i.User.Admin,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGCPGroupsForUser = `-- name: ListGCPGroupsForUser :one
SELECT
	ARRAY_AGG(teams.google_group_email)::TEXT[]
FROM
	teams
	JOIN user_roles ON user_roles.target_team_slug = teams.slug
WHERE
	user_roles.user_id = $1
	AND teams.google_group_email IS NOT NULL
`

func (q *Queries) ListGCPGroupsForUser(ctx context.Context, userID uuid.UUID) ([]string, error) {
	row := q.db.QueryRow(ctx, listGCPGroupsForUser, userID)
	var column_1 []string
	err := row.Scan(&column_1)
	return column_1, err
}
