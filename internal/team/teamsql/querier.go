// Code generated by sqlc. DO NOT EDIT.

package teamsql

import (
	"context"

	"github.com/google/uuid"
	"github.com/nais/api/internal/slug"
)

type Querier interface {
	AddMember(ctx context.Context, arg AddMemberParams) error
	ConfirmDeleteKey(ctx context.Context, key uuid.UUID) error
	Count(ctx context.Context) (int64, error)
	CountForUser(ctx context.Context, userID uuid.UUID) (int64, error)
	CountMembers(ctx context.Context, teamSlug *slug.Slug) (int64, error)
	Create(ctx context.Context, arg CreateParams) (*Team, error)
	CreateDeleteKey(ctx context.Context, arg CreateDeleteKeyParams) (*TeamDeleteKey, error)
	Exists(ctx context.Context, argSlug slug.Slug) (bool, error)
	Get(ctx context.Context, argSlug slug.Slug) (*Team, error)
	GetDeleteKey(ctx context.Context, arg GetDeleteKeyParams) (*TeamDeleteKey, error)
	GetEnvironment(ctx context.Context, arg GetEnvironmentParams) (*TeamAllEnvironment, error)
	GetMember(ctx context.Context, arg GetMemberParams) (*GetMemberRow, error)
	GetMemberByEmail(ctx context.Context, arg GetMemberByEmailParams) (*GetMemberByEmailRow, error)
	List(ctx context.Context, arg ListParams) ([]*Team, error)
	ListAllSlugs(ctx context.Context) ([]slug.Slug, error)
	ListBySlugs(ctx context.Context, slugs []slug.Slug) ([]*Team, error)
	ListEnvironmentsBySlug(ctx context.Context, argSlug slug.Slug) ([]*TeamAllEnvironment, error)
	// ListEnvironmentsBySlugsAndEnvNames returns a slice of team environments for a list of teams/envs, excluding
	// deleted teams.
	// Input is two arrays of equal length, one for slugs and one for names
	ListEnvironmentsBySlugsAndEnvNames(ctx context.Context, arg ListEnvironmentsBySlugsAndEnvNamesParams) ([]*TeamAllEnvironment, error)
	ListForUser(ctx context.Context, arg ListForUserParams) ([]*ListForUserRow, error)
	ListMembers(ctx context.Context, arg ListMembersParams) ([]*ListMembersRow, error)
	RemoveMember(ctx context.Context, arg RemoveMemberParams) error
	RemoveSlackAlertsChannel(ctx context.Context, arg RemoveSlackAlertsChannelParams) error
	Search(ctx context.Context, query string) ([]*SearchRow, error)
	SetDeleteKeyConfirmedAt(ctx context.Context, argSlug slug.Slug) error
	SlugAvailable(ctx context.Context, argSlug slug.Slug) (bool, error)
	Update(ctx context.Context, arg UpdateParams) (*Team, error)
	UpdateExternalReferences(ctx context.Context, arg UpdateExternalReferencesParams) error
	UpsertEnvironment(ctx context.Context, arg UpsertEnvironmentParams) error
	UserIsMember(ctx context.Context, arg UserIsMemberParams) (bool, error)
	UserIsOwner(ctx context.Context, arg UserIsOwnerParams) (bool, error)
}

var _ Querier = (*Queries)(nil)
