// Code generated by sqlc. DO NOT EDIT.
// source: team_members.sql

package teamsql

import (
	"context"

	"github.com/google/uuid"
	"github.com/nais/api/internal/slug"
)

const addMember = `-- name: AddMember :exec
INSERT INTO
	user_roles (user_id, role_name, target_team_slug)
VALUES
	($1, $2, $3::slug)
ON CONFLICT DO NOTHING
`

type AddMemberParams struct {
	UserID   uuid.UUID
	RoleName RoleName
	TeamSlug slug.Slug
}

func (q *Queries) AddMember(ctx context.Context, arg AddMemberParams) error {
	_, err := q.db.Exec(ctx, addMember, arg.UserID, arg.RoleName, arg.TeamSlug)
	return err
}

const countForUser = `-- name: CountForUser :one
SELECT
	COUNT(user_roles.*)
FROM
	user_roles
	JOIN teams ON teams.slug = user_roles.target_team_slug
WHERE
	user_roles.user_id = $1
`

func (q *Queries) CountForUser(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countForUser, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countMembers = `-- name: CountMembers :one
SELECT
	COUNT(user_roles.*)
FROM
	user_roles
	JOIN teams ON teams.slug = user_roles.target_team_slug
WHERE
	user_roles.target_team_slug = $1
`

func (q *Queries) CountMembers(ctx context.Context, teamSlug *slug.Slug) (int64, error) {
	row := q.db.QueryRow(ctx, countMembers, teamSlug)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getMember = `-- name: GetMember :one
SELECT
	users.id, users.email, users.name, users.external_id,
	user_roles.role_name
FROM
	user_roles
	JOIN teams ON teams.slug = user_roles.target_team_slug
	JOIN users ON users.id = user_roles.user_id
WHERE
	user_roles.target_team_slug = $1::slug
	AND user_roles.user_id = $2
`

type GetMemberParams struct {
	TeamSlug slug.Slug
	UserID   uuid.UUID
}

type GetMemberRow struct {
	ID         uuid.UUID
	Email      string
	Name       string
	ExternalID string
	RoleName   RoleName
}

func (q *Queries) GetMember(ctx context.Context, arg GetMemberParams) (*GetMemberRow, error) {
	row := q.db.QueryRow(ctx, getMember, arg.TeamSlug, arg.UserID)
	var i GetMemberRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.ExternalID,
		&i.RoleName,
	)
	return &i, err
}

const getMemberByEmail = `-- name: GetMemberByEmail :one
SELECT
	users.id, users.email, users.name, users.external_id,
	user_roles.role_name
FROM
	user_roles
	JOIN teams ON teams.slug = user_roles.target_team_slug
	JOIN users ON users.id = user_roles.user_id
WHERE
	user_roles.target_team_slug = $1::slug
	AND users.email = $2
`

type GetMemberByEmailParams struct {
	TeamSlug slug.Slug
	Email    string
}

type GetMemberByEmailRow struct {
	ID         uuid.UUID
	Email      string
	Name       string
	ExternalID string
	RoleName   RoleName
}

func (q *Queries) GetMemberByEmail(ctx context.Context, arg GetMemberByEmailParams) (*GetMemberByEmailRow, error) {
	row := q.db.QueryRow(ctx, getMemberByEmail, arg.TeamSlug, arg.Email)
	var i GetMemberByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.ExternalID,
		&i.RoleName,
	)
	return &i, err
}

const listForUser = `-- name: ListForUser :many
SELECT
	users.id, users.email, users.name, users.external_id,
	user_roles.id, user_roles.role_name, user_roles.user_id, user_roles.target_team_slug, user_roles.target_service_account_id
FROM
	user_roles
	JOIN teams ON teams.slug = user_roles.target_team_slug
	JOIN users ON users.id = user_roles.user_id
WHERE
	user_roles.user_id = $1
ORDER BY
	CASE
		WHEN $2::TEXT = 'slug:asc' THEN teams.slug
	END ASC,
	CASE
		WHEN $2::TEXT = 'slug:desc' THEN teams.slug
	END DESC,
	teams.slug ASC
LIMIT
	$4
OFFSET
	$3
`

type ListForUserParams struct {
	UserID  uuid.UUID
	OrderBy string
	Offset  int32
	Limit   int32
}

type ListForUserRow struct {
	User     User
	UserRole UserRole
}

func (q *Queries) ListForUser(ctx context.Context, arg ListForUserParams) ([]*ListForUserRow, error) {
	rows, err := q.db.Query(ctx, listForUser,
		arg.UserID,
		arg.OrderBy,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListForUserRow{}
	for rows.Next() {
		var i ListForUserRow
		if err := rows.Scan(
			&i.User.ID,
			&i.User.Email,
			&i.User.Name,
			&i.User.ExternalID,
			&i.UserRole.ID,
			&i.UserRole.RoleName,
			&i.UserRole.UserID,
			&i.UserRole.TargetTeamSlug,
			&i.UserRole.TargetServiceAccountID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGCPGroupsForUser = `-- name: ListGCPGroupsForUser :one
SELECT
	ARRAY_AGG(teams.google_group_email)::TEXT[]
FROM
	teams
	JOIN user_roles ON user_roles.target_team_slug = teams.slug
WHERE
	user_roles.user_id = $1
	AND teams.google_group_email IS NOT NULL
`

func (q *Queries) ListGCPGroupsForUser(ctx context.Context, userID uuid.UUID) ([]string, error) {
	row := q.db.QueryRow(ctx, listGCPGroupsForUser, userID)
	var column_1 []string
	err := row.Scan(&column_1)
	return column_1, err
}

const listMembers = `-- name: ListMembers :many
SELECT
	users.id, users.email, users.name, users.external_id,
	user_roles.id, user_roles.role_name, user_roles.user_id, user_roles.target_team_slug, user_roles.target_service_account_id
FROM
	user_roles
	JOIN teams ON teams.slug = user_roles.target_team_slug
	JOIN users ON users.id = user_roles.user_id
WHERE
	user_roles.target_team_slug = $1::slug
ORDER BY
	CASE
		WHEN $2::TEXT = 'name:asc' THEN LOWER(users.name)
	END ASC,
	CASE
		WHEN $2::TEXT = 'name:desc' THEN LOWER(users.name)
	END DESC,
	CASE
		WHEN $2::TEXT = 'email:asc' THEN users.email
	END ASC,
	CASE
		WHEN $2::TEXT = 'email:desc' THEN users.email
	END DESC,
	CASE
		WHEN $2::TEXT = 'role:asc' THEN user_roles.role_name
	END ASC,
	CASE
		WHEN $2::TEXT = 'role:desc' THEN user_roles.role_name
	END DESC,
	users.name,
	users.email ASC
LIMIT
	$4
OFFSET
	$3
`

type ListMembersParams struct {
	TeamSlug slug.Slug
	OrderBy  string
	Offset   int32
	Limit    int32
}

type ListMembersRow struct {
	User     User
	UserRole UserRole
}

func (q *Queries) ListMembers(ctx context.Context, arg ListMembersParams) ([]*ListMembersRow, error) {
	rows, err := q.db.Query(ctx, listMembers,
		arg.TeamSlug,
		arg.OrderBy,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListMembersRow{}
	for rows.Next() {
		var i ListMembersRow
		if err := rows.Scan(
			&i.User.ID,
			&i.User.Email,
			&i.User.Name,
			&i.User.ExternalID,
			&i.UserRole.ID,
			&i.UserRole.RoleName,
			&i.UserRole.UserID,
			&i.UserRole.TargetTeamSlug,
			&i.UserRole.TargetServiceAccountID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeMember = `-- name: RemoveMember :exec
DELETE FROM user_roles
WHERE
	user_id = $1
	AND target_team_slug = $2::slug
`

type RemoveMemberParams struct {
	UserID   uuid.UUID
	TeamSlug slug.Slug
}

func (q *Queries) RemoveMember(ctx context.Context, arg RemoveMemberParams) error {
	_, err := q.db.Exec(ctx, removeMember, arg.UserID, arg.TeamSlug)
	return err
}

const userIsMember = `-- name: UserIsMember :one
SELECT
	EXISTS (
		SELECT
			id
		FROM
			user_roles
		WHERE
			user_id = $1
			AND target_team_slug = $2::slug
			AND role_name IN ('Team member', 'Team owner')
	)
`

type UserIsMemberParams struct {
	UserID   uuid.UUID
	TeamSlug slug.Slug
}

func (q *Queries) UserIsMember(ctx context.Context, arg UserIsMemberParams) (bool, error) {
	row := q.db.QueryRow(ctx, userIsMember, arg.UserID, arg.TeamSlug)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const userIsOwner = `-- name: UserIsOwner :one
SELECT
	EXISTS (
		SELECT
			id
		FROM
			user_roles
		WHERE
			user_id = $1
			AND target_team_slug = $2::slug
			AND role_name = 'Team owner'
	)
`

type UserIsOwnerParams struct {
	UserID   uuid.UUID
	TeamSlug slug.Slug
}

func (q *Queries) UserIsOwner(ctx context.Context, arg UserIsOwnerParams) (bool, error) {
	row := q.db.QueryRow(ctx, userIsOwner, arg.UserID, arg.TeamSlug)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
