// Code generated by sqlc. DO NOT EDIT.
// source: sessions.sql

package sessionsql

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :one
INSERT INTO
	sessions (user_id, expires)
VALUES
	($1, $2)
RETURNING
	id, user_id, expires
`

type CreateParams struct {
	UserID  uuid.UUID
	Expires pgtype.Timestamptz
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*Session, error) {
	row := q.db.QueryRow(ctx, create, arg.UserID, arg.Expires)
	var i Session
	err := row.Scan(&i.ID, &i.UserID, &i.Expires)
	return &i, err
}

const delete = `-- name: Delete :exec
DELETE FROM sessions
WHERE
	id = $1
`

func (q *Queries) Delete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const get = `-- name: Get :one
SELECT
	id,
	user_id,
	expires
FROM
	sessions
WHERE
	id = $1
`

func (q *Queries) Get(ctx context.Context, id uuid.UUID) (*Session, error) {
	row := q.db.QueryRow(ctx, get, id)
	var i Session
	err := row.Scan(&i.ID, &i.UserID, &i.Expires)
	return &i, err
}

const setExpires = `-- name: SetExpires :one
UPDATE sessions
SET
	expires = $1
WHERE
	id = $2
RETURNING
	id, user_id, expires
`

type SetExpiresParams struct {
	Expires pgtype.Timestamptz
	ID      uuid.UUID
}

func (q *Queries) SetExpires(ctx context.Context, arg SetExpiresParams) (*Session, error) {
	row := q.db.QueryRow(ctx, setExpires, arg.Expires, arg.ID)
	var i Session
	err := row.Scan(&i.ID, &i.UserID, &i.Expires)
	return &i, err
}
