// Code generated by sqlc. DO NOT EDIT.
// source: batch.go

package checkersql

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const batchInsertIssues = `-- name: BatchInsertIssues :batchexec
INSERT INTO
	issues (
		issue_type,
		resource_name,
		resource_type,
		team,
		env,
		severity,
		message,
		issue_details
	)
VALUES
	(
		$1,
		$2,
		$3,
		$4,
		$5,
		$6,
		$7,
		$8
	)
`

type BatchInsertIssuesBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type BatchInsertIssuesParams struct {
	IssueType    string
	ResourceName string
	ResourceType string
	Team         string
	Env          string
	Severity     SeverityLevel
	Message      string
	IssueDetails []byte
}

func (q *Queries) BatchInsertIssues(ctx context.Context, arg []BatchInsertIssuesParams) *BatchInsertIssuesBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.IssueType,
			a.ResourceName,
			a.ResourceType,
			a.Team,
			a.Env,
			a.Severity,
			a.Message,
			a.IssueDetails,
		}
		batch.Queue(batchInsertIssues, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &BatchInsertIssuesBatchResults{br, len(arg), false}
}

func (b *BatchInsertIssuesBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *BatchInsertIssuesBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
