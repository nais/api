extend type ContainerImage {
	"Whether the image has a software bill of materials (SBOM) attached to it."
	hasSBOM: Boolean!

	"Get the vulnerabilities of the image."
	vulnerabilities(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Ordering options for items returned from the connection."
		orderBy: ImageVulnerabilityOrder
	): ImageVulnerabilityConnection!

	"Get the summary of the vulnerabilities of the image."
	vulnerabilitySummary: ImageVulnerabilitySummary

	"Workloads using this container image."
	workloadReferences(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): ContainerImageWorkloadReferenceConnection!
}

extend type Team {
	vulnerabilitySummary: TeamVulnerabilitySummary!
}

type ImageVulnerabilitySummary {
	"Total number of vulnerabilities."
	total: Int!

	"Risk score of the image."
	riskScore: Int!

	"Number of vulnerabilities with severity LOW."
	low: Int!

	"Number of vulnerabilities with severity MEDIUM."
	medium: Int!

	"Number of vulnerabilities with severity HIGH."
	high: Int!

	"Number of vulnerabilities with severity CRITICAL."
	critical: Int!

	"Number of vulnerabilities with severity UNASSIGNED."
	unassigned: Int!
}

type ImageVulnerabilityConnection {
	"Information to aid in pagination."
	pageInfo: PageInfo!

	"List of edges."
	edges: [ImageVulnerabilityEdge!]!

	"List of nodes."
	nodes: [ImageVulnerability!]!
}

type ContainerImageWorkloadReferenceConnection {
	"Information to aid in pagination."
	pageInfo: PageInfo!

	"List of edges."
	edges: [ContainerImageWorkloadReferenceEdge!]!

	"List of nodes."
	nodes: [ContainerImageWorkloadReference!]!
}

type ImageVulnerabilityEdge {
	"A cursor for use in pagination."
	cursor: Cursor!

	"The image vulnerability."
	node: ImageVulnerability!
}

type ContainerImageWorkloadReferenceEdge {
	"A cursor for use in pagination."
	cursor: Cursor!

	"The workload reference."
	node: ContainerImageWorkloadReference!
}

type ContainerImageWorkloadReference {
	"The workload using the container image."
	workload: Workload!
}

type ImageVulnerability implements Node {
	"The globally unique ID of the image vulnerability node."
	id: ID!

	"The unique identifier of the vulnerability. E.g. CVE-****-****."
	identifier: String!

	"Severity of the vulnerability."
	severity: ImageVulnerabilitySeverity!

	"Description of the vulnerability."
	description: String!

	"Package name of the vulnerability."
	package: String!

	"State of the vulnerability."
	state: ImageVulnerabilityState!

	"External URL to the vulnerability."
	url: String!
}

enum ImageVulnerabilitySeverity {
	LOW
	MEDIUM
	HIGH
	CRITICAL
	UNASSIGNED
}

enum ImageVulnerabilityState {
	TRIAGE
	RESOLVED
	FALSE_POSITIVE
	NOT_AFFECTED
}

"Ordering options when fetching teams."
input ImageVulnerabilityOrder {
	"The field to order items by."
	field: ImageVulnerabilityOrderField!

	"The direction to order items by."
	direction: OrderDirection!
}

enum ImageVulnerabilityOrderField {
	SEVERITY
	RISK_SCORE
}

type TeamVulnerabilitySummary {
	"Risk score of the team."
	riskScore: Int!
	"Number of vulnerabilities with severity CRITICAL."
	critical: Int!
	"Number of vulnerabilities with severity HIGH."
	high: Int!
	"Number of vulnerabilities with severity MEDIUM."
	medium: Int!
	"Number of vulnerabilities with severity LOW."
	low: Int!
	"Number of vulnerabilities with severity UNASSIGNED."
	unassigned: Int!
	"Number of workloads with a software bill of materials (SBOM) attached."
	bomCount: Int!
	"Coverage of the team."
	coverage: Float!
	"Ranking of the team based on vulnerability severity."
	ranking: TeamVulnerabilityRanking!
	"Trend of vulnerability status for the team."
	riskScoreTrend: TeamVulnerabilityRiskScoreTrend!
}

enum TeamVulnerabilityRanking {
	"Top third most vulnerable teams."
	MOST_VULNERABLE
	"Middle third most vulnerable teams."
	MIDDLE
	"Bottom third most vulnerable teams."
	LEAST_VULNERABLE
	"Unknown ranking."
	UNKNOWN
}

enum TeamVulnerabilityRiskScoreTrend {
	"Risk score is increasing."
	UP
	"Risk score is decreasing."
	DOWN
	"Risk score is not changing."
	FLAT
}

extend enum WorkloadOrderField {
	"Order by risk score"
	VULNERABILITY_RISK_SCORE
	"Order apps by vulnerability severity critical"
	VULNERABILITY_SEVERITY_CRITICAL
	"Order apps by vulnerability severity high"
	VULNERABILITY_SEVERITY_HIGH
	"Order apps by vulnerability severity medium"
	VULNERABILITY_SEVERITY_MEDIUM
	"Order apps by vulnerability severity low"
	VULNERABILITY_SEVERITY_LOW
	"Order apps by vulnerability severity unassigned"
	VULNERABILITY_SEVERITY_UNASSIGNED
}
