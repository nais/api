extend type Team {
	"NAIS Workloads owned by the team."
	workloads(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Ordering options for items returned from the connection."
		orderBy: WorkloadOrder

		"Filter the returned objects"
		filter: TeamWorkloadsFilter
	): WorkloadConnection!
}

extend type TeamEnvironment {
	"Workload in the team environment."
	workload(name: String!): Workload!
}

interface Workload implements Node {
	"The globally unique ID of the workload."
	id: ID!

	"The name of the workload."
	name: String!

	"The team that owns the workload."
	team: Team!

	"The environment the workload is deployed in."
	environment: TeamEnvironment!

	"The container image of the workload."
	image: ContainerImage!

	"The resources allocated to the workload."
	resources: WorkloadResources!

	"The workload manifest."
	manifest: WorkloadManifest!
}

interface WorkloadManifest {
	"The manifest content, serialized as a YAML document."
	content: String!
}

type ContainerImage implements Node {
	"The globally unique ID of the container image node."
	id: ID!

	"Name of the container image."
	name: String!

	"Tag of the container image."
	tag: String!
}

interface WorkloadResources {
	"Instances using resources above this threshold will be killed."
	limits: WorkloadResourceQuantity!

	"Resources requested by the workload."
	requests: WorkloadResourceQuantity!
}

type WorkloadResourceQuantity {
	"The number of CPU cores."
	cpu: Float!

	"The amount of memory in bytes."
	memory: Int!
}

interface AuthIntegration {
	"The name of the integration."
	name: String!
}

type EntraIDAuthIntegration implements AuthIntegration {
	"The name of the integration."
	name: String!
}

type IDPortenAuthIntegration implements AuthIntegration {
	"The name of the integration."
	name: String!
}

type MaskinportenAuthIntegration implements AuthIntegration {
	"The name of the integration."
	name: String!
}

type TokenXAuthIntegration implements AuthIntegration {
	"The name of the integration."
	name: String!
}

type WorkloadConnection {
	"Pagination information."
	pageInfo: PageInfo!

	"List of nodes."
	nodes: [Workload!]!

	"List of edges."
	edges: [WorkloadEdge!]!
}

type WorkloadEdge {
	"Cursor for this edge that can be used for pagination."
	cursor: Cursor!

	"The Workload."
	node: Workload!
}

"Ordering options when fetching workloads."
input WorkloadOrder {
	"The field to order items by."
	field: WorkloadOrderField!

	"The direction to order items by."
	direction: OrderDirection!
}

enum WorkloadOrderField {
	"Order Workloads by name."
	NAME

	"Order Workloads by status."
	STATUS

	"Order Workloads by the name of the environment."
	ENVIRONMENT

	"Order Workloads by the deployment time."
	DEPLOYMENT_TIME
}

input TeamWorkloadsFilter {
	"Only return workloads from the given named environments."
	environments: [String!]
}
