extend type Team {
	"NAIS jobs owned by the team."
	jobs(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor

		"Ordering options for items returned from the connection."
		orderBy: JobOrder
	): JobConnection!
}

type Job implements Node & Workload {
	id: ID!
	name: String!
	team: Team!
	environment: TeamEnvironment!
	image: ContainerImage!

	# image: String!
	# deployInfo: DeployInfo!
	# accessPolicy: AccessPolicy!
	# status: WorkloadStatus!
	# authz: [Authz!]!
	# persistence: [Persistence!]!
	# variables: [Variable!]!
	# resources: Resources!
	# type: WorkloadType!

	# imageDetails: ImageDetails!
	# runs: [Run!]!
	# manifest: String!
	# schedule: String!
	# completions: Int!
	# parallelism: Int!
	# retries: Int!
	# secrets: [Secret!]!
}

type JobConnection {
	pageInfo: PageInfo!
	nodes: [Job!]!
	edges: [JobEdge!]!
}

type JobEdge {
	cursor: Cursor!
	node: Job!
}

input JobOrder {
	field: JobOrderField!
	direction: OrderDirection!
}

enum JobOrderField {
	STATUS
	NAME
	ENVIRONMENT
	VULNERABILITIES
	RISK_SCORE
	DEPLOYMENT_TIME
}
