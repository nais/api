extend type Mutation {
	"Create a new secret."
	createSecret(input: CreateSecretInput!): CreateSecretPayload!

	"Set a secret value in a secret. If the value already exists the secret value will be updated."
	setSecretValue(input: SetSecretValueInput!): SetSecretValuePayload!

	"Remove a secret value from a secret."
	removeSecretValue(input: RemoveSecretValueInput!): RemoveSecretValuePayload!

	"Delete a secret and the values it contains."
	deleteSecret(input: DeleteSecretInput!): DeleteSecretPayload!
}

extend type Team {
	"Secrets owned by the team."
	secrets(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): SecretConnection!
}

extend type TeamEnvironment {
	"Get a secret by name."
	secret(name: String!): Secret!
}

"A secret is a collection of secret values."
type Secret implements Node {
	"The globally unique ID of the secret."
	id: ID!

	"The name of the secret."
	name: String!

	"The environment the secret exists in."
	environment: TeamEnvironment!

	"The team that owns the secret."
	team: Team!

	"The secret values contained within the secret."
	values: [SecretValue!]!

	"Applications that use the secret."
	applications(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): ApplicationConnection!

	"Jobs that use the secret."
	jobs(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): JobConnection!

	"Workloads that use the secret."
	workloads(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): WorkloadConnection!

	"Last time the secret was modified."
	lastModifiedAt: Time

	"User who last modified the secret."
	lastModifiedBy: User
}

input SecretValueInput {
	"The name of the secret value."
	name: String!

	"The secret value to set."
	value: String!
}

input CreateSecretInput {
	"The name of the secret."
	name: String!

	"The environment the secret exists in."
	environment: String!

	"The team that owns the secret."
	team: Slug!
}

input SetSecretValueInput {
	"The name of the secret."
	name: String!

	"The environment the secret exists in."
	environment: String!

	"The team that owns the secret."
	team: Slug!

	"The secret value to set."
	value: SecretValueInput!
}

input RemoveSecretValueInput {
	"The name of the secret."
	secretName: String!

	"The environment the secret exists in."
	environment: String!

	"The team that owns the secret."
	team: Slug!

	"The secret value to remove."
	valueName: String!
}

input DeleteSecretInput {
	"The name of the secret."
	name: String!

	"The environment the secret exists in."
	environment: String!

	"The team that owns the secret."
	team: Slug!
}

type CreateSecretPayload {
	"The created secret."
	secret: Secret
}

type SetSecretValuePayload {
	"The added / updated secret."
	secret: Secret
}

type RemoveSecretValuePayload {
	"The updated secret."
	secret: Secret
}

type DeleteSecretPayload {
	"The deleted secret."
	secretDeleted: Boolean
}

type SecretConnection {
	"Pagination information."
	pageInfo: PageInfo!

	"List of nodes."
	nodes: [Secret!]!

	"List of edges."
	edges: [SecretEdge!]!
}

type SecretEdge {
	"Cursor for this edge that can be used for pagination."
	cursor: Cursor!

	"The Secret."
	node: Secret!
}

type SecretValue {
	"The name of the secret value."
	name: String!

	"The secret value itself."
	value: String!
}

type SecretCreatedAuditEntry implements AuditEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: AuditResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}

type SecretValueAddedAuditEntry implements AuditEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: AuditResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String

	"Data associated with the entry."
	data: SecretValueAddedAuditEntryData
}

type SecretValueAddedAuditEntryData {
	"The name of the added value."
	valueName: String!
}

type SecretValueUpdatedAuditEntry implements AuditEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: AuditResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String

	"Data associated with the entry."
	data: SecretValueUpdatedAuditEntryData
}

type SecretValueUpdatedAuditEntryData {
	"The name of the updated value."
	valueName: String!
}

type SecretValueRemovedAuditEntry implements AuditEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: AuditResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String

	"Data associated with the entry."
	data: SecretValueRemovedAuditEntryData
}

type SecretValueRemovedAuditEntryData {
	"The name of the removed value."
	valueName: String!
}

type SecretDeletedAuditEntry implements AuditEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: AuditResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String
}
