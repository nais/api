type Secret implements Node {
	"The globally unique ID of the secret."
	id: ID!

	"The name of the secret."
	name: String!

	"The environment the secret is deployed to."
	environment: TeamEnvironment!

	"The team that owns the secret."
	team: Team!

	"The secret data."
	data: [SecretVariable!]!

	"Applications that use the secret."
	applications(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): ApplicationConnection!

	"Jobs that use the secret."
	jobs(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): JobConnection!

	"Workloads that use the secret."
	workloads(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): WorkloadConnection!

	"Last time the secret was modified."
	lastModifiedAt: Time

	"User who last modified the secret."
	lastModifiedBy: User
}

input SecretVariableInput {
	name: String!
	value: String!
}

input CreateSecretInput {
	"The name of the secret."
	name: String!

	"The environment the secret is deployed to."
	environment: String!

	"The team that owns the secret."
	team: Slug!

	"The secret data."
	data: [SecretVariableInput!]!
}

type CreateSecretPayload {
	"The created secret."
	secret: Secret!
}

input UpdateSecretInput {
	"The name of the secret."
	name: String!

	"The environment the secret is deployed to."
	environment: String!

	"The team that owns the secret."
	team: Slug!

	"The secret data."
	data: [SecretVariableInput!]!
}

type UpdateSecretPayload {
	"The created secret."
	secret: Secret!
}

input DeleteSecretInput {
	"The name of the secret."
	name: String!

	"The environment the secret is deployed to."
	environment: String!

	"The team that owns the secret."
	team: Slug!
}

type DeleteSecretPayload {
	"The deleted secret."
	secretDeleted: Boolean!
}

extend type Mutation {
	createSecret(input: CreateSecretInput!): CreateSecretPayload!
	updateSecret(input: UpdateSecretInput!): UpdateSecretPayload!
	deleteSecret(input: DeleteSecretInput!): DeleteSecretPayload!
}

extend type Team {
	"Secrets owned by the team."
	secrets(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): SecretConnection!
}

extend type TeamEnvironment {
	"Get a secret by name."
	secret(name: String!): Secret!
}

type SecretConnection {
	"Pagination information."
	pageInfo: PageInfo!

	"List of nodes."
	nodes: [Secret!]!

	"List of edges."
	edges: [SecretEdge!]!
}

type SecretEdge {
	"Cursor for this edge that can be used for pagination."
	cursor: Cursor!

	"The Secret."
	node: Secret!
}

type SecretVariable {
	"The name of the secret."
	name: String!

	"The value of the secret."
	value: String!
}

type SecretCreatedAuditEntry implements AuditEntry & Node {
	"ID of the entry."
	id: ID!

	"The identity of the actor who performed the action. The value is either the name of a service account, or the email address of a user."
	actor: String!

	"Creation time of the entry."
	createdAt: Time!

	"Message that summarizes the entry."
	message: String!

	"Type of the resource that was affected by the action."
	resourceType: AuditResourceType!

	"Name of the resource that was affected by the action."
	resourceName: String!

	"The team slug that the entry belongs to."
	teamSlug: Slug!

	"The environment name that the entry belongs to."
	environmentName: String

	"Data associated with the entry."
	data: SecretCreatedAuditEntryData!
}

type SecretCreatedAuditEntryData {
	"The keys added to the secret."
	keys: [String!]!
}
