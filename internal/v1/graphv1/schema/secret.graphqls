type Secret implements Node {
	"The globally unique ID of the secret."
	id: ID!

	"The name of the secret."
	name: String!

	"The environment the secret is deployed to."
	environment: TeamEnvironment!

	"The team that owns the secret."
	team: Team!

	"The secret data."
	data: [SecretVariable!]!

	"Applications that use the secret."
	applications(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): ApplicationConnection!

	"Jobs that use the secret."
	jobs(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): JobConnection!

	"Last time the secret was modified."
	lastModifiedAt: Time

	"User who last modified the secret."
	lastModifiedBy: User
}

extend type Team {
	"Secrets owned by the team."
	secrets(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): SecretConnection!
}

extend type TeamEnvironment {
	secret(
		"The name of the secret."
		name: String!
	): Secret
}

type SecretConnection {
	"Pagination information."
	pageInfo: PageInfo!

	"List of nodes."
	nodes: [Secret!]!

	"List of edges."
	edges: [SecretEdge!]!
}

type SecretEdge {
	"Cursor for this edge that can be used for pagination."
	cursor: Cursor!

	"The Secret."
	node: Secret!
}

type SecretVariable {
	"The name of the secret."
	name: String!

	"The value of the secret."
	value: String!
}
