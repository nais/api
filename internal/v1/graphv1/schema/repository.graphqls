extend type Team {
	repositories(
		"Get the first n items in the connection. This can be used in combination with the after parameter."
		first: Int

		"Get items after this cursor."
		after: Cursor

		"Get the last n items in the connection. This can be used in combination with the before parameter."
		last: Int

		"Get items before this cursor."
		before: Cursor
	): RepositoryConnection!
}

extend type Mutation {
	"Add a team repository."
	addRepositoryToTeam(input: AddRepositoryToTeamInput!): AddRepositoryToTeamPayload!

	"Remove a team repository."
	removeRepositoryFromTeam(input: RemoveRepositoryFromTeamInput!): RemoveRepositoryFromTeamPayload!
}

input AddRepositoryToTeamInput {
	"Slug of the team to add the repository to."
	teamSlug: Slug!

	"Name of the repository, with the org prefix, for instance 'org/repo'."
	repositoryName: String!
}

type AddRepositoryToTeamPayload {
	"Repository that was added to the team."
	repository: Repository
}

input RemoveRepositoryFromTeamInput {
	"Slug of the team to remove the repository from."
	teamSlug: Slug!

	"Name of the repository, with the org prefix, for instance 'org/repo'."
	repositoryName: String!
}

type RemoveRepositoryFromTeamPayload {
	"Whether or not the repository was removed from the team."
	success: Boolean
}

type RepositoryConnection {
	"Pagination information."
	pageInfo: PageInfo!

	"List of nodes."
	nodes: [Repository!]!

	"List of edges."
	edges: [RepositoryEdge!]!
}

type RepositoryEdge {
	"Cursor for this edge that can be used for pagination."
	cursor: Cursor!

	"The GitHub repository."
	node: Repository!
}

type Repository implements Node {
	"ID of the repository."
	id: ID!

	"Name of the repository, with the organization prefix."
	name: String!

	"Team this repository is connected to."
	team: Team!
}
