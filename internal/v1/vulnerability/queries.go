package vulnerability

import (
	"context"
	"fmt"

	"github.com/nais/api/internal/slug"
	"github.com/nais/api/internal/v1/graphv1/pagination"
)

func GetImageMetadata(ctx context.Context, imageRef string) (*ImageDetails, error) {
	return fromContext(ctx).imageLoader.Load(ctx, imageRef)
}

func GetTeamMetadata(ctx context.Context, teamSlug slug.Slug) ([]*ImageDetails, error) {
	c := fromContext(ctx).dpClient
	projects, err := c.GetMetadataForTeam(ctx, teamSlug.String())
	if err != nil {
		return nil, fmt.Errorf("getting projects by team %s: %w", teamSlug, err)
	}

	if projects == nil {
		return nil, nil
	}

	images := make([]*ImageDetails, 0)
	for _, p := range projects {
		if p == nil {
			continue
		}

		// TODO: Find a better way to filter out these images
		if p.Name == "europe-north1-docker.pkg.dev/nais-io/nais/images/wonderwall" {
			continue
		}

		if p.Name == "europe-north1-docker.pkg.dev/nais-io/nais/images/elector" {
			continue
		}

		image, err := c.GetMetadataForImage(ctx, p.Name)
		if err != nil {
			return nil, fmt.Errorf("getting metadata for image %q: %w", p.Name, err)
		}
		images = append(images, image)
	}

	return images, nil
}

func ListWorkloadReferences(ctx context.Context, image string, page *pagination.Pagination) (*pagination.Connection[*ContainerImageWorkloadReference], error) {
	metadata, err := fromContext(ctx).imageLoader.Load(ctx, image)
	if err != nil {
		return nil, err
	}

	all := metadata.WorkloadReferences
	slice := pagination.Slice(all, page)
	return pagination.NewConvertConnection(slice, page, int32(len(all)), toGraphWorkloadReference), nil
}
