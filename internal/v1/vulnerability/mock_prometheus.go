// Code generated by mockery. DO NOT EDIT.

package vulnerability

import (
	context "context"

	model "github.com/prometheus/common/model"
	mock "github.com/stretchr/testify/mock"

	time "time"

	v1 "github.com/prometheus/client_golang/api/prometheus/v1"
)

// MockPrometheus is an autogenerated mock type for the Prometheus type
type MockPrometheus struct {
	mock.Mock
}

type MockPrometheus_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPrometheus) EXPECT() *MockPrometheus_Expecter {
	return &MockPrometheus_Expecter{mock: &_m.Mock}
}

// Query provides a mock function with given fields: ctx, query, ts, opts
func (_m *MockPrometheus) Query(ctx context.Context, query string, ts time.Time, opts ...v1.Option) (model.Value, v1.Warnings, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, query, ts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 model.Value
	var r1 v1.Warnings
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, ...v1.Option) (model.Value, v1.Warnings, error)); ok {
		return rf(ctx, query, ts, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, ...v1.Option) model.Value); ok {
		r0 = rf(ctx, query, ts, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Value)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, ...v1.Option) v1.Warnings); ok {
		r1 = rf(ctx, query, ts, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(v1.Warnings)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, time.Time, ...v1.Option) error); ok {
		r2 = rf(ctx, query, ts, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPrometheus_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockPrometheus_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - ts time.Time
//   - opts ...v1.Option
func (_e *MockPrometheus_Expecter) Query(ctx interface{}, query interface{}, ts interface{}, opts ...interface{}) *MockPrometheus_Query_Call {
	return &MockPrometheus_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{ctx, query, ts}, opts...)...)}
}

func (_c *MockPrometheus_Query_Call) Run(run func(ctx context.Context, query string, ts time.Time, opts ...v1.Option)) *MockPrometheus_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v1.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(v1.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time), variadicArgs...)
	})
	return _c
}

func (_c *MockPrometheus_Query_Call) Return(_a0 model.Value, _a1 v1.Warnings, _a2 error) *MockPrometheus_Query_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPrometheus_Query_Call) RunAndReturn(run func(context.Context, string, time.Time, ...v1.Option) (model.Value, v1.Warnings, error)) *MockPrometheus_Query_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPrometheus creates a new instance of MockPrometheus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPrometheus(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockPrometheus {
	mock := &MockPrometheus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
