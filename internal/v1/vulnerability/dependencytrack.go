package vulnerability

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"slices"
	"strings"
	"time"

	"github.com/google/uuid"
	dependencytrack "github.com/nais/dependencytrack/pkg/client"
	"github.com/patrickmn/go-cache"
	"github.com/sirupsen/logrus"
	"go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp"
)

const (
	dependencyTrackAdminTeam = "Administrators"
)

var imagesToExclude = []string{
	"europe-north1-docker.pkg.dev/nais-io/nais/images/wonderwall",
	"europe-north1-docker.pkg.dev/nais-io/nais/images/elector",
}

var _ Client = &dependencyTrackClient{}

type Client interface {
	GetMetadataForImage(ctx context.Context, image string) (*ImageDetails, error)
	GetFindingsForImageByProjectID(ctx context.Context, projectID string, suppressed bool) ([]*ImageVulnerability, error)
	GetMetadataForTeam(ctx context.Context, team string) ([]*ImageDetails, error)
	// GetVulnerabilityError(ctx context.Context, image string, revision string) (model.StateError, error)
	UpdateFinding(ctx context.Context, analysisState, comment, componentID, projectID, vulnerabilityID, suppressedBy string, suppress bool) error
	GetAnalysisTrailForImage(ctx context.Context, projectID, componentID, vulnerabilityID string) (*ImageVulnerabilityAnalysisTrail, error)
}

type dependencyTrackClient struct {
	client      dependencytrack.Client
	frontendURL string
	log         logrus.FieldLogger
	cache       *cache.Cache
}

type DependencyTrackConfig struct {
	Endpoint, Username, Password, FrontendURL string
	EnableFakes                               bool
}

type ProjectMetric struct {
	ProjectID            uuid.UUID
	VulnerabilityMetrics []*VulnerabilityMetrics
}

type VulnerabilityMetrics struct {
	Total      int `json:"total"`
	RiskScore  int `json:"riskScore"`
	Critical   int `json:"critical"`
	High       int `json:"high"`
	Medium     int `json:"medium"`
	Low        int `json:"low"`
	Unassigned int `json:"unassigned"`
}

type DependencyTrackOption func(*dependencyTrackClient)

func NewDependencyTrackClient(cfg DependencyTrackConfig, log logrus.FieldLogger, opts ...DependencyTrackOption) Client {
	c := dependencytrack.New(
		cfg.Endpoint,
		cfg.Username,
		cfg.Password,
		dependencytrack.WithApiKeySource(dependencyTrackAdminTeam),
		dependencytrack.WithLogger(log.WithField("client", "dependencytrack")),
		dependencytrack.WithHttpClient(&http.Client{Transport: otelhttp.NewTransport(http.DefaultTransport)}),
	)
	ch := cache.New(2*time.Minute, 5*time.Minute)

	if cfg.EnableFakes {
		c = NewFakeDependencyTrackClient(c)
	}

	dc := &dependencyTrackClient{
		client:      c,
		frontendURL: cfg.FrontendURL,
		log:         log,
		cache:       ch,
	}

	for _, opt := range opts {
		opt(dc)
	}

	return dc
}

func WithClient(client dependencytrack.Client) DependencyTrackOption {
	return func(c *dependencyTrackClient) {
		c.client = client
	}
}

func (c *dependencyTrackClient) GetMetadataForImage(ctx context.Context, image string) (*ImageDetails, error) {
	name, version, _ := strings.Cut(image, ":")
	p, err := c.client.GetProject(ctx, name, version)
	if err != nil {
		return nil, fmt.Errorf("getting project by name %s and version %s: %w", name, version, err)
	}

	if p == nil {
		return &ImageDetails{
			// ID:      scalar.ImageIdent(name, version),
			Name:    image,
			Version: version,
			Summary: c.createSummaryForImage(nil),
			// Rekor:   model.Rekor{},
		}, nil
	}

	return &ImageDetails{
		Name: p.Name + ":" + p.Version,
		// ID:         scalar.ImageIdent(p.Name, p.Version),
		// Rekor:      parseRekorTags(p.Tags),
		Version:            p.Version,
		HasSBOM:            hasSbom(p),
		ProjectID:          p.Uuid,
		Summary:            c.createSummaryForImage(p),
		ProjectURL:         c.frontendURL + "/projects/" + p.Uuid,
		WorkloadReferences: parseWorkloadRefTags(p.Tags),
	}, nil
}

func (c *dependencyTrackClient) GetFindingsForImageByProjectID(ctx context.Context, projectID string, suppressed bool) ([]*ImageVulnerability, error) {
	findings, err := c.retrieveFindings(ctx, projectID, suppressed)
	if err != nil {
		return nil, fmt.Errorf("retrieving findings for project %s: %w", projectID, err)
	}

	foundFindings := map[string]bool{}
	retFindings := make([]*ImageVulnerability, 0)
	for _, f := range findings {
		// skip if we already have the finding
		if found := foundFindings[f.Vulnerability.VulnId]; found {
			continue
		}

		// var aliases []*model.VulnIDAlias
		// for _, alias := range f.Vulnerability.Aliases {
		// 	if alias.CveId != "" {
		// 		aliases = append(aliases, &model.VulnIDAlias{
		// 			Name:   alias.CveId,
		// 			Source: "NVD",
		// 		})
		// 	}
		// 	if alias.GhsaId != "" {
		// 		aliases = append(aliases, &model.VulnIDAlias{
		// 			Name:   alias.GhsaId,
		// 			Source: "GHSA",
		// 		})
		// 	}
		// }

		retFindings = append(retFindings, &ImageVulnerability{
			Identifier:  f.Vulnerability.VulnId,
			Package:     f.Component.PURL,
			Severity:    ImageVulnerabilitySeverity(f.Vulnerability.Severity),
			Description: f.Vulnerability.Title,
			State:       ImageVulnerabilityState(f.Analysis.State),
			projectID:   projectID,
			componentID: f.Component.UUID,
		})
		foundFindings[f.Vulnerability.VulnId] = true
	}
	return retFindings, nil
}

func (c *dependencyTrackClient) GetMetadataForTeam(ctx context.Context, team string) ([]*ImageDetails, error) {
	projects, err := c.retrieveProjectsForTeam(ctx, team)
	if err != nil {
		return nil, fmt.Errorf("getting projects by team %s: %w", team, err)
	}

	if projects == nil {
		return nil, nil
	}

	images := make([]*ImageDetails, 0)
	for _, p := range projects {
		if p == nil {
			continue
		}

		// skip platform images as the team does not own them
		if excludeProject(p) {
			continue
		}

		image := &ImageDetails{
			// ID:        scalar.ImageIdent(p.Name, p.Version),
			ProjectID: p.Uuid,
			Name:      p.Name,
			Summary:   c.createSummaryForImage(p),
			// Rekor:     parseRekorTags(p.Tags),
			Version: p.Version,
			HasSBOM: hasSbom(p),
			// GQLVars: ImageDetailsGQLVars{
			// 	WorkloadReferences: parseWorkloadRefTags(p.Tags),
			// },
			WorkloadReferences: parseWorkloadRefTags(p.Tags),
		}
		images = append(images, image)
	}

	return images, nil
}

func (c *dependencyTrackClient) UpdateFinding(ctx context.Context, analysisState, comment, componentID, projectID, vulnerabilityID, suppressedBy string, suppress bool) error {
	comment = fmt.Sprintf("on-behalf-of:%s|suppressed:%t|state:%s|comment:%s", suppressedBy, suppress, analysisState, comment)
	analysisRequest := &dependencytrack.AnalysisRequest{
		Vulnerability:         vulnerabilityID,
		Component:             componentID,
		Project:               projectID,
		AnalysisState:         analysisState,
		AnalysisJustification: "NOT_SET",
		AnalysisResponse:      "NOT_SET",
		Comment:               comment,
		IsSuppressed:          suppress,
	}

	err := c.client.RecordAnalysis(ctx, analysisRequest)
	if err != nil {
		return fmt.Errorf("suppressing finding: %w", err)
	}

	if err = c.client.TriggerAnalysis(ctx, projectID); err != nil {
		return fmt.Errorf("triggering analysis: %w", err)
	}

	return nil
}

func (c *dependencyTrackClient) GetAnalysisTrailForImage(ctx context.Context, projectID, componentID, vulnerabilityID string) (*ImageVulnerabilityAnalysisTrail, error) {
	trail, err := c.client.GetAnalysisTrail(ctx, projectID, componentID, vulnerabilityID)
	if err != nil {
		return nil, fmt.Errorf("getting analysis trail: %w", err)
	}

	if trail == nil {
		return &ImageVulnerabilityAnalysisTrail{}, nil
	}

	retAnalysisTrail := &ImageVulnerabilityAnalysisTrail{
		State:       ImageVulnerabilityAnalysisState(trail.AnalysisState),
		Suppressed:  trail.IsSuppressed,
		AllComments: parseComments(trail),
	}

	return retAnalysisTrail, nil
}

// Due to the nature of the DependencyTrack API, the 'LastBomImportFormat' is not reliable to determine if a project has a BOM.
// The 'LastBomImportFormat' can be empty even if the project has a BOM.
// As a fallback, we can check if projects has registered any components, then we assume that if a project has components, it has a BOM.
func hasSbom(p *dependencytrack.Project) bool {
	return p != nil && p.Metrics != nil
}

func (c *dependencyTrackClient) retrieveFindings(ctx context.Context, uuid string, suppressed bool) ([]*dependencytrack.Finding, error) {
	if v, ok := c.cache.Get(uuid); ok {
		return v.([]*dependencytrack.Finding), nil
	}

	findings, err := c.client.GetFindings(ctx, uuid, suppressed)
	if err != nil {
		return nil, fmt.Errorf("retrieveFindings from DependencyTrack: %w", err)
	}

	c.cache.Set(uuid, findings, cache.DefaultExpiration)

	return findings, nil
}

func (c *dependencyTrackClient) createSummaryForImage(project *dependencytrack.Project) *ImageVulnerabilitySummary {
	if !hasSbom(project) {
		return nil
	}

	return &ImageVulnerabilitySummary{
		// ID:         scalar.ImageVulnerabilitySummaryIdent(project.Uuid),
		Total:      project.Metrics.FindingsTotal,
		RiskScore:  int(project.Metrics.InheritedRiskScore),
		Critical:   project.Metrics.Critical,
		High:       project.Metrics.High,
		Medium:     project.Metrics.Medium,
		Low:        project.Metrics.Low,
		Unassigned: project.Metrics.Unassigned,
	}
}

func (c *dependencyTrackClient) retrieveProjectsForTeam(ctx context.Context, team string) ([]*dependencytrack.Project, error) {
	teamTag := dependencytrack.TeamTagPrefix.With(team)
	tag := url.QueryEscape(teamTag)
	if v, ok := c.cache.Get(teamTag); ok {
		c.log.Debugf("retrieved %d projects for team %s from cache", len(v.([]*dependencytrack.Project)), teamTag)
		return v.([]*dependencytrack.Project), nil
	}

	projects, err := c.client.GetProjectsByTag(ctx, tag)
	if err != nil {
		return nil, fmt.Errorf("getting projects from DependencyTrack: %w", err)
	}

	c.log.Debugf("retrieved %d projects for team %s", len(projects), teamTag)
	for _, project := range projects {
		if project == nil {
			continue
		}
		instanceImageTag := dependencytrack.ImageTagPrefix.With(project.Name + ":" + project.Version)
		c.cache.Set(instanceImageTag, project, cache.DefaultExpiration)
	}

	c.cache.Set(teamTag, projects, cache.DefaultExpiration)

	return projects, nil
}

func parseWorkloadRefTags(tags []dependencytrack.Tag) []*WorkloadReference {
	var workloads []*WorkloadReference
	for _, tag := range tags {
		if strings.Contains(tag.Name, dependencytrack.WorkloadTagPrefix.String()) {
			w := strings.TrimPrefix(tag.Name, dependencytrack.WorkloadTagPrefix.String())
			workload := strings.Split(w, "|")

			workloads = append(workloads, &WorkloadReference{
				Environment:  workload[0],
				Team:         workload[1],
				WorkloadType: workload[2],
				Name:         workload[3],
			})
		}
	}
	return workloads
}

func parseComments(trail *dependencytrack.Analysis) []*ImageVulnerabilityAnalysisComment {
	comments := make([]*ImageVulnerabilityAnalysisComment, 0)
	if trail == nil {
		return comments
	}
	for _, comment := range trail.AnalysisComments {
		timestamp := time.Unix(int64(comment.Timestamp)/1000, 0).UTC()
		after, found := strings.CutPrefix(comment.Comment, "on-behalf-of:")

		if found {
			onBehalfOf, theComment, _ := strings.Cut(after, "|")
			comment := &ImageVulnerabilityAnalysisComment{
				Timestamp:  timestamp,
				OnBehalfOf: onBehalfOf,
			}

			parts := strings.Split(theComment, "|")
			for _, part := range parts {
				key, value, _ := strings.Cut(part, ":")
				switch key {
				case "suppressed":
					comment.Suppressed = value == "true"
				case "state":
					comment.State = ImageVulnerabilityAnalysisState(value)
				case "comment":
					comment.Comment = value
				}
			}

			comments = append(comments, comment)
		}
	}

	// sort comments on timestamp desc
	slices.SortFunc(comments, func(i, j *ImageVulnerabilityAnalysisComment) int {
		return int(j.Timestamp.Sub(i.Timestamp).Seconds())
	})

	return comments
}

func excludeProject(p *dependencytrack.Project) bool {
	for _, i := range imagesToExclude {
		if strings.EqualFold(p.Name, i) {
			return true
		}
	}
	return false
}
