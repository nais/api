// Code generated by sqlc. DO NOT EDIT.

package costsql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/nais/api/internal/slug"
)

type Querier interface {
	CostForInstance(ctx context.Context, arg CostForInstanceParams) (float32, error)
	CostForTeam(ctx context.Context, arg CostForTeamParams) (float32, error)
	// CostUpsert will insert or update a cost record. If there is a conflict on the daily_cost_key constrant, the
	// daily_cost column will be updated.
	CostUpsert(ctx context.Context, arg []CostUpsertParams) *CostUpsertBatchResults
	// DailyCostForTeam will fetch the daily cost for a specific team across all apps and envs in a date range.
	DailyCostForTeam(ctx context.Context, arg DailyCostForTeamParams) ([]*DailyCostForTeamRow, error)
	// DailyCostForWorkload will fetch the daily cost for a specific workload in an environment, across all cost types in a
	// date range.
	DailyCostForWorkload(ctx context.Context, arg DailyCostForWorkloadParams) ([]*DailyCostForWorkloadRow, error)
	// DailyEnvCostForTeam will fetch the daily cost for a specific team and environment across all apps in a date range.
	DailyEnvCostForTeam(ctx context.Context, arg DailyEnvCostForTeamParams) ([]*DailyEnvCostForTeamRow, error)
	// LastCostDate will return the last date that has a cost.
	LastCostDate(ctx context.Context) (pgtype.Date, error)
	MonthlyCostForTeam(ctx context.Context, teamSlug slug.Slug) ([]*CostMonthlyTeam, error)
	MonthlyCostForWorkload(ctx context.Context, arg MonthlyCostForWorkloadParams) ([]*MonthlyCostForWorkloadRow, error)
	// -- name: CurrentSqlInstancesCostForTeam :one
	// SELECT
	// 	COALESCE(SUM(daily_cost), 0)::REAL
	// FROM
	// 	cost
	// WHERE
	// 	team_slug = @team_slug
	// 	AND cost_type = 'Cloud SQL'
	// 	AND date >= @from_date
	// 	AND date <= @to_date
	// ;
	RefreshCostMonthlyTeam(ctx context.Context) error
}

var _ Querier = (*Queries)(nil)
