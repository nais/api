// Code generated by sqlc. DO NOT EDIT.
// source: batch.go

package costsql

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/nais/api/internal/slug"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const costUpsert = `-- name: CostUpsert :batchexec
INSERT INTO
	cost (
		environment,
		team_slug,
		app,
		cost_type,
		date,
		daily_cost
	)
VALUES
	(
		$1,
		$2,
		$3,
		$4,
		$5,
		$6
	)
ON CONFLICT ON CONSTRAINT daily_cost_key DO
UPDATE
SET
	daily_cost = EXCLUDED.daily_cost
`

type CostUpsertBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CostUpsertParams struct {
	Environment *string
	TeamSlug    slug.Slug
	App         string
	CostType    string
	Date        pgtype.Date
	DailyCost   float32
}

func (q *Queries) CostUpsert(ctx context.Context, arg []CostUpsertParams) *CostUpsertBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Environment,
			a.TeamSlug,
			a.App,
			a.CostType,
			a.Date,
			a.DailyCost,
		}
		batch.Queue(costUpsert, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CostUpsertBatchResults{br, len(arg), false}
}

func (b *CostUpsertBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *CostUpsertBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
