// Code generated by sqlc. DO NOT EDIT.
// source: reconcilers.sql

package reconcilersql

import (
	"context"
)

const configure = `-- name: Configure :exec
UPDATE reconciler_config
SET
	value = $1::TEXT
WHERE
	reconciler = $2
	AND key = $3
`

type ConfigureParams struct {
	Value          string
	ReconcilerName string
	Key            string
}

func (q *Queries) Configure(ctx context.Context, arg ConfigureParams) error {
	_, err := q.db.Exec(ctx, configure, arg.Value, arg.ReconcilerName, arg.Key)
	return err
}

const count = `-- name: Count :one
SELECT
	COUNT(*) AS total
FROM
	reconcilers
`

func (q *Queries) Count(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, count)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const disable = `-- name: Disable :one
UPDATE reconcilers
SET
	enabled = FALSE
WHERE
	name = $1
RETURNING
	name, display_name, description, enabled, member_aware
`

func (q *Queries) Disable(ctx context.Context, name string) (*Reconciler, error) {
	row := q.db.QueryRow(ctx, disable, name)
	var i Reconciler
	err := row.Scan(
		&i.Name,
		&i.DisplayName,
		&i.Description,
		&i.Enabled,
		&i.MemberAware,
	)
	return &i, err
}

const enable = `-- name: Enable :one
UPDATE reconcilers
SET
	enabled = TRUE
WHERE
	name = $1
RETURNING
	name, display_name, description, enabled, member_aware
`

func (q *Queries) Enable(ctx context.Context, name string) (*Reconciler, error) {
	row := q.db.QueryRow(ctx, enable, name)
	var i Reconciler
	err := row.Scan(
		&i.Name,
		&i.DisplayName,
		&i.Description,
		&i.Enabled,
		&i.MemberAware,
	)
	return &i, err
}

const get = `-- name: Get :one
SELECT
	name, display_name, description, enabled, member_aware
FROM
	reconcilers
WHERE
	name = $1
`

func (q *Queries) Get(ctx context.Context, name string) (*Reconciler, error) {
	row := q.db.QueryRow(ctx, get, name)
	var i Reconciler
	err := row.Scan(
		&i.Name,
		&i.DisplayName,
		&i.Description,
		&i.Enabled,
		&i.MemberAware,
	)
	return &i, err
}

const getConfig = `-- name: GetConfig :many
SELECT
	rc.reconciler,
	rc.key,
	rc.display_name,
	rc.description,
	(rc.value IS NOT NULL)::BOOL AS configured,
	rc2.value,
	rc.secret
FROM
	reconciler_config rc
	LEFT JOIN reconciler_config rc2 ON rc2.reconciler = rc.reconciler
	AND rc2.key = rc.key
	AND (
		rc2.secret = FALSE
		OR $1::BOOL = TRUE
	)
WHERE
	rc.reconciler = $2
ORDER BY
	rc.display_name ASC
`

type GetConfigParams struct {
	IncludeSecret  bool
	ReconcilerName string
}

type GetConfigRow struct {
	Reconciler  string
	Key         string
	DisplayName string
	Description string
	Configured  bool
	Value       *string
	Secret      bool
}

func (q *Queries) GetConfig(ctx context.Context, arg GetConfigParams) ([]*GetConfigRow, error) {
	rows, err := q.db.Query(ctx, getConfig, arg.IncludeSecret, arg.ReconcilerName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetConfigRow{}
	for rows.Next() {
		var i GetConfigRow
		if err := rows.Scan(
			&i.Reconciler,
			&i.Key,
			&i.DisplayName,
			&i.Description,
			&i.Configured,
			&i.Value,
			&i.Secret,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const list = `-- name: List :many
SELECT
	name, display_name, description, enabled, member_aware
FROM
	reconcilers
ORDER BY
	display_name ASC
LIMIT
	$2
OFFSET
	$1
`

type ListParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) List(ctx context.Context, arg ListParams) ([]*Reconciler, error) {
	rows, err := q.db.Query(ctx, list, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Reconciler{}
	for rows.Next() {
		var i Reconciler
		if err := rows.Scan(
			&i.Name,
			&i.DisplayName,
			&i.Description,
			&i.Enabled,
			&i.MemberAware,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listByNames = `-- name: ListByNames :many
SELECT
	name, display_name, description, enabled, member_aware
FROM
	reconcilers
WHERE
	name = ANY ($1::TEXT[])
ORDER BY
	name ASC
`

func (q *Queries) ListByNames(ctx context.Context, names []string) ([]*Reconciler, error) {
	rows, err := q.db.Query(ctx, listByNames, names)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Reconciler{}
	for rows.Next() {
		var i Reconciler
		if err := rows.Scan(
			&i.Name,
			&i.DisplayName,
			&i.Description,
			&i.Enabled,
			&i.MemberAware,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEnabledReconcilers = `-- name: ListEnabledReconcilers :many
SELECT
	name, display_name, description, enabled, member_aware
FROM
	reconcilers
WHERE
	enabled = TRUE
ORDER BY
	display_name ASC
`

func (q *Queries) ListEnabledReconcilers(ctx context.Context) ([]*Reconciler, error) {
	rows, err := q.db.Query(ctx, listEnabledReconcilers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Reconciler{}
	for rows.Next() {
		var i Reconciler
		if err := rows.Scan(
			&i.Name,
			&i.DisplayName,
			&i.Description,
			&i.Enabled,
			&i.MemberAware,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
