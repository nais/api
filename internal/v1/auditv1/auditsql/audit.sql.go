// Code generated by sqlc. DO NOT EDIT.
// source: audit.sql

package auditsql

import (
	"context"

	"github.com/nais/api/internal/slug"
)

const countForTeam = `-- name: CountForTeam :one
SELECT
	COUNT(*)
FROM
	audit_events
WHERE
	team_slug = $1
`

func (q *Queries) CountForTeam(ctx context.Context, team *slug.Slug) (int64, error) {
	row := q.db.QueryRow(ctx, countForTeam, team)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countForTeamByResource = `-- name: CountForTeamByResource :one
SELECT
	COUNT(*)
FROM
	audit_events
WHERE
	team_slug = $1
	AND resource_type = $2
`

type CountForTeamByResourceParams struct {
	Team         *slug.Slug
	ResourceType string
}

func (q *Queries) CountForTeamByResource(ctx context.Context, arg CountForTeamByResourceParams) (int64, error) {
	row := q.db.QueryRow(ctx, countForTeamByResource, arg.Team, arg.ResourceType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const create = `-- name: Create :exec
INSERT INTO
	audit_events (
		actor,
		action,
		resource_type,
		resource_name,
		team_slug,
		environment,
		data
	)
VALUES
	(
		$1,
		$2,
		$3,
		$4,
		$5,
		$6,
		$7
	)
`

type CreateParams struct {
	Actor        string
	Action       string
	ResourceType string
	ResourceName string
	Team         *slug.Slug
	Environment  *string
	Data         []byte
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) error {
	_, err := q.db.Exec(ctx, create,
		arg.Actor,
		arg.Action,
		arg.ResourceType,
		arg.ResourceName,
		arg.Team,
		arg.Environment,
		arg.Data,
	)
	return err
}

const listForTeam = `-- name: ListForTeam :many
SELECT
	id, created_at, actor, action, resource_type, resource_name, team_slug, data, environment
FROM
	audit_events
WHERE
	team_slug = $1
ORDER BY
	created_at DESC
LIMIT
	$3
OFFSET
	$2
`

type ListForTeamParams struct {
	Team   *slug.Slug
	Offset int32
	Limit  int32
}

func (q *Queries) ListForTeam(ctx context.Context, arg ListForTeamParams) ([]*AuditEvent, error) {
	rows, err := q.db.Query(ctx, listForTeam, arg.Team, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*AuditEvent{}
	for rows.Next() {
		var i AuditEvent
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Actor,
			&i.Action,
			&i.ResourceType,
			&i.ResourceName,
			&i.TeamSlug,
			&i.Data,
			&i.Environment,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listForTeamByResource = `-- name: ListForTeamByResource :many
SELECT
	id, created_at, actor, action, resource_type, resource_name, team_slug, data, environment
FROM
	audit_events
WHERE
	team_slug = $1
	AND resource_type = $2
ORDER BY
	created_at DESC
LIMIT
	$4
OFFSET
	$3
`

type ListForTeamByResourceParams struct {
	Team         *slug.Slug
	ResourceType string
	Offset       int32
	Limit        int32
}

func (q *Queries) ListForTeamByResource(ctx context.Context, arg ListForTeamByResourceParams) ([]*AuditEvent, error) {
	rows, err := q.db.Query(ctx, listForTeamByResource,
		arg.Team,
		arg.ResourceType,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*AuditEvent{}
	for rows.Next() {
		var i AuditEvent
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Actor,
			&i.Action,
			&i.ResourceType,
			&i.ResourceName,
			&i.TeamSlug,
			&i.Data,
			&i.Environment,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
