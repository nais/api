# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - internal/v1/graphv1/schema/*.graphqls

# Where should the generated server code go?
exec:
  filename: internal/v1/graphv1/gengqlv1/generated.go
  package: gengqlv1

# Where should any generated models go?
model:
  filename: internal/v1/graphv1/modelv1/donotuse/models_gen.go
  package: donotuse

# Where should the resolver implementations go?
resolver:
  layout: follow-schema
  dir: internal/v1/graphv1
  package: graphv1
  omit_template_comment: true

# Omit Query / Mutation models
omit_root_models: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
  - "github.com/nais/api/internal/v1/auditv1"
  - "github.com/nais/api/internal/v1/cost"
  - "github.com/nais/api/internal/v1/github/repository"
  - "github.com/nais/api/internal/v1/graphv1/modelv1"
  - "github.com/nais/api/internal/v1/persistence"
  - "github.com/nais/api/internal/v1/persistence/bigquery"
  - "github.com/nais/api/internal/v1/persistence/bucket"
  - "github.com/nais/api/internal/v1/persistence/kafkatopic"
  - "github.com/nais/api/internal/v1/persistence/opensearch"
  - "github.com/nais/api/internal/v1/persistence/redis"
  - "github.com/nais/api/internal/v1/persistence/sqlinstance"
  - "github.com/nais/api/internal/v1/team"
  - "github.com/nais/api/internal/v1/user"
  - "github.com/nais/api/internal/v1/vulnerability"
  - "github.com/nais/api/internal/v1/workload"
  - "github.com/nais/api/internal/v1/workload/application"
  - "github.com/nais/api/internal/v1/workload/job"
  - "github.com/nais/api/internal/v1/workload/netpol"
  # - "github.com/nais/api/internal/v1/graphv1/modelv1/auditevent"

# Don't generate Get<FieldName> functions for fields included in the GraphQL interfaces
omit_getters: true

# Optional: turn on to not generate any file notice comments in generated files
omit_gqlgen_file_notice: true

# Setting this to false will generate type instances for required struct fields, and type pointers for optional fields
struct_fields_always_pointers: true

# Because we're using gofumpt, and in general run our code often enough, we can disable building and running go mod tidy during gqlgen generate
# This will speed up the generation process
skip_mod_tidy: true
skip_validation: true

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  ID:
    model:
      - github.com/nais/api/internal/v1/graphv1/ident.Ident

  UUID:
    model:
      - github.com/99designs/gqlgen/graphql.UUID

  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32

  Date:
    model:
      - github.com/nais/api/internal/v1/graphv1/scalar.Date

  Slug:
    model:
      - github.com/nais/api/internal/slug.Slug

  Cursor:
    model:
      - github.com/nais/api/internal/v1/graphv1/pagination.Cursor

  PageInfo:
    model:
      - github.com/nais/api/internal/v1/graphv1/pagination.PageInfo
